interface Window {
    battle: () => void;
    buildingdata: Object;
    building_runner_runtime: number;
    building_runner: number;
    building_show_feed: number;
    building_animal_special_select: number;
    ghost_visible: number;
    building_ignore_elements: string[];
    building_feed_cache_timer: number;
    building_feed_cache: {};
    building_feed_cache_guild: number;
    buildingInnerAction(q: any, a: any, m: any, l: any, s: any): boolean;
    buildingInnerActionResponse(d: any, l: any, a: any, h: any): void;
    newBuildingInner(a: any, l: any): void;
    rewriteBuildingInnerAnimals(b: any, m: any): number;
    buildingInnerRenameAnimal(a: any, b: any): void;
    rewriteBuildingInnerFeed(e: any, a: any): void;
    htmlBuildingInnerFeed(h: any, a: any, b: any, e: any, d: any): string;
    buildBuildingInnerProductionBox(c: any, a: any, d: any): void;
    closeBuildingInner(): void;
    checkBuildingInnerFeed(e: any, a: any): void;
    buildingInnerDeactiveFeedItem(a: any): void;
    buildingInnerAnimalSpecialSelect(e: any, a: any, d: any): void;
    buildingInnerAnimalSpecialDeselect(d: any, a: any): void;
    feedCache(b: any, a: any): void;
    feedCacheFire(b: any, a: any): void;
    buildingInnerDialogBox(m: any, a: any, l: any, h: any, s: any): boolean;
    closeBuildingInnerDialogBox(): void;
    calcBuildingInnerFeedRestTime(a: any, n: any, m: any): 0 | 1;
    calcBuildingInnerInput(q: any, l: any, a: any, h: any, e: any, c: any): void;
    checkInnerBuildingFood(a: any, l: any): any;
    setBuildingInnerStatus(a: any, m: any): void;
    stopBuildingRunner(): void;
    ignoreBuildingElements(): void;
    pony_position: number;
    pony_sel_pony: number;
    pony_sel_farmi: number;
    pony_sel_farmi_pos: number;
    pony_speedup_select: number;
    pony_speedup_reduce: number;
    ponyHelp(): void;
    ponyHelpClose(): void;
    ponyBuild(a: any, e: any): void;
    ponyBuildFarmis(b: any): boolean;
    ponyFarmiQueue1(): void;
    ponyFarmiQueue2(): void;
    ponyPreview(m: any): void;
    ponyBuildPonys(): void;
    ponyTimer(): void;
    ponyDialog(h: any, b: any, q: any): boolean;
    calcPonyFeed(m: any, h: any): void;
    calcPonySpeedup(h: any): void;
    ponySelectPony(c: any): boolean;
    ponySelectFarmi(a: any): void;
    fuelstation_stats_select: string;
    fuelstation_stats_cache: {};
    fuelstation_stats_cache_delay: number;
    openFuelstationHelp(): void;
    closeFuelstationHelp(): void;
    setFuelstationHelp(a: any): void;
    fuelstationStats(): void;
    buildFuelstation(a: any): void;
    updateFuelstationLevel(e: any, r: any): void;
    fuelstationTimer(): void;
    updateFuelstation(): void;
    fuelstationCheckLevelAdd(a: any, d: any): void;
    fuelstation_block: number;
    dialogFuelstation(q: any, A: any, d: any, t: any, z: any): boolean;
    calcPointsFuelstation(h: any, n: any, e: any): boolean;
    showFeedback(b: any, a: any): void;
    butterfly: () => void;
    calendar: () => void;
    cinema: () => void;
    ganmedia: {
        addEvent: (c: any, a: any, b: any) => void;
        onMessage: (l: any) => void;
        init: () => void;
    };
    messageMethode: (l: any) => void;
    cityAction(m: any, u: any, t: any, s: any, q: any): boolean;
    cityActionResponse(l: any, m: any, h: any, e: any, d: any, c: any): void;
    clooney: number;
    initCity(c: any, n: any, a: any, b: any): boolean;
    getInitCityData(d: any, c: any, b: any, a: any): void;
    cropactionman: number;
    forestyquest_timeout: number;
    getInitCityDataResponse(a: any, d: any, h: any, e: any): void;
    cityArrived(d: any): void;
    animaldealer_data: Object;
    animaldealer_cart: number;
    animaldealer_block: number;
    initAnimalDealer(): void;
    buildAnimalDealer(): void;
    buySuperAnimalAnimalDealer(e: any): void;
    timerAnimalDealer(): void;
    calcAnimalDealer(): void;
    closeAnimalDealer(): void;
    initAdColumn(): void;
    cancelAdCommit(): void;
    fillAdColumn(): void;
    cancelAd(): boolean;
    cancelAdResponse(a: any): void;
    buyadcommit(c: any): void;
    buyAd(a: any): void;
    buyAdResponse(a: any): void;
    checkAd(): void;
    setAdCountDown(c: any): void;
    runCountDownAd(c: any, b: any): void;
    countdownAd(l: any, m: any): any;
    initFishPool(): void;
    initFishPoolResponse(b: any): void;
    calcfishcost(): void;
    buyFish(): boolean;
    buyFishResponse(): void;
    reloadFishPool(): void;
    initFormulaDealer(): void;
    initFormulaDealerResponse(a: any): void;
    setFormulaDealerRack(c: any): void;
    setFormulaDealerFormulas(): void;
    buyFormulaCommit(n: any): void;
    buyFormula_block: number;
    buyFormulaCommit2(e: any, d: any): void;
    buyFormula(b: any, a: any): void;
    randomFormulasCommit(): void;
    randomFormulas(): void;
    flipRandomFormulas(): void;
    showFormuladealerAni(a: any): void;
    initCollector(): void;
    initCollectorResponse(w: any, n: any, c: any): void;
    sendCollectorItemsCommit(b: any, e: any, l: any): void;
    collector_block: number;
    sendCollectorItems(a: any, b: any): void;
    setCityWBWContent(a: any): void;
    setCityWBWContentResponse(q: any): void;
    correctWBWentry(b: any): void;
    sendWBWProductsCommit(e: any): boolean;
    sendWBWproducts(): boolean;
    initLottery(): void;
    initLotteryResponse(a: any): void;
    updateLotteryPrizes(y: any): void;
    setLotteryPrizeSlot(b: any, d: any): void;
    cleanLotteryPrizeSlot(): void;
    cashLotteryPrizeCommit(c: any): void;
    cashLotteryPrize(a: any): void;
    cashLotteryPrizeResponse(a: any): void;
    updateLotRack(): void;
    dailyLot(): void;
    dailyLotResponse(a: any): void;
    showLotDecision(a: any): void;
    hideLotDecision(): void;
    lotGetPrize(): void;
    lotGetPrizeResponse(b: any): void;
    buyNewLotCommit(): void;
    buyNewLot(): void;
    buyNewLotResponse(a: any): void;
    setLotteryGetLotBubble(): void;
    setLotteryDefaultBubble(): void;
    windmill_stock: {};
    windmill_slots: {};
    windmill_slotremain: number;
    windmill_ready: number;
    windmill_first: number;
    windmill_page: number;
    initWindmill(): void;
    windmillStock(): void;
    windmillNavi(a: any): void;
    windmillSlots(): void;
    windmillDialog(h: any, s: any, a: any): boolean;
    windmillTimer(): void;
    closeWindmillFormulaSelect(): void;
    closeWindmill(): void;
    checkWindmillStatus(): void;
    showFormulaInfosWindmill(a: any): void;
    showFormulaInfos(l: any): string;
    showWindmillFormulaDropzone(): void;
    hideWindmillFormulaDropzone(): void;
    initNewsboy(): void;
    initNewsboyResponse(a: any): void;
    closeNewsboy(): void;
    clothingdonation_data: Object;
    showClothingDonation(): void;
    gamblebox: number;
    clothingDonationDialog(l: any, s: any): void;
    gambleTimerClothingDonation(): void;
    closeClothingDonation(): void;
    stats_page: number;
    stats_type: number;
    statsOpen(): void;
    statsClose(): void;
    statsAction(e: any, c: any, d: any): boolean;
    stats_data: {};
    statsActionResponse(request: any, type: any, guildid: any): void;
    statsFindMe(): void;
    closeGuildPublic(): void;
    joinGuild(b: any): void;
    openBeemaster(): void;
    openBeemasterResponse(a: any): void;
    buyBees(): boolean;
    openMarktschreier(): void;
    openMarktschreiberResponse(n: any): void;
    calcMarktschreierLength(): void;
    writeMarktschreier(): boolean;
    delMarktschreierCommit(b: any): void;
    delMarktschreier(a: any): void;
    birthday_citysheep_data: {};
    birthday_buy_block: number;
    birthdayCitySheepDialog(c: any, a: any): void;
    showCityEasterEventHelpText(): void;
    initCityEasterEvent(): void;
    initCityEasterEventResponse(b: any): void;
    createCityEastereggsCommit(): void;
    createCityEastereggs(): void;
    createCityEasterPrize(): void;
    closeCityEasterEvent(): void;
    cityTelekomOpen(h: any): void;
    wm_sheep_block: number;
    wm_sheep_config: {};
    wm_sheep_coins: {};
    openWM(c: any): void;
    dialogWM(l: any, m: any): void;
    closeWM(): void;
    cityFlyerId: string;
    startCityFlyer(c: any, b: any, a: any): boolean;
    closeCityFlyer(): void;
    collectevent: () => void;
    contracts_data: {};
    contracts_cart: {};
    contracts_category: string;
    contractsInit(a: any): void;
    contractsNavi(a: any): void;
    contractsNewNavi(c: any): void;
    contractsNew(a: any): void;
    contractsNewProducts(): void;
    contractsNewCart(): void;
    contractsLoadTemplate(e: any): void;
    contractsDelTemplate(b: any): void;
    contractsSaveTemplate(): void;
    contractsDialog(b: any, d: any): boolean;
    contractsCheckFireCart(): void;
    contractsFireCart(): void;
    contractsRemoveCartProduct(a: any): void;
    contractsProductInCart(b: any): void;
    contractsProductSelectCheck(b: any): void;
    contractsOverview(n: any): void;
    contractsBlockContact(a: any): void;
    contractsToogleDetail(d: any, b: any): void;
    contractsCancel(b: any): void;
    contractsDeny(b: any): void;
    contractsAccept(b: any): void;
    contractsShowContactsList(): void;
    contractsSetName(a: any): void;
    contractsCalcPrice(b: any): number;
    contractsCheckPrice(b: any): {
        min: number;
        max: number;
    };
    contractsResetCart(): void;
    contractsClose(): void;
    deliveryevent: () => void;
    // factory: () => void;
    factory: () => void;
    farm_move: number;
    farm_number: number;
    farms_data: {
        farms: {};
        count: number;
        freegardenspeedup: number;
        freegardenspeedup2: number;
    };
    farm_checker: any[];
    farm_checker_open: number;
    farm_water_checker: number;
    farmersmarket_data: number;
    farmersmarket_firstvisit: number;
    farmersmarket_firstvisit_session: number;
    farmBuyOption(c: any): {
        block: number;
        tt: number;
    };
    farmBuild(): void;
    farmBuildPositions(): void;
    farmProductions(): void;
    farmWater(): void;
    farmCheckerOpen(): void;
    farmChecker(): boolean;
    farmMove(b: any): void;
    showFarmDog(): void;
    closeFarmDog(): void;
    buildFarmersMarket(): string;
    buildFarmersMarketPosition(c: any): string;
    openFarmersMarketHowTo(b: any, d: any): void;
    closeFarmersMarketHowTo(a: any): void;
    setFarmersMarket(): void;
    updateFarmersMarketFarmis(): void;
    buyFarmersMarketBuilding(b: any): void;
    actionsheep: {};
    initActionSheep(): void;
    clickActionSheep(): void;
    closeActionSheep(): void;
    global_speedup_block: number;
    globalSpeedupBox(e: any, d: any, m: any): void;
    globalSpeedupCommit(l: any, e: any, n: any, q: any): void;
    flowerarea_cache: {};
    flowerarea_cache_run: number;
    flowerarea_modus: string;
    flowerarea_autoplant_select: number;
    flowerarea_changebonus_select: number;
    flowerslots_cache: {};
    flowerslots_cache_run: number;
    flowerslots_modus: string;
    flowerslots_ready_cache: number;
    flowerslots_countpoints: {};
    flowerarea_unique_drops: {};
    flowerslots_need_water: number;
    megafruit_block: number;
    megafruit_stats: {};
    megafruit_stats_delay: number;
    megafruit_stats_select: number;
    megafruit_stats_cache: {};
    foodcontest_block: number;
    foodcontest_merch_slot_select: number;
    foodcontest_pincache: any[];
    foodcontest_cache_run: number;
    foodcontest_feedback: {};
    foodcontest_stats: any[];
    foodcontest_stats_select: string;
    foodcontest_merch_category: number;
    foodcontest_merch_categories_count: {
        "1": number;
        "2": number;
        "3": number;
    };
    foodcontest_merch_categories_page: number;
    in_foodcontest: number;
    nursery_startproduction_block: number;
    initFlowerArea(): void;
    buildFlowerArea(): void;
    timerFlowerArea(): void;
    drawFlowerAreaTile(d: any): void;
    checkFlowerAreaTile(b: any, a: any): void;
    cacheFlowerArea(b: any, d: any, a: any): void;
    fireFlowerAreaCache(): void;
    dialogFlowerArea(l: any, n: any): boolean;
    autoplantControlFlowerArea(): void;
    uniqueFoundFlowerArea(): void;
    closeFlowerArea(): void;
    setFlowerSlots(): void;
    timerFlowerSlots(): void;
    canPlantFlowerSlot(a: any): void;
    plantFlowerSlot(a: any): void;
    removeFlowerSlot(a: any): void;
    animateFlowerSlot(a: any): void;
    setFlowerFarmiBar(): void;
    fireFlowerSlotsReadyCache(): void;
    cacheFlowerSlots(d: any, l: any, c: any): void;
    fireFlowerSlotsCache(): void;
    flowerfarmi_ignore: any[];
    handleFlowerFarmi(b: any, a: any): void;
    setFlowerFarmis(h: any, n: any, c: any): void;
    correctFlowerFarmi(): void;
    setFlowerFarmiBubble(l: any): void;
    flowersGardener(): void;
    flowersGardenerCommit(c: any): void;
    timerFlowerGardener(): void;
    initNursery(): void;
    timerNursery(): void;
    dialogNursery(t: any, c: any, v: any, l: any): boolean;
    closeNursery(): void;
    initMegaFruit(): void;
    showNeedsMegaFruit(d: any): void;
    setObjectsMegaFruit(): void;
    openStatsMegaFruit(): void;
    dialogMegaFruit(r: any, v: any): boolean;
    megafruitCheckLevelAdd(): void;
    timerMegaFruit(): void;
    closeMegaFruit(): void;
    initFoodcontest(): void;
    getStatsFoodcontest(a: any): void;
    openStatsFoodcontest(): void;
    cachePinFoodcontest(d: any, c: any): void;
    cacheFireFoodcontest(): void;
    timerFoodcontest(): void;
    foodcontest_last_update: number;
    setContentFoodcontest(): boolean;
    dialogFoodcontest(r: any, u: any, b: any, a: any): boolean;
    navigateMerchCategoryFoodcontest(b: any, c: any, a: any): void;
    showMerchCategoryFoodcontest(b: any, q: any): void;
    calcMerchPriceFoodcontest(b: any): void;
    merchPinResultFoodcontest(a: any): void;
    rewardFoodcontest(h: any): void;
    foodcontest_flyer_data: {};
    collectionFlyerFoodcontest(): boolean;
    closeCollectionFlyerFoodcontest(): void;
    closeFoodcontest(): void;
    showFarmersmarketPosTimer(d: any, a: any, c: any): void;
    insertFarmChecker(): void;
    foodworld_products: {};
    foodworld_quest: {};
    foodworld_maxquest: {};
    foodworld_bonus: {};
    foodworldAction(b: any, a: any, m: any, h: any, d: any, e: any, n: any): void;
    foodworldActionResponse(d: any, h: any, m: any, c: any, b: any): void;
    foodworldQuestTimer(): void;
    closeFoodworld(): void;
    setFoodworldBuildings(): void;
    buyFoodworldbuilding(d: any): void;
    updateFoodworldbuilding(d: any): void;
    openFoodworldBuilding(h: any): void;
    slotFoodworldTime(e: any, a: any): void;
    remainFoodworldSlot(e: any, a: any): void;
    cancelFoodworldProduction(d: any, c: any): void;
    speedupFoodworldProduction(b: any, a: any): boolean;
    buyFoodworldSlot(h: any, e: any): void;
    openFoodworldBuildingSelect(q: any, t: any): void;
    foodworldSelectionNavi(b: any, c: any, e: any, d: any): void;
    closeFoodworldBuildingSelect(): void;
    closeFoodworldBuilding(): void;
    chairsize: number;
    createFoodWorldTables(): void;
    updateFoodWorldTables(): void;
    buyFoodworldTable(d: any): void;
    remainFoodworldTable(d: any, b: any): void;
    remainFoodworldChair(h: any, c: any): void;
    createFoodworldFarmis(): void;
    showFoodworldFarmiCart(a: any): void;
    closeFoodworldFarmiCart(): void;
    showPossibleChairs(): void;
    hidePossibleChairs(): void;
    droppedFoodworldFarmi(b: any, l: any): void;
    moveFoodworldFarmi(d: any, b: any): void;
    dragFoodworldFarmiTouch(b: any): void;
    dropFoodworldFarmiTouch(b: any, a: any): void;
    deselectFoodworldFarmiTouch(): void;
    setFoodworldDialog(q: any, n: any): void;
    chkfoodworldQuestEntry(a: any, b: any): void;
    foodworldQuestEntry(a: any): boolean;
    foodworldSetTimer(a: any, c: any, b: any): void;
    foodworldClearTimer(a: any): void;
    foodworldShowHelp(): void;
    forestryAutoplant(): void;
    openForestryTutorial(a: any): void;
    closeForestryTutorial(): void;
    forestryUpdate(): void;
    forestryEmptyZone(a: any): void;
    forestryWeedZone(a: any): void;
    forestryProductZone(a: any): void;
    forestrySetStatus(a: any, c: any, d: any): void;
    initForestry(c: any): void;
    forestry_achievements: any[];
    initForestryResponse(b: any, a: any, G: any, u: any, N: any): void;
    forestryAreaRun(a: any): void;
    forestryChkReady(d: any, a: any): void;
    forestryPosOption(d: any, e: any): void;
    forestryPosAction(): void;
    buildForestryStocks(): void;
    setForestryStockInfo(c: any, a: any, b: any): void;
    forestrySetStockItem(e: any, a: any, d: any): void;
    showForestryProductionBox(a: any): void;
    closeForestryProductionBox(): void;
    forestrySetTimer(a: any, c: any, b: any): void;
    forestryClearTimer(a: any): void;
    forestryClearAllTimer(): void;
    forestrySlotRun(a: any, c: any): void;
    forestryProductionRun(a: any, b: any): void;
    forestrySetSlot(a: any, c: any, b: any): void;
    forestryUnsetSlot(): void;
    forestryBuySlotResponse(c: any, b: any): void;
    showForestryProductionInfo(s: any, u: any, q: any, t: any, e: any): void;
    forestryProductionCarpenterRun(a: any): void;
    forestryAreaAction(a: any): void;
    forestryWater(): void;
    forestryFertilize(): void;
    forestry_schredder_p: number;
    forestry_schredder_a: number;
    forestrySchredder(): void;
    forestrySchredderCommit(): void;
    updatebuilding_block: number;
    forestryAjaxAction(c: any, h: any, e: any, n: any, b: any, r: any): boolean;
    initCampaigns(): void;
    campaignQuestEntry(e: any, a: any, b: any, d: any): void;
    initCampaignsResponse(c: any, e: any): void;
    forestryBuildQuestLines(B: any): void;
    buildForestryQuestEntry(e: any, b: any, d: any, l: any, a: any): void;
    chkForestryQuestEntryValue(d: any, b: any, c: any, l: any, a: any): void;
    forestryQuestDelayRun(b: any, a: any): void;
    forestryCalcQuestBar(a: any, d: any): number;
    closeForestry(): void;
    forestry_building_inner_current: number;
    showForestryBuildingInner(c: any): void;
    closeForestryBuildingInner(): void;
    dialogForestry(e: any, l: any, q: any, d: any, c: any): boolean;
    timerForestryInner(): void;
    showForestrySelection(c: any, b: any): void;
    closeForestrySelection(): void;
    forestry_productionselect_navi: number;
    forestryProductionselectNavi(a: any, b: any): void;
    forestryProductionLog(): void;
    showForestryStock(m: any): void;
    forestryHelp(): void;
    forestryHelpClose(): void;
    session_failed(): void;
    speedLinksFarmsControl(): void;
    speedLinks(): void;
    selectMode(c: any, a: any, b: any): void;
    showMain(): void;
    setBlockMain(a: any): void;
    generalAction(c: any, d: any, b: any, a: any): void;
    generalActionResponse(m: any, h: any, e: any): void;
    farmAction(q: any, m: any, C: any, t: any, d: any, c: any, b: any): boolean;
    farmActionResponse(n: any, A: any, v: any, N: any, C: any, d: any, b: any, a: any): void;
    initZones(a: any, b: any): boolean;
    killGardenTimeruns(): void;
    setTutorialLine(): void;
    poweruprack: number;
    powerupactive: number;
    player_guild: number;
    player_guildmemberstatus: number;
    freegardenspeedup: number;
    freegardenspeedup2: number;
    freegardenspeeduptelekom: number;
    bulldozeZone(a: any): void;
    bulldozeZoneCommit2(a: any): void;
    letsBulldozeZone(a: any): void;
    specialZoneFieldHandler(a: any): void;
    destructBuildingInit(a: any, d: any): void;
    destructBuildingInit2(a: any): void;
    destructBuilding(a: any, c: any): boolean;
    afterDestruction(a: any): void;
    updateBuilding(a: any, c: any, b: any): void;
    updateBuildingResponse(b: any, a: any, e: any, d: any, c: any): void;
    fillBuildBox(a: any): void;
    buyBuildingCategoryInfo(b: any, h: any, d: any): void;
    buildBoxResponse(r: any, h: any): void;
    callCommitBox(a: any, h: any, e: any): void;
    updateBuildingBox(d: any, q: any, a: any, n: any, b: any): string;
    updateChoiceProduct(d: any, a: any, l: any, h: any, m: any): void;
    buyBuildingGardenChoiceProduct(a: any, d: any, c: any): void;
    changeGardenSpecial(h: any, m: any): void;
    changeGardenSpecialGo(a: any): void;
    buyBuildingCommit(a: any, m: any, c: any): void;
    buyBuildingCommit2(a: any, h: any, c: any): void;
    buyBuilding(a: any, b: any): void;
    buyBuildingResponse(b: any, a: any, d: any): void;
    shredderCommit(): void;
    shredderStartSecure(a: any, c: any): boolean;
    shredderStart(a: any, b: any): void;
    fillShredderAmount(): void;
    hqBuildingOptions(e: any, d: any, c: any): void;
    createNewFarm(): void;
    createNewFarmResponse(a: any): void;
    createNewRack(): void;
    createNewRackResponse(a: any): void;
    showAwards(l: any, b: any, a: any, h: any, d: any): string;
    cancelProduction(a: any, c: any): void;
    buildProductionOptions(a: any): void;
    initLocation(a: any): void;
    innerInfos(a: any): void;
    carpentry_data: {};
    pony_data: {};
    innerinfos_data: {};
    innerInfosResponse(e: any): void;
    setCompleteProductionAdvanced(a: any): void;
    createAdvancedProductionCommit(a: any, e: any, c: any): void;
    createAdvancedProduction(a: any, c: any, b: any): void;
    createAdvancedProductResponse(b: any, a: any, d: any): void;
    setCurrentAdvancedProduction(): void;
    showFeedDropZone(a: any): void;
    hideFeedDropZone(a: any): void;
    closeLocationwait(a: any): void;
    closeAfterCrop(a: any): void;
    setCurrentProduction(a: any, d: any): void;
    setNoneProduction(a: any, h: any): void;
    setCompleteProduction(a: any, h: any): void;
    setInfoBlock(b: any, e: any): void;
    killProduction(a: any): void;
    deleteProduction(a: any): void;
    deleteProductionResponse(b: any, a: any): void;
    getAdvancedCrop(a: any): void;
    getAdvancedCropResponse(b: any, a: any): void;
    setEndproductImage(c: any, b: any, e: any, d: any): any[];
    setCustomerStats(): void;
    setFarmis(): void;
    showCart(b: any, c: any): void;
    clearCart(): void;
    handleFarmi(c: any, a: any): void;
    goFarmi(e: any, b: any): void;
    goAwayFarmi(c: any, a: any): void;
    moveNewFarmi(): void;
    standStillFarmi(): void;
    moveFarmiLeft(b: any): void;
    setFarmiStatus(b: any): void;
    initGarten(a: any): void;
    setGartenPremiumFeatures(a: any): void;
    setWaterBonusInfo(a: any, c: any): void;
    getGartenInfo(a: any): void;
    getGardenInfoResponse(s: any, D: any): boolean;
    showField(l: any, b: any, r: any, c: any, m: any): void;
    gardenShowPlantInfo(e: any): void;
    hideGardenRemainTimeTitle(): void;
    gardenRemainTimeTitle(h: any, d: any, e: any): void;
    cropGarden(a: any): void;
    cropGardenResponse(b: any, a: any): void;
    refreshGarden(a: any): void;
    waterGarden(a: any): void;
    clearGardenCommit(a: any): void;
    clearGarden(a: any): void;
    clearGardenResponse(b: any, a: any): void;
    displayMenuTooltip(c: any): void;
    showDiv(a: any): void;
    hideDiv(a: any): void;
    toogleDiv(a: any): void;
    changeImg(b: any, a: any): void;
    changeButton(d: any, c: any, a: any): void;
    str_replace(c: any, b: any, a: any): any;
    isNumeric(c: any): boolean;
    number_format(h: any, c: any, q: any, e: any): any;
    errorboxguild(a: any): void;
    errorboxgarden(d: any, a: any, c: any): void;
    commitbox(l: any, c: any, b: any, h: any): void;
    commitboxinner(b: any, c: any, a: any): void;
    commitboxgarden(c: any, d: any, b: any, a: any): void;
    commitboxcrop(b: any, d: any, a: any, c: any): void;
    commitboxguild(c: any, a: any, d: any, b: any, e: any): void;
    globalcommitbox(b: any, c: any, a: any, d: any, e: any): void;
    globalerrorbox(a: any, b: any, d: any): void;
    globalBox(l: any, e: any, n: any, m: any, h: any, b: any, c: any): number;
    globalBoxFlex(c: any, a: any, e: any, b: any, h: any): void;
    showTutorial(c: any, a: any): void;
    closeTutorial(): void;
    increaseTutorialStep(): boolean;
    formatTime(e: any): string;
    setServerTime(): void;
    formatPrice(b: any): string;
    formatPoints(b: any): string;
    formatNumber(a: any): any;
    formatDate(e: any): string;
    getRandom(b: any, a: any): any;
    in_array(b: any, a: any): boolean;
    initNotepad(): void;
    calcNotepadLetters(): void;
    saveNotepad(): void;
    autoPlantBuyLoads(b: any): void;
    autoplantposition: number;
    autoplantselected: number;
    autoPlantCommit(d: any, r: any): void;
    autoPlantControl(): void;
    autoPlant(a: any): boolean;
    showPan(a: any): void;
    soccersheeps: any[];
    xmassheeps: any[];
    xmassheeps2: any[];
    xmassheeps3: any[];
    xmassheeps4: any[];
    xmassheeps5: any[];
    birthdaysheeps: any[];
    sportsheeps: any[];
    sportsheeps2: any[];
    xmassheeps6: any[];
    showPanResponse(a: any): void;
    buildPanContent(C: any): void;
    panFlyer(b: any, a: any): void;
    buildSoccerField(c: any): void;
    buildSheeps(c: any): void;
    panBuildCollection(a: any): void;
    delPresentCommit(c: any): void;
    delPresent(a: any): void;
    achievements: any[];
    initFarmhouse(): void;
    farmhouse_rack_data: {};
    initFarmhouseResponse(a: any): void;
    setFarmhouseItemSelector(l: any): void;
    farmhouseSelected(c: any, h: any, e: any): void;
    farmhouseSelectedResponse(a: any, c: any): void;
    initCatalogue(): void;
    setCatalogueCategory(a: any): void;
    showCatalogueItem(l: any, n: any): void;
    buyFarmhouseItemCommit(e: any, m: any): void;
    buyFarmhouseItem(c: any, b: any, d: any): boolean;
    buyFarmhouseItemResponse(a: any, c: any, d: any, b: any): void;
    setFarmhouseInner(): void;
    openFarmhouseSelectorCategory(a: any): void;
    showFarmhouseItemSelector(): void;
    clearCatalogueRight(): void;
    setCatalougeItemColor(b: any, a: any): void;
    closeCatalogue(): void;
    achievementpage: number;
    showTrophies(): void;
    achievementNavi(): void;
    petnameChange(b: any, d: any): boolean;
    setPetname(c: any, e: any): boolean;
    setPetnameResponse(a: any, b: any): void;
    showFeedback2(c: any, b: any, a: any): void;
    showFeedbackOff(b: any, a: any): void;
    coinsBonusItems(a: any): void;
    coinsBonusItemsResponse(a: any): void;
    getCoinsBonusCommit(c: any): void;
    getCoinsBonus(a: any): void;
    getCoinsBonusResponse(): void;
    mainOpenPan(): void;
    showTravelAd(): void;
    initFriends(): void;
    initFriendsResponse(a: any): void;
    showfriendslist(b: any): void;
    setActivateFriend(a: any): void;
    setFriendInfo(b: any): void;
    friendlistinfo_maxletters: number;
    setFriendInfoContent(m: any, c: any): void;
    calcFriendlistInfo(): void;
    fireFriendlistInfo(c: any): void;
    setFriendInfoBuildingStats(a: any): void;
    addFriendSubmit(d: any): boolean;
    addFriend(): void;
    showFriendlistFeedback(b: any, a: any): void;
    showFriendlistFeedbackOff(a: any): void;
    delFriendSubmit(e: any, b: any): void;
    delFriend(c: any, a: any): void;
    acceptFriend(b: any): void;
    denyFriend(b: any): void;
    friendslistheadernavi(a: any): void;
    buyPresentFriend(): boolean;
    runEE(a: any): void;
    startMoo(): void;
    reallocateBuildingFarmSelect1: number;
    reallocateBuildingPosSelect1: number;
    reallocateBuildingFarmSelect2: number;
    reallocateBuildingPosSelect2: number;
    reallocateAnimalsCart: {};
    openReallocateBuilding(a: any): void;
    openReallocateAnimals(a: any): void;
    controlReallocate(a: any, c: any, b: any): boolean;
    buildFarmReallocate(d: any, h: any): string;
    buildAnimalReallocate(l: any): string;
    selectReallocateAnimal(b: any, c: any, d: any, a: any): void;
    openReallocate(m: any, h: any): boolean;
    powerup_block: number;
    powerup_rackpage: number;
    handlePowerups(m: any): void;
    closePowerups(): void;
    activatePowerupCommit(e: any, b: any): void;
    activatePowerup(a: any): void;
    powerupTimer(): void;
    initGardenSpeedup(a: any): void;
    blockgardenspeedup: number;
    useGardenSpeedup(b: any, a: any): boolean;
    useGardenSpeedupResponse(b: any, e: any, a: any): void;
    questbarstatus: number;
    initQuestbarControl(): void;
    setQuestbarControl(): void;
    openForestryQuestBox(): void;
    openFoodworldQuestBox(): void;
    touchpad(a: any, b: any): void;
    setTouchControl(a: any, b: any): void;
    cropbonus_remain: number;
    cropbonus_data: Object;
    setCropBonusCommit(a: any): void;
    showCropBonus(a: any): void;
    cropBonusTimer(): void;
    showCropBonusBox(): void;
    cropBonusCoolDownTimer(): void;
    closeCropBonusBox(): void;
    setDonkeyCommit(): void;
    showDonkey(a: any): void;
    dailyDonkeyResult(m: any): void;
    closeDonkeyDialog(): void;
    closeDonkeyBuy(): void;
    cropactionbuyitems: number;
    cropactionrunner: number;
    cropactioninfo: {};
    cropActionAction(c: any, a: any): boolean;
    initCropActionResponse(a: any, m: any): void;
    cropActionCoinsDialog(b: any, d: any): void;
    cropActionTimer(): void;
    closeCropAction(): void;
    cropActionCropDialog(d: any, e: any, b: any): void;
    carpentry_entryblock: number;
    carpentryBuild(h: any): void;
    carpentryEntry(a: any, b: any, e: any): void;
    chkCarpentryEntry(a: any, b: any): void;
    carpentryClose(): void;
    carpentryTimer(): void;
    showCarpentryBonus(a: any): void;
    architect_config: any[];
    architect_current_item: number;
    architect_navi_move: number;
    farmhouse_design: number;
    architect_page: number;
    initArchitect(): void;
    naviArchitect(b: any, c: any): void;
    timerArchitect(): void;
    detailArchitect(m: any): void;
    buyCommitArchitect(a: any): void;
    setFarmhouse(c: any): void;
    initBoxFeatures(): void;
    initBoxFeaturesResponse(a: any): void;
    sendBoxCode(): boolean;
    activateBoxPremium(): void;
    activateBox48hBonus(): void;
    activateBoxAd(): void;
    activateBoxItem(a: any): boolean;
    closeBoxFeatures(): void;
    chgDVDBoxImg(b: any): void;
    globalAlert(a: any): boolean;
    closeGlobalAlert(): void;
    levelupAlert(c: any, b: any): void;
    gametimer: Object;
    gametimer_runtime: number;
    setTimer(a: any): void;
    clearTimer(a: any): void;
    runningTimer(): void;
    closeNewsboyStart(): void;
    setNewsUnread(a: any): void;
    showNews(): boolean;
    naviNews(): void;
    backNews(): void;
    nextNews(): void;
    showWeather(): void;
    openWeather(): void;
    forecastWeatherCommit(): void;
    forecastWeather(): void;
    openCoinsBox(): void;
    coinsCheckPremiumMonth(): void;
    coinsCheckExchange(): void;
    coinsBoxDialog(l: any): void;
    coinsBoxTimer(): void;
    closeCoinsBox(): void;
    starter(): void;
    logoutTimer(): void;
    checkPartnerPortal(): 0 | 1;
    isPresentAction(): 0 | 1;
    formatDateString(c: any): any;
    is_array(a: any): boolean;
    questsStatusTimer(): void;
    highestquest1: number;
    _chkRequest(request: any, mode: any): any;
    farmsHandler(a: any, d: any): void;
    farmersMarketHandler(b: any): void;
    megafieldHandler(a: any): void;
    quests_status: {};
    questsHandler(b: any): void;
    farmisHandler(a: any): void;
    rackHandler(c: any, b: any): void;
    menueHandler(a: any): void;
    weatherHandler(a: any): void;
    job_data: {};
    jobHandler(a: any): void;
    rackForestry: {};
    forestryHandler(a: any): void;
    htmlEntryLine(d: any): string;
    checkEntryLine(b: any): void;
    htmlLevelBar(b: any, c: any, e: any): string;
    htmlCountBar(b: any): string;
    htmlLevelAddDialog(d: any, a: any, l: any): any;
    htmlStatsContent(e: any): string;
    htmlProductBody(a: any, c: any): string;
    htmlProductSymbol(c: any, h: any, e: any, b: any, a: any): string;
    htmlProductionSlot(c: any, a: any, d: any): string;
    updateProductionSlot(d: any, e: any): void;
    fillProductionSlot(l: any): void;
    htmlProductionSlotOption(e: any, d: any, a: any, m: any, b: any, q: any): string;
    htmlProductSlotSelection(m: any, c: any, b: any, u: any, e: any, s: any, l: any): string;
    htmlQuestBox(m: any): number;
    showGlobalWait(c: any): boolean;
    hideGlobalWait(): void;
    checkRackItem(a: any, c: any): number;
    setRackItem(a: any, b: any, c: any): any;
    getRackItemInfo(b: any): any;
    checkForestryRackItem(a: any): number;
    showPage(e: any, c: any): void;
    building_inner_data: {};
    setBuildingInnerInfo(d: any, a: any, c: any): number;
    htmlJobProductionInfo(e: any, a: any): string;
    jobProductionInfoFlyer(l: any, a: any, h: any): void;
    jobProductionInfoResetFlyer(b: any, a: any): void;
    checkIsValidJob(): 0 | 1;
    checkIsValidGuildJobProduct(): 0 | 1;
    teaserHandler(b: any): void;
    ajaxAction(a: any, c: any, e: any, l: any): void;
    ajaxActionResponse(b: any, c: any, d: any, e: any): void;
    giftevent: () => void;
    giftshop: () => void;
    guildAction(d: any, c: any, a: any): void;
    guildActionResponse(d: any, l: any, h: any, c: any): void;
    guilddata: {};
    guildquestrun: number;
    guildmemberstatus: number;
    inguild: number;
    guild_questentry_block: number;
    guildquesttime: number;
    sculptureid: number;
    guildpark_data: Object;
    guildpark_stock: Object;
    guildpark_entries: Object;
    guildpark_userstatus: number;
    initGuild(): void;
    initGuildResponse(b: any): void;
    createGuild(m: any, r: any): boolean;
    countLetters(c: any, b: any): void;
    createGuildCommit(w: any, c: any, q: any): void;
    setBanner(d: any, a: any): void;
    setBeauties(): void;
    closeGuildCommit(): void;
    closeGuild(): void;
    getGuildMembers(): void;
    getGuildMembersResponse(m: any): void;
    writeMessage2GuildMember(b: any, a: any): void;
    promoteProxyCommit(): void;
    promoteProxyAsk(): void;
    promoteProxy(): void;
    promoteProxyReject(): void;
    promoteProxyCallBack(): void;
    admitCandidateCommit(c: any, b: any): void;
    refuseCandidateCommit(c: any, b: any): void;
    kickMemberCommit(c: any, b: any): void;
    suggestProxyCommit(c: any, b: any): void;
    degradeSuggestProxyCommit(b: any): void;
    degradeProxyCommit(c: any, b: any): void;
    leaveGuildCommit(): void;
    leaveGuild(): void;
    committedProxyGuildMember(a: any): void;
    committedProxyGuildMemberDeny(a: any): void;
    handleGuildMember(a: any, b: any): void;
    sendJoinMessage(a: any): void;
    openMultiBox(h: any): void;
    showGuildQuestStats(b: any, c: any, a: any): void;
    initGuildStats(c: any, b: any, a: any): void;
    buildStatsResponse(v: any, d: any): void;
    searchGuild(b: any, a: any): void;
    searchGuildResponse(a: any): void;
    showGuildQuestStatsResponse(C: any, s: any, u: any, G: any): void;
    initGuildWBW(): void;
    guildWBWShop(): void;
    guildWBWtrophies(): void;
    guildWBWStartAll(): void;
    initGuildWBWResponse(a: any): void;
    setGuildWBWNavi(a: any): void;
    showGuildWBWHelpTxt(a: any): void;
    stopTrucksGuildWBW(): void;
    setGuildWBWContent(L: any, h: any, e: any, P: any): void;
    htmlGuildWBWHallOfFameItem(d: any, a: any, e: any, c: any): string;
    showGuildWBWEntries(b: any, c: any): void;
    showOwnGuild(): void;
    showGuildWBWRankingSortByServer(c: any, a: any, b: any): void;
    setGuildWBWTruckTimer(a: any, b: any): void;
    setGuildWBWTruckTimerBack(a: any): void;
    setGuildWBWTime(): void;
    guildWBWclearTruckCommit(b: any): void;
    guildWBWclearTruck(a: any): void;
    guildWBWCallbackTruckCommit(b: any): void;
    guildWBWCallbackTruck(a: any): void;
    guildWBWsendItemsCommit(c: any, e: any, l: any, b: any, h: any): void;
    calcCurrentLoad(c: any, h: any, b: any): void;
    guildWBWsendItemsCommit2(c: any): boolean;
    guildWBWsendItems(b: any, a: any): boolean;
    guildWBWstartTruckCommit(b: any, d: any): void;
    guildWBWstartTruck(a: any): void;
    guildWBWRanking(b: any): void;
    guildWBWRankingResponse(a: any, b: any): void;
    guildWBWShopDonateCommit(c: any, e: any, a: any): void;
    guildWBWShopDonateCommit2(d: any, a: any): boolean;
    calcCurrentShopDonate(d: any, a: any): void;
    guildWBWDonate(c: any, b: any, a: any): boolean;
    guildWBWDonateResponse(a: any): void;
    guildWBWmemberRanking(a: any): void;
    guildWBWHallOfFame(a: any): void;
    guildWBWHallOfFameResponse(a: any, b: any): void;
    buildGuildWBWtrophies(b: any): void;
    guildWBWstartAllTrucksCommit(): void;
    initGuildQuests(a: any): void;
    setGuildQuest(a: any): void;
    initGuildQuestsResponse(a: any, c: any): void;
    showquestlistdesc(a: any): void;
    setQuestCommit(a: any): void;
    setGuildQuestRun(a: any): void;
    guildQuestAddProductsCommit(a: any, b: any): void;
    checkGuildQuestAddProducts(a: any, b: any): void;
    guildQuestAddProducts(b: any): boolean;
    countdownGuildQuest(): void;
    initGuildShop(): void;
    buyGuildShopItem(a: any): void;
    initGuildShopResponse(b: any): void;
    guildShopAmountDialog(e: any, d: any, b: any): void;
    openNewsticker(a: any): void;
    deleteGuildNewsCommit(a: any): void;
    deleteGuildNews(a: any): void;
    openNewstickerResponse(a: any, b: any): boolean;
    writeGuildNews(): boolean;
    calcGuildNewsLength(): void;
    showGuildNews(): void;
    calcGuildMailLetters(): void;
    writeGuildMailCommit(): void;
    writeGuildMail(): boolean;
    initGuildPark(): void;
    setGuildParkView(c: any): void;
    buildGuildParkEntry(a: any, b: any): void;
    chkGuildParkEntry(a: any, b: any): void;
    sendGuildPark(a: any): void;
    showGuildParkStats(): void;
    showGuildParkEntryLine(): void;
    closeGuildPark(): void;
    showGuildMedalcase(l: any): void;
    initGuildAchievements(): void;
    buildGuildAchievements(a: any): void;
    closeguildachievements(): void;
    guildjob_quickview: {};
    guildjob_quickview_mover: number;
    guildJobQuickView(): void;
    guildJobQuickViewOpenBuilding(b: any, c: any, a: any): void;
    guildJobQuickViewUpdate(): void;
    guildJobQuickViewTimer(): void;
    guildJobQuickViewNavi(): void;
    guild_job: {};
    guildJobInit(a: any): void;
    guildJobChangeMemberJob(a: any): void;
    guildJobGamble(): void;
    guildJobSetBoost(a: any): void;
    guildStockSlotEntry(c: any, a: any, b: any): void;
    guildStockSlotUnlock(a: any): void;
    guildStockDeleteProduct(a: any): void;
    guildJobJoin(): void;
    guildJobStartJob(a: any): void;
    guildJobEntry(a: any): void;
    guildJobAddMember(): void;
    guildJobBuyPoints(a: any): void;
    guildJobFinish(): void;
    guildJobSetTool(a: any): void;
    guildJobSetToolCommit(a: any): void;
    guildJobStartJobCommit(c: any): void;
    guildJobStats(): void;
    initGuildJobBox(): void;
    closeGuildJobBox(): void;
    naviGuildJob(b: any): void;
    buildGuildJobInfos(): string;
    buildGuildJobInfoboard(): void;
    buildGuildJobMemberlist(): void;
    buildGuildJobStock(): void;
    buildGuildJobLog(): void;
    setGuildJobMemberlistJobConfirm(a: any): void;
    buildGuildJobMemberlistEntry(l: any): void;
    getGuildJobMemberJobData(c: any): string;
    getGuildJobMemberJobLevel(c: any, b: any): {
        level: number;
        percent: number;
    };
    getGuildJobMemberJobLevelBar(b: any): string;
    setGuildJobMemberFilter(): void;
    showGuildJobStockInfo(c: any): boolean;
    htmlGuildStockSlotEntry(w: any, l: any, h: any, s: any): string;
    toogleGuildStockSlotEntries(e: any, a: any, c: any): void;
    checkGuildStockSlotEntry(l: any, a: any, d: any): void;
    getGuildStockProductAmount(a: any, b: any): number;
    getGuildStockSlotAmount(h: any, b: any, d: any): number;
    guildJobRewardDialog(d: any): void;
    checkGuildJobEntry(a: any): void;
    guild_jobCheckLevelAdd(): void;
    guildJobDialog(d: any, l: any, h: any, e: any): boolean;
    guildJobTimer(): void;
    guildJobTimerContentUpdater(): void;
    guild_job_stats_cache: {};
    guild_job_stats_cache_delay: {};
    guild_job_stats_select: string;
    showGuildJobStats(d: any): void;
    closeGuildJobStats(): void;
    checkGuildJobMemberStatus(a: any): 0 | 1;
    hillwalk: () => void;
    jobTeaser(): void;
    jobAchievements(): void;
    jobHelp(h: any): void;
    jobHelpNavi(b: any): void;
    showJobOverview(): void;
    jobTimer(): void;
    jobTimerContentUpdate(): void;
    toogleJobDetails(a: any): void;
    htmlJobLevelBoni(l: any, m: any): string;
    htmlJobOverview(): string;
    getJobLevel(l: any): {
        level: number;
        percent: number;
        current: number;
        next: number;
    };
    jobDialog(d: any, a: any): void;
    guildJobSetBoostCommit(e: any): void;
    htmlJobItem(c: any, d: any, a: any): string;
    htmlJobItemTT(c: any, l: any): string;
    kniffel: () => void;
    loginevent: () => void;
    main: () => void;
    roundDecimal(a: any): number;
    map_help_navi_select: number;
    map_current_route: number;
    map_current_vehicle: number;
    map_current_vehicle_slot: number;
    map_vehicle_cart: {};
    map_stock_overview_filter: string[];
    map_fill_vehicle_slot_filter: string;
    map_fill_vehicle_slot_page: number;
    map_overview_filter: string;
    map_overview_vehicles_filter: number;
    mapBlockzones: {
        city2: {
            name: any;
            level: number;
            unlock: number;
        };
        forestry: {
            name: any;
            level: number;
            unlock: number;
        };
        picknick: {
            name: any;
            level: number;
            unlock: number;
        };
        farmersmarket: {
            name: any;
            level: number;
            unlock: number;
        };
    };
    mapHelpNavi(b: any): void;
    mapVehicleTours(): void;
    openMap(): void;
    updateMap(): void;
    mapVehicleSheetNavi(a: any): void;
    mapDialog(m: any, J: any, K: any): void;
    mapShowTourInfo(): void;
    mapGetStockData(): {};
    mapSetVehicleSlot(a: any): boolean;
    mapCalcVehicleSlot(d: any): void;
    mapGetCurrentCapacity(b: any): number;
    mapRemoveVehicleCardItem(c: any, a: any): void;
    setMapstockOverviewFilter(b: any): void;
    mapSetVehicleOverviewFilter(): void;
    mapCloseVehicleSheet(): void;
    closeMap(): void;
    mapTimer(): void;
    mapTimerUpdate(): void;
    travel_box_timer_start: number;
    travel_box_type: string;
    travel_box_count: string;
    mapGo2Location(a: any, c: any, b: any): boolean;
    mapTravelStart(): void;
    mapTravelEnd(): void;
    mapTravelStop(): boolean;
    mapTravelAd(a: any, b: any): void;
    mapHelpOpen(): void;
    mapHelpClose(): void;
    mapRackTransfer(): void;
    market_minshop_line: number;
    marketAction(d: any, c: any, l: any): boolean;
    marketActionResponse(c: any, d: any, e: any, b: any): boolean;
    setMarketNavi(b: any): void;
    markettimerrun: number;
    startMarketTimer(): void;
    marketTimer(): void;
    clearMarketTimer(): void;
    closeMarket(): void;
    showMarketCategory(r: any, a: any): boolean;
    sortOffers(): any;
    showOffers(r: any): boolean;
    filterMarket(): void;
    delMarketFilter(): void;
    openMarketNewOffer(): boolean;
    clearMarketFilter(): void;
    setMarketFilter(a: any): void;
    createMarketSel(): boolean;
    selectMarketProduct(a: any): void;
    startMarketSelect(): void;
    marketOffersLimitReached(): void;
    marketControlDiv(a: any): void;
    calcMarketFee(): void;
    calcMarketPrice(): void;
    closeMarketNewOffer(): void;
    buyMarketOffer(b: any): void;
    calcMarketOfferCost(): void;
    closeMarketBuyOffer(): void;
    mastermind_log: any[];
    mastermind_buy: any[];
    mastermind_found: any[];
    mastermind_remain: number;
    mastermind_set: number[];
    mastermind_pos: number;
    mastermindAction(d: any): boolean;
    mastermindActionResponse(a: any, h: any): void;
    mastermindOpenSelect(): boolean;
    mastermindCloseSelect(): void;
    mastermindTimer(): void;
    mastermindStart(): void;
    mastermindDialog(d: any): void;
    mastermindClose(): void;
    mastermindChangeItem(a: any): void;
    mastermindOpenHelp(): void;
    mastermindCloseHelp(): void;
    mastermindOpenShop(): void;
    megafield_data: {};
    megafield_plant_pid: number;
    megafield_plant_cache: {};
    megafield_cache_time: number;
    megafield_vehicle_id: number;
    megafield_vehicle_tour: any[];
    next_possible_tour_tiles: any[];
    megafield_tour_type: string;
    megafield_job_remember: number;
    megafield_tutorial_remember: number;
    megafield_move_position: number;
    megafield_stats: {};
    megafield_stats_cache: {};
    drive_pos: number;
    drive_dir: string;
    megafield_insert_block: number;
    megafield_tutorial_step: number;
    megafield_reward_list_shown: number;
    buy_license_block: number;
    unlock_bunny: number;
    megafield_stats_delay: number;
    showTutorialMegafield(): void;
    addTutorialStepMegafield(): void;
    openHelpMegafield(): void;
    closeHelpMegafield(): void;
    helpNaviMegafield(a: any): void;
    drive(a: any): void;
    moveMegafield(a: any): boolean;
    jobEndMegafield(): void;
    buildMegafield(): boolean;
    closeMegafield(): void;
    tileTTMegafield(b: any, a: any): void;
    timerMegafield(): void;
    timerContentMegafield(): void;
    chkInsertAmountMegafield(a: any, b: any): void;
    dialogMegafield(A: any, I: any, G: any, y: any, v: any): boolean;
    megafieldCheckLevelAdd(): void;
    openStatsMegafield(): void;
    setProductsMegafield(): void;
    setPlantProductMegafield(a: any): boolean;
    plantProductMegafield(e: any): boolean;
    fireCacheMegafield(): void;
    setVehiclesMegafield(): void;
    fuelVehicleMegafield(): void;
    setTourVehicleMegafield(b: any): void;
    setTourTileMegafield(e: any): boolean;
    getNeighborsTileMegafield(d: any): any[] | 0;
    unsetTourTileMegafield(d: any): void;
    checkTourTileMegafield(b: any): number;
    getNextTourTilesMegafield(a: any): any[];
    fireTourMegafield(): void;
    showMegafieldHarvestAll(): void;
    moveBunny(): number;
    merchant: () => void;
    blocklist: any[];
    messages_block: number;
    messages_write_block: number;
    messages_navi: string[];
    messages_data: any[];
    messages_select: any[];
    messages_category: string;
    messagesClose(): void;
    messagesAction(h: any, m: any, d: any): boolean;
    messagesActionResponse(c: any, d: any, e: any): number;
    messagesNavi(c: any): void;
    messagesList(): void;
    messagesRead(c: any): void;
    messageDetail(b: any): void;
    messagesCalcBody(): void;
    messagesDel(e: any, c: any): void;
    messagesShowContactsList(): void;
    messagesSetName(a: any, b: any): void;
    addMessagesContact(a: any): void;
    messagesContacts(): void;
    messagesSelectAll(): void;
    messagesOpen(a: any): void;
    anzahl: any, w_zeit: any, global_x: any, global_y: any, regal_leer: any, kategorie: any, iKategorie: any;
    mode: number;
    stadt: boolean;
    wasserinterval: any;
    selected: any;
    cache_actions: number;
    cache_fire: number;
    cache_timeout: any;
    cache: any[];
    timeoutKundeGeht: any;
    timeoutBlaseGeht: any;
    neuerKundeLaeuft: any;
    timeoutKundeLaeuft: any;
    timeoutKundeRutscht: any;
    neu_lastLeft: any;
    letzterKunde: any;
    to_letzterKunde: any;
    to_lastLeft: any;
    to_letztesPic: any;
    kunden: any[];
    pfeile: any[];
    busLeft: any;
    cars: any[];
    carCount: number;
    lastCar: number;
    pLeer: boolean;
    createAjaxRequestObj(): any;
    show_built(e: any, b: any): void;
    cache_me(E: any, u: any, C: any, r: any): void;
    save_actions(a: any): void;
    waterFunc(b: any, a: any, c: any): void;
    in_cache(a: any): boolean;
    berechneFelder(d: any, q: any, m: any, n: any, s: any): any[];
    show_page(d: any, a: any): boolean;
    close_page(): void;
    startTutorialPart2(): void;
    continueTutorial(): void;
    AbrissResponse(a: any): void;
    raeumeFeld(a: any, b: any): void;
    ernteFeld(c: any, b: any): void;
    endTutorial(): void;
    close_tutorial(): void;
    checkWasser(): void;
    deleteCursor(): void;
    tutorial_plant_timeout: number;
    tutorial_plant_timeout_time: number;
    wachse(z: any, e: any, h: any, A: any): void;
    specialTutorialTimer(): void;
    clearWachseTimeouts(): void;
    updatePlayerInfo(c: any, a: any, b: any, e: any, d: any): void;
    updateMenuImages(b: any, a: any, d: any, c: any): void;
    updatemenue_data: {};
    updateMenu(): void;
    carpentry_bonus: number;
    user_points: number;
    user_bar: number;
    user_coins: number;
    user_premium_bis: string;
    donkey_isset: number;
    farmdog_isset: number;
    farmdog_harvest: number;
    reallocatebuilding_status: number;
    reallocateanimals_status: number;
    paymentitem_remain: number;
    disable_autologout: number;
    updateMenuGo(): void;
    Zeit: {
        Client: number;
        Server: number;
        Verschiebung: number;
        UpdateInterval: any;
        SyncRequest: any;
        init: (a: any) => void;
        update: () => void;
    };
    ginfo_interval: any;
    ginfo(l: any, h: any, c: any, e: any, b: any, d: any): void;
    calcTime(d: any, b: any): number;
    g(a: any): HTMLElement;
    olympia: () => void;
    paymentitemcollection: () => void;
    pets: () => void;
    profilAction(c: any, h: any, e: any): void;
    profilActionResponse(c: any, d: any, e: any): void;
    profil_data: {};
    profil_valid: string[];
    profil_valid_chkbx: string[];
    profilInit(): void;
    profilUpdate(): void;
    profilSendConfirmationMail(): void;
    profilCheck(b: any): void;
    profilSave(d: any): void;
    profilFire(b: any): void;
    profilClose(): void;
    profilCanvassInit(): void;
    profilCanvassLetters(): void;
    profilCanvassSend(): void;
    profilCanvassSendResponse(): void;
    Prototype: {
        Version: string;
        Browser: {
            IE: boolean;
            Opera: boolean;
            WebKit: boolean;
            Gecko: boolean;
            MobileSafari: boolean;
        };
        BrowserFeatures: {
            XPath: boolean;
            SelectorsAPI: boolean;
            ElementExtensions: boolean;
            SpecificElementExtensions: boolean;
        };
        ScriptFragment: string;
        JSONFilter: RegExp;
        emptyFunction: () => void;
        K: (a: any) => any;
    };
    Abstract: {};
    Try: {
        these: () => any;
    };
    Class: {
        create: () => () => void;
        Methods: {
            addMethods: (r: any) => any;
        };
    };
    PeriodicalExecuter: () => void;
    Template: () => void;
    $break: {};
    Enumerable: {
        each: (G: any, F: any) => any;
        eachSlice: (H: any, G: any, F: any) => any;
        all: (G: any, F: any) => boolean;
        every: (G: any, F: any) => boolean;
        any: (G: any, F: any) => boolean;
        some: (G: any, F: any) => boolean;
        collect: (G: any, F: any) => any[];
        map: (G: any, F: any) => any[];
        detect: (G: any, F: any) => any;
        findAll: (G: any, F: any) => any[];
        select: (G: any, F: any) => any[];
        filter: (G: any, F: any) => any[];
        grep: (H: any, G: any, F: any) => any[];
        include: (E: any) => boolean;
        member: (E: any) => boolean;
        inGroupsOf: (F: any, E: any) => any;
        inject: (E: any, G: any, F: any) => any;
        invoke: (F: any) => any;
        max: (G: any, F: any) => any;
        min: (G: any, F: any) => any;
        partition: (H: any, F: any) => any[][];
        pluck: (F: any) => any[];
        reject: (G: any, F: any) => any[];
        sortBy: (F: any, E: any) => any;
        toArray: () => any;
        entries: () => any;
        zip: () => any;
        size: () => any;
        inspect: () => string;
        find: (G: any, F: any) => any;
    };
    $A(c: any): any;
    $w(a: any): any;
    $H(a: any): any;
    Hash: () => void;
    $R(c: any, a: any, b: any): any;
    ObjectRange: () => void;
    Ajax: {
        getTransport: () => any;
        activeRequestCount: number;
    };
    $(b: any): any;
    Form: {
        reset: (a: any) => any;
        serializeElements: (m: any, d: any) => any;
    };
    Field: any;
    $F: any;
    Toggle: {
        display: any;
    };
    Insertion: {
        Before: (a: any, b: any) => any;
        Top: (a: any, b: any) => any;
        Bottom: (a: any, b: any) => any;
        After: (a: any, b: any) => any;
    };
    $continue: Error;
    Position: {
        new(): Position;
        prototype: Position;
    };
    questAction(d: any, c: any, b: any, a: any, h: any, m: any): void;
    questInitResponse(c: any, d: any, b: any, e: any, h: any): void;
    questInitGo(q: any, d: any, l: any, b: any, a: any): boolean;
    showQuestBoxLine(): boolean;
    setQuestRemain(d: any): void;
    showQuestBox(z: any): boolean;
    buildQuestBoxEntry(a: any, d: any): void;
    chkQuestBoxEntry(a: any, b: any, d: any): void;
    questBoxEntry(a: any, b: any): void;
    closeQuestBox(): void;
    showQuestboxInfo(): void;
    closeQuestboxInfo(): void;
    startQuestTimer(a: any, b: any): void;
    questClearTimer(a: any): void;
    racksort: number;
    rackobj: Object;
    racklocks: Object;
    rackbonis: {};
    racktemp: {};
    rackfarm: number;
    racksubsort: string;
    racksort_previous: number;
    rackCache: {};
    updateRack(b: any, a: any): void;
    updateRackGo(h: any): void;
    sortRackNew(W: any, Q: any): void;
    buyRackCommit(e: any, d: any): void;
    openMarketFromRack(a: any): void;
    selectRackItem(c: any, b: any): void;
    Scriptaculous: {
        Version: string;
        require: (b: any) => void;
        REQUIRED_PROTOTYPE: string;
        load: () => void;
    };
    Effect: {
        _elementDoesNotExistError: {
            name: string;
            message: string;
        };
        Transitions: {
            linear: (a: any) => any;
            sinoidal: (a: any) => number;
            reverse: (a: any) => number;
            flicker: (a: any) => any;
            wobble: (a: any) => number;
            pulse: (b: any, a: any) => number;
            spring: (a: any) => number;
            none: (a: any) => number;
            full: (a: any) => number;
        };
        DefaultOptions: {
            duration: number;
            fps: number;
            sync: boolean;
            from: number;
            to: number;
            delay: number;
            queue: string;
        };
        tagifyText: (a: any) => void;
        multiple: (b: any, c: any) => void;
        PAIRS: {
            slide: string[];
            blind: string[];
            appear: string[];
        };
        toggle: (b: any, c: any, a: any) => any;
    };
    Autocompleter: {};
    Droppables: {
        drops: any[];
        remove: (a: any) => void;
        add: (b: any) => void;
        findDeepestChild: (a: any) => any;
        isContained: (b: any, a: any) => any;
        isAffected: (a: any, c: any, b: any) => any;
        deactivate: (a: any) => void;
        activate: (a: any) => void;
        show: (a: any, c: any) => void;
        fire: (b: any, a: any) => boolean;
        reset: () => void;
    };
    Draggables: {
        drags: any[];
        observers: any[];
        register: (a: any) => void;
        unregister: (a: any) => void;
        activate: (a: any) => void;
        deactivate: () => void;
        updateDrag: (a: any) => void;
        endDrag: (a: any) => void;
        keyPress: (a: any) => void;
        addObserver: (a: any) => void;
        removeObserver: (a: any) => void;
        notify: (b: any, a: any, c: any) => void;
        _cacheObserverCallbacks: () => void;
    };
    Draggable: () => void;
    SortableObserver: () => void;
    Sortable: {
        SERIALIZE_RULE: RegExp;
        sortables: {};
        _findRootElement: (a: any) => any;
        options: (a: any) => any;
        destroy: (a: any) => void;
        create: (c: any) => void;
        findElements: (b: any, a: any) => any;
        findTreeElements: (b: any, a: any) => any;
        onHover: (e: any, d: any, a: any) => void;
        onEmptyHover: (e: any, l: any, m: any) => void;
        unmark: () => void;
        mark: (b: any, a: any) => void;
        _tree: (e: any, b: any, h: any) => any;
        tree: (d: any) => any;
        _constructIndex: (b: any) => string;
        sequence: (b: any) => any;
        setSequence: (b: any, c: any) => void;
        serialize: (c: any) => any;
    };
    shop_id: number;
    shop_bar: number;
    shop_coins: number;
    shop_cart: {};
    shop_products: any[];
    shop_side: number;
    shop_block: number;
    shop_sort: string;
    shopAction(h: any, a: any, b: any): boolean;
    shopActionResponse(c: any, d: any, b: any): boolean;
    shopBuild(): void;
    setShopCategory(a: any): void;
    shopDialog(e: any, d: any): boolean;
    shopAddCart(a: any): boolean;
    shopRemoveCart(a: any): void;
    calcShopdialogPrice(a: any): boolean;
    shopFillForm(a: any): void;
    closeShop(): void;
    specialbonus: () => void;
    specialoffer: () => void;
    // teaser: () => void;
    teaser: () => void;
    vet_data: {};
    vet_animal_queue_select: number;
    vet_position: string;
    vet_selected_drugs: {};
    vet_stats_select: string;
    vet_stats_cache: {};
    vet_stats_cache_delay: {};
    vet_production_select_page: number;
    vet_production_select_filter_id: number;
    vet_production_select_filter_pos: number;
    vet_wait_checkrole: number;
    vet_role_reward_block: number;
    initVet(): void;
    updateVet(): void;
    updateVetLevel(): void;
    showVetMedicalRecord(h: any): void;
    vetDrugSelect(h: any, d: any): void;
    updateVetMedicalRecord(q: any, h: any): void;
    updateVetAnimalSlots(): void;
    updateVetAnimalQueue(): void;
    updateVetProductionSlot(): void;
    vetProductionSlot(e: any, a: any): void;
    checkVetProductionSlotBlock(d: any, a: any): void;
    showVetProductionDisplay(m: any): void;
    getVetCurrentProductionPos(d: any): number;
    timerVet(): void;
    checkVetQuestTimer(): void;
    controlVetMedicalRecord(h: any): void;
    setVetAnimalQueueSelect(a: any): void;
    setVetAnimalSlot(a: any): void;
    vetDiseaseShowDrugs(b: any, a: any): void;
    vetDiseaseSetDrug(c: any, b: any, a: any): boolean;
    vetCheckDiseaseStart(u: any): void;
    vetSetProductionSelectFilter(c: any, b: any, a: any): void;
    vetDialog(c: any, r: any, O: any, L: any): void;
    goVetDrugScreen(): void;
    vetCheckLevelAdd(): void;
    checkQuestEntry(a: any, c: any): void;
    showDiseaseIcon(c: any, l: any, m: any, q: any): string;
    vetCheckRole(): void;
    vetSetRole(a: any): void;
    vetStartTreatment(a: any): void;
    vetEndTreatment(a: any): void;
    vetSpeedupTreatment(a: any): void;
    vetStartProduction(c: any, a: any, b: any): void;
    vetHarvestProduction(b: any, a: any): void;
    vetQuestEntry(a: any): void;
    vetStats(): void;
    vetQuests(): void;
    vetReward(): void;
    moveVet(): void;
    closeVet(): void;
    handleVetHelp(b: any): void;
    vetSetAnimalFlyer(h: any, e: any): void;
    closeSetAnimalFlyer(): void;
    openCityXmasEventHelp(a: any): void;
    closeCityXmasEventHelp(): void;
    naviCityXmasEvent(a: any): void;
    doCityXmasEvent(d: any, a: any, b: any, c: any, h: any): void;
    doCityXmasEventResponse(e: any, c: any): void;
    entryCityXmasEvent(a: any): void;
    chkAmountCityXmasEvent(): void;
    xmasevent_entrybox_stock: number;
    xmasevent_entrybox_pid: number;
    setAmountCityXmasEvent(b: any, a: any): void;
    fireEntryCityXmasEvent(c: any, a: any): void;
    finishCityXmasEvent(): void;
    getPrizeCityXmasEvent(m: any): void;
    closeCityXmasEvent(): void;
    exchangeCityXmasEvent(a: any): void;
    fireExchangeCityXmasEvent(h: any, a: any, q: any): void;
    openXmasGameBox(a: any, c: any, e: any, d: any, b: any): void;
    closeXmasGameBox(): void;
}