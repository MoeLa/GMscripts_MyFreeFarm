var battle = function () { this.data = {}; this.currentEnemy = 0; this.currentAmmo = 0; this.game = 0; this.slider = 0; this.direction = 1; this.craftPacks = [1, 10, 50]; this.barWidth = 272; this.offset = 0; };
battle.prototype.init = function () { this.action("battle_init"); };
battle.prototype.fire = function (a) { this.action("battle_fire", { left: a, offset: this.offset, enemy: battle.currentEnemy, ammo: battle.currentAmmo }); };
battle.prototype.craft = function (b, a) { this.action("battle_craft", { ammo: b, amount: a }); };
battle.prototype.buyMaterials = function (a) { this.action("battle_buy_materials", { coins: a }); };
battle.prototype.action = function (a, b) { ajaxAction("farm", a, b, battle.response); };
battle.prototype.response = function (d, c, e) { if (!d) {
    return 1;
} battle.data = d; setTimer("battle"); if (battle.data.login) {
    battle.reward(battle.data.login);
} if (c == "battle_init") {
    this.currentEnemy = 0;
    this.currentAmmo = 0;
} if (c == "battle_fire" && battle.data.feedback) {
    $("battle_weapon_img").removeClassName("prepare").addClassName("shot");
    hideDiv("battle_minigame_bar");
    hideDiv("battle_fire");
    setTimeout(function () { $("battle_weapon_ammo").addClassName("ammo" + battle.currentAmmo); if (battle.data.feedback.hit == 1) {
        $("battle_weapon_ammo").addClassName("move" + battle.currentEnemy);
    }
    else {
        $("battle_weapon_ammo").addClassName("move0");
    } }, 100);
    setTimeout(function () { $("battle_weapon_img").removeClassName("shot").addClassName("idle"); }, 800);
    setTimeout(function () { if (battle.data.feedback.hit == 1) {
        $("battle_inner").addClassName("shake");
        setTimeout(function () { $("battle_inner").removeClassName("shake"); }, 800);
    } $("battle_weapon_ammo").className = "weapon_ammo"; battle.buildEnemies(); battle.buildAmmo(); $("battle_enemy" + battle.currentEnemy).addClassName("select"); if (battle.data.feedback.hit == 1) {
        $("battle_enemy" + battle.currentEnemy).insert('<div id="battle_confetti" class="confetti pos' + battle.currentEnemy + '"></div>');
        setTimeout(function () { $("battle_confetti").remove(); }, 1000);
    } $("battle_enemy_ufo" + battle.currentEnemy).insert('<div id="battle_enemy_flyer" class="idle pos' + battle.currentEnemy + '">-' + battle.data.feedback.points + "</div>"); setTimeout(function () { $("battle_enemy_flyer").removeClassName("idle").addClassName("fly"); }, 200); setTimeout(function () { $("battle_enemy_flyer").remove(); }, 1200); if (battle.data.data.enemies && battle.data.data.enemies[battle.currentEnemy] && battle.data.data.enemies[battle.currentEnemy].hp <= 0) {
        battle.game = 0;
    } setTimeout(function () { battle.setStatus(); if (battle.data.reward) {
        var h = '<div id="battle_reward_box">';
        h += '  <div style="margin-bottom:10px;">' + t_specialoffer_message + "</div>";
        if (battle.data.reward.giftid) {
            h += '<img src="' + imgpath + "gifts/" + battle.data.reward.giftid + '.gif" style="75px;">';
        }
        if (battle.data.reward.farmhouse) {
            h += '<img src="' + imgpath + "farmhouse/previews/" + battle.data.reward.farmhouse + '_1.jpg">';
        }
        if (battle.data.reward.powerup) {
            h += '<div class="powerup">' + battle.data.reward.powerup + "%</div>";
        }
        h += '  <div class="button_yes link" onclick="hideDiv(\'globalbox\'); hideDiv(\'globaltransp\');" style="width:40px; height:40px; margin:0 auto; margin-bottom:-10px;"></div>';
        h += "</div>";
        globalcommitbox(t_farmersmarket_rewards, h, 0, 0, 1);
    } }, 1200); }, 650);
}
else {
    battle.update();
} if (battle.data.craft) {
    var b = '<div id="battle_craft_flyer" class="idle">';
    for (var a in battle.data.craft) {
        b += '  <div class="amountt">' + battle.data.craft[a] + "x</div>";
        b += '  <div class="ammoo ammo' + a + '"></div>';
        b += '  <div class="clear"></div>';
    }
    b += "</div>";
    $("battle_ammo" + a).insert(b);
    setTimeout(function () { $("battle_craft_flyer").removeClassName("idle").addClassName("fly"); }, 200);
    setTimeout(function () { $("battle_craft_flyer").remove(); }, 1200);
} };
battle.prototype.update = function () { var b = 0; if (this.data.data.materials) {
    b = this.data.data.materials;
} var a = ""; a += '<div id="battle_beam" class="beam"></div>'; a += '<div id="battle_enemies" class="enemies"></div>'; a += '<div class="materials">'; a += '  <div class="amount">' + b + "</div>"; a += '  <div class="add link" onclick="battle.buyMaterialSelect()" onmouseover="showDiv(\'battle_add_tt\')" onmouseout="hideDiv(\'battle_add_tt\')">+'; a += '  <div id="battle_add_tt" class="ttbox">' + t_battle_buy_material_head + "</div>"; a += "</div>"; a += "</div>"; a += '<div class="craft link" onclick="battle.craftSelect()" onmouseover="showDiv(\'battle_craft_tt\')" onmouseout="hideDiv(\'battle_craft_tt\')">'; a += '  <div id="battle_craft_tt" class="ttbox">' + t_battle_craft_head + "</div>"; a += "</div>"; a += '<div id="battle_ammo" class="ammo"></div>'; a += '<div class="weapon" id="battle_weapon_img">'; a += '  <div id="battle_weapon_ammo" class="weapon_ammo"></div>'; a += "</div>"; a += '<div id="battle_minigame_bar" class="bar_cool">'; a += '  <div id="battle_minigame_bar_medium" class="bar_medium">'; a += '    <div id="battle_minigame_bar_hot" class="bar_hot"></div>'; a += "  </div>"; a += '  <div class="bar_front"></div>'; a += '  <div id="battle_slider"></div>'; a += "</div>"; a += '<div id="battle_transp" class="transp" onclick="battle.endMinigame()"></div>'; a += '<div id="battle_start" class="button2 start" onclick="battle.startMinigame()">' + t_battle_start + "</div>"; a += '<div id="battle_fire" class="button2 fire" onclick="battle.pressFire()">' + t_battle_fire + "</div>"; a += '<div id="battle_timer" class="timer"></div>'; a += '<div class="help helpbutton_blue link" onclick="battle.help()"></div>'; a += '<div class="mini_close link" onclick="hideDiv(\'battle\');"></div>'; $("battle_inner").innerHTML = a; showDiv("battle"); this.buildBeam(); this.buildEnemies(); this.buildAmmo(); this.timerUpdate(); $("battle_ammo").observe("click", function (c) { c.preventDefault(); c.stopPropagation(); return 1; }); };
battle.prototype.buildBeam = function () { var b = ""; for (var a in this.data.config.enemies) {
    if (this.data.config.enemies[a].boss && this.data.data.rewards && this.data.data.rewards[a]) {
        hideDiv("battle_beam");
    }
    if (this.data.data.rewards && this.data.data.rewards[a]) {
        continue;
    }
    if (!this.data.config.enemies[a].giftid) {
        continue;
    }
    b += '<div class="object object' + a + '">';
    b += '  <div class="img"></div>';
    b += "</div>";
} $("battle_beam").innerHTML = b; };
battle.prototype.buildAmmo = function () { var c = ""; for (var b in this.data.config.ammo) {
    var a = 0;
    if (this.data.data.ammo && this.data.data.ammo[b]) {
        a = this.data.data.ammo[b];
    }
    var d = "battle.setAmmo(" + b + ")";
    if (!a) {
        d = "";
    }
    if (!a && b == this.currentAmmo) {
        this.currentAmmo = 0;
        this.game = 1;
        this.setStatus();
    }
    c += '<div id="battle_ammo' + b + '" class="slot link" onclick="' + d + '" onmouseover="showDiv(\'battle_ammo' + b + "_tt')\" onmouseout=\"hideDiv('battle_ammo" + b + "_tt')\">";
    var e = "";
    if (this.currentAmmo == b) {
        e = "select";
        c += '<div class="active"></div>';
    }
    c += '  <div class="img ammo' + b + " " + e + '"></div>';
    c += '  <div class="amount">' + a + "</div>";
    c += '  <div id="battle_ammo' + b + '_tt" class="ttbox">';
    c += '    <div class="name">' + this.data.config.ammo[b].name + "</div>";
    c += "    <div>" + t_battle_craft_points_per_hit.replace("%POINTS%", this.data.config.ammo[b].points_burningzone) + "</div>";
    c += "  </div>";
    c += "</div>";
} c += '<div id="battle_ammo_info" class="info"></div>'; $("battle_ammo").innerHTML = c; };
battle.prototype.buildEnemies = function (a) { var d = ""; var e = 1; for (var c in this.data.config.enemies) {
    if (this.data.config.enemies[c].boss) {
        continue;
    }
    if (!this.data.data.enemies || !this.data.data.enemies[c] || (this.data.data.enemies[c] && this.data.data.enemies[c].hp > 0)) {
        e = 0;
    }
} for (var c in this.data.config.enemies) {
    if (a > 0 && c != a) {
        continue;
    }
    var n = "battle.setEnemy(" + c + ")";
    var h = 100;
    var m = this.data.config.enemies[c].hp;
    if (this.data.data.enemies && this.data.data.enemies[c]) {
        m = this.data.data.enemies[c].hp;
        h = (m * 100) / this.data.config.enemies[c].hp;
    }
    if ((this.data.config.enemies[c].boss && !e) || (m <= 0)) {
        n = "";
    }
    var b = "left";
    if (c > 3) {
        b = "right";
    }
    if (c == 6) {
        b = "bottom";
    }
    d += '<div id="battle_enemy' + c + '" class="enemy enemy' + c + ' link" onmouseover="battle.hoverEnemy(' + c + ', 1)" onmouseout="battle.hoverEnemy(' + c + ', 0)" onclick="' + n + '">';
    d += '  <div id="battle_enemy_ufo' + c + '" class="img ufo' + c + '">';
    if (m <= 0) {
        d += '<div id="battle_enemy_ready' + c + '" class="ready"></div>';
    }
    d += '    <div id="battle_enemy_aiming_cross' + c + '" class="aiming_cross"></div>';
    d += '    <div class="hpbar">';
    d += '      <div class="hpbar_inner" style="width:' + h + '%"></div>';
    d += '      <div class="hpbar_amount">' + Math.max(0, m) + "/" + this.data.config.enemies[c].hp + "</div>";
    d += "    </div>";
    d += "  </div>";
    d += '  <div id="battle_enemy_tt' + c + '" class="ttbox ' + b + '">';
    var l = t_battle_get_reward;
    if (m <= 0) {
        l = t_specialoffer_message.replace(":", "");
    }
    d += '    <div style="font-weight:bold; margin-bottom:5px;">' + l + "</div>";
    if (this.data.config.enemies[c].giftid) {
        d += '<img src="' + imgpath + "gifts/" + this.data.config.enemies[c].giftid + '.gif">';
    }
    if (this.data.config.enemies[c].farmhouse) {
        d += '<img src="' + imgpath + "farmhouse/previews/" + this.data.config.enemies[c].farmhouse + '_1.jpg">';
    }
    if (this.data.config.enemies[c].powerup) {
        d += '<div class="powerup">' + this.data.config.enemies[c].points + "%</div>";
    }
    d += '    <div class="clear"></div>';
    if (this.data.config.enemies[c].boss && !e) {
        d += '<div class="info">' + t_battle_enemies_boss + "</div>";
    }
    if (m <= 0) {
        d += '<div class="ready_tt"></div>';
    }
    d += "  </div>";
    d += "</div>";
} $("battle_enemies").innerHTML = d; };
battle.prototype.setAmmo = function (a) { if (a == this.currentAmmo) {
    this.game = 1;
    if (!this.currentEnemy) {
        this.game = 0;
    }
    this.currentAmmo = 0;
}
else {
    this.currentAmmo = a;
} this.buildAmmo(); this.setStatus(); };
battle.prototype.setEnemy = function (a) { if (this.currentEnemy != a) {
    this.currentEnemy = a;
    this.game = 1;
    this.setStatus();
} };
battle.prototype.hoverEnemy = function (b, a) { if (!a) {
    hideDiv("battle_enemy_aiming_cross" + b);
    hideDiv("battle_enemy_tt" + b);
}
else {
    if (this.data.data.enemies && this.data.data.enemies[b] && this.data.data.enemies[b].hp <= 0) { }
    else {
        showDiv("battle_enemy_aiming_cross" + b);
    }
    showDiv("battle_enemy_tt" + b);
} };
battle.prototype.buyMaterialSelect = function () { var c = '<div id="battle_buy_material_select">'; for (var a in this.data.config.buy) {
    var b = "";
    var d = "battle.buyMaterialSelectCommit(" + a + ")";
    if (parseInt(a) > user_coins) {
        d = "";
        b = "important";
    }
    var e = t_battle_buy_material_body.replace("%COINS%", a);
    c += '<div class="button_new link ' + b + '" onclick="' + d + '">' + e.replace("%AMOUNT%", this.data.config.buy[a]) + "</div>";
} c += "</div>"; globalcommitbox(t_battle_buy_material_head, c, 0, 0, 1); };
battle.prototype.buyMaterialSelectCommit = function (a) { var d = t_battle_buy_material_body.replace("%COINS%", a); var b = "<div>" + d.replace("%AMOUNT%", this.data.config.buy[a]) + "</div>"; var c = "battle.buyMaterials(" + a + ")"; globalcommitbox(t_battle_buy_material_head, b, c); };
battle.prototype.craftSelect = function () { var e = '<div id="battle_craft_select">'; for (var d in this.data.config.ammo) {
    e += '<div class="line">';
    e += '  <div class="img ammo' + d + '"></div>';
    e += '  <div class="stats">';
    e += '    <div class="name">' + this.data.config.ammo[d].name + "</div>";
    e += "    <div>" + t_battle_craft_points_per_hit.replace("%POINTS%", this.data.config.ammo[d].points_burningzone) + "</div>";
    e += "    <div>" + t_battle_craft_zone[this.data.config.ammo[d].zone] + "</div>";
    e += '    <div class="require">' + lotterylotsrequired + "</div>";
    e += "    <div>" + this.data.config.ammo[d].materials + "&nbsp;" + t_battle_craft_materials + "</div>";
    if (this.data.config.ammo[d].coins) {
        e += "<div>" + this.data.config.ammo[d].coins + "&nbsp;" + t_coins + "</div>";
    }
    e += "  </div>";
    e += '  <div class="buttons">';
    for (var b = 0; b < this.craftPacks.length; b++) {
        var c = parseInt(this.craftPacks[b]);
        var h = "battle.craftSelectCommit(" + d + ", " + this.craftPacks[b] + ")";
        var a = "";
        if ((c * this.data.config.ammo[d].materials) > this.data.data.materials || (this.data.config.ammo[d].coins && (this.data.config.ammo[d].coins * c) > user_coins)) {
            a = "important";
            h = "";
        }
        e += '<div class="button_new link ' + a + '" onclick="' + h + '">' + c + "x</div>";
    }
    e += '    <div class="clear"></div>';
    e += "  </div>";
    e += '  <div class="clear"></div>';
    e += "</div>";
} e += "</div>"; globalBoxFlex(t_battle_craft_head, e, 0, 0, 1); };
battle.prototype.craftSelectCommit = function (d, b) { if (this.data.config.ammo[d].coins) {
    var e = t_battle_craft_ask.replace("%COST%", (this.data.config.ammo[d].coins * b) + "&nbsp;" + t_coins);
    e = e.replace("%AMOUNT%", b);
    var a = "<div>" + e.replace("%NAME%", this.data.config.ammo[d].name) + "</div>";
    var c = "battle.craft(" + d + ", " + b + ")";
    globalcommitbox(t_battle_craft_head, a, c);
}
else {
    battle.craft(d, b);
} };
battle.prototype.endMinigame = function () { this.game = 0; this.setStatus(); };
battle.prototype.startMinigame = function () { this.game = 2; this.setStatus(); };
battle.prototype.moveSlider = function () { var a = parseInt($("battle_slider").style.left); if (this.direction == 1) {
    a++;
}
else {
    a--;
} $("battle_slider").style.left = a + "px"; if (a >= this.barWidth) {
    this.direction = 0;
} if (a <= 0) {
    this.direction = 1;
} };
battle.prototype.pressFire = function () { clearInterval(this.slider); $("battle_fire").addClassName("off"); var a = parseInt($("battle_slider").style.left); this.fire(a); };
battle.prototype.buildBarMinigame = function () { var d = this.data.config.ammo[this.currentAmmo].hotzone_height; $("battle_minigame_bar_medium").style.width = d + "px"; var e = (this.barWidth / 2); var b = -e + 20; if (d > e) {
    var a = (-(d - e)) - 20;
}
else {
    var a = (e - d) - 20;
} var c = getRandom(b, a); this.offset = (e + c); $("battle_minigame_bar_medium").style.marginLeft = c + "px"; d = this.data.config.ammo[this.currentAmmo].burningzone_height; $("battle_minigame_bar_hot").style.width = d + "px"; $("battle_minigame_bar_hot").style.marginLeft = -(d / 2) + "px"; };
battle.prototype.checkStartMinigame = function () { if (!this.game) {
    return 1;
} $("battle_enemy" + this.currentEnemy).addClassName("select"); hideDiv("battle_start"); if (this.game == 1) {
    hideDiv("battle_fire");
    $("battle_weapon_img").removeClassName("prepare").addClassName("idle").removeClassName("select");
    hideDiv("battle_minigame_bar");
} if (!this.currentAmmo) {
    $("battle_ammo_info").innerHTML = t_battle_choose_ammo;
    showDiv("battle_ammo_info");
}
else {
    hideDiv("battle_ammo_info");
    if (this.game == 1) {
        showDiv("battle_start");
    }
} };
battle.prototype.setStatus = function () { if (!this.game) {
    hideDiv("battle_transp");
    hideDiv("battle_ammo_info");
    hideDiv("battle_start");
    hideDiv("battle_fire");
    hideDiv("battle_minigame_bar");
    this.game = 0;
    this.currentEnemy = 0;
    this.update();
}
else {
    showDiv("battle_transp");
    $("battle_enemy" + this.currentEnemy).addClassName("select");
    $("battle_weapon_img").removeClassName("prepare").removeClassName("select").addClassName("idle");
    showDiv("battle_enemy_aiming_cross" + this.currentEnemy);
    this.checkStartMinigame();
    if (this.currentAmmo > 0) {
        this.buildBarMinigame();
    }
} if (this.game == 1) {
    this.hoverEnemy(this.currentEnemy, 0);
    $("battle_ammo").addClassName("select");
    if (this.currentAmmo) {
        this.game = 2;
        this.setStatus();
    }
} if (this.game == 2) {
    clearInterval(this.slider);
    $("battle_weapon_img").removeClassName("idle").addClassName("prepare").addClassName("select");
    hideDiv("battle_start");
    showDiv("battle_fire");
    showDiv("battle_minigame_bar");
    $("battle_slider").style.left = "0px";
    this.slider = setInterval(function () { battle.moveSlider(); }, 5);
} };
battle.prototype.timer = function () { this.data.data.remain--; if (this.data.data.remain <= 0) {
    hideDiv("battle");
    return 1;
} this.timerUpdate(); };
battle.prototype.timerUpdate = function () { if ($("battle_timer")) {
    $("battle_timer").innerHTML = "<div>" + t_event_resttime + ":&nbsp;" + formatTime(this.data.data.remain) + "</div>";
} };
battle.prototype.help = function () { var a = '<ul id="battle_help">'; var c = t_battle_help1; var b = 1; for (pid in this.data.config.products) {
    c = c.replace("%PRODUCT" + b + "%", produkt_name[pid]);
    b++;
} a += "<li>" + c + "</li>"; a += "<li>" + t_battle_help2 + "</li>"; a += "<li>" + t_battle_help3 + "</li>"; a += "<li>" + t_battle_help4 + "</li>"; a += "<li>" + t_battle_help5 + "</li>"; a += "<li>" + t_battle_help6 + "</li>"; a += "<li>" + t_battle_help7 + "</li>"; a += "</ul>"; globalcommitbox(t_battle_name, a, 0, 0, 1); };
battle.prototype.reward = function (d) { var b = '<div id="battle_reward">'; b += '<div style="margin-bottom:10px;">' + t_specialoffer_message + "</div>"; for (var c in d) {
    if (c == "materials") {
        b += "<div>";
        b += '  <div class="candy" style="float:left; margin-right:5px;"></div>';
        b += '  <div style="float:left; margin-top:12px;">' + d[c] + "x&nbsp;" + t_battle_craft_materials + "</div>";
        b += '  <div class="clear"></div>';
        b += "</div>";
    }
    if (c == "ammo") {
        for (var a in d[c]) {
            b += "<div>";
            b += '  <div class="ammo ammo' + a + '" style="float:left; margin-right:5px;"></div>';
            b += '  <div style="float:left; margin-top:12px;">' + d[c][a] + "x&nbsp;" + this.data.config.ammo[a].name + "</div>";
            b += '  <div class="clear"></div>';
            b += "</div>";
        }
    }
} b += "</div>"; globalcommitbox(t_collectevent_daily_head, b, "off"); };
battle.prototype.finder = function (b) { var a = '<div class="battle_drop_candy"></div><div>' + b + "x</div>"; globalcommitbox(t_olympia_acai_berry, a, "off"); };
battle.prototype.flyer = function () { var a = '<div id="minigame_flyer" class="idle">' + points + "</div>"; $("minigame_enemy").insert(a); setTimeout(function () { $("minigame_flyer").removeClassName("idle").addClassName("fly"); }, 200); setTimeout(function () { $("minigame_flyer").remove(); }, 1200); };
var buildingdata = new Object;
var building_runner_runtime = 0;
var building_runner = 0;
var building_show_feed = 0;
var building_animal_special_select = 0;
var ghost_visible = 0;
var building_ignore_elements = ["globalbox", "globaltransp", "mayo_info", "kaeserei_info", "wollerei_info", "update_crop_2", "update_crop_3", "update_crop_4", "update_crop_5", "update_crop_11_1", "update_crop_11_2", "update_crop_12", "update_time_2", "update_time_3", "update_time_4", "update_time_5", "update_time_11_1", "update_time_11_2", "update_time_12", "update_time_15", "update_13_2", "update_13_4", "update_13_5", "update_13_5_ani", "update_14_2", "update_14_4", "update_14_5", "update_14_5_1", "update_14_5_2"];
var building_feed_cache_timer = 0;
var building_feed_cache = {};
var building_feed_cache_guild = -1;
function buildingInnerAction(q, a, m, l, s) { var b = "&mode=inner_" + q + "&farm=" + a + "&position=" + m; if (l) {
    b += "&pid=" + l;
} if (s) {
    b += "&pos=" + s;
    b += "&action=" + building_animal_special_select;
} if (q == "init" || q == "crop" || q == "cancel" || q == "setspecial") {
    building_show_feed = 0;
} if (q == "rename_animal") {
    if ($("buildinginner_renameanimal").value == "Praise The King" && farms_data.farms[a][m].buildingid == 3) {
        startMoo();
    }
    if ($("buildinginner_renameanimal") && $("buildinginner_renameanimal").value != "") {
        b += "&name=" + encodeURIComponent($("buildinginner_renameanimal").value);
    }
    else {
        return false;
    }
} if (q == "feed") {
    var e = s;
    if (premium || (currentuserlevel >= teaserfeedpopupmin && currentuserlevel < teaserfeedpopupmax)) {
        var h = $("building_dialogbox_input").value;
    }
    else {
        if (building_feed_cache) {
            var r = "";
            for (var d in building_feed_cache) {
                r += d + "_" + building_feed_cache[d] + "|";
            }
            b += "&c=" + r;
            building_feed_cache_timer = 0;
            building_feed_cache = {};
        }
        var h = 1;
    }
    if (!h || h == 0) {
        return false;
    }
    b += "&amount=" + h;
    b += "&guildjob=" + e;
} var n = createAjaxRequestObj(); n.open("GET", "ajax/farm.php?rid=" + rid + b, true); n.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); n.onreadystatechange = function () { buildingInnerActionResponse(n, q, a, m); }; n.send(null); }
function buildingInnerActionResponse(d, l, a, h) { var q = _chkRequest(d); if (q != 0) {
    if (q[0] == 0) {
        var n = 0;
        if (l == "crop") {
            n = "hideDiv('globaltransp'); hideDiv('globalbox'); closeBuildingInner()";
        }
        var c = { mode: l, farm: a, position: h, id: 1 };
        globalerrorbox(q[1], n, c);
    }
    else {
        buildingdata = q[1];
        var e = buildingdata[a][h];
        var b = q[2];
        closeBuildingInnerDialogBox();
        newBuildingInner(a, h);
        buildingInnerAnimalSpecialDeselect(a, h);
        if (l == "feed") {
            var m = getRandom(1, 7);
            showFeedback("production_feedback", randfeedtext[m]);
            if (b.tutorial == 9) {
                showTutorial(16);
            }
            building_feed_cache_guild = -1;
        }
        if (l == "setspecial" || l == "crop" || l == "cancel" || l == "rename_animal" || l == "buyanimal") {
            hideDiv("globaltransp");
            hideDiv("globalbox");
        }
        if (l == "crop") {
            if (q[3] && q[3].level) {
                levelupAlert(q[3].level, q[3].leveltitle);
            }
            if (q[2]) {
                globalerrorbox(q[2]);
            }
            var m = getRandom(1, 3);
            showFeedback("production_feedback", randcroptext[m]);
        }
        if (l == "crop" || l == "cancel") {
            if (run[h]) {
                window.clearInterval(run[h]);
                temp_reachlimit[h] = 0;
                run[h] = 0;
            }
        }
        if (b.tutorial == 8) {
            showTutorial(15, 2);
        }
        if (q.guildjob_log) {
            jobProductionInfoFlyer(a, h, q.guildjob_log);
        }
    }
} }
function newBuildingInner(a, l) { if (buildingdata[a] && buildingdata[a][l]) {
    var d = buildingdata[a][l];
    setBuildingInnerInfo(a, l, d);
    var n = "";
    if ((d.buildingid == 11 && d.level >= 2) || (d.buildingid == 15 && d.level >= 4)) {
        n = "_2";
    }
    $("building_inner").className = "building_inner_back" + d.buildingid + n;
    $("feed_line").className = "feed_line" + d.buildingid;
    $("animal_talkbox").className = "animal_talkbox" + d.buildingid;
    hideDiv("production_info_cancel");
    $("production_info_cancel").onclick = new Function("");
    hideDiv("feedtrough");
    if (d.remain > 0) {
        $("feedtrough").className = "feedtrough" + d.buildingid;
        $("production_info_cancel").onclick = new Function("buildingInnerDialogBox('cancel'," + a + "," + l + ")");
    }
    hideDiv("production_box");
    buildBuildingInnerProductionBox(a, l, d.buildingid);
    for (var c = 1; c <= 30; c++) {
        if ($("inner_special" + c)) {
            if (d.buildingid == c) {
                showDiv("inner_special" + c);
            }
            else {
                hideDiv("inner_special" + c);
            }
        }
        for (var e = 1; e <= 5; e++) {
            if ($("building_inner_update" + c + "_" + e)) {
                if (c == d.buildingid && e <= d.level) {
                    showDiv("building_inner_update" + c + "_" + e);
                }
                else {
                    hideDiv("building_inner_update" + c + "_" + e);
                }
            }
        }
    }
    if (d.feed) {
        rewriteBuildingInnerFeed(a, l);
    }
    var q = 0;
    if (d.animals) {
        q = rewriteBuildingInnerAnimals(a, l);
    }
    if (d.pid) {
        $("production_info_name").innerHTML = produkt_name[d.pid];
        var n = "";
        if (produkt_ernte_bonus[d.pid] && d.animals.amount) {
            n = '&nbsp;<span class="rack_cropbonus">+' + ((produkt_ernte_bonus[d.pid] * d.animals.amount) + q) + "</span>";
        }
        $("production_info_crop").innerHTML = d.crop + n;
        var b = d.time;
        if (d.remain) {
            b = d.remain;
        }
        $("production_info_time").innerHTML = formatTime(b);
    }
    else {
        $("animal_talkbox").innerHTML = infotext[d.buildingid][1];
    }
    hideDiv("animal_specials");
    if (d.specials) {
        var h = "";
        for (var e = 0; e < d.specials.length; e++) {
            h += '<div id="animal_special_head' + d.buildingid + "_" + d.specials[e].action + '" class="link animal_special_head' + d.buildingid + "_" + d.specials[e].action + ' animal_special_item" onmouseover="showDiv(\'animal_special_item' + e + "_tt')\" onmouseout=\"hideDiv('animal_special_item" + e + '_tt\')" onclick="buildingInnerAnimalSpecialSelect(' + a + "," + l + "," + d.specials[e].action + ')">';
            h += '  <div id="animal_special_item' + e + '_tt" class="animal_special_item_tt ttbox">';
            h += '    <div class="title">' + d.specials[e].title + "</div>";
            if (d.specials[e].cropbonus) {
                h += "<div>" + str_replace("%BONUS%", d.specials[e].cropbonus, t_animal_special_cropbonus) + "</div>";
            }
            if (d.specials[e].productiontime) {
                h += "<div>" + str_replace("%TIME%", formatTime(d.specials[e].productiontime), t_cropaction_productiontime) + "</div>";
            }
            h += '    <div class="bonusinfo">' + t_animal_special_howtouse + "</div>";
            h += "  </div>";
            h += "</div>";
        }
        $("animal_specials").innerHTML = h;
        showDiv("animal_specials");
    }
    stopBuildingRunner();
    setBuildingInnerStatus(a, l);
    if (typeof d.remain != "undefined") {
        building_runner = window.setInterval("setBuildingInnerStatus(" + a + "," + l + ")", 1000);
    }
    else {
        var n = "";
        if (d.timebonus) {
            n = "&nbsp;(-" + d.timebonus + "%)";
        }
        var h = str_replace("%TIME%", '<span class="red">' + formatTime(d.time) + n + "</span>", infotext[d.buildingid][1]);
        var m = checkInnerBuildingFood(a, l);
        if (m) {
            h = m;
        }
        $("animal_talkbox").innerHTML = h;
    }
    showDiv("transp");
    showDiv("building_inner");
} }
function rewriteBuildingInnerAnimals(b, m) { var t = 0; var d = buildingdata[b][m]; var r = d.animals.type; $("animal_line").className = "animal_line" + r; var l = ""; var q = d.animals.amount; if (ghost_visible == 1) {
    q = d.animals.max;
} for (var e = 1; e <= q; e++) {
    var a = new Object;
    if (d.animals.pos && d.animals.pos[e]) {
        a = d.animals.pos[e];
    }
    var c = "animal_" + b + "_" + m + "_" + e;
    var n = "animal" + r;
    if (a.special) {
        n += "_special" + a.special;
    }
    var s = "";
    var h = "";
    if (ghost_visible == 1 && e > d.animals.amount) {
        s = "_ghost";
        h = "buildingInnerDialogBox('buyanimal', " + b + ", " + m + ")";
    }
    l += '<div id="' + c + '" class="link animal_item' + s + " " + n + s + '" ';
    if (a.name || (a.special_data && a.special_data.title)) {
        l += "onmouseover=\"showDiv('" + c + "_tt')\" onmouseout=\"hideDiv('" + c + "_tt')\"";
    }
    if (h != "") {
        l += ' onclick="' + h + '"';
    }
    l += " >";
    if (a.name || (a.special_data && a.special_data.title)) {
        l += '<div id="' + c + '_tt" class="ttbox animal_tt_' + r + '">';
        if (a.special_data && a.special_data.title) {
            l += '<div class="title">' + a.special_data.title + "</div>";
        }
        if (a.name) {
            l += '<div class="bold">' + a.name + "</div>";
        }
        if (a.special_data) {
            if (a.special_data.cropbonus) {
                l += '<div class="bonusinfo">' + str_replace("%BONUS%", a.special_data.cropbonus, t_animal_special_cropbonus) + "</div>";
                t += a.special_data.cropbonus;
            }
            if (a.special_data.productiontime) {
                l += '<div class="bonusinfo">' + str_replace("%TIME%", formatTime(a.special_data.productiontime), t_cropaction_productiontime) + "</div>";
            }
        }
        l += "</div>";
    }
    l += "</div>";
} l += '<div class="clear"></div>'; $("animal_line").innerHTML = l; return t; }
function buildingInnerRenameAnimal(a, b) { buildingInnerDialogBox("rename_animal", farm, a, 0, b); }
function rewriteBuildingInnerFeed(e, a) { var d = buildingdata[e][a]; var c = ""; c += '<div id="building_inner_feedline_normal" style="float:left;">'; for (var b in d.feed) {
    if (checkRackItem(b, e) > 0) {
        c += htmlBuildingInnerFeed(e, a, b, d, 0);
    }
} c += "</div>"; if (checkIsValidGuildJobProduct()) {
    var h = "float:left; margin-left:50px;";
    if (d.buildingid == 5) {
        h = "";
    }
    c += '<div id="building_inner_feedline_guild" style="' + h + '">';
    for (var b in building_inner_data.data.feed) {
        if (job_data.guild_job_data.stock[b]) {
            c += htmlBuildingInnerFeed(e, a, b, d, 1);
        }
        else {
            c += '<div style="float:left; position:relative; margin-top:5px; margin-right:5px; width:41px; height:55px;" onmouseover="showDiv(\'building_inner_feedline_guild' + b + "_tt');\" onmouseout=\"hideDiv('building_inner_feedline_guild" + b + "_tt')\">";
            c += '  <div class="guildjob_orderpoints" style="position:absolute; right:0px;"></div>';
            c += '  <div class="sack" style="opacity:0.5;">';
            c += '    <div class="e' + b + ' img_sack"></div>';
            c += "  </div>";
            c += '  <div id="building_inner_feedline_guild' + b + '_tt" class="ttbox" style="width:100px;">' + str_replace("%PRODUCT%", produkt_name[b], t_guildjob_startproduction_need_products) + "</div>";
            c += "</div>";
        }
    }
    c += "</div>";
} c += '<div class="clear"></div>'; $("feed_line").innerHTML = c; showDiv("building_inner_feedline_guild"); showDiv("building_inner_feedline_normal"); if (farms_data.farms[e][a].production) {
    if (farms_data.farms[e][a].production[0].guild == 1) {
        hideDiv("building_inner_feedline_normal");
    }
    else {
        hideDiv("building_inner_feedline_guild");
    }
} }
function htmlBuildingInnerFeed(h, a, b, e, d) { var l = "_normal"; if (d == 1) {
    l = "_guild";
} var c = ""; c += '<div id="feed_item' + b + l + '" class="link feed_item">'; if (d == 1) {
    c += '<div class="guildjob_orderpoints" style="position:absolute; z-index:10; right:-5px;"></div>';
} c += '  <div style="position:relative; margin:5px 0 0 5px;" class="sack" onclick="buildingInnerDialogBox(\'feed\',' + h + "," + a + "," + b + "," + d + ')" onmouseover="showDiv(\'feed_tt' + b + l + "')\" onmouseout=\"hideDiv('feed_tt" + b + l + "')\">"; c += '    <div class="e' + b + ' img_sack"></div>'; c += '    <div id="feed_tt' + b + l + '" class="feed_tt' + e.buildingid + ' ttbox">'; c += '      <div><span class="bold">' + produkt_name[b] + "</span><br>" + t_inner_savetime + "<br>" + formatTime(e.feed[b].time) + '</div><div class="bonusinfo">' + t_inner_feedinfo + "</div>"; if (d == 1) {
    c += '<div class="bonusinfo">' + t_guildjob_stock_info + "</div>";
} c += "    </div>"; c += "  </div>"; c += "</div>"; return c; }
function buildBuildingInnerProductionBox(c, a, d) { var b = ""; if (d == 2) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:100px; height:138px;">';
    b += '  <div id="production_box_back" style="position:absolute; top:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'inner_egg_back.png)"></div>';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:0px; left:0px; width:100%; height:0; background:url(' + imgpath + 'inner_egg_front.gif) bottom left;"></div>';
    b += "</div>";
} if (d == 3) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:68px; height:160px;">';
    b += '  <div id="production_box_back" style="position:absolute; top:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'milkcan_back.png);"></div>';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:20px; left:13px; width:42px; height:111px; background:url(' + imgpath + 'milkcan_milk.png) bottom left no-repeat;"></div>';
    b += '  <div id="production_box_front" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'milkcan_front.png) bottom left;"></div>';
    b += "</div>";
} if (d == 4) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:96px; height:125px;">';
    b += '  <div id="production_box_back" style="position:absolute; top:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'sheep_back.png);"></div>';
    b += '  <div id="production_box_inner" style="position:absolute; top:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'sheep_wolle.png) top left no-repeat;"></div>';
    b += '  <div id="production_box_front" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'sheep_front.png) bottom left;"></div>';
    b += "</div>";
} if (d == 5) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:95px; height:126px;">';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:3px; left:0px; width:100%; height:105px; background:url(' + imgpath + 'honeyglass_honey.png) top left;"></div>';
    b += '  <div id="production_box_front" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'honeyglass_front.png) bottom left;"></div>';
    b += "</div>";
} if (d == 11) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:99px; height:176px;">';
    b += '  <div id="production_box_back" style="position:absolute; top:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'fish_back2.png);"></div>';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:30px; left:14px; width:70px; height:100px; background:url(' + imgpath + 'fish_inner2.gif) bottom left no-repeat;"></div>';
    b += '  <div id="production_box_front" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'fish_front2.png) bottom left;"></div>';
    b += "</div>";
} if (d == 12) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:68px; height:160px;">';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'goat_inner.png) bottom left;"></div>';
    b += '  <div id="production_box_front" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'goat_front.png) bottom left;"></div>';
    b += "</div>";
} if (d == 15) {
    b += '<div style="position:absolute; bottom:0px; right:0px; width:115px; height:144px;">';
    b += '  <div id="production_box_back" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'angora_back.png) bottom left;"></div>';
    b += '  <div id="production_box_inner" style="position:absolute; bottom:0px; left:0px; width:100%; height:100%; background:url(' + imgpath + 'angora_front.png) bottom left;"></div>';
    b += "</div>";
} if (farms_data.farms[c][a] && farms_data.farms[c][a].production && farms_data.farms[c][a].production[0].guild && farms_data.farms[c][a].production[0].guild == 1) {
    b += '<div style="position:absolute; right:0px; bottom:115px;" class="guildjob_orderpoints"></div>';
} $("production_box").innerHTML = b; }
function closeBuildingInner() { stopBuildingRunner(); hideDiv("transp"); hideDiv("building_inner"); if ($("innermaincontainer")) {
    hideDiv("innermaincontainer");
} if ($("beaker_7_3")) {
    hideDiv("beaker_7_3");
} }
function checkBuildingInnerFeed(e, a) { var d = buildingdata[e][a]; for (var b in d.feed) {
    for (var c = 1; c <= 2; c++) {
        if (c == 1) {
            var h = checkRackItem(b, e);
            if (!h || typeof h == "undefined") {
                hideDiv("feed_item" + b + "_normal");
            }
            else {
                showDiv("feed_item" + b + "_normal");
            }
        }
        else {
            if (c == 2) {
                if (job_data && job_data.guild_job_data && job_data.guild_job_data.stock[b]) {
                    showDiv("feed_item" + b + "_guild");
                }
                else {
                    hideDiv("feed_item" + b + "_guild");
                }
            }
        }
    }
} }
function buildingInnerDeactiveFeedItem(a) { for (var b = 1; b <= 2; b++) {
    var c = "_normal";
    if (b == 2) {
        c = "_guild";
    }
    if ($("feed_item" + a + c)) {
        $("feed_item" + a + c).addClassName("transparent");
        $("feed_item" + a + c).onclick = new Function("");
        if ($("feed_tt" + a + c)) {
            $("feed_tt" + a + c).innerHTML = '<div class="bonusinfo">' + error1006 + "</div>";
        }
    }
} }
function buildingInnerAnimalSpecialSelect(e, a, d) { if (building_animal_special_select == d) {
    building_animal_special_select = 0;
}
else {
    building_animal_special_select = d;
} for (var b = 0; b < buildingdata[e][a].specials.length; b++) {
    var h = "animal_special_head" + buildingdata[e][a].buildingid + "_" + buildingdata[e][a].specials[b].action;
    $(h).removeClassName(h + "_active");
    $(h).addClassName(h);
} var h = "animal_special_head" + buildingdata[e][a].buildingid + "_" + d; if (building_animal_special_select) {
    $(h).removeClassName(h);
    $(h).addClassName(h + "_active");
}
else {
    $(h).removeClassName(h + "_active");
    $(h).addClassName(h);
} var c = buildingdata[e][a]; for (var b = 1; b <= c.animals.amount; b++) {
    var h = "animal_" + e + "_" + a + "_" + b;
    if (building_animal_special_select) {
        $(h).onclick = new Function("buildingInnerDialogBox('setspecial'," + e + "," + a + ",0," + b + ")");
    }
} }
function buildingInnerAnimalSpecialDeselect(d, a) { building_animal_special_select = 0; var c = buildingdata[d][a]; for (var b = 1; b <= c.animals.amount; b++) {
    var e = "animal_" + d + "_" + a + "_" + b;
    if (rename_animal_allowed == 1) {
        $(e).onclick = new Function("buildingInnerRenameAnimal(" + a + ", " + b + ")");
    }
    else {
        $(e).onclick = new Function("");
    }
} }
function feedCache(b, a) { if (!building_feed_cache[b]) {
    building_feed_cache[b] = 1;
}
else {
    building_feed_cache[b]++;
} var c = 1500; if (tutorial > 0) {
    c = 100;
} if (!building_feed_cache_timer) {
    building_feed_cache_timer = window.setTimeout("feedCacheFire(" + b + ", " + a + ")", c);
} }
function feedCacheFire(b, a) { buildingInnerAction("feed", farm, a, b, building_feed_cache_guild); }
function buildingInnerDialogBox(m, a, l, h, s) { var e = buildingdata[a][l]; if (m == "buyanimal") {
    var b = t_inner_buyanimal_headline;
    var n = str_replace("%COST%", formatPrice(e.animals.next), t_inner_buyanimal_content);
    var v = "buildingInnerAction('" + m + "','" + a + "','" + l + "')";
    globalcommitbox(b, n, v);
} if (m == "feed") {
    var d = s;
    if (!calcBuildingInnerFeedRestTime(a, l, h)) {
        return false;
    }
    var b = infoinnerbuildingcropheadline;
    var n = "";
    if (premium || (currentuserlevel >= teaserfeedpopupmin && currentuserlevel < teaserfeedpopupmax)) {
        if (d == 1) {
            var q = job_data.guild_job_data.stock[h];
        }
        else {
            var q = checkRackItem(h, a);
        }
        n += '<div class="building_dialogbox_line">';
        n += '  <div class="tt' + h + ' float"></div>';
        n += '  <div class="float">';
        n += '    <div class="building_dialogbox_line bold">&nbsp;' + produkt_name[h] + "</div>";
        n += '    <div class="building_dialogbox_line">&nbsp;' + t_inner_savetime + "&nbsp;" + formatTime(e.feed[h].time) + "</div>";
        n += "  </div>";
        n += '  <div class="clear"></div>';
        n += "</div>";
        n += '<div class="building_dialogbox_line">' + infoinnerbuildingcropdesc + "</div>";
        n += '<div id="building_dialogbox_input_line" class="building_dialogbox_line">';
        n += '  <input type="number" id="building_dialogbox_input" value="1" maxlength="4" onkeyup="calcBuildingInnerInput(0,\'' + m + "'," + a + "," + l + "," + h + "," + d + ')" onchange="calcBuildingInnerInput(0,\'' + m + "'," + a + "," + l + "," + h + "," + d + ')">&nbsp;' + t_inner_stock + "&nbsp;" + q + '&nbsp;<button class="button_new link" id="building_dialogbox_submit" type="button" onclick="buildingInnerAction(\'feed\',' + a + "," + l + "," + h + "," + d + ')">' + t_inner_feedsubmit + "</button></div>";
        if (d == 1) {
            n += '<div class="bonusinfo">' + t_guildjob_stock_info + "</div>";
        }
        n += '<div style="position:relative; text-decoration:underline" class="bonusinfo building_dialogbox_line" onmouseover="showDiv(\'building_resttime_tt\')" onmouseout="hideDiv(\'building_resttime_tt\')"><span style="">' + t_inner_feedresttime + '</span>&nbsp;<span id="building_dialogbox_resttime">' + formatTime(e.rest) + "</span>";
        n += '  <div id="building_resttime_tt" class="ttbox" style="position:absolute; top:20px; left:0px; font-style:normal;">' + t_inner_resttimedesc + "</div>";
        n += "</div>";
        n += '<div class="bonusinfo building_dialogbox_line">' + t_inner_feedrestproductiontime + '&nbsp;<span id="building_dialogbox_restproductiontime" class="bold">' + formatTime(e.time) + "</span></div>";
    }
    else {
        if (building_feed_cache_guild > -1 && building_feed_cache_guild != d) {
            return false;
        }
        building_feed_cache_guild = d;
        feedCache(h, l);
        return true;
    }
}
else {
    if (m == "cancel") {
        var b = t_inner_productioncancel;
        var n = t_inner_productioncancel_info;
        var v = "buildingInnerAction('" + m + "','" + a + "','" + l + "')";
        globalcommitbox(b, n, v);
    }
    else {
        if (m == "crop") {
            var b = animalcropheadline;
            var n = infotext[e.buildingid][3];
            var v = "buildingInnerAction('" + m + "'," + a + "," + l + ")";
            var r = "hideDiv('globaltransp'); hideDiv('globalbox'); closeBuildingInner()";
            globalcommitbox(b, n, v, r);
        }
        else {
            if (m == "setspecial") {
                if (!building_animal_special_select) {
                    buildingInnerRenameAnimal(l, s);
                }
                else {
                    var t = "";
                    for (var c = 0; c < buildingdata[a][l].specials.length; c++) {
                        if (building_animal_special_select == buildingdata[a][l].specials[c].action) {
                            t = buildingdata[a][l].specials[c].title;
                        }
                    }
                    var b = t_animal_setspecial_head + " (" + t + ")";
                    var n = t_animal_setspecial_body;
                    var v = "buildingInnerAction('" + m + "'," + a + "," + l + ",0," + s + ")";
                    globalcommitbox(b, n, v);
                }
            }
            else {
                if (m == "rename_animal") {
                    var b = t_animal_rename;
                    var n = "";
                    var u = "";
                    if (e.animals.pos[s] && e.animals.pos[s].name) {
                        u = e.animals.pos[s].name;
                    }
                    n += "<div>" + cityadcost;
                    if (rename_animal_cost.money > 0) {
                        n += formatPrice(rename_animal_cost.money);
                    }
                    n += "</div>";
                    n += '<input type="text" id="buildinginner_renameanimal" maxlength="15" value="' + u + '">';
                    var v = "buildingInnerAction('" + m + "'," + a + "," + l + ",0," + s + ")";
                    globalcommitbox(b, n, v);
                    $("buildinginner_renameanimal").focus();
                }
            }
        }
    }
} if (m == "crop") {
    $("building_dialogbox_close").onclick = new Function("closeBuildingInner()");
}
else {
    $("building_dialogbox_close").onclick = new Function("closeBuildingInnerDialogBox()");
} if (m != "setspecial" && m != "rename_animal" && m != "crop" && m != "cancel" && m != "buyanimal") {
    $("building_dialogbox_headline").innerHTML = b;
    $("building_dialogbox_content").innerHTML = n;
    showDiv("building_dialogbox_transp");
    showDiv("building_dialogbox");
} if (m == "feed") {
    if (premium) {
        var d = s;
        calcBuildingInnerInput(1, m, a, l, h, d);
        $("building_dialogbox_input").focus();
        $("building_dialogbox_input").select();
    }
} }
function closeBuildingInnerDialogBox() { if ($("building_dialogbox_input")) {
    $("building_dialogbox_input").blur();
} hideDiv("building_dialogbox_transp"); hideDiv("building_dialogbox"); building_show_feed = 0; }
function calcBuildingInnerFeedRestTime(a, n, m) { var e = buildingdata[a][n]; if (m) {
    building_show_feed = m;
    var h = new Object;
    h[m] = { time: e.feed[m].time };
}
else {
    var h = e.feed;
} var d = 0; for (var r in h) {
    if (building_show_feed && building_show_feed == r && (e.feed[building_show_feed].time && e.rest < e.feed[building_show_feed].time)) {
        buildingInnerDeactiveFeedItem(building_show_feed);
        closeBuildingInnerDialogBox();
        break;
    }
    if (e.rest >= e.feed[r].time) {
        if ($("building_dialogbox_resttime")) {
            var q = 0;
            var b = e.rest;
            if ($("building_dialogbox_input") && $("building_dialogbox_input").value && building_show_feed) {
                q = ($("building_dialogbox_input").value * e.feed[building_show_feed].time);
                b = (b - q);
                if (b < 0) {
                    var l = Math.floor(e.rest / e.feed[building_show_feed].time);
                    $("building_dialogbox_input").value = l;
                }
            }
            $("building_dialogbox_resttime").innerHTML = formatTime(b);
            var c = e.time;
            if (e.remain) {
                c = e.remain;
            }
            $("building_dialogbox_restproductiontime").innerHTML = formatTime(c - q);
        }
        d++;
    }
    else {
        buildingInnerDeactiveFeedItem(r);
    }
} if (d) {
    return 1;
} if (m) {
    closeBuildingInnerDialogBox();
} return 0; }
function calcBuildingInnerInput(q, l, a, h, e, c) { var b = buildingdata[a][h]; if (l == "feed") {
    var n = Math.floor(b.rest / b.feed[e].time);
    if (c == 1) {
        var m = 0;
        if (job_data.guild_job_data.stock && job_data.guild_job_data.stock[e]) {
            m = job_data.guild_job_data.stock[e];
        }
    }
    else {
        var m = checkRackItem(e, a);
    }
    if (m < n) {
        n = m;
    }
    if (q) {
        var d = n;
    }
    else {
        var d = $("building_dialogbox_input").value;
        if (d != "") {
            d = parseInt(d);
        }
        if (d > n) {
            d = n;
        }
        if (d != "" && isNaN(d)) {
            d = 1;
        }
    }
    $("building_dialogbox_input").value = d;
    calcBuildingInnerFeedRestTime(a, h, e);
} }
function checkInnerBuildingFood(a, l) { var d = buildingdata[a][l]; var e = infotext_nonefood; var m = 0; var n = 1; if (setarab) {
    var b = "right";
}
else {
    var b = "left";
} for (var h in d.feed) {
    if (checkRackItem(h, a) > 0) {
        m++;
    }
    var c = '<div style="float:' + b + ';" class="kp' + h + '"></div><div style="float:' + b + ';">&nbsp;' + produkt_name[h] + '</div><div class="clear"></div>';
    e = str_replace("%PRODUCT" + n + "%", c, e);
    n++;
} if (!m) {
    return e;
}
else {
    return 0;
} }
function setBuildingInnerStatus(a, m) { building_runner_runtime++; var b = buildingdata[a][m]; if (b.rest && b.remain) {
    b.rest--;
} if (b.remain) {
    b.remain--;
} for (var c = 1; c <= 20; c++) {
    if ($("animal_feedanimation" + c)) {
        hideDiv("animal_feedanimation" + c);
    }
} var l = ""; if (b.rest > 0) {
    if (calcBuildingInnerFeedRestTime(a, m, 0)) {
        l = str_replace("%TIME%", '<span class="red">' + formatTime(b.time / 2) + "</span>", infotext[b.buildingid][2]);
    }
    else {
        b.rest = 0;
    }
    var q = checkInnerBuildingFood(a, m);
    if (q) {
        l = q;
    }
}
else {
    calcBuildingInnerFeedRestTime(a, m, 0);
    l = infotext[b.buildingid][4];
} var r = { "3": 111, "5": 105, "11": 100, "12": 160 }; if (b.remain > 0) {
    $("production_info_time").innerHTML = formatTime(b.remain);
    $("feedtrough").className = "feedtrough" + b.buildingid;
    showDiv("feedtrough");
    showDiv("production_info_cancel");
    var n = (b.remain * 100 / b.time);
    if (r[b.buildingid]) {
        var s = r[b.buildingid];
    }
    else {
        var s = $("production_box_back").getHeight();
    }
    var e = (s / 100);
    $("production_box_inner").style.height = (s - (e * n)) + "px";
    if ($("animal_feedanimation" + b.buildingid)) {
        showDiv("animal_feedanimation" + b.buildingid);
    }
}
else {
    if (typeof b.remain != "undefined") {
        if ($("animal_feedanimation" + b.buildingid)) {
            hideDiv("animal_feedanimation" + b.buildingid);
        }
        hideDiv("feedtrough");
        hideDiv("production_info_cancel");
        $("production_info_time").innerHTML = statusProductionComplete;
        l = infotext[b.buildingid][3];
        var d = "100%";
        if (r[b.buildingid]) {
            d = r[b.buildingid] + "px";
        }
        if ($("production_box_inner")) {
            $("production_box_inner").style.height = d;
        }
        buildingInnerDialogBox("crop", a, m);
    }
} checkBuildingInnerFeed(a, m); $("animal_talkbox").innerHTML = l; if (typeof b.remain != "undefined") {
    showDiv("production_info");
    showDiv("production_box");
}
else {
    hideDiv("production_box");
} if (!(b.rest > 0 || b.remain > 0)) {
    stopBuildingRunner();
} }
function stopBuildingRunner() { building_runner_runtime = 0; window.clearInterval(building_runner); }
function ignoreBuildingElements() { for (var a = 0; a < building_ignore_elements.length; a++) {
    hideDiv(building_ignore_elements[a]);
} }
var pony_position = 0;
var pony_sel_pony = 0;
var pony_sel_farmi = 0;
var pony_sel_farmi_pos = 0;
var pony_speedup_select = 0;
var pony_speedup_reduce = 0;
function ponyHelp() { showDiv("pony_help"); showDiv("pony_help_transp"); }
function ponyHelpClose() { hideDiv("pony_help"); hideDiv("pony_help_transp"); }
function ponyBuild(a, e) { if (a) {
    pony_position = a;
} ignoreBuildingElements(); var c = ""; c += '<div id="pony_ponys">'; for (var b = 1; b <= 3; b++) {
    c += '<div class="pony_item pony_item' + b + '">';
    c += '  <div id="pony' + b + '" class="link"></div>';
    c += '  <div id="pony' + b + '_plate">';
    c += '    <div id="pony' + b + '_ride"></div>';
    c += '    <div id="pony' + b + '_farmi"></div>';
    c += '    <div id="pony' + b + '_speedup" class="pony_button2 pony_button_speedup link" onmouseover="showDiv(\'pony' + b + "_speedup_tt')\" onmouseout=\"hideDiv('pony" + b + "_speedup_tt')\">";
    c += '      <div id="pony' + b + '_speedup_tt" class="ttbox pony_speedup_tt">' + t_pony_speedup_tt + "</div>";
    c += "    </div>";
    c += '    <div id="pony' + b + '_crop" class="pony_button2 pony_button_crop link" onmouseover="showDiv(\'pony' + b + "_crop_tt')\" onmouseout=\"hideDiv('pony" + b + "_crop_tt')\">";
    c += '      <div id="pony' + b + '_crop_tt" class="ttbox pony_crop_tt">' + t_pony_crop_tt + "</div>";
    c += "    </div>";
    c += "  </div>";
    c += '  <div id="pony' + b + '_feed" class="pony_item_feed link" onmouseover="showDiv(\'pony' + b + "_feed_inner_tt')\" onmouseout=\"hideDiv('pony" + b + "_feed_inner_tt')\">";
    c += '    <div id="pony' + b + '_feed_inner" class="pony_item_feed_inner">';
    c += '      <div id="pony' + b + '_feed_preview" class="pony_item_feed_preview"></div>';
    c += "    </div>";
    c += '    <div id="pony' + b + '_feed_inner_tt" class="ttbox pony_item_feed_inner_tt"></div>';
    c += "  </div>";
    c += '  <div id="pony' + b + '_buy" class="pony_button pony_button_buy link" onmouseover="showDiv(\'pony' + b + "_buy_tt')\" onmouseout=\"hideDiv('pony" + b + "_buy_tt')\">";
    c += '     <div id="pony' + b + '_buy_tt" class="ttbox pony_buy_tt">' + t_pony_buy + "</div>";
    c += "   </div>";
    c += '  <div id="pony' + b + '_rent" class="pony_button pony_button_rent link" onmouseover="showDiv(\'pony' + b + "_rent_tt')\" onmouseout=\"hideDiv('pony" + b + "_rent_tt')\">";
    c += '    <div id="pony' + b + '_rent_tt" class="ttbox pony_rent_tt">' + t_pony_rent + "</div>";
    c += "  </div>";
    c += '  <div id="pony' + b + '_block" class="pony_block" onmouseover="showDiv(\'pony' + b + "_block_tt')\" onmouseout=\"hideDiv('pony" + b + "_block_tt')\">";
    c += '    <div id="pony' + b + '_block_tt" class="ttbox"></div>';
    c += "  </div>";
    c += '  <div id="pony' + b + '_reward" class="pony_reward pony' + b + '_reward"></div>';
    if (b == 3) {
        c += '<div id="pony3_slottimer" class="pony_item_slottimer" onmouseover="showDiv(\'pony3_slottimer_tt\')" onmouseout="hideDiv(\'pony3_slottimer_tt\')">';
        c += '  <div id="pony3_slottimer_tt" class="ttbox">' + t_pony_rentresttime + "</div>";
        c += '  <div id="pony3_slottimer_time"></div>';
        c += "</div>";
    }
    c += "</div>";
} c += "</div>"; c += '<div id="pony_farmis" class="pony_farmis_right">'; for (var b = 1; b <= 3; b++) {
    c += '<div id="pony_farmi' + b + '" class="link pony_farmi_item" onmouseover="ponyPreview(' + b + "); showDiv('pony_farmi_static_tt');\" onmouseout=\"hideDiv('pony_farmi_static_tt'); ponyPreview(0);\"></div>";
} c += '  <div id="pony_farmi_static_tt" class="ttbox"></div>'; c += "</div>"; c += '<div class="big_close link" onclick="closeBuildingInner()"></div>'; c += '<div id="pony_help_button" class="link" onclick="ponyHelp()"></div>'; c += '<div id="pony_help_transp" class="transp"></div>'; c += '<div id="pony_help">'; c += '  <div id="pony_help_inner">'; c += '    <div class="headline">' + t_pony_help_head + "</div>"; c += '    <div style="float:left; width:180px; margin-bottom:10px;">' + t_pony_help_step1 + "</div>"; c += '    <div style="float:left;"><img src="' + imgpath + 'pony_help_img1.jpg"></div>'; c += '    <div class="clear"></div>'; c += '    <div style="float:left; width:180px; margin-bottom:10px;">' + t_pony_help_step2 + "</div>"; c += '    <div style="float:left; margin-bottom:25px;"><img src="' + imgpath + 'pony_help_img2.jpg"></div>'; c += '    <div class="clear"></div>'; c += '    <div style="float:left; width:180px;">' + t_pony_help_step3 + "</div>"; c += '    <div style="float:left;"><img src="' + imgpath + 'pony_help_img3.jpg"></div>'; c += '    <div class="clear"></div>'; c += "  </div>"; c += '  <div class="link close" onclick="ponyHelpClose()"></div>'; c += "</div>"; $("innercontent").innerHTML = c; $("innermaincontainer").className = "inner_back inner_back18"; ponyBuildFarmis(e); ponyBuildPonys(); if (pony_data.reward) {
    showDiv("pony" + pony_data.reward.pos + "_reward");
    var c = "<div>" + formatNumber(pony_data.reward.points) + "&nbsp;" + t_points + "</div>";
    c += "<div>" + formatPrice(pony_data.reward.bar) + "</div>";
    $("pony" + pony_data.reward.pos + "_reward").innerHTML = c;
    new Effect.Move("pony" + pony_data.reward.pos + "_reward", { x: 0, y: -60, mode: "relative" });
    var d = new Effect.Opacity("pony" + pony_data.reward.pos + "_reward", { duration: 5, transition: Effect.Transitions.linear, from: 1, to: 0 });
    pony_data.reward = 0;
} }
function ponyBuildFarmis(b) { var a = 1; for (id in pony_data.farmis) {
    var c = pony_data.farmis[id];
    if (c.status == 0 && $("pony_farmi" + a)) {
        if (pony_sel_farmi == id) {
            $("pony_farmi" + a).addClassName("pony_farmi" + c.type + "_select");
        }
        else {
            $("pony_farmi" + a).removeClassName("pony_farmi" + c.type + "_select");
        }
        $("pony_farmi" + a).onclick = new Function("pony_sel_farmi_pos=" + a + "; ponySelectFarmi(" + id + ")");
        $("pony_farmi" + a).addClassName("pony_farmi" + c.type);
        a++;
    }
} if (b == "pony_setfarmi") {
    if (!("transition" in $("pony_farmis").style) && !("webkitTransition" in $("pony_farmis").style)) {
        return false;
    }
    $("pony_farmis").className = "pony_farmis_off";
    setTimeout(ponyFarmiQueue1, 500);
} }
function ponyFarmiQueue1() { var a = 1; for (id in pony_data.farmis) {
    var b = pony_data.farmis[id];
    if (b.status == 0 && $("pony_farmi" + a)) {
        $("pony_farmi" + a).addClassName("pony_farmi" + b.type + "_walk");
        a++;
    }
} $("pony_farmis").className = "pony_farmis_right"; setTimeout(ponyFarmiQueue2, 2600); }
function ponyFarmiQueue2() { var a = 1; for (id in pony_data.farmis) {
    var b = pony_data.farmis[id];
    if (b.status == 0 && $("pony_farmi" + a)) {
        $("pony_farmi" + a).removeClassName("pony_farmi" + b.type + "_walk");
        a++;
    }
} }
function ponyPreview(m) { if (!m && pony_sel_farmi_pos > 0) {
    m = pony_sel_farmi_pos;
} for (var b = 1; b <= 3; b++) {
    $("pony" + b + "_feed_preview").style.height = "0px";
    $("pony" + b).removeClassName("pony" + b + "_inactive");
    var e = 1;
    for (id in pony_data.farmis) {
        var a = pony_data.farmis[id];
        if (a.status == 0 && $("pony_farmi" + e) && pony_data.ponys[b].data) {
            var l = 0;
            var n = a.data.energy;
            if (pony_data.ponys[b].data && pony_data.ponys[b].data.feed >= 0) {
                if (n > pony_data.ponys[b].data.feed) {
                    l = 1;
                    n = pony_data.ponys[b].data.feed;
                }
            }
            var h = (n * 100 / 8);
            var d = (147 / 100);
            var q = (h * d);
            if (e == m) {
                if (pony_data.ponys[b].data.feed >= 0) {
                    if (l > 0) {
                        $("pony" + b).addClassName("pony" + b + "_inactive");
                        $("pony" + b + "_feed_preview").style.backgroundColor = "#f00";
                    }
                    else {
                        $("pony" + b + "_feed_preview").style.backgroundColor = "#0f0";
                    }
                    $("pony" + b + "_feed_preview").style.height = q + "px";
                }
                var c = "";
                c += '<div style="font-weight:bold;">' + t_pony_tt_need + "</div>";
                c += '<div style="float:left; width:50px;">' + t_pony_time + "</div>";
                c += '<div style="float:right">' + formatTime(a.data.time) + "</div>";
                c += '<div class="clear"></div>';
                c += '<div style="float:left; width:50px;">' + t_pony_energy_farmi + "</div>";
                c += '<div style="float:right">' + a.data.energy + "</div>";
                c += '<div class="clear"></div>';
                c += '<div style="font-weight:bold; margin-top:10px;">' + t_pony_tt_reward + "</div>";
                c += '<div style="float:left; width:50px;">' + t_pony_bar + "</div>";
                c += '<div style="float:right">' + formatPrice(a.data.money) + "</div>";
                c += '<div class="clear"></div>';
                c += '<div style="float:left; width:50px;">' + t_pony_points + "</div>";
                c += '<div style="float:right">' + formatNumber(a.data.points) + "</div>";
                c += '<div class="clear"></div>';
                $("pony_farmi_static_tt").innerHTML = c;
            }
            e++;
        }
    }
} }
function ponyBuildPonys() { $("pony3_slottimer_time").innerHTML = ""; var n = 0; var h = 0; var b = { "1": 0, "2": 0, "3": 0 }; for (i = 1; i <= 3; i++) {
    var c = pony_data.ponys[i];
    if ($("pony" + i + "_timer")) {
        $("pony" + i + "_timer").innerHTML = "";
    }
    if ($("pony" + i)) {
        if (pony_sel_pony == c.animalid) {
            $("pony" + i).addClassName("pony" + i + "_over");
        }
        else {
            $("pony" + i).removeClassName("pony" + i + "_over");
        }
        $("pony" + i).onclick = new Function("ponySelectPony(" + c.animalid + ")");
        hideDiv("pony" + i + "_timer");
        hideDiv("pony" + i + "_slottimer");
        hideDiv("pony" + i + "_speedup");
        hideDiv("pony" + i + "_crop");
        hideDiv("pony" + i + "_buy");
        hideDiv("pony" + i + "_rent");
        hideDiv("pony" + i + "_block");
        showDiv("pony" + i + "_feed");
        hideDiv("pony" + i + "_plate");
        hideDiv("pony" + i + "_reward");
        $("pony" + i + "_feed").onclick = new Function("");
        if (c.data && c.data.feed) {
            if (c.data.feed == 0) {
                var m = 0;
            }
            else {
                var e = (147 / 100);
                var l = ((c.data.feed * 100) / 8);
                var m = (l * e);
            }
            $("pony" + i + "_feed_inner").style.height = m + "px";
        }
        if (!c.block) {
            $("pony" + i + "_feed").onclick = new Function("ponyDialog('feed', " + i + ")");
        }
        if (c.data) {
            $("pony" + i + "_feed_inner_tt").innerHTML = t_pony_energy + "&nbsp;" + c.data.feed + "/8";
            if (c.data.farmi) {
                $("pony" + i).onclick = new Function("");
                $("pony" + i + "_feed").onclick = new Function("");
                var a = c.data.farmi;
                $("pony" + i + "_ride").className = "";
                if (pony_data.farmis[a] && pony_data.farmis[a].data) {
                    var d = "";
                    d += "<div>" + formatPrice(pony_data.farmis[a].data.money) + "</div>";
                    d += "<div>" + formatNumber(pony_data.farmis[a].data.points) + "&nbsp;" + t_points + "</div>";
                    d += '<div style="font-weight:bold;" id="pony' + i + '_timer"></div>';
                    $("pony" + i + "_farmi").innerHTML = d;
                    showDiv("pony" + i + "_plate");
                    if (pony_data.farmis[a].data.remain > 0) {
                        h++;
                        if (!gametimer.ponytimer) {
                            gametimer.ponytimer = {};
                        }
                        gametimer.ponytimer[i] = 1;
                        if (!pony_data.farmis[a].data.speedup || (pony_data.farmis[a].data.speedup && pony_data.farmis[a].data.speedup < pony_data.farmis[a].data.maxspeedup)) {
                            showDiv("pony" + i + "_speedup");
                            $("pony" + i + "_speedup").onclick = new Function("ponyDialog('speedup', " + i + ")");
                        }
                        $("pony" + i + "_ride").addClassName("pony_ride pony" + pony_data.farmis[a].type + "_ride");
                        if (!b[i]) {
                            $("pony" + i + "_feed_inner_tt").innerHTML += '<div class="bonusinfo important">' + t_pony_feed_farmi_waiting2 + "</div>";
                            b[i]++;
                        }
                    }
                    else {
                        n++;
                        hideDiv("pony" + i + "_timer");
                        showDiv("pony" + i + "_crop");
                        if (i == 3 && c.block) {
                            $("pony" + i + "_crop_tt").innerHTML += '<div class="bonusinfo important">' + t_pony_get_reward_info + "</div>";
                        }
                        if (!c.block) {
                            $("pony" + i + "_crop").onclick = new Function("farmAction('pony_crop'," + farm + "," + pony_position + ", " + i + ")");
                        }
                        $("pony" + i + "_ride").addClassName("pony_rideoff pony" + pony_data.farmis[a].type + "_rideoff");
                        if (!b[i]) {
                            $("pony" + i + "_feed_inner_tt").innerHTML += '<div class="bonusinfo important">' + t_pony_feed_farmi_waiting + "</div>";
                            b[i]++;
                        }
                    }
                }
            }
            if (c.data.remain) {
                if (c.data.remain > 0) {
                    showDiv("pony3_slottimer");
                    if (!gametimer.ponyslottimer) {
                        gametimer.ponyslottimer = 1;
                    }
                }
            }
        }
        if (c.block == 1) {
            if (c.cost && c.cost.money) {
                showDiv("pony" + i + "_buy");
                $("pony" + i + "_buy").onclick = new Function("ponyDialog('buy', " + i + ")");
                if (!b[i]) {
                    $("pony" + i + "_feed_inner_tt").innerHTML += '<div class="bonusinfo important">' + t_pony_feed_buy + "</div>";
                    b[i]++;
                }
            }
            if (c.cost && c.cost.coins) {
                hideDiv("pony3_speedup");
                showDiv("pony" + i + "_rent");
                $("pony" + i + "_rent").onclick = new Function("ponyDialog('buy', " + i + ")");
                if (!b[i]) {
                    $("pony" + i + "_feed_inner_tt").innerHTML += '<div class="bonusinfo important">' + t_pony_feed_buy + "</div>";
                    b[i]++;
                }
            }
            if (currentuserlevel < c.cost.level && i > 1) {
                $("pony" + i + "_block_tt").innerHTML = str_replace("%LEVEL%", c.cost.level, noupdate_lowlevel);
                if (c.cost && c.cost.money) {
                    hideDiv("pony" + i + "_buy");
                }
                if (c.cost && c.cost.coins) {
                    hideDiv("pony" + i + "_rent");
                }
                showDiv("pony" + i + "_block");
            }
        }
        if (!b[i]) {
            $("pony" + i + "_feed_inner_tt").innerHTML += '<div class="bonusinfo">' + t_pony_feed_info_tt + "</div>";
        }
        if ((c.block) || (c.data && c.data.farmi && pony_data.farmis[c.data.farmi] && pony_data.farmis[c.data.farmi].data.remain)) { }
        else {
            $("pony" + i).addClassName("pony" + i);
        }
    }
} hideDiv("farm_pony_waiting_" + pony_position); hideDiv("farm_pony_running_" + pony_position); if (n > 0) {
    showDiv("farm_pony_waiting_" + pony_position);
}
else {
    if (h > 0) {
        showDiv("farm_pony_running_" + pony_position);
    }
} }
function ponyTimer() { var m = 0; var b = 0; if (gametimer.ponytimer) {
    for (var d in gametimer.ponytimer) {
        var l = pony_data.ponys[d].data.farmi;
        pony_data.farmis[l].data.remain--;
        var h = pony_data.farmis[l].data.remain;
        if ($("pony" + d + "_timer")) {
            if (h < 0) {
                m++;
                delete gametimer.ponytimer[d];
                hideDiv("pony" + d + "_timer");
                ponyBuildPonys();
            }
            else {
                if ($("pony_speedup_resttime") && $("globalbox").style.display == "block" && pony_speedup_select == d) {
                    if (pony_speedup_reduce > 0 && pony_speedup_select == d) {
                        var e = (h - pony_speedup_reduce);
                        if (e < 0) {
                            e = 0;
                        }
                    }
                    else {
                        e = h;
                    }
                    var c = Math.ceil(h / pony_speedup_time);
                    if (c < 0) {
                        c = 0;
                    }
                    var a = pony_data.ponys[d];
                    if ($("pony_speedup_counter").innerHTML > c) {
                        $("pony_speedup_counter").innerHTML = c;
                        pony_data.farmis[a.data.farmi].data.maxspeedup = c;
                        calcPonySpeedup(d);
                    }
                    $("pony_speedup_resttime").innerHTML = formatTime(e);
                }
                $("pony" + d + "_timer").innerHTML = formatTime(h);
                showDiv("pony" + d + "_timer");
                b++;
            }
        }
    }
} if (gametimer.ponyslottimer) {
    pony_data.ponys[3].data.remain--;
    var h = pony_data.ponys[3].data.remain;
    if (h < 0) {
        delete gametimer.ponyslottimer;
        pony_data.ponys[3].block = 1;
        ponyBuildPonys();
    }
    else {
        if ($("pony3_slottimer")) {
            $("pony3_slottimer_time").innerHTML = formatTime(h);
        }
    }
} }
function ponyDialog(h, b, q) { var r = 0; var c = 0; var m = ""; var l = ""; if (b) {
    var d = pony_data.ponys[b];
    var a = 0;
    if (d.data && d.data.farmi) {
        a = d.data.farmi;
    }
} if (h == "speedup") {
    pony_speedup_select = b;
    var m = t_pony_speedup_dialog_speedup_head;
    var n = checkRackItem(d.speedup_feed, farm);
    if (n) {
        l += '<div style="margin-bottom:4px;">' + t_pony_speedup_dialog_speedup + "</div>";
        l += '<div id="pony_speedup_counter" style="margin-bottom:4px; height:25px; margin:0 auto; font-weight:bold; width:' + (pony_data.farmis[d.data.farmi].data.maxspeedup * 22) + 'px;"></div>';
        l += '<div style="background-color:#C3A75E; padding:5px; border-radius:5px; margin-bottom:4px;">';
        l += '  <input type="number" id="pony_speedup_amount" value="0" style="float:left; width:40px; font-weight:bold; padding:2px; border-radius:5px; border:1px solid #fff;" onchange="calcPonySpeedup(' + b + ')" onkeyup="calcPonySpeedup(' + b + ')">';
        l += '  <div style="float:left; margin:5px;">' + t_inner_stock + "&nbsp;" + n + "</div>";
        l += '  <button type="button" style="float:right;" class="button_new link" onclick="farmAction(\'pony_speedup\',' + farm + "," + pony_position + ", " + b + ')">' + t_inner_feedsubmit + "</button>";
        l += '  <div class="clear"></div>';
        l += "</div>";
        l += '<div style="margin-bottom:4px;">' + t_pony_speedup_dialog_speeduptime + '&nbsp;<span id="pony_speedup_time"></span></div>';
        l += '<div style="margin-bottom:4px;">' + t_pony_speedup_dialog_speedupresttime + '&nbsp;<span id="pony_speedup_resttime"></span></div>';
    }
    else {
        globalerrorbox(t_pony_speedup_info_popup);
        return false;
    }
} if (h == "feed") {
    var m = t_pony_feed;
    var e = checkRackItem(d.pid_feed, farm);
    if (d.data.feed >= 8) {
        globalerrorbox(t_pony_feed_stop_info_popup);
        return false;
    }
    else {
        if (!e) {
            globalerrorbox(t_pony_feed_info_popup);
            return false;
        }
        else {
            l += '<div style="margin-bottom:4px;">' + t_pony_feed_desc + "</div>";
            l += '<div style="background-color:#C3A75E; padding:5px; border-radius:5px; margin-bottom:4px;">';
            l += '  <input type="number" id="pony_feed_amount" style="width:40px; float:left; font-weight:bold; padding:2px; border-radius:5px; border:1px solid #fff;" value="1" onchange="calcPonyFeed(' + b + ')" onkeyup="calcPonyFeed(' + b + ')">';
            l += '  <div style="float:left; margin:5px;">' + t_inner_stock + '&nbsp;<span id="pony_energy_stock"></span></div>';
            l += '  <button type="button" style="float:right;" class="button_new link" onclick="farmAction(\'pony_feed\',' + farm + "," + pony_position + ", " + b + ')">' + t_inner_feedsubmit + "</button>";
            l += '  <div class="clear"></div>';
            l += "</div>";
            l += "<div>" + t_pony_energy_current + '&nbsp;<span id="pony_energy_sum"></span>/8</div>';
        }
    }
} if (h == "buy") {
    var e = checkRackItem(d.pid_feed, farm);
    if (d.cost.money > 0) {
        m = t_pony_buy;
        l = "<div>" + str_replace("%MONEY%", formatPrice(d.cost.money), t_pony_buy_desc) + "</div>";
    }
    else {
        if (d.cost.coins > 0) {
            m = t_pony_rent;
            var l = str_replace("%COINS%", d.cost.coins, t_pony_rent_desc);
            l = str_replace("%TIME%", formatTime(d.cost.duration), l);
        }
    }
    var r = "farmAction('pony_buy'," + farm + "," + pony_position + ", " + b + ")";
    if (!q && d.cost.coins > 0 && !e) {
        l += '<div style="margin-top:10px;">' + t_pony_not_enough_feed + "</div>";
    }
}
else {
    if (h == "setfarmi") {
        var m = t_pony_speedup_dialog_setfarmihead;
        var l = t_pony_speedup_dialog_setfarmibody;
        var r = "farmAction('pony_setfarmi'," + farm + "," + pony_position + ")";
        c = "hideDiv('globaltransp'); hideDiv('globalbox');";
    }
} globalcommitbox(m, l, r, c); if (h == "speedup") {
    calcPonySpeedup(b);
} if (h == "feed") {
    calcPonyFeed(b, 1);
} }
function calcPonyFeed(m, h) { var b = pony_data.ponys[m]; var e = checkRackItem(b.pid_feed, farm); var c = $("pony_feed_amount").value; c = parseInt(c); if (c < 1) {
    c = 1;
} if (c != "" && isNaN(c)) {
    c = 1;
} if (c > e) {
    c = e;
} var d = (8 - b.data.feed); var a = (d / 1); if (c > a) {
    c = a;
} var l = 0; if (e) {
    l = e;
} $("pony_energy_stock").innerHTML = l; if (h == 1) {
    if (l > a) {
        c = a;
    }
    else {
        c = l;
    }
    $("pony_feed_amount").value = c;
}
else {
    $("pony_feed_amount").value = c;
} $("pony_energy_sum").innerHTML = b.data.feed; }
function calcPonySpeedup(h) { if ($("pony_speedup_amount")) {
    var a = pony_data.ponys[h];
    var e = 0;
    if (pony_data.farmis[a.data.farmi].data.speedup) {
        e = pony_data.farmis[a.data.farmi].data.speedup;
    }
    var b = $("pony_speedup_amount").value;
    b = parseInt(b);
    if (b < 1) {
        b = 0;
    }
    if (b != "" && isNaN(b)) {
        b = 0;
    }
    var d = checkRackItem(a.speedup_feed, farm);
    if (b > d) {
        b = d;
    }
    var c = (pony_data.farmis[a.data.farmi].data.maxspeedup - e);
    if (b > c) {
        b = c;
    }
    if (c < 0) {
        c = 0;
    }
    if (b < 0) {
        b = 0;
    }
    $("pony_speedup_amount").value = b;
    pony_speedup_reduce = (b * pony_speedup_time);
    $("pony_speedup_time").innerHTML = formatTime(pony_speedup_reduce);
    $("pony_speedup_counter").innerHTML = c;
} }
function ponySelectPony(c) { if (!pony_sel_farmi) {
    return false;
} if (c == pony_sel_pony) {
    pony_sel_pony = 0;
}
else {
    pony_sel_pony = c;
} ponyBuild(); if (pony_sel_pony) {
    var b = 0;
    for (var a in pony_data.farmis) {
        if (pony_data.farmis[a].id == pony_sel_farmi) {
            b = pony_data.farmis[a].data.energy;
        }
    }
    for (var a = 1; a <= 3; a++) {
        if (pony_data.ponys[a].animalid == pony_sel_pony) {
            if (pony_data.ponys[a].data.feed >= b) {
                ponyDialog("setfarmi");
            }
            else {
                globalerrorbox(t_pony_needs_feed);
            }
        }
    }
} }
function ponySelectFarmi(a) { if (a == pony_sel_farmi) {
    pony_sel_farmi = 0;
    pony_sel_farmi_pos = 0;
    ponyPreview(0);
}
else {
    pony_sel_farmi = a;
} pony_sel_pony = 0; ponyBuild(); }
var fuelstation_stats_select = "points";
var fuelstation_stats_cache = {};
var fuelstation_stats_cache_delay = 60;
function openFuelstationHelp() { showDiv("fuelstation_help_transp"); showDiv("fuelstation_help"); setFuelstationHelp(1); }
function closeFuelstationHelp() { hideDiv("fuelstation_help_transp"); hideDiv("fuelstation_help"); }
function setFuelstationHelp(a) { $("fuelstation_help_navi_item1").removeClassName("white_tab_active"); $("fuelstation_help_navi_item2").removeClassName("white_tab_active"); hideDiv("fuelstation_help_inner1"); hideDiv("fuelstation_help_inner2"); $("fuelstation_help_navi_item" + a).addClassName("white_tab_active"); showDiv("fuelstation_help_inner" + a); }
function fuelstationStats() { if ($("fuelstation_stats_select")) {
    fuelstation_stats_select = $("fuelstation_stats_select").value;
} if (fuelstation_stats_cache_delay[fuelstation_stats_select] <= 0 || !fuelstation_stats_cache[fuelstation_stats_select]) {
    farmAction("fuelstation_stats", 1, 1, fuelstation_stats_select);
}
else {
    dialogFuelstation("stats");
} }
function buildFuelstation(a) { ignoreBuildingElements(); var e = farms_data.farms[farm][a]; var c = ""; c += '<div style="position:absolute; top:0px; left:0px; width:100%; height:75px; background:url(' + imgpath + 'wood_tile.jpg);"></div>'; c += htmlLevelBar("fuelstation", 0, 1); c += htmlCountBar("fuelstation"); c += '<div id="fuelstation_slots">'; for (var b = 1; b <= 4; b++) {
    c += '<div id="fuelstation_slot' + b + '" class="fuelstation_slot production_slot">';
    c += htmlLevelBar("fuelstation", b);
    c += '  <div class="fuelstation_slot_back">';
    c += '    <div id="fuelstation_slot' + b + '_fill" class="fuelstation_slot_fill"></div>';
    c += '    <div id="fuelstation_slot' + b + '_block" class="fuelstation_slot_block"></div>';
    c += "  </div>";
    c += '  <div id="fuelstation_slot' + b + '_fill_text" class="fuelstation_slot_fill_text"></div>';
    c += '  <div id="fuelstation_slot' + b + '_click" class="fuelstation_slot_click link"></div>';
    c += '  <div id="fuelstation_slot' + b + '_speedup" class="speedupgardenbutton fuelstation_slot_speedup link" onclick="globalSpeedupBox(\'fuelstation_speedup\', ' + a + ", " + b + ');"></div>';
    c += '  <div id="fuelstation_slot' + b + '_timer" style="left:-7px; top:133px;" class="fuelstation_slot_timer vet_production_slot_rent_timer"></div>';
    c += "</div>";
} c += "</div>"; c += '<div id="fuelstation_stats_button" class="link" onclick="fuelstationStats()"></div>'; c += '<div id="fuelstation_help_button" class="helpbutton_blue link" onclick="openFuelstationHelp()"></div>'; c += '<div class="big_close link" onclick="closeBuildingInner()"></div>'; c += '<div id="fuelstation_help_transp" class="transp"></div>'; c += '<div id="fuelstation_help">'; c += '  <div id="fuelstation_help_navi">'; c += '    <div id="fuelstation_help_navi_item1" class="white_tab fuelstation_help_navi_item link" onclick="setFuelstationHelp(1)"><div class="fuel_barrel_mini" style="margin:0 auto;"></div></div>'; c += '    <div id="fuelstation_help_navi_item2" class="white_tab fuelstation_help_navi_item link" onclick="setFuelstationHelp(2)"><div class="littlestar" style="margin:0 auto;"></div></div>'; c += '    <div class="clear"></div>'; c += "  </div>"; c += '  <div id="fuelstation_help_inner">'; c += '    <div id="fuelstation_help_inner1">'; c += '      <div class="headline">' + t_fuelstation_guide_head + "</div>"; c += '      <div style="float:left; width:175px;">' + t_fuelstation_guide_body1 + '<br><img src="' + imgpath + 'fuelstation_help1.png"></div>'; c += '      <div style="float:left; width:175px;">' + t_fuelstation_guide_body2 + '<br><img src="' + imgpath + 'fuelstation_help2.png"></div>'; c += '      <div class="clear"></div>'; c += '      <div style="float:left; width:175px; margin-top:10px;">' + t_fuelstation_guide_body3 + '<br><img src="' + imgpath + 'fuelstation_help3.png"></div>'; c += '      <div class="clear"></div>'; c += '      <div style="margin-top:10px;">' + t_fuelstation_guide_body4 + "</div>"; c += '      <div style="margin-top:10px;">' + t_fuelstation_guide_body5 + "</div>"; c += '      <div style="margin-top:10px;">' + t_fuelstation_guide_body6 + "</div>"; c += '      <div style="margin-top:10px; border-top:1px solid #000; padding-top:10px;">' + t_fuelstation_guide_body7 + "</div>"; c += "    </div>"; c += '    <div id="fuelstation_help_inner2" style="margin-top:5px;">'; c += '      <div class="headline">' + t_farmersmarket_rewards + "</div>"; c += '      <div style="margin-bottom:10px;">' + t_farmersmarket_rewards_intro + "</div>"; for (var b in e.data.constants.achievements) {
    var d = "";
    if (e.data.constants.achievements[b].production_count) {
        d = str_replace("%AMOUNT%", formatNumber(e.data.constants.achievements[b].production_count), t_fuel_achievement_produce);
    }
    if (e.data.constants.achievements[b].vet_points) {
        d = str_replace("%AMOUNT%", formatNumber(e.data.constants.achievements[b].vet_points), t_fuel_achievement_fuel);
    }
    if (e.data.constants.achievements[b].slot_level) {
        d = t_fuel_achievement_slot;
    }
    if (e.data.constants.achievements[b].level) {
        d = t_fuel_achievement_level;
    }
    c += '<div style="position:relative; float:left; width:170px; margin-right:10px; margin-bottom:10px;">';
    c += '  <div style="position:relative; float:left; width:50px;">';
    c += '    <img style="width:100%;" src="' + imgpath + "gifts/" + e.data.constants.achievements[b].giftid + '.gif">';
    if (e.data.constants.achievements[b].solved) {
        c += '<div class="megafield_product_ready" style="width:70px; height:69px; position:absolute; top:-5px; left:0px; display:block;"></div>';
    }
    c += "  </div>";
    c += '  <div style="float:left; margin:5px 0 0 10px; width:110px;">' + d + "</div>";
    c += '  <div class="clear"></div>';
    c += "</div>";
} c += "    </div>"; c += "  </div>"; c += '  <div class="mini_close link" onclick="closeFuelstationHelp()" style="top:10px; right:10px;"></div>'; c += "</div>"; c += '<div id="fuelstation_stats">'; c += '  <div id="fuelstation_stats_inner"></div>'; c += "</div>"; $("innercontent").innerHTML = c; $("innermaincontainer").className = "inner_back inner_back20"; $("fuelstation_countbar_plus").onclick = new Function("dialogFuelstation('buy', " + a + ")"); $("fuelstation_countbar_inner").innerHTML = '<div class="biofuelcoin" style="float:left; margin-right:5px; margin-top:-3px;"></div><div style="float:left;"></div>'; $("fuelstation_countbar_plus_tt").innerHTML = t_fuelstation_buy_collectitem; updateFuelstation(); }
function updateFuelstationLevel(e, r) { var q = farms_data.farms[farm][e]; if ($("fuelstation_levelbar_number")) {
    $("fuelstation_levelbar_number").innerHTML = q.data.data.level;
    var h = (q.data.data.fuel_alltime - q.data.data.level_current);
    var d = (q.data.data.level_next - q.data.data.level_current);
    var m = Math.floor((h * 100) / d);
    if (m > 100) {
        m = 100;
    }
    if (!q.data.data.level_next) {
        var l = t_reached_maxlevel;
        m = 100;
    }
    else {
        var n = (q.data.data.level_next - q.data.data.fuel_alltime);
        var l = str_replace("%POINTS%", formatNumber(n), t_fuelstation_level_pointsleft) + '<div class="bonusinfo">' + t_fuelstation_bonus_buy_goodie + "</div>";
    }
    $("fuelstation_levelbar_inner").style.width = m + "%";
    $("fuelstation_levelbar_tt").innerHTML = l;
} if ($("fuelstation_slot" + r)) {
    $("fuelstation_" + r + "_levelbar_number").innerHTML = q.data.data.slots[r].level;
    if (q.data.data.slots[r].level_points_next) {
        var h = (q.data.data.slots[r].count - q.data.data.slots[r].level_points);
        var d = (q.data.data.slots[r].level_points_next - q.data.data.slots[r].level_points);
        var m = Math.floor((h * 100) / d);
        if (m > 100) {
            m = 100;
        }
        $("fuelstation_" + r + "_levelbar_inner").style.width = m + "%";
        var n = (q.data.data.slots[r].level_points_next - q.data.data.slots[r].count);
        if (n <= 0) {
            $("fuelstation_" + r + "_levelbar").onmouseover = new Function("");
            $("fuelstation_" + r + "_levelbar").onmouseout = new Function("");
            hideDiv("fuelstation_" + r + "_levelbar_plus");
        }
        else {
            $("fuelstation_" + r + "_levelbar_tt").innerHTML = str_replace("%POINTS%", formatNumber(n), t_fuelstation_slot_pointsleft);
        }
    }
    else {
        $("fuelstation_" + r + "_levelbar_inner").style.width = "100%";
    }
    $("fuelstation_" + r + "_levelbar_plus").onclick = new Function("dialogFuelstation('add_level', " + e + ", " + r + ")");
    $("fuelstation_" + r + "_levelbar_plus_tt").innerHTML = t_fuelstation_slot_levelit;
} }
function fuelstationTimer() { for (var a in farms_data.farms[farm]) {
    if (farms_data.farms[farm][a].buildingid == 20) {
        var c = farms_data.farms[farm][a];
        for (var b = 1; b <= 4; b++) {
            if (c.data.data.slots && c.data.data.slots[b]) {
                if (c.data.constants.slots[b].duration && c.data.data.slots[b].remain > 0) {
                    c.data.data.slots[b].remain--;
                }
            }
        }
        break;
    }
} updateFuelstation(); }
function updateFuelstation() { for (var l in farms_data.farms[farm]) {
    if (farms_data.farms[farm][l].buildingid == 20) {
        var e = farms_data.farms[farm][l];
        for (var s = 1; s <= 4; s++) {
            var v = "dialogFuelstation('product_select', " + l + ", " + s + ")";
            var r = 0;
            var t = "";
            var q = 0;
            hideDiv("fuelstation_slot" + s + "_block");
            hideDiv("fuelstation_slot" + s + "_speedup");
            if (e.data.data.slots && e.data.data.slots[s]) {
                var b = "";
                b += '<div style="float:left; margin-right:5px; margin-top:5px;">' + croptext + "</div>";
                b += '<div style="float:left; margin-right:0px;" class="fuel_barrel_mini"></div>';
                b += '<div style="float:left; margin-top:5px;">' + e.data.constants.slot_level[e.data.data.slots[s].level].output + "</div>";
                b += '<div style="float:left; margin-left:5px; margin-right:0px;" class="biofuelcoin"></div>';
                b += '<div style="float:left; margin-top:5px;">' + e.data.constants.slot_level[e.data.data.slots[s].level].fuel_points + "</div>";
                b += '<div class="clear"></div>';
                var a = '<div style="margin-top:2px;">' + productionduration + " " + formatTime(e.data.constants.slot_level[e.data.data.slots[s].level].duration) + "</div>";
                fuel_fillage = e.data.constants.slot_level[e.data.data.slots[s].level].limit;
                if (e.data.data.slots[s].entries) {
                    for (var h in e.data.data.slots[s].entries) {
                        if (isNumeric(h) && e.data.data.slots[s].products[h]) {
                            q += (e.data.data.slots[s].products[h].points * e.data.data.slots[s].entries[h]);
                        }
                    }
                    t = "<div>" + t_fuelstation_fillage + ':</div><div class="littlestar" style="float:left; background-size:20px 20px; width:20px; height:20px;"></div><div style="float:left; margin-top:3px;">' + q + "/" + fuel_fillage + '</div><div class="clear"></div>' + a + b + '<div style="margin-top:5px;">' + t_xmasgame_button_entry + "</div>";
                    r = ((q * 100) / fuel_fillage);
                }
                else {
                    t = "<div>" + t_fuelstation_fillage + ':</div><div class="littlestar" style="float:left; background-size:20px 20px; width:20px; height:20px;"></div><div style="float:left; margin-top:3px;">' + 0 + "/" + fuel_fillage + '</div><div class="clear"></div>' + a + b + '<div style="margin-top:5px;">' + t_xmasgame_button_entry + "</div>";
                    r = 0;
                }
                if (e.data.constants.slots[s].duration) {
                    if (e.data.data.slots[s].remain > 0) {
                        if ($("fuelstation_slot" + s + "_timer")) {
                            $("fuelstation_slot" + s + "_timer").innerHTML = formatTime(e.data.data.slots[s].remain);
                            showDiv("fuelstation_slot" + s + "_timer");
                        }
                    }
                    else {
                        if ($("fuelstation_slot" + s + "_timer")) {
                            hideDiv("fuelstation_slot" + s + "_timer");
                        }
                        e.data.data.slots[s].block = 1;
                    }
                }
                if (e.data.data.production && e.data.data.production[s]) {
                    r = 100;
                    var n = 0;
                    for (var c = 0; c < farms_data.farms[farm][l].production.length; c++) {
                        if (farms_data.farms[farm][l].production[c].slot == s) {
                            n = farms_data.farms[farm][l].production[c].remain;
                        }
                    }
                    if (n > 0) {
                        t = "<div>" + t_building_time + "<br>" + formatTime(n) + "</div>" + b;
                        v = "";
                        showDiv("fuelstation_slot" + s + "_speedup");
                    }
                    else {
                        t = "<div>" + t_building_time + "<br>" + statusProductionComplete + "<br>" + b + "</div><div>" + click4products + "</div>";
                        v = "farmAction('fuelstation_harvest', " + farm + ", " + l + ", " + s + ")";
                    }
                }
                if ($("fuelstation_slots") && e.data.data.slots[s].block) {
                    showDiv("fuelstation_slot" + s + "_block");
                    if (e.data.data.slots[s].level) {
                        t = "<div>" + str_replace("%LEVEL%", e.data.data.slots[s].level, error1005) + "</div>";
                        v = "";
                    }
                    if (e.data.data.slots[s].money && !e.data.data.slots[s].buytime) {
                        t = "<div>" + str_replace("%MONEY%", formatPrice(e.data.data.slots[s].money), t_buy_slot) + "</div>";
                        v = "dialogFuelstation('buyslot', " + l + ", " + s + ")";
                    }
                    if (e.data.data.slots[s].coins) {
                        if (e.data.data.slots[s].duration) {
                            t = "<div>" + str_replace("%COINS%", e.data.data.slots[s].coins + "&nbsp;" + t_coins, t_rent_slot) + "</div>";
                            t = "<div>" + str_replace("%TIME%", formatTime(e.data.data.slots[s].duration), t) + "</div>";
                        }
                        else {
                            t = "<div>" + str_replace("%MONEY%", e.data.data.slots[s].coins + "&nbsp;" + t_coins, t_buy_slot) + "</div>";
                        }
                        v = "dialogFuelstation('buyslot', " + l + ", " + s + ")";
                    }
                    if (e.data.data.slots[s].fuel) {
                        var u = "";
                        if (e.data.data.slots[s].fuel <= e.data.data.count) {
                            v = "dialogFuelstation('buyslot', " + l + ", " + s + ")";
                        }
                        else {
                            var d = (e.data.data.slots[s].fuel - e.data.data.count);
                            if (isNaN(d)) {
                                d = 0;
                            }
                            u = '<div style="margin-top:10px;" class="important">' + str_replace("%AMOUNT%", d, t_fuelstation_need_more) + "</div>";
                            v = "";
                        }
                        t = "<div>" + str_replace("%MONEY%", e.data.data.slots[s].fuel + "&nbsp;" + t_fuelstation_currency, t_buy_slot) + "</div>";
                        t += u;
                    }
                }
            }
            if ($("fuelstation_slots")) {
                $("fuelstation_countbar_inner").innerHTML = '<div class="biofuelcoin" style="float:left; margin-right:5px; margin-top:-8px;"></div><div style="float:left;">' + formatNumber(e.data.data.count) + '</div><div class="clear"></div>';
                $("fuelstation_slot" + s + "_fill_text").innerHTML = t;
                $("fuelstation_slot" + s + "_fill").style.height = r + "px";
                $("fuelstation_slot" + s + "_click").onclick = new Function(v);
            }
            hideDiv("fuelstation_" + s + "_levelbar");
            if (!e.data.data.slots[s].block) {
                showDiv("fuelstation_" + s + "_levelbar");
                updateFuelstationLevel(l, s);
            }
        }
        break;
    }
} }
function fuelstationCheckLevelAdd(a, d) { if (a > 0 && d > 0) {
    var c = farms_data.farms[farm][a];
    var b = $("fuelstation_dialog_leveladd_insert").value;
    b = parseInt(b);
    if (isNaN(b)) {
        b = 0;
    }
    if (b > farms_data.farms[farm][a].data.data.slots[d].points_left) {
        b = farms_data.farms[farm][a].data.data.slots[d].points_left;
    }
    if (b > c.data.data.count) {
        b = c.data.data.count;
    }
    $("fuelstation_dialog_leveladd_insert").value = b;
} }
var fuelstation_block = 0;
function dialogFuelstation(q, A, d, t, z) { if (q == "buyslot") {
    var a = farms_data.farms[farm][A];
    var e = "";
    if (a.data.constants.slots[d].fuel) {
        var l = str_replace("%MONEY%", a.data.constants.slots[d].fuel + "&nbsp;" + t_fuelstation_currency, slot_buy);
    }
    if (a.data.constants.slots[d].money) {
        var l = str_replace("%MONEY%", formatPrice(a.data.constants.slots[d].money), slot_buy);
    }
    if (a.data.data.slots[d].coins) {
        var l = str_replace("%MONEY%", a.data.constants.slots[d].coins + "&nbsp;" + t_coins, slot_buy);
        if (a.data.data.slots[d].duration) {
            var l = str_replace("%COINS%", a.data.constants.slots[d].coins + "&nbsp;" + t_coins, slot_rent);
            l = str_replace("%TIME%", formatTime(a.data.constants.slots[d].duration), l);
        }
    }
    var B = "farmAction('fuelstation_buyslot', " + farm + ", " + A + ", " + d + ")";
    globalcommitbox(e, l, B);
} if (q == "stats") {
    var m = '<div id="fuelstation_stats_inner">';
    m += '  <div id="fuelstation_stats_select_line">';
    m += '   <select id="fuelstation_stats_select" onchange="fuelstationStats()">';
    var c = ["points", "fuel"];
    for (var y = 0; y < c.length; y++) {
        var s = "";
        if (fuelstation_stats_select == c[y]) {
            s = "selected";
        }
        m += '<option value="' + c[y] + '" ' + s + ">" + t_fuelstation_stats[c[y]] + "</option>";
    }
    m += "   </select>";
    m += "  </div>";
    m += '  <div class="headline" style="margin-top:10px;">' + t_fuelstation_stats_headlines[fuelstation_stats_select] + "</div>";
    m += '  <div class="fuelstation_stats_ranking">';
    m += htmlStatsContent(fuelstation_stats_cache[fuelstation_stats_select]);
    m += "</div>";
    m += "<div class=\"mini_close link\" onclick=\"hideDiv('fuelstation_stats'); hideDiv('fuelstation_help_transp');\"></div>";
    $("fuelstation_stats").innerHTML = m;
    showDiv("fuelstation_help_transp");
    showDiv("fuelstation_stats");
} if (q == "add_level") {
    var e = t_fuelstation_level_plus_head;
    var l = htmlLevelAddDialog("fuelstation", A, d);
    globalcommitbox(e, l, B, 0, b);
} if (q == "buy" || q == "buy_confirm") {
    var a = farms_data.farms[farm][A];
    var b = 0;
    if (q == "buy_confirm") {
        if (!fuelstation_block) {
            fuelstation_block = 1;
        }
        else {
            return false;
        }
    }
    var e = t_fuelstation_buy_collectitem;
    var r = str_replace("%COINS%", a.data.data.exchangecoins, t_fuelstation_buy_collectitem_coins);
    r = str_replace("%AMOUNT%", a.data.data.exchangeamount, r);
    if (q == "buy") {
        var l = '<div id="megafruit_buy_button" class="link" onclick="dialogFuelstation(\'buy_confirm\', ' + A + ", " + d + ')">' + r + "</div>";
        var B = 0;
        b = 1;
        fuelstation_block = 0;
    }
    else {
        var l = str_replace("%AMOUNT%", a.data.data.exchangeamount, t_fuelstation_buy_collectitem_coins_confirm);
        l = str_replace("%COINS%", a.data.data.exchangecoins, l);
        var B = "farmAction('fuelstation_buy', " + farm + ", " + A + ")";
    }
    globalcommitbox(e, l, B, 0, b);
} if (q == "product_select") {
    if (!z) {
        z = "v";
    }
    var a = farms_data.farms[farm][A];
    var e = t_fuelstation_insert_head;
    var l = "";
    var u = ["v"];
    l += '<div id="fuelstation_product_select_inner">';
    l += '  <div id="fuelstation_product_select_tabs">';
    for (var y = 0; y < u.length; y++) {
        var n = "";
        if (y == 0) {
            n = "margin-left:10px;";
        }
        l += '<div class="brown_tab cmenue link" id="cmenue_' + u[y] + '" style="' + n + "\" onclick=\"dialogFuelstation('product_select', " + A + ", " + d + ", " + t + ", '" + u[y] + "')\"></div>";
    }
    l += '    <div class="clear"></div>';
    l += "  </div>";
    l += '  <div class="fuelstation_product_select brown_tab_content">';
    for (var t in a.data.data.slots[d].products) {
        var w = 1;
        if (produkt_category[t] != z) {
            w = 0;
        }
        if (t > 0 && w == 1) {
            var h = checkRackItem(t);
            if (a.data.data.slots[d].products[t].points > 0) {
                var v = "";
                var n = "opacity:0.5;";
                if (h > 0) {
                    v = "dialogFuelstation('product_select_pid', " + A + ", " + d + ", " + t + ")";
                    n = "";
                }
                l += '<div class="fuelstation_product_select_item link" style="' + n + '" onclick="' + v + '" onmouseover="showDiv(\'fuelstation_product_select_item' + t + "_tt')\" onmouseout=\"hideDiv('fuelstation_product_select_item" + t + "_tt')\">";
                l += '  <div class="fuelstation_product_select_item_points">' + formatNumber(a.data.data.slots[d].products[t].points) + "</div>";
                l += '  <div class="fuelstation_product_select_item_img">';
                l += '    <div class="tt' + t + '"></div>';
                l += "  </div>";
                l += '  <div class="fuelstation_product_select_item_amount">' + formatNumber(h) + "</div>";
                l += '  <div id="fuelstation_product_select_item' + t + '_tt" class="ttbox fuelstation_product_select_item_tt">' + produkt_name[t] + "</div>";
                l += "</div>";
            }
        }
    }
    l += "  </div>";
    l += "</div>";
    globalBoxFlex(e, l, 0, 0, 1);
    $("cmenue_" + z).addClassName("brown_tab_active");
} if (q == "product_select_pid") {
    var a = farms_data.farms[farm][A];
    var e = t_fuelstation_insert_dialog;
    var l = "";
    l += '<div style="width:205px;">';
    l += '  <div class="fuelstation_product_select_item" style="margin-left:55px;">';
    l += '    <div class="fuelstation_product_select_item_points">' + formatNumber(a.data.data.slots[d].products[t].points) + "</div>";
    l += '    <div class="fuelstation_product_select_item_img">';
    l += '      <div class="tt' + t + '"></div>';
    l += "    </div>";
    l += '    <div class="fuelstation_product_select_item_amount">' + formatNumber(checkRackItem(t)) + "</div>";
    l += "  </div>";
    l += '  <div class="clear"></div>';
    l += '  <div class="dialog_input_line">';
    l += '    <input id="fuelstation_product_select_input" style="float:left; width:100px; margin-right:15px;" class="dialog_input" onkeyup="calcPointsFuelstation(' + A + ", " + d + ", " + t + ')" onchange="calcPointsFuelstation(' + A + ", " + d + ", " + t + ')">';
    l += '    <button style="float:right;" class="button_new link" onclick="farmAction(\'fuelstation_entry\', ' + farm + ", " + A + ", " + d + ", " + t + ')">' + t_inner_feedsubmit + "</button>";
    l += '    <div class="clear"></div>';
    l += "  </div>";
    l += '  <div style="margin-bottom:10px;">' + str_replace("%AMOUNT%", "<span id='fuelstation_product_select_points'></span>", t_fuelstation_insert_dialog_info1) + "</div>";
    l += "  <div>" + str_replace("%AMOUNT%", "<span id='fuelstation_product_select_left'></span>", t_fuelstation_insert_dialog_info2) + "</div>";
    l += "</div>";
    globalcommitbox(e, l, 0, 0, 1);
    calcPointsFuelstation(A, d, t);
} }
function calcPointsFuelstation(h, n, e) { var b = farms_data.farms[farm][h]; var d = $("fuelstation_product_select_input").value; if (d < 0) {
    return false;
} d = parseInt(d); if (isNaN(d)) {
    d = 0;
} var m = 0; if (b.data.data.slots && b.data.data.slots[n] && b.data.data.slots[n].entries) {
    for (var c in b.data.data.slots[n].entries) {
        if (isNumeric(c)) {
            m += (b.data.data.slots[n].products[c].points * b.data.data.slots[n].entries[c]);
        }
    }
} var l = parseInt(checkRackItem(e)); if (d > l) {
    d = l;
} var q = 0; if (d > 0) {
    q = (d * b.data.data.slots[n].products[e].points);
} var a = b.data.constants.slot_level[b.data.data.slots[n].level].limit; if (m > 0) {
    a -= m;
} if (q > a) {
    d = Math.ceil(a / b.data.data.slots[n].products[e].points);
    q = (b.data.data.slots[n].products[e].points * d);
} if (q > a) {
    q = a;
} $("fuelstation_product_select_input").value = d; $("fuelstation_product_select_points").innerHTML = formatNumber(q); $("fuelstation_product_select_left").innerHTML = formatNumber(a); }
function showFeedback(b, a) { $(b).innerHTML = a; showDiv(b); window.setTimeout("Effect.Fade($('" + b + "'),{duration:1,from:0.7,to:0})", 1000); }
var butterfly = function () { this.data = {}; this.shopPage = 1; this.stats_cache = {}; this.stats_cache_delay = {}; this.stats_select = "points"; this.butterflySort = 1; this.firstvisit = 0; };
butterfly.prototype.stats = function () { if ($("butterfly_stats_select")) {
    butterfly.stats_select = $("butterfly_stats_select").value;
} if (butterfly.stats_cache_delay[butterfly.stats_select] <= 0 || !butterfly.stats_cache[this.stats_select]) {
    butterfly.action("butterfly_stats", { type: butterfly.stats_select });
}
else {
    butterfly.showStats(butterfly.stats_select);
} };
butterfly.prototype.checkInvestment = function () { butterfly.action("butterfly_check_investments"); };
butterfly.prototype.deleteSlot = function (a) { butterfly.action("butterfly_delete", { slot: a }); };
butterfly.prototype.questEntry = function (a) { butterfly.action("butterfly_quest_entry", { pid: a, amount: parseInt($("dialog_entryline_number").value) }); };
butterfly.prototype.clickButterfly = function (a) { butterfly.action("butterfly_click", { id: a }); };
butterfly.prototype.clickAllButterfly = function (a) { butterfly.action("butterfly_click_all"); };
butterfly.prototype.finishCare = function (a) { butterfly.action("butterfly_finish_care", { slot: a }); };
butterfly.prototype.addLevel = function () { butterfly.action("butterfly_add_level", { amount: $("butterfly_dialog_leveladd_insert").value }); };
butterfly.prototype.buyAddLevel = function () { butterfly.action("butterfly_buy_add_level"); };
butterfly.prototype.buySlot = function (a) { butterfly.action("butterfly_buyslot", { slot: a }); };
butterfly.prototype.startBreed = function (b, a) { butterfly.action("butterfly_startbreed", { slot: b, id: a }); };
butterfly.prototype.careBreed = function (a) { butterfly.action("butterfly_carebreed", { slot: a }); };
butterfly.prototype.free = function (a) { butterfly.action("butterfly_free", { slot: a }); };
butterfly.prototype.shopBuy = function (b, a) { butterfly.action("butterfly_shopbuy", { slot: b, id: a }); };
butterfly.prototype.action = function (a, b) { ajaxAction("farm", a, b, butterfly.response); };
butterfly.prototype.response = function (c, b, d) { if (in_array(b, ["butterfly_quest_entry"])) {
    butterfly.showQuest();
} if (b == "butterfly_check_investments" && $("farmersmarket_pos7_inner").style.display != "block") {
    return 1;
} butterfly.init(); if (in_array(b, ["butterfly_click", "butterfly_click_all"]) && c.reward) {
    butterfly.move(2);
    butterfly.buildHouse();
} if (c.stats) {
    butterfly.stats_cache_delay[butterfly.stats_select] = 30;
    if (!butterfly.stats_cache[butterfly.stats_select]) {
        butterfly.stats_cache[butterfly.stats_select] = {};
    }
    butterfly.stats_cache[butterfly.stats_select] = c.stats;
    butterfly.showStats();
} if (c.reward && b == "butterfly_click_all") {
    var a = "<div>" + t_specialoffer_message + "</div>";
    if (c.reward.points) {
        a += '<div style="margin-top:10px;">' + c.reward.points + "&nbsp;" + t_points + "</div>";
    }
    a += '<div class="button_yes link" onclick="hideDiv(\'globalbox\'); hideDiv(\'globaltransp\');" style="position:relative; width:50px; height:50px; margin:0 auto; margin-top:10px;"></div>';
    globalcommitbox(t_vet_reward_head, a, 0, 0, 1);
} if (c.investment) {
    butterfly.showInvestment(c.investment);
} };
butterfly.prototype.init = function () { var a = '<div id="butterfly" class="pos1">'; a += '  <div class="slots">' + this.buildSlots() + "</div>"; a += '  <div id="butterfly_house" class="house">' + this.buildHouse() + "</div>"; a += '  <div id="butterfly_scroller" class="scroller right link" onclick="butterfly.move(1)"></div>'; a += '  <div id="butterfly_scroller" class="scroller left link" onclick="butterfly.move(-1)"></div>'; a += "</div>"; a += '<div class="mini_close link" onclick="butterfly.close()"></div>'; a += '<div class="help helpbutton_blue link" onclick="butterfly.help()"></div>'; a += htmlLevelBar("butterfly"); a += htmlCountBar("butterfly"); a += '<div id="butterfly_stats_link" class="link" onclick="butterfly.stats()"></div>'; a += '<div id="butterfly_quests_link" class="link" onclick="butterfly.showQuest()"></div>'; $("farmersmarket_pos7_inner").innerHTML = a; showDiv("transp"); showDiv("farmersmarket_pos7_inner"); $("butterfly_levelbar_number").innerHTML = this.data.data.level; $("butterfly_countbar_inner").innerHTML = '<div class="blossoms_icon"></div><div>' + this.data.data.count + "</div><br>"; $("butterfly_levelbar_inner").style.width = this.data.data.level_percent + "%"; if (!this.data.data.level_rest) {
    var b = t_reached_maxlevel;
    hideDiv("butterfly_levelbar_plus");
}
else {
    var b = str_replace("%AMOUNT%", this.data.data.level_rest, t_butterfly_level_line);
    $("butterfly_levelbar_plus").onclick = new Function("butterfly.addLevelCommit()");
    $("butterfly_levelbar_plus_tt").innerHTML = t_butterfly_leveladd_tt;
} $("butterfly_levelbar_tt").innerHTML = b; $("butterfly_countbar_plus_tt").innerHTML = t_butterfly_levelitem_buy; $("butterfly_countbar_plus").onclick = new Function("butterfly.buyAddLevelCommit()"); this.timerUpdate(); if (this.data.visit && this.data.visit == 1 && !this.firstvisit) {
    butterfly.help();
    this.firstvisit = 1;
} };
butterfly.prototype.showInvestment = function (b) { var a = "<div>" + t_butterfly_investment + "</div>"; if (b.money) {
    a += '<div style="margin-top:10px;">' + formatPrice(b.money) + "</div>";
} a += '<div class="button_yes link" onclick="hideDiv(\'globalbox\'); hideDiv(\'globaltransp\');" style="position:relative; width:50px; height:50px; margin:0 auto; margin-top:10px;"></div>'; globalcommitbox(t_vet_reward_head, a, 0, 0, 1); };
butterfly.prototype.addLevelCommit = function () { var b = t_butterfly_dialog_leveladd_head; var a = htmlLevelAddDialog("butterfly"); globalcommitbox(b, a, 0, 0, 1); };
butterfly.prototype.addLevelCheck = function () { var a = $("butterfly_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > butterfly.data.data.count) {
    a = butterfly.data.data.count;
} $("butterfly_dialog_leveladd_insert").value = a; };
butterfly.prototype.buyAddLevelCommit = function (c) { var d = t_butterfly_levelitem_buy; var b = str_replace("%COINS%", butterfly.data.data.exchangecoins, t_butterfly_levelitem_buy_dialog); b = str_replace("%AMOUNT%", (butterfly.data.data.exchangeamount), b); if (!c) {
    var a = '<div class="link coinsbutton_flex" onclick="butterfly.buyAddLevelCommit(1)">' + b + "</div>";
    globalcommitbox(d, a, 0, 0, 1);
}
else {
    var a = b;
    var e = "butterfly.buyAddLevel()";
    globalcommitbox(d, a, e);
} };
butterfly.prototype.move = function (a) { if ($("butterfly").hasClassName("pos2")) {
    $("butterfly").className = "pos1";
}
else {
    $("butterfly").className = "pos2";
} };
butterfly.prototype.buildSlots = function () { var s = ""; for (var e in this.data.config.slots) {
    var a = "";
    var C = "";
    var y = 0;
    if (e > 1 && (!this.data.data.slots || !this.data.data.slots[e])) {
        y = 1;
        var c = "unlocked";
        var r = "butterfly.buySlotCommit(" + e + ")";
        if (this.data.config.slots[e].money || this.data.config.slots[e].coins) {
            var u = "";
            if (this.data.config.slots[e].money) {
                var B = formatPrice(this.data.config.slots[e].money);
            }
            if (this.data.config.slots[e].coins) {
                var B = this.data.config.slots[e].coins + "&nbsp;" + t_coins;
            }
            if ((this.data.config.slots[e].money && this.data.config.slots[e].money > user_bar) || (this.data.config.slots[e].coins && this.data.config.slots[e].coins > user_coins)) {
                u = "important";
                c = "locked";
                r = "";
            }
            a += '<div class="' + u + '">' + cityadcost + B + "</div>";
        }
        if (this.data.config.slots[e].questid && this.data.config.slots[e].questid > this.data.data.last_questid) {
            c = "locked";
            r = "";
            a += '<div class="important">' + t_butterfly_quest_block.replace("%QUEST%", this.data.config.slots[e].questid) + "</div>";
        }
    }
    if (this.data.data.breed[e]) {
        var h = this.data.data.breed[e].butterfly;
        var n = 0;
        if (this.data.data.breed[e] && this.data.data.breed[e].care) {
            n = this.data.data.breed[e].count;
        }
        if (this.data.data.breed[e].breedend > 0) {
            C = "butterfly";
            breed_name = "butterfly" + h;
            var d = this.data.config.butterflies[h].products2;
        }
        else {
            if (!n) {
                C = "egg";
                breed_name = "egg" + this.data.config.butterflies[h].rarity;
                var d = this.data.config.butterflies[h].products1;
            }
            else {
                C = "caterpillar";
                breed_name = "caterpillar" + this.data.config.butterflies[h].rarity;
                var d = this.data.config.butterflies[h].products1;
            }
        }
        a += '<div class="name">' + this.data.config.butterflies[h].name + "</div>";
        a += '<div class="rarity">' + t_butterfly_rarity[this.data.config.butterflies[h].rarity] + "</div>";
        a += '<div class="head">' + t_pets_need_food + "</div>";
        var z = 0;
        for (var v in d) {
            var u = "";
            if (checkRackItem(v) < d[v]) {
                u = "important";
                z = 1;
            }
            a += '<div class="' + u + '">' + htmlProductBody(v, d[v]) + "</div>";
        }
        if (this.data.data.breed[e].breedend > 0) {
            var q = this.data.config.butterflies[h].reward;
            a += this.showReward(q, e);
        }
    }
    if (!this.data.data.breed[e] && !y) {
        a += "<div>" + t_butterfly_empty_slot + "</div>";
    }
    var b = "";
    if (e % 3 == 0) {
        b = "right";
    }
    s += '<div id="butterfly_slot' + e + '" class="slot">';
    var l = "plant plant" + getRandom(1, 2);
    var D = "top";
    if (this.data.data.breed[e] && this.data.data.breed[e].deco > 0) {
        l = "deco" + this.data.data.breed[e].deco + " type" + getRandom(1, 2);
    }
    if (e > 3) {
        D = "bottom";
    }
    s += '<div class="deco ' + l + " " + D + '"></div>';
    if (this.data.data.breed[e]) {
        if (this.data.data.breed[e].breedend == 0) {
            s += '<div id="butterfly_slot' + e + '_feed_progress" class="feed_progress off" onmouseover="butterfly.slotHover(' + e + ", 1); showDiv('butterfly_slot" + e + '_feed_progress_tt\')" onmouseout="butterfly.slotHover(' + e + ", 0); hideDiv('butterfly_slot" + e + "_feed_progress_tt')\">";
            var t = 0;
            for (var A = 1; A <= this.data.config.butterflies[h].care_count1; A++) {
                var u = "";
                if (A <= n) {
                    u = "filled";
                }
                else {
                    t++;
                }
                s += '<div class="inner ' + u + '"></div>';
            }
            s += '  <div id="butterfly_slot' + e + '_feed_progress_tt" class="ttbox">' + t_butterfly_time_to_wonderful.replace("%AMOUNT%", t) + "</div>";
            s += "</div>";
        }
        var l = "";
        if (this.data.data.breed[e].breedend > 0) {
            l = "solo";
        }
        s += '  <div id="butterfly_slot' + e + '_timer" class="timer off ' + l + '" onmouseover="butterfly.slotHover(' + e + ', 1)" onmouseout="butterfly.slotHover(' + e + ', 0)"></div>';
        var w = "medium";
        if (this.data.config.butterflies[h].size == 1) {
            w = "small";
        }
        if (this.data.config.butterflies[h].size == 3) {
            w = "big";
        }
        s += '  <div id="butterfly_slot' + e + '_type" class="' + C + " " + breed_name + " " + w + '" style="animation-duration:' + (getRandom(10, 15) / 10) + 's"></div>';
    }
    s += '<div id="butterfly_slot' + e + '_care_ready" class="care_ready"></div>';
    s += '  <div id="butterfly_slot' + e + '_buttons" class="buttons" onmouseover="butterfly.slotHover(' + e + ', 1)" onmouseout="butterfly.slotHover(' + e + ', 0)">';
    if (this.data.data.breed[e]) {
        s += '  <div id="butterfly_slot' + e + '_button_delete" class="mini_close link" onclick="butterfly.deleteSlotCommit(' + e + ')" onmouseover="showDiv(\'butterfly_slot' + e + "_delete_tt')\" onmouseout=\"hideDiv('butterfly_slot" + e + "_delete_tt')\">";
        s += '    <div id="butterfly_slot' + e + '_delete_tt" class="ttbox ' + b + '">' + t_butterfly_delete + "</div>";
        s += "  </div>";
        if (!z) {
            s += '<div id="butterfly_slot' + e + '_button_care" class="care clicker link" onclick="butterfly.careBreedCommit(' + e + ')" onmouseover="showDiv(\'butterfly_slot' + e + "_care_tt')\" onmouseout=\"hideDiv('butterfly_slot" + e + "_care_tt')\">";
            s += '  <div id="butterfly_slot' + e + '_care_tt" class="ttbox ' + b + '">' + t_butterfly_care + "</div>";
            s += "</div>";
        }
        if (this.data.data.breed[e].breedend > 0) {
            s += '<div class="free clicker link" onclick="butterfly.freeCommit(' + e + ')" onmouseover="showDiv(\'butterfly_slot' + e + "_free_tt')\" onmouseout=\"hideDiv('butterfly_slot" + e + "_free_tt')\">";
            s += '  <div id="butterfly_slot' + e + '_free_tt" class="ttbox ' + b + '">' + t_butterfly_free + "</div>";
            s += "</div>";
        }
    }
    var m = "butterfly.startBreedSelect(" + e + ")";
    if (this.data.data.breed[e]) {
        m = "butterfly.shopSelect(" + e + ")";
    }
    s += '    <div class="shop clicker link" onclick="' + m + '" onmouseover="showDiv(\'butterfly_slot' + e + "_shop_tt')\" onmouseout=\"hideDiv('butterfly_slot" + e + "_shop_tt')\">";
    s += '      <div id="butterfly_slot' + e + '_shop_tt" class="ttbox ' + b + '">' + t_butterfly_shop + "</div>";
    s += "    </div>";
    s += "  </div>";
    s += '  <div id="butterfly_slot' + e + '_click" class="click link" onmouseover="butterfly.slotHover(' + e + ', 1)" onmouseout="butterfly.slotHover(' + e + ', 0)"></div>';
    s += '  <div id="butterfly_slot' + e + '_tt" class="ttbox ' + b + '">' + a + "</div>";
    if (y == 1) {
        s += '<div class="block ' + c + '" onclick="' + r + '" onmouseover="butterfly.slotHover(' + e + ', 1, 1)" onmouseout="butterfly.slotHover(' + e + ', 0, 1)"></div>';
    }
    s += "</div>";
} s += '<div class="clear"></div>'; return s; };
butterfly.prototype.slotHover = function (c, b, a) { if (b == 1) {
    showDiv("butterfly_slot" + c + "_tt");
    if (!a) {
        showDiv("butterfly_slot" + c + "_buttons");
    }
    if ($("butterfly_slot" + c + "_feed_progress")) {
        $("butterfly_slot" + c + "_feed_progress").removeClassName("off");
    }
    if ($("butterfly_slot" + c + "_timer")) {
        $("butterfly_slot" + c + "_timer").removeClassName("off");
    }
}
else {
    hideDiv("butterfly_slot" + c + "_tt");
    if (!a) {
        hideDiv("butterfly_slot" + c + "_buttons");
    }
    if ($("butterfly_slot" + c + "_feed_progress")) {
        $("butterfly_slot" + c + "_feed_progress").addClassName("off");
    }
    if ($("butterfly_slot" + c + "_timer")) {
        $("butterfly_slot" + c + "_timer").addClassName("off");
    }
} };
butterfly.prototype.buildHouse = function (m) { if (m) {
    this.butterflySort += m;
} if (this.butterflySort < 1) {
    this.butterflySort = 4;
} if (this.butterflySort > 4) {
    this.butterflySort = 1;
} var d = 0; var e = 0; var c = ""; for (var b in this.data.config.butterflies) {
    if (this.data.data.free && this.data.data.free[b] && (!this.data.data.free[b].last || this.data.data.free[b].last < this.data.data.today)) {
        d++;
    }
    if (this.butterflySort != this.data.config.butterflies[b].rarity) {
        continue;
    }
    if (this.data.data.free && this.data.data.free[b]) {
        e++;
        var a = t_butterfly_daily_click;
        var l = "butterfly.clickButterfly(" + b + ")";
        if (this.data.data.free[b].last && this.data.data.free[b].last > this.data.data.today) {
            l = "";
            a = t_butterfly_daily_click_done;
        }
        else {
            d++;
        }
        var n = "medium";
        if (this.data.config.butterflies[b].size == 1) {
            n = "small";
        }
        if (this.data.config.butterflies[b].size == 3) {
            n = "big";
        }
        c += '<div class="butterfly ' + n + '" onmouseover="showDiv(\'butterfly_house' + b + "_tt')\" onmouseout=\"hideDiv('butterfly_house" + b + '_tt\')" onclick="' + l + '">';
        c += '  <div class="slot butterfly' + b + '" style="animation-duration:' + (getRandom(10, 15) / 10) + "s; top:" + getRandom(1, 20) + 'px;"></div>';
        var h = "";
        if (e <= 4) {
            h = "top";
        }
        c += '  <div id="butterfly_house' + b + '_tt" class="ttbox ' + h + " " + n + '">';
        c += '    <div class="name">' + this.data.data.free[b].count + "x&nbsp;" + this.data.config.butterflies[b].name + "</div>";
        c += '    <div class="rarity">' + t_butterfly_rarity[this.data.config.butterflies[b].rarity] + "</div>";
        c += '    <div class="bonus">' + a + "</div>";
        c += "  </div>";
        c += "</div>";
    }
    else {
        c += '<div class="butterfly">';
        c += "</div>";
    }
} if (d > 0 && premium) {
    c += '<div class="clickall link" onclick="butterfly.clickAllButterfly()" onmouseover="showDiv(\'butterfly_clickall_tt\')" onmouseout="hideDiv(\'butterfly_clickall_tt\')">';
    c += '  <div id="butterfly_clickall_tt" class="ttbox">' + t_butterfly_daily_click_all + "</div>";
    c += "</div>";
} c += '<div class="scroller left link" onclick="butterfly.buildHouse(-1)"></div>'; c += '<div id="butterfly_house_navi_name" class="navi name">' + t_butterfly_rarity[this.butterflySort] + "</div>"; c += '<div class="scroller right link" onclick="butterfly.buildHouse(1)"></div>'; if (m) {
    $("butterfly_house").innerHTML = c;
}
else {
    return c;
} };
butterfly.prototype.deleteSlotCommit = function (a) { globalcommitbox(t_butterfly_delete_head, t_butterfly_delete_body, "butterfly.deleteSlot(" + a + ")"); };
butterfly.prototype.freeCommit = function (c) { var a = t_butterfly_free_body.replace("%NAME%", this.data.config.butterflies[this.data.data.breed[c].butterfly].name); a += '<div style="margin-top:10px;">' + t_butterfly_free_attention + "</div>"; var b = "butterfly.free(" + c + ")"; globalcommitbox(t_butterfly_free_head, a, b); };
butterfly.prototype.buySlotCommit = function (d) { if (this.data.config.slots[d].money) {
    var c = formatPrice(this.data.config.slots[d].money);
} if (this.data.config.slots[d].coins) {
    var c = this.data.config.slots[d].coins + "&nbsp;" + t_coins;
} var a = t_butterfly_buy_slot_body.replace("%COST%", c); var b = "butterfly.buySlot(" + d + ")"; globalcommitbox(t_butterfly_buy_slot_head, a, b); };
butterfly.prototype.startBreedSelect = function (m) { var a = '<div id="butterfly_startbreed">'; a += "  <div>" + t_butterfly_start_breed_body + "</div>"; a += '  <div class="slots">'; for (var d in this.data.config.eggs) {
    var b = "";
    var h = "butterfly.startBreedCommit(" + m + ", " + d + ")";
    if (this.data.config.eggs[d].money) {
        var l = formatPrice(this.data.config.eggs[d].money);
        if (user_bar < this.data.config.eggs[d].coins) {
            b = "important";
            h = "";
        }
    }
    if (this.data.config.eggs[d].coins) {
        var l = this.data.config.eggs[d].coins + " " + t_coins;
        if (user_coins < this.data.config.eggs[d].coins) {
            b = "important";
            h = "";
        }
    }
    if (this.data.config.eggs[d].blossoms) {
        var l = this.data.config.eggs[d].blossoms + " " + t_butterfly_blossoms;
        if (this.data.data.count < this.data.config.eggs[d].blossoms) {
            b = "important";
            h = "";
        }
    }
    var c = "";
    if (d % 3 == 0) {
        c = "right";
    }
    a += '<div class="slot" onmouseover="showDiv(\'butterfly_startbreed_egg' + d + "_tt')\" onmouseout=\"hideDiv('butterfly_startbreed_egg" + d + "_tt')\">";
    a += '  <div class="egg egg' + d + '"></div>';
    a += '  <div class="coinsbutton_flex link ' + b + '" onclick="' + h + '">' + l + "</div>";
    a += '  <div id="butterfly_startbreed_egg' + d + '_tt" class="ttbox ' + c + '">';
    a += '    <div class="intro">' + t_butterfly_chance + "</div>";
    for (var e in this.data.config.eggs[d].rarity) {
        a += "<div>" + t_butterfly_rarity[e] + ":&nbsp;" + (this.data.config.eggs[d].rarity[e] * 100) + "%</div>";
    }
    a += "  </div>";
    a += "</div>";
} a += '    <div class="clear"></div>'; a += "  </div>"; a += "</div>"; globalBoxFlex(t_butterfly_start_breed_head, a, 0, 0, 1); };
butterfly.prototype.careBreedCommit = function (n) { if (this.data.data.breed[n].remain && this.data.data.breed[n].remain > 0) {
    return 1;
} var e = this.data.data.breed[n].butterfly; if (this.data.data.breed[n].breedend > 0) {
    var h = this.data.config.butterflies[e].products2;
}
else {
    var h = this.data.config.butterflies[e].products1;
} var l = t_butterfly_care_breed_head.replace("%NAME%", this.data.config.butterflies[e].name); var d = ""; var b = 0; var q = "butterfly.careBreed(" + n + ")"; for (var c in h) {
    var m = "";
    if (h[c] > checkRackItem(c)) {
        m = "important";
        b = 1;
    }
    d += '<div class="' + m + '" style="position:relative; width:140px; margin:0 auto;">' + htmlProductBody(c, h[c]) + "</div>";
} if (this.data.data.breed[n].breedend > 0) {
    var a = this.data.config.butterflies[e].reward;
    d += this.showReward(a, n);
} if (b) {
    globalcommitbox(l, d, 0, 0, 1);
}
else {
    globalcommitbox(l, d, q);
} };
butterfly.prototype.showReward = function (b, r) { var d = this.data.data.breed[r]; var l = parseInt(d.count); var c = parseInt(this.data.config.butterflies[d.butterfly].care_count1); var h = 1; var a = (l - c); if (a > 0) {
    var m = ((a * 100) / this.data.config.butterflies[d.butterfly].care_count2);
    m = Math.max(0, (100 - m));
    for (var s in this.data.config.decay) {
        if (parseInt(m) >= parseInt(s)) {
            h = this.data.config.decay[s];
        }
    }
} var e = ""; e += '<div class="head bold" style="margin-top:5px;">' + t_butterfly_care_attention + "</div>"; var n = {}; if (d.deco > 0) {
    n = this.data.config.deco[d.deco];
    if (this.data.config.butterflies[d.butterfly].rarity == this.data.config.deco[d.deco].bonus.rarity) {
        n = this.data.config.deco[d.deco].bonus;
    }
} for (var s in b) {
    var q = Math.ceil(b[s] * h);
    if (s == "money") {
        if (n.multi_money) {
            q = Math.ceil(q * n.multi_money);
        }
        e += "<div>" + formatPrice(q) + "</div>";
    }
    if (s == "points") {
        if (n.multi_points) {
            q = Math.ceil(q * n.multi_points);
        }
        e += "<div>" + formatNumber(q) + "&nbsp;" + t_points + "</div>";
    }
    if (s == "blossoms") {
        if (n.multi_blossoms) {
            q = Math.ceil(q * n.multi_blossoms);
        }
        e += "<div>" + formatNumber(q) + "&nbsp;" + t_butterfly_blossoms + "</div>";
    }
} return e; };
butterfly.prototype.startBreedCommit = function (e, b) { if (this.data.config.eggs[b].money) {
    var d = formatPrice(this.data.config.eggs[b].money);
} if (this.data.config.eggs[b].coins) {
    var d = this.data.config.eggs[b].coins + "&nbsp;" + t_coins;
} if (this.data.config.eggs[b].blossoms) {
    var d = this.data.config.eggs[b].blossoms + "&nbsp;" + t_butterfly_blossoms;
} var a = t_butterfly_buy_egg_body.replace("%COST%", d); var c = "butterfly.startBreed(" + e + ", " + b + ")"; globalcommitbox(t_butterfly_buy_egg_head, a, c); };
butterfly.prototype.shopSelect = function (t) { var e = '<div id="butterfly_shop">'; var h = 1; var b = 1; if (this.shopPage > 1) {
    b = ((this.shopPage - 1) * 4) + 1;
} var q = (this.shopPage * 4); for (var c in this.data.config.deco) {
    if (h >= b && h <= q) {
        var a = 0;
        var n = {};
        if (this.data.config.deco[c].bonus) {
            for (var m in this.data.config.deco[c].bonus) {
                var d = this.data.config.deco[c].bonus[m];
                if (d > 1 && this.data.config.deco[c][m] != d) {
                    n[m] = d;
                }
            }
            if (this.data.data.breed && this.data.data.breed[t]) {
                if (this.data.config.butterflies[this.data.data.breed[t].butterfly].rarity == this.data.config.deco[c].bonus.rarity) {
                    a = 1;
                }
            }
        }
        var l = "";
        var v = "butterfly.shopBuyCommit(" + t + ", " + c + ")";
        var s = "";
        var u = "";
        if (this.data.config.deco[c].level > this.data.data.level || this.data.config.deco[c].quest > this.data.data.last_questid) {
            v = "";
            if (this.data.config.deco[c].level > this.data.data.level) {
                u = '<div class="block important">' + t_butterfly_require_level.replace("%LEVEL%", this.data.config.deco[c].level) + "</div>";
            }
            if (this.data.config.deco[c].quest > this.data.data.last_questid) {
                u = '<div class="block important">' + t_butterfly_quest_block.replace("%QUEST%", this.data.config.deco[c].quest) + "</div>";
            }
        }
        if ((this.data.config.deco[c].money && this.data.config.deco[c].money > user_bar) || (this.data.config.deco[c].coins && this.data.config.deco[c].coins > user_coins) || (this.data.data.count < this.data.config.deco[c].blossoms)) {
            v = "";
            s = "important";
        }
        var r = "";
        if (this.data.data.breed[t] && this.data.data.breed[t].deco == c) {
            v = "";
            r = "currently";
        }
        e += '<div class="slot link ' + r + '" onclick="' + v + '">';
        if (a) {
            e += '<div class="fav breedpoints_icon"></div>';
        }
        e += '  <div class="img deco' + c + '"></div>';
        e += '  <div class="info">';
        e += '    <div class="name">' + this.data.config.deco[c].name + "</div>";
        if (this.data.config.deco[c].level > this.data.data.level || this.data.config.deco[c].quest > this.data.data.last_questid) { }
        else {
            if (this.data.config.deco[c].money) {
                e += '<div class="' + s + '">' + formatPrice(this.data.config.deco[c].money) + "</div>";
            }
            if (this.data.config.deco[c].coins) {
                e += '<div class="' + s + '">' + this.data.config.deco[c].coins + "&nbsp;" + t_coins + "</div>";
            }
            if (this.data.config.deco[c].blossoms) {
                e += '<div class="' + s + '">' + this.data.config.deco[c].blossoms + "&nbsp;" + t_butterfly_blossoms + "</div>";
            }
            e += '<div class="head">' + t_butterfly_feed_reward + "</div>";
            if (this.data.config.deco[c].multi_money > 1) {
                e += "<div>" + t_butterfly_reward_bonus_money + "&nbsp;" + Math.round((this.data.config.deco[c].multi_money - 1) * 100) + "%</div>";
            }
            if (n.multi_money) {
                e += '<div class="bonus">' + t_butterfly_reward_bonus_money + " " + Math.round((n.multi_money - 1) * 100) + "% (" + t_butterfly_rarity[this.data.config.deco[c].bonus.rarity] + ")</div>";
            }
            if (this.data.config.deco[c].multi_points > 1) {
                e += "<div>" + t_butterfly_reward_bonus_points + "&nbsp;" + Math.round((this.data.config.deco[c].multi_points - 1) * 100) + "%</div>";
            }
            if (n.multi_points) {
                e += '<div class="bonus">' + t_butterfly_reward_bonus_points + " " + Math.round((n.multi_points - 1) * 100) + "% (" + t_butterfly_rarity[this.data.config.deco[c].bonus.rarity] + ")</div>";
            }
            if (this.data.config.deco[c].multi_blossoms > 1) {
                e += "<div>" + t_butterfly_reward_bonus_blossoms + "&nbsp;" + Math.round((this.data.config.deco[c].multi_blossoms - 1) * 100) + "%</div>";
            }
            if (n.multi_blossoms) {
                e += '<div class="bonus">' + t_butterfly_reward_bonus_blossoms + " " + Math.round((n.multi_blossoms - 1) * 100) + "% (" + t_butterfly_rarity[this.data.config.deco[c].bonus.rarity] + ")</div>";
            }
            if (this.data.config.deco[c].time_reduction) {
                e += '<div class="reduction">' + t_butterfly_deco_time_reduction.replace("%PERCENT%", Math.ceil((1 - this.data.config.deco[c].time_reduction) * 100)) + "</div>";
            }
        }
        e += "  </div>";
        e += '  <div class="clear"></div>';
        if (u != "") {
            e += u;
        }
        if (this.data.config.deco[c].level > this.data.data.level || this.data.config.deco[c].quest > this.data.data.last_questid) {
            e += '<div class="locked"></div>';
        }
        e += "</div>";
    }
    h++;
} e += '  <div class="clear"></div>'; var q = Math.ceil((h - 1) / 4); if (this.shopPage > 1) {
    e += '<div id="butterfly_shop_navi_up" class="up link" onclick="butterfly.shopPage--; butterfly.shopSelect(' + t + ')"></div>';
} if (this.shopPage < q) {
    e += '<div id="butterfly_shop_navi_down" class="down link" onclick="butterfly.shopPage++; butterfly.shopSelect(' + t + ')"></div>';
} e += "</div>"; globalBoxFlex(t_butterfly_shop, e, 0, 0, 1); $("globalbox").style.top = "50px"; };
butterfly.prototype.shopBuyCommit = function (h, c) { var e = t_butterfly_shop_buy_body.replace("%NAME%", this.data.config.deco[c].name); if (this.data.config.deco[c].money) {
    e = e.replace("%COST%", formatPrice(this.data.config.deco[c].money));
} if (this.data.config.deco[c].coins) {
    e = e.replace("%COST%", this.data.config.deco[c].coins + "&nbsp;" + t_coins);
} if (this.data.config.deco[c].blossoms) {
    e = e.replace("%COST%", this.data.config.deco[c].blossoms + "&nbsp;" + t_butterfly_blossoms);
} var b = "<div>" + e + "</div>"; if (!this.data.data.breed[h].deco) {
    b += "<div>" + t_butterfly_shop_buy_info + "</div>";
} var d = "butterfly.shopBuy(" + h + ", " + c + ")"; var a = "butterfly.shopSelect(" + h + ")"; globalcommitbox(t_butterfly_shop_buy_head, b, d, a); };
butterfly.prototype.finishCareCommit = function (d) { var b = Math.ceil(this.data.data.breed[d].remain / this.data.config.speedup_duration); var a = t_butterfly_finish_feedtime_body.replace("%AMOUNT%", b); var c = "butterfly.finishCare(" + d + ")"; globalcommitbox(t_butterfly_finish_feedtime_head, a, c); };
butterfly.prototype.showStats = function () { var a = '<div id="butterfly_stats">'; a += '  <div class="select_line">'; a += '    <select id="butterfly_stats_select" onchange="butterfly.stats()">'; var b = ["points", "feed", "quests", "rarity1", "rarity2", "rarity3", "rarity4"]; for (var c = 0; c < b.length; c++) {
    var d = "";
    if (this.stats_select == b[c]) {
        d = "selected";
    }
    a += '<option value="' + b[c] + '" ' + d + ">" + t_butterfly_stats[b[c]] + "</option>";
} a += "    </select>"; a += "  </div>"; a += '  <div class="headline">' + t_butterfly_stats_headlines[this.stats_select] + "</div>"; a += '  <div class="list">'; a += htmlStatsContent(this.stats_cache[this.stats_select]); a += "</div>"; globalBoxFlex("", a, 0, 0, 1); };
butterfly.prototype.showQuest = function () { htmlQuestBox("butterfly"); this.timerUpdate(); };
butterfly.prototype.questEntryCommit = function (c) { for (var h in this.data.quest.products) {
    if (h == c) {
        var d = this.data.quest.products[c];
        if (this.data.quest.data && this.data.quest.data[c]) {
            var d = (d - this.data.quest.data[c]);
        }
        break;
    }
} var a = checkRackItem(c); var b = "kp" + c; if (a > d) {
    a = d;
} var e = { pid: c }; globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(e), 0, 0, 1); $("dialog_entryline_number").focus(); $("dialog_entryline_number").onchange = new Function("butterfly.checkQuestEntry(" + c + ", " + d + ")"); $("dialog_entryline_number").onkeyup = new Function("butterfly.checkQuestEntry(" + c + ", " + d + ")"); checkQuestEntry(c, d); };
butterfly.prototype.checkQuestEntry = function (a, c) { var e = checkRackItem(a); var b = "product"; var d = { type: b, stockamount: e, rest: c, click: "butterfly.questEntry(" + a + ")" }; checkEntryLine(d); };
butterfly.prototype.timer = function () { if (this.data.data && this.data.data.breed) {
    for (var b in this.data.data.breed) {
        this.data.data.breed[b].remain--;
    }
    this.timerUpdate();
} if (this.data.quest && this.data.quest.remain) {
    this.data.quest.remain--;
} for (var a in this.stats_cache_delay) {
    this.stats_cache_delay[a]--;
} };
butterfly.prototype.timerUpdate = function () { for (var d in this.data.config.slots) {
    if (!$("butterfly_slot" + d + "_timer")) {
        continue;
    }
    hideDiv("butterfly_slot" + d + "_timer");
    showDiv("butterfly_slot" + d + "_button_care");
    showDiv("butterfly_slot" + d + "_care_ready");
    if (this.data.data.breed && this.data.data.breed[d]) {
        var c = this.data.data.breed[d].butterfly;
        if (this.data.data.breed[d].remain > 0) {
            var b = '<div style="float:left;">' + formatTime(this.data.data.breed[d].remain) + "</div>";
            b += '<div class="link speedupgardenbutton" style="float:left;" onclick="butterfly.finishCareCommit(' + d + ')"></div>';
            b += '<div class="clear"></div>';
            $("butterfly_slot" + d + "_timer").innerHTML = b;
            showDiv("butterfly_slot" + d + "_timer");
            hideDiv("butterfly_slot" + d + "_button_care");
            hideDiv("butterfly_slot" + d + "_care_ready");
            if (this.data.data.breed[d].breedend > 0 && this.data.config.butterflies[c].care_count1 == this.data.data.breed[d].count) {
                $("butterfly_slot" + d + "_type").className = "cocon cocon" + this.data.config.butterflies[c].rarity;
            }
        }
        else {
            if (this.data.data.breed[d].breedend > 0 && this.data.config.butterflies[c].care_count1 == this.data.data.breed[d].count) {
                var a = "medium";
                if (this.data.config.butterflies[c].size == 1) {
                    a = "small";
                }
                if (this.data.config.butterflies[c].size == 3) {
                    a = "big";
                }
                $("butterfly_slot" + d + "_type").className = "butterfly butterfly" + c + " " + a;
            }
            if (this.data.data.breed[d].breedend > 0) {
                $("butterfly_slot" + d + "_care_ready").addClassName("butterfly");
            }
        }
    }
} if (this.data.quest && !this.data.quest.end) {
    if (this.data.quest.remain > 0) {
        showDiv("butterfly_quest_timer");
        hideDiv("butterfly_quest_data");
        if ($("butterfly_quest_timer")) {
            $("butterfly_quest_timer").innerHTML = formatTime(this.data.quest.remain);
        }
    }
    else {
        hideDiv("butterfly_quest_timer");
        showDiv("butterfly_quest_data");
    }
} };
butterfly.prototype.help = function () { openFarmersMarketHowTo("butterfly", 1); this.helpNavi(); };
butterfly.prototype.helpNavi = function (a) { if (!a) {
    a = "general";
} $("butterfly_help_navi_tab_general").removeClassName("active"); $("butterfly_help_navi_tab_list").removeClassName("active"); hideDiv("butterfly_help_general"); hideDiv("butterfly_help_list"); $("butterfly_help_navi_tab_" + a).addClassName("active"); showDiv("butterfly_help_" + a); };
butterfly.prototype.close = function () { hideDiv("transp"); hideDiv("farmersmarket_pos7_inner"); };
var calendar = function () { this.data = {}; this.all = 0; };
calendar.prototype.openField = function (a) { calendar.action("calendar_openfield", { field: a }); };
calendar.prototype.init = function () { calendar.action("calendar_init"); };
calendar.prototype.action = function (a, b) { ajaxAction("farm", a, b, calendar.response); };
calendar.prototype.response = function (b, a, c) { calendar.data = b; setTimer("calendar"); calendar.build(); if (b.reward) {
    calendar.showReward(b.reward);
} };
calendar.prototype.build = function () { var c = ""; var d = 1; for (i in this.data.config.fields) {
    var h = "calendar.openFieldCommit(" + i + ")";
    var a = "";
    if (this.data.data.days[i]) {
        a += " opened";
        h = "";
    }
    else {
        a += " closed";
        d = 0;
    }
    var e = 0;
    if (i < this.data.day && !this.data.data.days[i]) {
        e = 1;
    }
    c += '<div id="calendar_field' + i + '" class="field ' + a + '" onclick="' + h + '" onmouseover="calendar.fieldTT(1, ' + i + ')" onmouseout="calendar.fieldTT(0, ' + i + ')">';
    var a = "";
    if (this.data.day == i) {
        c += '<div id="calendar_current" class="current"></div>';
        a = "white";
    }
    if (!this.data.data.days[i]) {
        if (a == "") {
            c += '<div class="glow"></div>';
        }
        c += '<div class="date ' + a + '">' + i + "</div>";
    }
    var b = "";
    if (i % 6 == 0) {
        b = "right";
    }
    if (i >= 19) {
        b += " bottom";
    }
    c += '  <div id="calendar_field' + i + '_tt" class="ttbox ' + b + '"></div>';
    c += "</div>";
} $("calendar_fields").innerHTML = c; if (d == 1) {
    hideDiv("calendar_info");
    setTimeout(function (l) { $("calendar_inner").removeClassName("front").addClassName("back"); }, 1000);
    setTimeout(function (l) { $("calendar_fields").insert('<div class="complete">' + t_calendar_all_done_congrat + "</div>"); }, 2000);
    hideDiv("calendar_current");
} this.all = d; showDiv("calendar"); };
calendar.prototype.fieldTT = function (a, c) { if (this.all) {
    return 1;
} if (!a) {
    hideDiv("calendar_field" + c + "_tt");
}
else {
    if (this.data.data.days[c]) {
        var b = '<div class="intro" style="margin-bottom:10px;">' + t_specialoffer_message + "</div>";
        b += "<div>" + this.rewardObject(this.data.data.days[c].reward) + "</div>";
        $("calendar_field" + c + "_tt").innerHTML = b;
        showDiv("calendar_field" + c + "_tt");
    }
} };
calendar.prototype.openFieldCommit = function (e) { if (e < this.data.day) {
    var b = this.data.config.fields[e].date;
    var c = t_calendar_open_door_head.replace("%COUNT%", e);
    var a = "<div>" + t_calendar_open_missed_door.replace("%AMOUNT%", this.data.config.missed_coins) + "<div>";
    a = a.replace("%DATE%", b, a);
    var d = "calendar.openField(" + e + ")";
    globalcommitbox(c, a, d);
}
else {
    if (e == this.data.day) {
        this.openField(e);
    }
} };
calendar.prototype.close = function () { hideDiv("calendar"); };
calendar.prototype.showReward = function (c) { var b = t_got_gift; var a = '<div class="intro" style="margin-bottom:10px;">' + t_specialoffer_message + "</div>"; a += this.rewardObject(c); a += '<div class="button_yes link" style="margin:0 auto; margin-top:10px; width:46px; height:37px;" onclick="hideDiv(\'globalbox\'); hideDiv(\'globaltransp\');"></div>'; globalcommitbox(b, a, 0, 0, 1); hideDiv("globalbox_footer"); };
calendar.prototype.rewardObject = function (e) { var c = ""; for (var b in e) {
    if (b == "present") {
        c += '<img src="' + imgpath + "gifts/" + e.present + '.gif">';
    }
    if (b == "money") {
        c += "<div>" + formatPrice(e.money) + "</div>";
    }
    if (b == "points") {
        c += "<div>" + formatNumber(e.points) + "&nbsp;" + t_points + "</div>";
    }
    if (b == "powerup") {
        c += "<div>" + t_payment_pointsboost_info2.replace("%PERCENT%", windmillarray[e.powerup][5][3]) + "</div>";
    }
    if (b == "petspackage") {
        c += '<div class="petspackage pets_package' + e.petspackage + '"></div>';
    }
    if (b == "collect") {
        if (e.collect.type == "deliver") {
            var d = "deliveryevent_collectitem";
        }
        if (e.collect.type == "olympia") {
            var d = "olympia_chocolate_berry_mini";
        }
        c += '<div style="margin-top:10px;">';
        c += '  <div class="' + d + '" style="float:left; margin-left:75px;"></div>';
        c += '  <div style="float:left; margin-left:10px; margin-top:10px;">' + formatNumber(e.collect.amount) + "x</div>";
        c += '  <div class="clear"></div>';
        c += "</div>";
    }
    if (b == "products") {
        for (var a in e.products) {
            c += htmlProductBody(a, e.products[a]);
        }
    }
} return c; };
calendar.prototype.timer = function () { if (this.data.data.remain > 0) {
    this.data.data.remain--;
    if ($("calendar_timer")) {
        $("calendar_timer").innerHTML = t_event_resttime + ":&nbsp;" + formatTime(this.data.data.remain);
    }
}
else {
    hideDiv("calendar_link");
    clearTimer("calendar");
    this.close();
} };
var cinema = function () { this.data = {}; this.url = {}; this.go = 0; };
cinema.prototype.init = function () { cinema.action("cinema_init"); };
cinema.prototype.buyItem = function (a) { cinema.action("cinema_buy_item", { itemid: a }); };
cinema.prototype.buyReel = function (a) { cinema.action("cinema_buy_reel", { coins: a }); };
cinema.prototype.gambleItems = function () { cinema.action("cinema_gamble_items"); };
cinema.prototype.videoFinished = function (a) { cinema.action("cinema_video_finished", { hash: a }); };
cinema.prototype.action = function (a, b) { ajaxAction("city", a, b, cinema.response); };
cinema.prototype.response = function (b, a, c) { cinema.data = b; cinema.update(); if (in_array(a, ["cinema_gamble_items", "cinema_buy_item", "cinema_buy_reel"])) {
    cinema.shop();
} setTimer("cinema"); };
cinema.prototype.update = function () { $("cinema_points").innerHTML = formatNumber(this.data.data.points); var a = 0; if (this.data.data.today && this.data.data.today.length) {
    a = this.data.data.today.length;
} $("cinema_today").innerHTML = a + "/" + this.data.config.dailyvideos; showDiv("transp3"); showDiv("cinema"); this.start(); };
cinema.prototype.start = function () { hideDiv("cinema_start"); hideDiv("cinema_iframe"); $("cinema_iframe").src = ""; hideDiv("cinema_cooldown"); hideDiv("cinema_end"); if (this.data.data.today && this.data.data.today.length >= this.data.config.dailyvideos) {
    showDiv("cinema_end");
    return 1;
} if (this.data.config.partner == 1) {
    showDiv("cinema_iframe");
    $("cinema_iframe").src = this.data.config.url + new Date().getTime();
}
else {
    showDiv("cinema_start");
} };
cinema.prototype.startVideo = function () { hideDiv("cinema_start"); showDiv("cinema_iframe"); $("cinema_iframe").src = this.data.config.url + new Date().getTime(); };
cinema.prototype.timer = function () { this.data.data.video_remain--; if (this.data.data.video_remain > 0) {
    hideDiv("cinema_start");
    hideDiv("cinema_iframe");
    showDiv("cinema_cooldown");
    $("cinema_cooldown_timer").innerHTML = formatTime(this.data.data.video_remain);
} this.data.data.selection_remain--; if ($("cinema_shop_timer")) {
    $("cinema_shop_timer").innerHTML = formatTime(this.data.data.selection_remain);
} if ($("cinema").style.display == "block") {
    if (this.data.data.selection_remain <= 0) {
        hideDiv("cinema");
        this.init();
    }
    if (this.data.data.video_remain <= 0 && !this.go) {
        hideDiv("cinema_cooldown");
        if (this.data.config.partner == 1) {
            showDiv("cinema_iframe");
        }
        if (this.data.config.partner == 2) {
            showDiv("cinema_start");
        }
        this.go = 1;
    }
} };
cinema.prototype.shop = function () { var e = '<div id="cinema_shop">'; e += '  <div id="cinema_shop_points" class="points">' + formatNumber(this.data.data.points) + '<div class="buyreel link" onclick="cinema.buyReelOptions()">+</div></div>'; e += '  <div class="gamble link" onclick="cinema.gambleItemsCommit()">&circlearrowright;</div>'; e += '  <div class="intro">' + t_cinema_shop_intro + "</div>"; e += '  <div id="cinema_shop_items" class="items">'; for (var d = 0; d < this.data.data.selection.length; d++) {
    var h = "cinema.buyItemCommit(" + this.data.data.selection[d].giftid + ")";
    var b = "";
    if (this.data.data.selection[d].points > this.data.data.points) {
        var h = "";
        var b = "important";
    }
    e += '<div class="item link" onclick="' + h + '">';
    e += '  <img src="' + imgpath + "gifts/" + this.data.data.selection[d].giftid + '.gif">';
    e += '  <div class="amount ' + b + '">' + formatNumber(this.data.data.selection[d].points) + "</div>";
    e += '  <div class="pan">' + this.data.data.selection[d].pan + "</div>";
    e += "</div>";
} e += "  </div>"; e += '  <div class="timer">' + t_cinema_change_items + '<span id="cinema_shop_timer"></span></div>'; e += '  <div class="info" onmouseover="showDiv(\'cinema_shop_info_tt\')" onmouseout="hideDiv(\'cinema_shop_info_tt\')">'; e += '    <div id="cinema_shop_info_tt" class="ttbox">'; e += '      <div class="head">' + t_cinema_valid_items + "</div>"; for (var a in this.data.config.items) {
    var c = a;
    if (presents_hack[a]) {
        c = presents_hack[a];
    }
    e += '<img src="' + imgpath + "gifts/" + c + '.gif">';
} e += "    </div>"; e += "  </div>"; e += "</div>"; globalBoxFlex(t_cinema_shop_head, e, 0, 0, 1); $("globalbox").style.top = "40px"; };
cinema.prototype.buyItemCommit = function (a) { var h = 0; for (var e = 0; e < this.data.data.selection.length; e++) {
    if (this.data.data.selection[e].giftid == a) {
        h = this.data.data.selection[e].points;
    }
} var b = a; if (presents_hack[a]) {
    b = presents_hack[a];
} var d = '<img src="' + imgpath + "gifts/" + b + '.gif">'; d += '<div style="margin-top:10px;">' + t_cinema_buy_item.replace("%AMOUNT%", formatNumber(h)) + "</div>"; var l = "cinema.buyItem(" + a + ")"; var c = "cinema.shop();"; globalcommitbox(t_cinema_buy_item_head, d, l, c); };
cinema.prototype.buyReelOptions = function () { var c = '<div id="cinema_buy_reel">'; for (var b in this.data.config.buyreel) {
    var d = t_cinema_buy_reel_item.replace("%AMOUNT%", formatNumber(this.data.config.buyreel[b]));
    c += '<div class="link coinsbutton_flex" onclick="cinema.buyReelOptionsCommit(' + b + ')">' + d.replace("%COINS%", b) + "</div>";
} c += "</div>"; var a = "cinema.shop();"; globalcommitbox(t_cinema_buy_reel, c, 0, a, 1); };
cinema.prototype.buyReelOptionsCommit = function (a) { var d = t_cinema_buy_reel_item.replace("%AMOUNT%", formatNumber(this.data.config.buyreel[a])); html = "<div>" + d.replace("%COINS%", a) + "</div>"; var c = "cinema.buyReel(" + a + ")"; var b = "cinema.buyReelOptions();"; globalcommitbox(t_cinema_buy_reel, html, c, b); };
cinema.prototype.gambleItemsCommit = function () { html = "<div>" + t_cinema_gamble_items_body.replace("%COINS%", this.data.config.gamblecoins) + "</div>"; globalcommitbox(t_cinema_gamble_items, html, "cinema.gambleItems()", "cinema.shop()"); };
cinema.prototype.close = function () { hideDiv("transp3"); hideDiv("cinema"); $("cinema_iframe").src = ""; };
var ganmedia = { addEvent: function (c, a, b) { if (c.addEventListener) {
        c.addEventListener(a, b, false);
    }
    else {
        if (c.attachEvent) {
            c.attachEvent("on" + a, b);
        }
    } }, onMessage: function (l) { if (l.data == "BusPausieren") {
        if (mapTravelStop()) {
            l.source.postMessage("pausiert", l.origin);
        }
    }
    else {
        if (l.data == "BusWeiterfahren") {
            mapTravelAd(0);
        }
        else {
            if (l.data == "PremiumHeute") {
                mapTravelAd(1, travelad_hash);
            }
        }
    } if (l.origin == "http://media.gan-online.com") {
        cinema.go = 0;
        var b = l.data;
        if (b == "videoStart") { }
        else {
            if (b == "noVideo") { }
            else {
                if (b == "videoEnds") { }
                else {
                    if (b.indexOf("videoEnds:") == 0) {
                        hideDiv("cinema_iframe");
                        $("cinema_iframe").src = "";
                        var a = b.replace("videoEnds:", "");
                        var d = a.indexOf(":");
                        var c = a.substring(0, d);
                        var h = a.substring(d + 1);
                        cinema.videoFinished(h);
                    }
                    else { }
                }
            }
        }
    } }, init: function () { var a = this; this.addEvent(window, "message", function (b) { a.onMessage(b); }); } };
ganmedia.init();
var messageMethode = function (l) { var c = l.origin || l.originalEvent.origin; if (c !== "https://poxmediagroup.de") {
    return;
} var h = (l.data); var d = "~"; var e = h.indexOf(d); if (e != 8) {
    return;
} var b = h.split("~"); var a = b[0]; var m = b[1]; if (in_array(a, ["noaddisp", "noad", "plyerror"])) {
    if (busAd.go == 1) {
        busAd.go = 0;
        busAd.noad();
    }
} if (in_array(a, ["adcomplt", "adcompl"])) {
    if (busAd.go == 1) {
        busAd.go = 0;
        busAd.watched();
    }
    else {
        cinema.go = 0;
        cinema.data.data.video_remain = cinema.data.config.cooldown;
        hideDiv("cinema_iframe");
        $("cinema_iframe").src = "";
        cinema.videoFinished(m);
    }
} };
window.addEventListener("message", messageMethode);
function cityAction(m, u, t, s, q) { var b = city; var c = ""; if (m == "animaldealer_buysuperanimal") {
    c += "&action=" + u;
} if (m == "initcity") {
    b = u;
} if (m == "initcitynew") {
    b = u;
} if (m == "wm_buyballs") {
    if (wm_sheep_block == 1) {
        return false;
    }
    c += "&coins=" + u;
    wm_sheep_block = 1;
} if (m == "wm_exchangeballs") {
    c += "&id=" + u;
} if (m == "buypresent") {
    c += "&giftid=" + u.giftid + "&name1=" + encodeURIComponent(u.name1) + "&msg1=" + encodeURIComponent(u.msg1) + "&name2=" + encodeURIComponent(u.name2) + "&msg2=" + encodeURIComponent(u.msg2) + "&server1=" + u.server1 + "&server2=" + u.server2;
} if (m == "buypresentfriend") {
    c += "&giftid=" + u + "&friend=" + t + "&msg=" + encodeURIComponent(s);
} if (m == "cashlotteryprize") {
    c += "&prize=" + u;
} if (m == "cancelad") {
    c += "&pass=" + encodeURIComponent(u);
} if (m == "buyad") {
    c += "&ad=" + u;
} if (m == "writemarktschreier") {
    c += "&msg=" + encodeURIComponent(u);
} if (m == "delmarktschreier") {
    c += "&mid=" + u;
} if (m == "delpresent") {
    c += "&id=" + u;
} if (m == "giverpresent") {
    c += "&id=" + u;
} if (m == "buybee") {
    c += "&param=" + u;
} if (m == "buyfish") {
    c += "&param=" + u;
} if (m == "sendcollectorsitem") {
    c += "&pid=" + u + "&category=" + t;
} if (m == "buyformula") {
    if (buyFormula_block == 1) {
        return false;
    }
    buyFormula_block = 1;
    c += "&formula=" + u + "&amount=" + t;
} if (m == "birthday_citysheep_swap") {
    c += "&sheep=" + u;
} if (m == "birthday_citysheep_buy") {
    birthday_buy_block = 1;
    c += "&cards=" + u;
} if (m == "windmillstartproduction") {
    c += "&formula=" + u + "&slot=" + t;
} if (m == "windmillcrop" || m == "windmillcancel") {
    c += "&slot=" + u;
} if (m == "animaldealerbuy") {
    if (!animaldealer_cart || !$("animaldealer_select" + animaldealer_cart) || animaldealer_block) {
        return false;
    }
    animaldealer_block = 1;
    var a = $("animaldealer_select" + animaldealer_cart).value;
    var n = 0;
    for (var e = 1; e <= 30; e++) {
        if (!animaldealer_data[e] || animaldealer_cart != animaldealer_data[e][0]) {
            continue;
        }
        for (var d in animaldealer_data[e].prices) {
            if (animaldealer_data[e].prices[d].i <= a) {
                n++;
            }
        }
    }
    c += "&str=" + animaldealer_cart + "_" + n;
} if (m == "setslotclothingdonation") {
    var h = $("clothingdonation_slotselect").value;
    var r = $("clothingdonation_slothidden").value;
    c += "&pid=" + h + "&slot=" + r;
} if (m == "telekomentry") {
    c += "&pid=" + u;
} if (m == "exchangecoins") {
    if (!coinsblocker) {
        coinsblocker = 1;
        c += "&coins=" + u;
    }
    else {
        return false;
    }
} if (m == "buycoinspremium") {
    if (!coinsblocker) {
        coinsblocker = 1;
        c += "&month=" + u;
    }
} showGlobalWait(m); var l = createAjaxRequestObj(); l.open("GET", "ajax/city.php?rid=" + rid + "&city=" + b + "&mode=" + m + c, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { cityActionResponse(l, m, u, t, s, q); }; l.send(null); }
function cityActionResponse(l, m, h, e, d, c) { var b = _chkRequest(l, m); if (b != 0) {
    hideGlobalWait();
    if (m == "animaldealerbuy") {
        animaldealer_block = 0;
    }
    if (m == "birthday_citysheep_buy") {
        birthday_buy_block = 0;
    }
    if (m == "buyformula") {
        buyFormula_block = 0;
    }
    collector_block = 0;
    coinsblocker = 0;
    if (b[0] == 0) {
        wm_sheep_block = 0;
        globalerrorbox(b[1]);
        if (m == "initbeemaster" || m == "initfishpool") {
            hideDiv("transp3");
        }
    }
    else {
        var a = ["buybee", "buyformula", "windmillinit", "windmillbuyslot", "windmillcrop", "windmillstartproduction", "windmillcancel", "gambleclothingdonation", "donateclothingdonation", "setslotclothingdonation", "sendcollectorsitem", "randomformulas", "delpresent", "giverpresent", "delmarktschreier", "buyad", "cancelad", "buynewlot", "cashlotteryprize", "lotgetprize", "buypresent", "wm_buyballs", "wm_exchangeballs", "animaldealerinit", "animaldealer_buysuperanimal", "exchangecoins", "buycoinspremium"];
        if (in_array(m, a)) {
            hideDiv("globalbox");
            hideDiv("globaltransp");
        }
        if (m == "birthday_citysheep_init" || m == "birthday_citysheep_swap" || m == "birthday_citysheep_buy") {
            birthday_citysheep_data = b[1];
            birthdayCitySheepDialog("init");
        }
        if (m == "windmillinit" || m == "windmillbuyslot" || m == "windmillcrop" || m == "windmillstartproduction" || m == "windmillcancel") {
            windmill_stock = b[1];
            windmill_slots = b[2];
            windmill_slotremain = b[3];
            windmill_ready = b[4];
            windmill_first = b[5];
            if (xmastime == 1) {
                $("windmillinner").style.background = "url(" + imgpath + "city/windmill_inner2_xmas.jpg)";
            }
            else {
                $("windmillinner").style.background = "url(" + imgpath + "city/windmill_inner2.jpg)";
            }
            showDiv("windmillinner");
            if (m == "windmillcrop") {
                if (b[6] && b[6].leveltitle) {
                    levelupAlert(b[6].level, b[6].leveltitle);
                }
                globalerrorbox(windmillcropinfo);
            }
            hideDiv("windmill_paper");
            closeWindmillFormulaSelect();
            windmill_page = 1;
            windmillSlots();
            checkWindmillStatus();
        }
        if (m == "initclothingdonation" || m == "gambleclothingdonation" || m == "donateclothingdonation" || m == "setslotclothingdonation") {
            clothingdonation_data = b[1];
            showClothingDonation();
        }
        if (m == "animaldealerinit" || m == "animaldealerbuy" || m == "animaldealer_buysuperanimal") {
            animaldealer_data = b[1];
            buildAnimalDealer();
        }
        if (m == "animaldealerbuy") {
            animaldealer_cart = "";
            showFeedback2("animaldealerfeedback", t_animaldealer_buysuccess);
        }
        if (m == "initcity") {
            getInitCityDataResponse(b, h, e, d);
        }
        if (m == "buyformula") {
            showFeedback2("formuladealerbubble", formuladealer_feedback, formuladealer_bubble);
            setFormulaDealerRack(b[2]);
        }
        if (m == "initcollector") {
            initCollectorResponse(b);
        }
        if (m == "sendcollectorsitem") {
            initCollectorResponse(b, h, e);
        }
        if (m == "initformuladealer") {
            initFormulaDealerResponse(b);
        }
        if (m == "randomformulas") {
            windmillinfo = b[1];
            flipRandomFormulas();
            gamblelock = 0;
        }
        if (m == "buyfish") {
            buyFishResponse();
        }
        if (m == "initfishpool") {
            initFishPoolResponse(b);
        }
        if (m == "initbeemaster") {
            openBeemasterResponse(b);
        }
        if (m == "getpresents") {
            giftlist = b[1];
        }
        if (m == "delpresent") {
            hideDiv("pancontainer");
            showPan();
        }
        if (m == "giverpresent") {
            if (b[2].levelup && b[2].levelup.level) {
                levelupAlert(b[2].levelup.level, b[2].levelup.leveltitle);
            }
            pan_items = b[1];
            buildPanContent();
            panFlyer(h, b[3]);
        }
        if (m == "initnewsboy") {
            initNewsboyResponse(b);
        }
        if (m == "initmarktschreier" || m == "writemarktschreier" || m == "delmarktschreier") {
            openMarktschreiberResponse(b);
        }
        if (m == "initadcolumn") {
            hideDiv("showtimeadcolumn");
            adinfo = b;
            fillAdColumn();
        }
        if (m == "buyad") {
            buyAdResponse(b);
        }
        if (m == "cancelad") {
            cancelAdResponse(b);
        }
        if (m == "initlottery") {
            initLotteryResponse(b);
        }
        if (m == "newlot") {
            dailyLotResponse(b);
        }
        if (m == "buynewlot") {
            buyNewLotResponse(b);
        }
        if (m == "cashlotteryprize") {
            cashLotteryPrizeResponse(b);
        }
        if (m == "lotgetprize") {
            lotGetPrizeResponse(b);
        }
        if (m == "buypresentfriend") {
            $("friendsinfo").innerHTML = "<br><br>" + str_replace("%NAME%", "<b>" + c + "</b>", friendlist_gift_success);
        }
        if (m == "buypresent") {
            clearPresenteeInfo();
            showDiv("giftshopsuccess");
        }
        if (m == "telekominit" || m == "telekomentry") {
            cityTelekomOpen(b[1]);
        }
        if (m == "initcity" && c == 1) {
            initCampaigns();
        }
        if (m == "exchangecoins" || m == "buycoinspremium") {
            closeCoinsBox();
        }
        if (m == "wm_init" || m == "wm_buyballs" || m == "wm_exchangeballs") {
            openWM(b[1]);
        }
    }
} }
var clooney = 0;
function initCity(c, n, a, b) { questbox = n; inguild = 0; if (tutorial > 0 && tutorial < 4) {
    return false;
} foodworld_quicknavi = 0; getInitCityData(c, n, a, b); clearTimeout(letmytimerdone); killGardenTimeruns(); closeForestry(); if (typeof clearMarketTimer == "function") {
    clearMarketTimer();
} if (cropactionrunner) {
    window.clearInterval(cropactionrunner);
} closeFoodcontest(); hideDiv("globaltransp"); hideDiv("globalbox"); for (var e = 1; e <= 4; e++) {
    for (var d = 1; d <= 100; d++) {
        if (forestry_questdelay_run[e + "_" + d]) {
            window.clearInterval(forestry_questdelay_run[e + "_" + d]);
            forestry_questdelay_run[e + "_" + d] = 0;
            forestry_questdelay_time[e + "_" + d] = 0;
        }
    }
} farm_checker_open = 0; var m = ["shop", "adcolumn", "animaldealer", "formuladealer", "fishpoolinner", "windmillinner", "marktschreierinner", "giftshopinner", "collectorscontainer", "questboxtransp", "questbox", "transp3", "popup_garden", "tutorial", "farmhousecontainer", "farmhousetransp", "createguildbox", "friendscontainer", "globaltransp", "notepad", "swanani", "gooseani", "butterflyani", "fishani", "fishani2", "einkaufszettel", "multiframe", "wbwcontainer", "lotterycontainer", "newsboy", "newsboystart", "newsbox", "minigameShipTransp", "minigameShip", "clothingdonation_transp", "clothingdonation", "farm_production_checker_icon", "farm_production_checker"]; for (var e = 0; e < m.length; e++) {
    if ($(m[e])) {
        hideDiv(m[e]);
    }
} closeFoodworld(); hideDiv("forestry_questlist_container"); $("multiframe").src = ""; $("cityzones").innerHTML = ""; closeMarket(); closeCropAction(); if (c > 1) {
    hideDiv("showtimeadcolumn");
} if (c == 2) {
    if (currentuserlevel >= 37) {
        showDiv("clothingdonation_link");
        if (currentuserlevel >= 38) {
            $("clothingdonation_link_tt").innerHTML = t_clothingdonation_citylink;
            $("clothingdonation_link").onclick = new Function("cityAction('initclothingdonation')");
        }
        else {
            $("clothingdonation_link_tt").innerHTML = "<b>" + t_clothingdonation_headline + "</b><br><br>" + str_replace("%LEVEL%", 38, noupdate_lowlevel);
            $("clothingdonation_link").onclick = new Function();
        }
        if (!stopanimation) {
            showDiv("clothingdonation_link_sparrow");
        }
        else {
            hideDiv("clothingdonation_link_sparrow");
        }
    }
    else {
        hideDiv("clothingdonation_link");
    }
}
else {
    hideDiv("clothingdonation_link");
} if ($("em_fan")) {
    if (c == 1) {
        showDiv("em_fan");
    }
    else {
        hideDiv("em_fan");
    }
    closeWM();
} if ($("cityeasterbunny")) {
    if (c == 1) {
        showDiv("cityeasterbunny");
    }
    else {
        hideDiv("cityeasterbunny");
    }
    closeCityEasterEvent();
} if ($("xmasevent_city")) {
    if (c == 1) {
        showDiv("xmasevent_city");
    }
    else {
        hideDiv("xmasevent_city");
    }
    closeCityXmasEvent();
} if ($("clooneyscreen")) {
    if (c == 1 && clooney == 0) {
        showDiv("clooneyscreen");
    }
    else {
        hideDiv("clooneyscreen");
    }
    closeClooney();
} if ($("fantaboy")) {
    if (c == 1) {
        showDiv("fantaboy");
    }
    else {
        hideDiv("fantaboy");
    }
    closeFanta();
} if ($("fonic_city")) {
    if (c == 1) {
        showDiv("fonic_city");
    }
    else {
        hideDiv("fonic_city");
    }
} if ($("city_telekom_banner")) {
    if (c == 1) {
        showDiv("city_telekom_link");
        showDiv("city_telekom_banner");
        var h = "";
        var l = getRandom(1000000, 9999999);
        h += '<iframe style="height:1px; width:1px; border:0px;" src="http://media.gan-online.com/www/delivery/lg.php?zoneid=0&campaignid=4980&bannerid=13145&cb=' + l + '"></iframe>';
        h += '<iframe style="height:1px; width:1px; border:0px;" src="http://bs.serving-sys.com/BurstingPipe/adServer.bs?cn=tf&c=19&mc=imp&pli=8582109&PluID=0&ord=' + l + '&rtu=-1"></iframe>';
        $("city_telekom_banner").innerHTML = h;
        $("city_telekom_banner").onclick = new Function("window.open('https://media.gan-online.com/www/delivery/ck.php?oaparams=2__bannerid=13144__zoneid=0__cb=" + l + "')");
    }
    else {
        hideDiv("city_telekom_link");
        hideDiv("city_telekom_banner");
    }
} if ($("merchant_link")) {
    if (c == 1) { }
    else {
        hideDiv("merchant_link");
    }
} if ($("reallocatebuilding_symbol")) {
    hideDiv("reallocatebuilding_symbol");
} if ($("reallocateanimals_symbol")) {
    hideDiv("reallocateanimals_symbol");
} if ($("farm_production_checker_icon")) {
    hideDiv("farm_production_checker_icon");
} }
function getInitCityData(d, c, b, a) { cityAction("initcity", d, c, b, a); }
var cropactionman = 0;
var forestyquest_timeout = 0;
function getInitCityDataResponse(a, d, h, e) { premium = a[1]; var b = a[0]; windmill_ready = a[3]; if (a[5] == 1) {
    forestry_unlock = 1;
} cropactionman = a[7]; hideDiv("forestry_nextquest"); if (d == 2) {
    if (a[6] > 0) {
        hideDiv("forestry_nextquest");
        if (!forestyquest_timeout) {
            forestyquest_timeout = window.setTimeout("showDiv('forestry_nextquest'); forestyquest_timeout=0;", (a[6] * 1000));
        }
    }
    else {
        if (a[6] < 0) {
            hideDiv("forestry_nextquest");
        }
        else {
            if (a[6] == 0) {
                showDiv("forestry_nextquest");
            }
        }
    }
} cityzones = a; var c = 1; if (d == city) {
    c = 0;
} city = d; if (premium == 0 && c == 1 && changecitydelay > 0 && travelad == 1 && !e) {
    if (tutorial == 5 || tutorial == 10 || tutorial == 11) {
        cityArrived(h);
    }
    else {
        mapGo2Location("city", city);
    }
}
else {
    cityArrived(h);
} }
function cityArrived(d) { var b = cityzones[0]; clearTimeout(letmytimerdone); if (xmastime == 1) {
    if (city == 1) {
        $("citymaincontainer").style.backgroundImage = "url(" + imgpath + "city/cityview2_xmas.jpg)";
    }
    else {
        if (city == 2) {
            $("citymaincontainer").style.backgroundImage = "url(" + imgpath + "city/city2_back3_xmas.jpg)";
        }
    }
}
else {
    if (city == 1) {
        if (setarab || nopigs) {
            var h = "stadt1_tag_ir.jpg";
        }
        else {
            var h = "stadt1_tag_all.jpg";
        }
        $("citymaincontainer").style.backgroundImage = "url(" + imgpath + "stadt/" + h + ")";
    }
    else {
        if (city == 2) {
            $("citymaincontainer").style.backgroundImage = "url(" + imgpath + "city/city2_back3.jpg)";
        }
    }
} for (var e = 1; e < 10; e++) {
    if (!stopanimation) {
        if ($("peopleaniimg" + e)) {
            if (city == 1) {
                $("peopleaniimg" + e).src = imgpath + "people_ani" + e + ".gif";
            }
            else {
                $("peopleaniimg" + e).src = imgpath + "leer.gif";
            }
        }
    }
} farm = 0; speedLinks(); showDiv("citymaincontainer"); var m = ""; for (e in b) {
    var r = "close_page(); showDiv('transp3');";
    var q = "";
    var l = "";
    var n = b[e][3];
    var c = b[e][2];
    if (n == "s") {
        r = "showDiv('shop'); shopAction('shopinit', " + b[e][4] + ")";
    }
    else {
        if (n == "st") {
            r += "statsOpen();";
        }
        else {
            if (n == "w") {
                r += "showDiv('transp3'); showDiv('wbwcontainer'); setCityWBWContent(2);";
            }
            else {
                if (n == "m") {
                    r += "marketAction('marketinit');";
                }
                else {
                    if (n == "ad") {
                        r += "showDiv('animaldealer'); initAnimalDealer();";
                    }
                    else {
                        if (n == "l") {
                            r += "initAdColumn();";
                        }
                        else {
                            if (n == "b") {
                                r = "";
                                if (currentuserlevel >= cityentry2) {
                                    r += "openMap();";
                                }
                            }
                            else {
                                if (n == "b2") {
                                    r += "openMap();";
                                }
                                else {
                                    if (n == "ms") {
                                        r += "openMarktschreier();";
                                    }
                                    else {
                                        if (n == "bm") {
                                            r = "openBeemaster();";
                                        }
                                        else {
                                            if (n == "p") {
                                                r += "giftshop.init();";
                                            }
                                            else {
                                                if (n == "muehle") {
                                                    r += "initWindmill();";
                                                }
                                                else {
                                                    if (n == "fd") {
                                                        r += "initFormulaDealer();";
                                                    }
                                                    else {
                                                        if (n == "zfd") {
                                                            r += "initFishPool();";
                                                        }
                                                        else {
                                                            if (n == "c") {
                                                                r += "initCollector();";
                                                            }
                                                            else {
                                                                if (n == "lottery") {
                                                                    r += "initLottery();";
                                                                }
                                                                else {
                                                                    if (n == "forestquest") {
                                                                        r += "initCampaigns();";
                                                                    }
                                                                    else {
                                                                        if (n == "nb") {
                                                                            r += "initNewsboy();";
                                                                        }
                                                                        else {
                                                                            if (n == "forest") {
                                                                                r += "mapGo2Location('forestry');";
                                                                                c = str_replace("%INFO%", "", c);
                                                                                if (forestry_unlock == 0) {
                                                                                    r = "";
                                                                                    c = str_replace("%INFO%", "<div class='important'>" + unlock_info + "</div><br>", c);
                                                                                }
                                                                            }
                                                                            else {
                                                                                if (n == "fw") {
                                                                                    r = "";
                                                                                    if (currentuserlevel >= 11) {
                                                                                        r = "mapGo2Location('picknick')";
                                                                                    }
                                                                                    else {
                                                                                        c += "<br><br>" + str_replace("%LEVEL%", 11, minlevel_feature);
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if (n == "h") {
                                                                                        r = "openMap();";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (currentuserlevel < cityentry2 && n == "b") {
        c = str_replace("%LEVEL%", cityentry2, cityzone8_2);
    }
    if ((tutorial < 5 && tutorial > 0) && n == "s") {
        r = "";
    }
    if ((tutorial < 6 && tutorial > 0) && (n == "m" || n == "w")) {
        r = "";
    }
    m += '<div id="cityzone_' + city + "_" + e + '" onclick="' + r + '" class="link" onmouseover="showDiv(\'cityzone_tt_' + city + "_" + e + "'); " + q + '" onmouseout="hideDiv(\'cityzone_tt_' + city + "_" + e + "'); " + l + '">';
    m += '  <div id="cityzone_tt_' + city + "_" + e + '" class="blackbox">' + c + "</div>";
    if (ad_action == 1 && city == 1 && e == 7 && currentuserlevel >= 5) {
        m += '<div id="cityzone_ad_special">';
        m += '  <div id="cityzone_ad_special_inner">-' + ad_action_percent + "%</div>";
        m += "</div>";
    }
    if (hartmutaction == 1 && city == 1) {
        m += '<div id="cityzone_hartmut_special">';
        m += '  <div id="cityzone_hartmut_special_inner">!</div>';
        m += "</div>";
    }
    m += "</div>";
} var a = ["fishdealerani", "formuladealerani", "formuladealerani_easter", "pepeani", "bunnyani"]; for (var e = 0; e < a.length; e++) {
    hideDiv(a[e]);
} if (city == 2 && !stopanimation) {
    for (var e = 0; e < a.length; e++) {
        showDiv(a[e]);
    }
} if (cropactionman && city == 1) {
    showDiv("cropactionman");
}
else {
    hideDiv("cropactionman");
} $("cityzones").innerHTML = m; if (tutorial == 4) {
    increaseTutorialStep();
    tutorial = 5;
} if (tutorial == 9) {
    increaseTutorialStep();
    tutorial = 10;
    hideDiv("tutorial17");
    setBlockMain(2);
    showTutorial(18, 1);
} if (tutorial == 5) {
    hideDiv("tutorial7");
    showTutorial(8, 1);
    setBlockMain(2);
} if (tutorial == 10) {
    showTutorial(18, 1);
} if (tutorial == 11) {
    hideDiv("tutorialline");
    showTutorial(25);
} if (tutorial == 12) {
    showTutorial(26);
} if (city > 1) {
    hideDiv("showtimeadcolumn");
}
else {
    if (currentad != 0) {
        if ($("cityzone_1_7")) {
            $("cityzone_1_7").onmouseover = function (s) { showDiv("showtimeadcolumn"); };
            $("cityzone_1_7").onmouseout = function (s) { hideDiv("showtimeadcolumn"); };
        }
    }
} hideDiv("windmill_readyani"); hideDiv("windmillani"); checkWindmillStatus(); if ($("birthday_townsheep_4th")) {
    if (city == 1) {
        showDiv("birthday_townsheep_4th");
    }
    else {
        hideDiv("birthday_townsheep_4th");
    }
} if (xmastime == 1 && city == 1) {
    $("cityzone_1_12").style.background = "url(" + imgpath + "city/xmas_giftshop.jpg)";
} if ($("cinema_link")) {
    cinema.close();
} if (city > 1) {
    hideDiv("cinema_link");
}
else {
    showDiv("cinema_link");
} }
var animaldealer_data = new Object;
var animaldealer_cart = 0;
var animaldealer_block = 0;
function initAnimalDealer() { cityAction("animaldealerinit"); }
function buildAnimalDealer() { if (animaldealer_data) {
    var h = "";
    for (var e = 1; e <= 30; e++) {
        if (!animaldealer_data[e]) {
            continue;
        }
        var b = animaldealer_data[e][0];
        h += '<div class="animaldealer_line">';
        h += '  <div class="animaldealer_line_back"></div>';
        h += '  <div class="animaldealer_line_animal animaldealer_line_animal' + b + '"></div>';
        if (animaldealer_data[e].free) {
            h += '<button class="animaldealer_buybutton button_new link" onclick="animaldealer_cart=\'' + b + "'; cityAction('animaldealerbuy');\" type=\"button\">" + str_replace("%COST%", '<span id="animaldealer_buybutton' + b + '"></span>', t_animaldealer_buy) + "</button>";
            if (animaldealer_data[e].free > 1) {
                h += '<select class="animaldealer_select" id="animaldealer_select' + b + '" onchange="calcAnimalDealer()">';
                for (var c = 1; c <= animaldealer_data[e].free; c++) {
                    if (animaldealer_data[e].prices[c]) {
                        h += '<option value="' + animaldealer_data[e].prices[c].i + '">' + c + "</option>";
                    }
                }
                h += "</select>";
            }
            else {
                if (animaldealer_data[e].prices && animaldealer_data[e].prices[1]) {
                    h += '<input type="hidden" id="animaldealer_select' + b + '" value="' + animaldealer_data[e].prices[1].i + '">';
                }
            }
        }
        else {
            var n = "";
            if (animaldealer_data[e].prices && !animaldealer_data[e].block) {
                if (animaldealer_data[e].count) {
                    if (animaldealer_data[e].freeproduction) {
                        n = t_animaldealer_isproduction;
                    }
                    else {
                        if (!animaldealer_data[e].free) {
                            n = t_animaldealer_nospace;
                        }
                    }
                }
                if (!animaldealer_data[e].count && !animaldealer_data[e].free) {
                    n = t_animaldealer_nobuilding;
                }
                h += '<div class="animaldealer_notbuyable_info"><span class="bonusinfo">' + formatPrice(animaldealer_data[e].prices[1].p) + '</span><br><span class="important">' + n + "</span></div>";
            }
            else {
                h += '<div class="animaldealer_notbuyable_info"><span class="important">' + str_replace("%LEVEL%", animaldealer_data[e][4], minlevel_feature) + "</span></div>";
            }
        }
        h += "</div>";
    }
    $("animaldealercontent").innerHTML = h;
    calcAnimalDealer();
    if (tutorial == 10) {
        showTutorial(19, 2);
        increaseTutorialStep();
        tutorial = 11;
    }
    if (animaldealer_data.superanimals) {
        var d = animaldealer_data.superanimals;
        var a = 0;
        for (var e = 0; e < d.data.length; e++) {
            if (d.data[e].action == d.current.action && d.data[e].sum >= d.current.sum) {
                a = 1;
            }
        }
        var h = "";
        h += '<div style="position:absolute; top:58px; height:400px;">';
        h += '  <div class="base" style="margin-bottom:20px; text-align:center; color:#fff; font-weight:bold; opacity:0.5; border-top-left-radius:5px; border-top-right-radius:5px;"></div>';
        h += '  <div style="position:absolute; top:0px; left:0px; width:100%;">';
        h += '    <div style="padding:10px; font-size:14px; font-weight:bold;">' + t_animaldealer_superanimals_title + "</div>";
        h += '    <div style="margin-bottom:5px;">' + d.config.animal_special[d.current.reward.animalid][d.current.action].title + "</div>";
        if (d.config.animal_special[d.current.reward.animalid][d.current.action].cropbonus) {
            var m = str_replace("%BONUS%", d.config.animal_special[d.current.reward.animalid][d.current.action].cropbonus, t_animal_special_cropbonus);
        }
        if (d.config.animal_special[d.current.reward.animalid][d.current.action].productiontime) {
            var m = str_replace("%TIME%", formatTime(d.config.animal_special[d.current.reward.animalid][d.current.action].productiontime), t_cropaction_productiontime);
        }
        h += '  <div style="margin-bottom:5px;">' + m + "</div>";
        h += '    <div style="margin-bottom:5px; padding:10px 0px; background-color:#A27242;">' + t_offer_ends + '<br><span id="animaldealer_superanimal_timer">&nbsp;</span></div>';
        if (!d.current.bought) {
            h += '<div class="link coinsbutton_flex link" style="font-size:14px; padding:5px; z-index:100;" onclick="buySuperAnimalAnimalDealer(' + d.current.action + ')">' + d.config.coins + "&nbsp;" + t_coins + "</div>";
        }
        else {
            h += '<div style="5px 0px 10px 0px;">' + t_animaldealer_superanimals_bought + "</div>";
        }
        h += "  </div>";
        h += '  <div style="position:absolute; bottom:-10px; width:170px; height:225px;">';
        var l = "animaldealer_superanimal_minimize city_animal_special" + d.current.reward.animalid + "_" + d.current.reward.special;
        if (d.current.reward.animalid == 12 && d.current.action == 5) {
            l = "walking_goat";
        }
        h += '    <div class="' + l + '" style="position:absolute; background-position:50% bottom; background-repeat:no-repeat;"></div>';
        h += "  </div>";
        h += "</div>";
        $("animaldealer_superanimal").innerHTML = h;
        showDiv("animaldealer_superanimal");
        $("animaldealercontent").style.marginLeft = "0px";
        setTimer("animaldealer");
    }
    else {
        hideDiv("animaldealer_superanimal");
        $("animaldealercontent").style.marginLeft = "80px";
    }
} }
function buySuperAnimalAnimalDealer(e) { var d = animaldealer_data.superanimals; var b = t_animaldealer_superanimals_dialog_head; var a = str_replace("%COINS%", d.config.coins, t_animaldealer_superanimals_intro); a = str_replace("%NAME%", "<b>" + d.config.animal_special[d.current.reward.animalid][d.current.action].title + "</b>", a); var c = "cityAction('animaldealer_buysuperanimal', " + e + ")"; globalcommitbox(b, a, c); }
function timerAnimalDealer() { if (animaldealer_data.superanimals) {
    animaldealer_data.superanimals.current.remain--;
    if (animaldealer_data.superanimals.current.remain > -1) {
        if ($("animaldealer_superanimal_timer")) {
            $("animaldealer_superanimal_timer").innerHTML = formatTime(animaldealer_data.superanimals.current.remain);
        }
    }
    else {
        clearTimer("animaldealer");
        if (city == 1) {
            initAnimalDealer();
        }
    }
} }
function calcAnimalDealer() { for (var c = 1; c <= 30; c++) {
    var d = 0;
    if (!animaldealer_data[c]) {
        continue;
    }
    var a = animaldealer_data[c][0];
    if (!$("animaldealer_select" + a)) {
        continue;
    }
    var h = $("animaldealer_select" + a).value;
    if (h) {
        var e = 0;
        for (var b in animaldealer_data[c].prices) {
            if (animaldealer_data[c].prices[b].i <= h) {
                d += animaldealer_data[c].prices[b].p;
            }
        }
    }
    $("animaldealer_buybutton" + a).innerHTML = formatPrice(d);
} }
function closeAnimalDealer() { hideDiv("transp3"); hideDiv("animaldealer"); }
function initAdColumn() { if (adrun) {
    var b = str_replace("%WIMS%", currentad.bonus, cityadcancel);
    if (checkPartnerPortal()) {
        var a = "cancelAd();";
    }
    else {
        var a = "cancelAdCommit();";
    }
    var c = "hideDiv('globalbox'); hideDiv('globaltransp'); hideDiv('transp3');";
    globalcommitbox(cityadcancelheadline, b, a, c);
}
else {
    cityAction("initadcolumn");
} }
function cancelAdCommit() { var b = infodestructbuildingcommit2 + '<br><input type="password" id="cancelad_pass" name="cancelad_pass">'; var a = "cancelAd();"; var c = "hideDiv('globalbox'); hideDiv('globaltransp'); hideDiv('transp3');"; globalcommitbox(cityadcancelheadline, b, a, c); }
function fillAdColumn() { var e = ""; var d = 0; for (_obj in adinfo) {
    d++;
} for (var b = 1; b <= 10; b++) {
    if (adinfo[b]) {
        var a = adinfo[b];
        var m = "";
        var n = "";
        var l = "";
        var h = 20;
        var c = 15;
        if (a.kt > 0) {
            n = "<div onmouseover=\"showDiv('adtttinfo" + b + "m');\" onmouseout=\"hideDiv('adtttinfo" + b + 'm\');"><img src="' + imgpath + 'money.gif" width="12" height="12">&nbsp;' + formatPrice(a.kt) + "</div>";
            l += '<div id="adtttinfo' + b + 'm" class="blackbox" style="display:none; z-index:100; position:absolute; top:' + h + 'px; left:0px; white-space:nowrap;">' + t_money + "</div>";
            h += c;
        }
        if (a.coins > 0) {
            n += "<div onmouseover=\"showDiv('adtttinfo" + b + "c');\" onmouseout=\"hideDiv('adtttinfo" + b + 'c\');"><img src="' + imgpath + 'menu/coins.gif" width="12" height="12">&nbsp;' + a.coins + "</div>";
            l += '<div id="adtttinfo' + b + 'c" class="blackbox" style="display:none; z-index:100; position:absolute; top:' + h + 'px; left:0px; white-space:nowrap;">' + t_coins + "</div>";
            h += c;
        }
        n += "<div onmouseover=\"showDiv('adtttinfo" + b + "t');\" onmouseout=\"hideDiv('adtttinfo" + b + 't\');"><img src="' + imgpath + 'adtime.gif" width="12" height="12">&nbsp;' + formatTime(a.time) + "</div>";
        l += '<div id="adtttinfo' + b + 't" class="blackbox" style="display:none; z-index:100; position:absolute; top:' + h + 'px; left:0px; white-space:nowrap;">' + cityadduration + "</div>";
        h += c;
        n += "<div onmouseover=\"showDiv('adtttinfo" + b + "b');\" onmouseout=\"hideDiv('adtttinfo" + b + 'b\');"><img src="' + imgpath + 'adbonus.gif" width="12" height="12">&nbsp;' + a.bonus + "</div>";
        l += '<div id="adtttinfo' + b + 'b" class="blackbox" style="display:none; z-index:100; position:absolute; top:' + h + 'px; left:0px; white-space:nowrap;">' + str_replace("%WIMS%", a.bonus, cityadbonus) + "</div>";
        if (a.premium == 1) {
            if (premium == 0) {
                n += '<br><span class="important">' + inforequirepremium + "</span>";
            }
        }
        n += "</div>" + l;
        e += '<div class="link" id="adzone_' + city + "_" + b + '" ';
        e += "onmouseover=\"showDiv('adzonetooltip" + b + "'); showDiv('adzoneshowad_" + city + "_" + b + "');\" onmouseout=\"hideDiv('adzonetooltip" + b + "'); hideDiv('adzoneshowad_" + city + "_" + b + "');\" ";
        e += 'onclick="buyadcommit(' + b + ');">';
        if (a.aktion == 1) {
            e += '<div style="position:absolute; z-index:100; top:7px; left:-2px; background:url(' + imgpath + 'topaktion_medium_ani.gif) top left no-repeat; height:30px; width:30px;">';
            e += '<div style="position:absolute; top:8px; width:30px; color:#fff; text-align:center;">-' + ad_action_percent + "%</div>";
            e += "</div>";
        }
        e += '<div id="adzoneshowad_' + city + "_" + b + '" onmouseover="showDiv(\'adzonetooltip' + b + "'); showDiv('adzoneshowad_" + city + "_" + b + "');\" onmouseout=\"hideDiv('adzonetooltip" + b + "'); hideDiv('adzoneshowad_" + city + "_" + b + "');\"></div>";
        e += '<div class="blackbox" id="adzonetooltip' + b + '" onmouseover="showDiv(\'adzonetooltip' + b + "');\" onmouseout=\"hideDiv('adzonetooltip" + b + "');\">" + n + "</div>";
        if (a[4] == 1) {
            e += '<div class="important" style="position:absolute; top:27px; right:-2px; z-index:38;"><img src="' + imgpath + 'menu/premium_icon.gif"></div>';
        }
        e += "</div>";
    }
} hideDiv("transp5"); $("adcolumncontent").innerHTML = e; showDiv("adcolumn"); }
function cancelAd() { if (checkPartnerPortal()) {
    var a = "none";
}
else {
    if ($("cancelad_pass").value != "") {
        if (upportaluser == 1) {
            var a = $("cancelad_pass").value;
        }
        else {
            var a = $("cancelad_pass").value;
        }
    }
    else {
        return false;
    }
} cityAction("cancelad", a); }
function cancelAdResponse(a) { window.clearInterval(adrun); adrun = 0; adtime = 0; adtimegesamt = 0; hideDiv("showtimeadcolumn"); currentad = 0; hideDiv("transp3"); if ($("cityzone_1_7")) {
    $("cityzone_1_7").onmouseout = function (b) { $("cityzone_1_7").style.backgroundImage = "url(" + imgpath + "leer.gif)"; hideDiv("cityzone_tt_1_7"); };
    $("cityzone_1_7").onmouseover = function (b) { $("cityzone_1_7").style.backgroundImage = "url(" + imgpath + "city/1_7_over.gif)"; $("cityzone_1_7").style.backgroundPosition = "6px 0px"; showDiv("cityzone_tt_1_7"); };
} }
function buyadcommit(c) { var a = ""; a += '<div><img src="' + imgpath + 'adtime.gif">&nbsp;' + formatTime(adinfo[c].time) + "</div>"; a += '<div><img src="' + imgpath + 'adbonus.gif">&nbsp;' + str_replace("%WIMS%", adinfo[c].bonus, cityadbonus) + "</div>"; if (adinfo[c].kt > 0) {
    a += "<div>" + cityadcost + formatPrice(adinfo[c].kt) + "</div>";
} if (adinfo[c].coins > 0) {
    a += "<div>" + cityadcost + adinfo[c].coins + "&nbsp;" + t_coins + "</div>";
} a += '<div style="margin-top:10px;">' + cityadcommit + "</div>"; var b = "buyAd(" + c + ")"; globalcommitbox(cityadbuyheadline, a, b); }
function buyAd(a) { cityAction("buyad", a); }
function buyAdResponse(a) { currentad = a[1]; setAdCountDown(a[1]); hideDiv("adcolumn"); hideDiv("transp3"); hideDiv("transp5"); }
function checkAd() { if (currentad == 0) {
    hideDiv("showtimeadcolumn");
}
else {
    if (currentad) {
        setAdCountDown(currentad);
    }
} }
function setAdCountDown(c) { if (currentad.remain == 1) {
    var b = farmistatsadlineday;
}
else {
    var b = farmistatsadlinedays;
} var a = adbegin + "<br><b>" + currentad.startad + "</b><br>"; a += adend + "<br><b>" + currentad.endad + "</b><br>"; $("adcolumntimecounter").innerHTML = a; $("adcolumnfarmibonus").innerHTML = "+<b>" + currentad.bonus + "</b>&nbsp;" + farmistatsadlineperday; if ($("cityzone_1_7")) {
    $("cityzone_1_7").onmouseover = function (d) { showDiv("showtimeadcolumn"); };
    $("cityzone_1_7").onmouseout = function (d) { hideDiv("showtimeadcolumn"); };
} adrun = 1; }
function runCountDownAd(c, b) { var a = countdownAd(adtime, "showtimeadcolumn"); adtime = a - 1; if (adtime < 1) {
    window.clearInterval(adrun);
    hideDiv("showtimeadcolumn");
    currentad = 0;
    adtime = 0;
} }
function countdownAd(l, m) { var h = l; if (h <= 0) {
    h = 0;
}
else {
    var a = Math.floor(h / 3600);
    var c = Math.floor((h % 3600) / 60);
    var e = Math.floor((h % 3600) % 60);
    if (a.toString().length == 1) {
        a = "0" + a.toString();
    }
    if (c.toString().length == 1) {
        c = "0" + c.toString();
    }
    if (e.toString().length == 1) {
        e = "0" + e.toString();
    }
    var d = a + ":" + c + ":" + e + " h";
    var b = "";
    if (currentad.premium == 1) {
        if (premium == 0) {
            b = '<div class="important">' + inforequirepremium + "</div>";
        }
    }
    $("adcolumntimecounter").innerHTML = d;
    $("adcolumnfarmibonus").innerHTML = currentad.bonus;
    $("adcolumnpremiuminfo").innerHTML = b;
} return h; }
function initFishPool() { if (city == 2) {
    cityAction("initfishpool");
} }
function initFishPoolResponse(b) { var h = ""; var a = 0; var l = b[1]; if (l.length == 0) {
    h += fishpool_nofishtobuy;
}
else {
    var c = "";
    c = '<option value="0">-</option>';
    for (var d = 1; d < 120; d++) {
        if (l[d]) {
            if (d == 1) {
                var m = formatPrice(l[d]["p"]);
                a = l[d]["p"];
            }
            else {
                a = a + l[d]["p"];
            }
            if (d == 1) {
                var e = formuladealer_fish_singular;
            }
            else {
                var e = formuladealer_fish_plural;
            }
            c += '<option value="' + d + '">' + d + " " + e + "</option>";
            h += '<input type="hidden" id="fishcalcprice' + d + '" value="' + a + '">';
        }
    }
    h += beemasteramount + '&nbsp;<select name="selectfish" id="selectfish" onchange="calcfishcost();">' + c + "</select>";
    h += "<br><br>" + beemastercost + '&nbsp;<span id="fishcost" style="font-weight:bold;">' + formatPrice(0) + "</span>";
    $("fishpoolbuybutton").innerHTML = '<span onclick="buyFish();"><img src="' + imgpath + 'stadt/2button_kauf.gif" border="0"></span>';
} $("fishpoolbubble").innerHTML = fishpool_intro; $("fishpoolcontent").innerHTML = h; if (xmastime == 1) {
    $("fishpoolinner").style.background = "url(" + imgpath + "city/fishpool_innen_xmas.jpg)";
}
else {
    $("fishpoolinner").style.background = "url(" + imgpath + "city/fishpool_innen.jpg)";
} showDiv("transp3"); showDiv("fishpoolinner"); }
function calcfishcost() { var a = $("selectfish").value; if ($("fishcalcprice" + a)) {
    $("fishcost").innerHTML = formatPrice($("fishcalcprice" + a).value);
}
else {
    $("fishcost").innerHTML = formatPrice(0);
} if ($("selectfish").value > 0) {
    showDiv("fishpoolbuybutton");
}
else {
    hideDiv("fishpoolbuybutton");
} }
function buyFish() { var a = $("selectfish").value; if (a > 0) {
    cityAction("buyfish", "11_" + a);
}
else {
    return false;
} }
function buyFishResponse() { $("selectfish").value = 0; $("fishcost").innerHTML = formatPrice(0); hideDiv("fishpoolbuybutton"); $("fishpoolbubble").innerHTML = fishpool_boughttext; $("fishpoolcontent").innerHTML = ""; window.setTimeout("reloadFishPool()", 2000); }
function reloadFishPool() { initFishPool(); }
function initFormulaDealer() { if (city == 2) {
    cityAction("initformuladealer");
} }
function initFormulaDealerResponse(a) { windmillinfo = a[1]; if (a[2]) {
    setFormulaDealerRack(a[2]);
} setFormulaDealerFormulas(); $("formuladealerbubble").innerHTML = formuladealer_bubble; if (eastertime == 1) {
    $("formuladealer").style.background = "url(" + imgpath + "city/formuladealer_inner_easter.jpg) top left no-repeat";
}
else {
    if (xmastime == 1) {
        $("formuladealer").style.background = "url(" + imgpath + "city/formuladealer_inner_xmas.jpg) top left no-repeat";
    }
    else {
        $("formuladealer").style.background = "url(" + imgpath + "city/formuladealer_inner.jpg) top left no-repeat";
    }
} showDiv("formuladealer"); showDiv("formuladealerrandom"); }
function setFormulaDealerRack(c) { var b = ""; for (var a = 0; a < c.length; a++) {
    b += '<div style="height:25px; width:25px; position:relative; margin-bottom:7px; float:left; margin-left:10px;" ';
    b += "onmouseover=\"$('formuladealerproductinfo').innerHTML=showFormulaInfos(" + c[a]["fid"] + "); showDiv('formuladealerproductinfo');\" ";
    b += "onmouseout=\"$('formuladealerproductinfo').innerHTML=''; hideDiv('formuladealerproductinfo');\" ";
    b += ">";
    b += '<div class="fmm' + c[a]["fid"] + '"></div>';
    b += '<div style="position:absolute; bottom:-2px; right:-2px; font-weight:normal; color:#fff;">' + c[a]["amount"] + "</div>";
    b += "</div>";
    if ((a + 1) % 2 == 0) {
        b += '<div style="clear:both;"></div>';
    }
} $("formuladealerrackinner").innerHTML = b; }
function setFormulaDealerFormulas() { for (var b = 0; b < windmillinfo.length; b++) {
    if (windmillinfo[b]) {
        $("formuladealerproduct" + (b + 1)).innerHTML = "";
        var a = windmillinfo[b][0];
        var d = "";
        if (windmillinfo[b][6] > 0) {
            d += '<div style="text-align:center; color:#fff; font-weight:normal;">' + windmillinfo[b][6] + "&nbsp;" + gamecurrency + "</div>";
        }
        if (windmillinfo[b][7] > 0) {
            d += '<div style="text-align:center; color:#fff; font-weight:normal;">' + windmillinfo[b][7] + "&nbsp;" + t_coins + "</div>";
        }
        var c = "";
        c += '<div style="margin-top:20px;" class="fm' + a + '" ';
        c += "onmouseover=\"$('formuladealerproductinfo').innerHTML=showFormulaInfos(" + a + "); showDiv('formuladealerproductinfo');\" ";
        c += "onmouseout=\"$('formuladealerproductinfo').innerHTML=''; hideDiv('formuladealerproductinfo');\" ";
        c += 'onclick="buyFormulaCommit(' + a + ');"></div>';
        c += "<div>" + d + "</div>";
        $("formuladealerproduct" + (b + 1)).innerHTML = c;
    }
} }
function buyFormulaCommit(n) { var l = formulas[0][n][6]; if (formulas[0][n][7] > 0) {
    l = formulas[0][n][7];
} var d = ""; for (var a = 0; a < windmill_discount.length; a++) {
    if (formulas[0][n][6] > 0) {
        var e = windmill_discount[a].amount;
        var m = 0;
        var h = Math.ceil(l * windmill_discount[a].discount);
        var b = (windmill_discount[a].amount * l) + "&nbsp;" + gamecurrency;
        var c = (windmill_discount[a].amount * h) + "&nbsp;" + gamecurrency;
    }
    if (formulas[0][n][7] > 0) {
        var e = windmill_discount_coins[a].amount;
        var m = (l * windmill_discount_coins[a].amount);
        var h = Math.ceil(m * windmill_discount_coins[a].discount);
        var b = m + "&nbsp;" + t_coins;
        var c = h + "&nbsp;" + t_coins;
    }
    d += '<div class="formula_discount_line link" onclick="buyFormulaCommit2(' + n + "," + e + ')">';
    d += '  <div style="float:left; width:50px;">' + guildwbwrankingamount + "</div>";
    d += '  <div style="float:left; width:150px;">' + t_formula_price + "</div>";
    d += '  <div class="clear"></div>';
    d += '  <div style="float:left; font-weight:bold; width:50px; font-size:18px;">' + e + "</div>";
    d += '  <div style="float:left; width:150px;">';
    if (h < l || (h < m && m > 0)) {
        d += '  <div style="text-decoration: line-through; color:#6C441D; font-weight:bold;">' + b + "</div>";
    }
    d += '    <div style="color:#6C441D; font-weight:bold; font-size:18px;">' + c + "</div>";
    d += "  </div>";
    d += '  <div class="clear"></div>';
    d += "</div>";
} var q = ""; globalcommitbox(formuladealer_buy_headline, d, q); }
var buyFormula_block = 0;
function buyFormulaCommit2(e, d) { var c = ""; for (var b = 0; b < windmillinfo.length; b++) {
    if (windmillinfo[b] && windmillinfo[b][0] == e) {
        c += "<div>" + d + "x&nbsp;" + windmillinfo[b][2] + "</div>";
    }
} var a = "buyFormula(" + e + "," + d + ")"; globalcommitbox(formuladealer_buy_headline, c, a); }
function buyFormula(b, a) { if (city == 2) {
    cityAction("buyformula", b, a);
} }
function randomFormulasCommit() { var b = '<img src="' + imgpath + 'menu/coins.gif" border="0" width="12" height="12">&nbsp;' + randomformulacoins + "&nbsp;" + t_coins + "</div>"; var d = "<div>" + b + "</div><br>" + formuladealer_random_content; if (gamblelock == 1) { }
else {
    var a = "randomFormulas();";
} var c = "hideDiv('globaltransp'); hideDiv('globalbox');showDiv('transp3');"; globalcommitbox(formuladealer_random_headline, d, a, c); }
function randomFormulas() { if (city == 2) {
    gamblelock = 1;
    cityAction("randomformulas");
} }
function flipRandomFormulas() { var a = '<img src="' + imgpath + 'city/flip_formuladealer.gif" border="0">'; $("formuladealerproduct1").innerHTML = a; $("formuladealerproduct2").innerHTML = a; $("formuladealerproduct3").innerHTML = a; window.setTimeout("setFormulaDealerFormulas()", 2000); }
function showFormuladealerAni(a) { if (a == 1) {
    showDiv("formuladealerface");
    $("formuladealerface").src = imgpath + "city/formuladealer_ani_1.gif";
}
else {
    $("formuladealerface").src = imgpath + "city/formuladealer_ani_2.gif";
} }
function initCollector() { if (city == 2) {
    cityAction("initcollector");
} }
function initCollectorResponse(w, n, c) { hideDiv("collector_feedback_back"); hideDiv("collector_feedback"); if (n && c && w[1][c] && w[1][c][n]) {
    var d = w[1][c][n].giftid;
    if (w[1][c][n].diamant) {
        d = w[1][c][n].giftid2;
    }
    var b = d;
    if (presents_hack[d]) {
        b = presents_hack[d];
    }
    $("collector_feedback_img").src = imgpath + "gifts/" + b + ".gif";
    showDiv("collector_feedback");
    showDiv("collector_feedback_back");
} var m = ""; for (var c in w[1]) {
    if (!w[1][c]) {
        continue;
    }
    for (var n in w[1][c]) {
        if (!w[1][c][n]) {
            continue;
        }
        var l = w[1][c][n];
        var v = "";
        var u = "sendCollectorItemsCommit(" + n + "," + l.amount + ",'" + c + "')";
        var a = produkt_name[n];
        var q = "kp";
        var t = 0;
        var r = checkRackItem(n);
        if (!r) {
            t = l.amount;
        }
        if (r > 0) {
            t = (l.amount - r);
        }
        if (c == "tree") {
            a = produkt_name_forestry[n];
            q = "f_m_symbol";
            if (l.stock && l.stock < l.amount) {
                t = (l.amount - l.stock);
            }
            else {
                t = 0;
            }
            if (!l.stock) {
                t = l.amount;
            }
        }
        var s = "";
        if (t > 0) {
            s = "important";
            u = "";
        }
        var e = 0;
        if (r > 0) {
            e = r;
        }
        if (c == "tree") {
            e = l.stock;
        }
        var h = '<div style="margin-top:4px;" class="' + s + '">' + t_in_stock + "&nbsp;" + e + "</div>";
        var d = l.giftid;
        if (l.diamant) {
            d = l.giftid2;
        }
        m += '<div class="link collector_bar" onclick="' + u + '">';
        m += '  <div style="float:left; margin:15px 5px 0 15px;" class="' + q + n + '"></div>';
        m += '  <div style="float:left; margin-top:15px; width:170px;">' + l.amount + "x&nbsp;" + a + "<br>" + v + h + "</div>";
        var b = d;
        if (presents_hack[d]) {
            b = presents_hack[d];
        }
        m += '  <div style="float:right; margin-top:5px; margin-right:2px;"><img height="50" src="' + imgpath + "gifts/" + b + '.gif"></div>';
        m += '  <div class="clear"></div>';
        m += "</div>";
    }
} $("collectorscontent").innerHTML = m; if (xmastime == 1) {
    $("collectorscontainer").style.background = "url(" + imgpath + "city/collector_inner3_xmas.jpg)";
}
else {
    $("collectorscontainer").style.background = "url(" + imgpath + "city/collector_inner3.jpg)";
} showDiv("collectorscontainer"); }
function sendCollectorItemsCommit(b, e, l) { var d = produkt_name[b]; var a = "kp"; if (l == "tree") {
    d = produkt_name_forestry[b];
    a = "f_m_symbol";
} var c = "sendCollectorItems(" + b + ",'" + l + "');"; var h = '<div style="float:left;" class="' + a + b + '"></div>'; h += '<div style="float:left;">&nbsp;' + e + "&nbsp;" + d + "</div>"; h += '<div style="clear:both;"></div><br>'; h += collector_commitcontent; globalcommitbox(collector_commithead, h, c); }
var collector_block = 0;
function sendCollectorItems(a, b) { if (city == 2 && !collector_block) {
    collector_block = 1;
    cityAction("sendcollectorsitem", a, b);
} }
function setCityWBWContent(a) { if (a == 1) {
    hideDiv("wbwcontent2");
    showDiv("wbwcontent1");
    $("wbwnavi1").style.background = "url(" + imgpath + "city/wbw_navi1.jpg)";
    $("wbwnavi2").style.background = "url(" + imgpath + "leer.gif)";
    $("globalwbwranking").innerHTML = "";
    guildWBWRanking(1);
}
else {
    if (a == 2) {
        hideDiv("wbwcontent1");
        showDiv("wbwcontent2");
        $("wbwnavi1").style.background = "url(" + imgpath + "leer.gif)";
        $("wbwnavi2").style.background = "url(" + imgpath + "city/wbw_navi2.jpg)";
        $("wbwcontent2ranking").innerHTML = "";
        generalAction("initwbw");
    }
} }
function setCityWBWContentResponse(q) { if (q[1] == 0) {
    hideDiv("localwbwdata");
    $("wbwcontent2ranking").innerHTML = "<br><br><b>" + guildwbwnocurrentwbw + "</b>";
}
else {
    showDiv("localwbwdata");
    var n = q[1]["wettbewerb_produkt"];
    var e = 0;
    var d = "";
    d += '<div style="width:500px; margin-top:10px;">';
    d += '<div class="guildwbwrankingline_headrank">' + guildwbwrankingrank + "</div>";
    d += '<div class="guildwbwrankingline_headname">' + guildquestrankingname + "</div>";
    d += '<div class="guildwbwrankingline_headamount">' + guildwbwrankingamount + "</div>";
    d += '<div style="clear:both;"></div>';
    d += "</div>";
    if (q[1] == 0) {
        d += '<div style="margin-left:10px; text-align:center; padding-top:25px; font-weight:normal; width:500px;">' + guildwbwnocurrentwbw + "</div>";
    }
    else {
        var h = 0;
        var b = 1;
        for (var c = 0; c < q[2].length; c++) {
            if (h == 0) {
                h = q[2][c]["menge"];
                var m = b + ".";
            }
            else {
                if (h == q[2][c]["menge"]) {
                    var m = "&nbsp;";
                }
                else {
                    b++;
                    var m = b + ".";
                    h = q[2][c]["menge"];
                }
            }
            if (q[2][c]["self"] == 1) {
                e = 1;
                add = "color:#f00; font-weight:bold;";
            }
            else {
                add = "";
            }
            if (c % 2 == 0) {
                var l = "transparent";
            }
            else {
                var l = "transparent";
            }
            d += '<div style="width:500px; padding-top:2px; padding-bottom:2px; background-color:' + l + '" id="guildwbwrankingline' + c + '" ';
            d += "onmouseover=\"this.style.backgroundColor='#D8B57D'\" onmouseout=\"this.style.backgroundColor='transparent'\"";
            d += ">";
            if (q[2][c]["self"] == 1) {
                d += '<a name="ownentry"></a>';
            }
            d += '<div class="guildwbwrankingline_rank" style="' + add + '">' + m + "</div>";
            d += '<div class="guildwbwrankingline_name" style="' + add + ' overflow:hidden;">';
            d += '<div class="guildwbwrankingline_name_name">' + q[2][c]["uname"] + "&nbsp;";
            if (q[2][c]["tag"]) {
                d += "[" + q[2][c]["tag"] + "]";
            }
            d += "</div>";
            d += '<div class="guildwbwrankingline_name_awards">' + showAwards(c, q[2][c]["unr"], q[2][c]["gold"], q[2][c]["silber"], q[2][c]["bronze"]) + "</div>";
            d += '<div style="clear:both;"></div>';
            d += "</div>";
            d += '<div class="guildwbwrankingline_sum" style="' + add + '">' + q[2][c]["menge"] + "</div>";
            d += '<div style="clear:both;"></div>';
            d += "</div>";
        }
    }
    $("wbwcontent2ranking").innerHTML = d;
    if (q[1]["open"] == 1) {
        $("localwbwproduct").innerHTML = '<div class="kp' + n + '" style="position:absolute; width:15px; height:15px;"></div>';
        $("localwbwproductname").innerHTML = produkt_name[n];
    }
    else {
        $("localwbwproduct").innerHTML = "";
        $("localwbwproductname").innerHTML = "";
    }
    if (q[1] == 0) {
        $("localwbwstart").innerHTML = "---";
        $("localwbwend").innerHTML = "---";
    }
    else {
        $("localwbwstart").innerHTML = q[1]["wettbewerb_beginn"];
        $("localwbwend").innerHTML = q[1]["wettbewerb_ende"];
    }
    if (q[1]["open"] == 1) {
        var a = "";
        a += "<div>";
        a += '<div style="float:left;">' + t_stadt_wettbewerb_produkt_anzahl + "</div>";
        a += '<div style="float:left; margin-left:5px;"><input type="text" onkeyup="correctWBWentry(' + n + ');" onchange="correctWBWentry(' + n + ');" id="wbwproductsamount" maxlength="6" size="10"></div>';
        a += '<div style="float:left; margin-left:5px;"><input type="submit" value="' + t_stadt_wettbewerb_einschicken + '" onclick="sendWBWProductsCommit(' + n + ')"></div>';
        if (e == 1) {
            a += '<div style="float:left; margin-left:5px;"><button type="button" onclick="location.hash=\'#ownentry\'">' + t_stadt_wettbewerb_wobinich + "</button></div>";
        }
        a += '<div style="clear:both;"></div>';
        a += "</div>";
        $("localwbwform").innerHTML = a;
    }
} }
function correctWBWentry(b) { var a = $("wbwproductsamount").value; if (!isNumeric(a)) {
    a = 1;
} var c = checkRackItem(b); if (parseInt(a) > parseInt(c)) {
    a = c;
} $("wbwproductsamount").value = a; }
function sendWBWProductsCommit(e) { var b = $("wbwproductsamount").value; if (b != "") {
    var d = t_stadt_wettbewerb_confirm_text;
    d = str_replace("[*menge*]", b, d);
    d = str_replace("[*produkt*]", produkt_name[e], d);
    var a = "sendWBWproducts();";
    var c = "<div>" + d + "</div>";
    globalcommitbox(t_stadt_gartenverein_title, c, a);
}
else {
    return false;
} }
function sendWBWproducts() { var a = $("wbwproductsamount").value; if (a) {
    if (!isNumeric(a)) {
        a = 1;
    }
    a = parseInt(a);
    var b = { amount: a };
    generalAction("sendwbwproduct", b);
}
else {
    return false;
} }
function initLottery() { cityAction("initlottery"); }
function initLotteryResponse(a) { lotrack = a[1]; lotteryprizes = a[4]; updateLotRack(); updateLotteryPrizes(); if (a[2] == 0) {
    showDiv("dailylotleft");
}
else {
    hideDiv("dailylotleft");
} setLotteryDefaultBubble(); showDiv("lotterycontainer"); }
function updateLotteryPrizes(y) { var n = ""; var u = 0; for (_obj in lotteryprizes) {
    u++;
} if (!y || y <= 11 || y > u) {
    var b = 1;
    var h = 11;
    y = 11;
}
else {
    var h = y;
    var b = ((h - 11) + 1);
} var q = (parseInt(y) + parseInt(1)); var d = (parseInt(y) - parseInt(11)); var v = 0; var c = 0; var t = 1; for (var m = 0; m <= 100; m++) {
    if (lotteryprizes[m]) {
        if (t >= b && t <= h) {
            n += '<div id="lotteryprize' + m + "\" style=\"position:relative;\" onmouseover=\"$('prizeslot').style.border='solid red 2px';\" onmouseout=\"$('prizeslot').style.border='';\">";
            var w = "";
            if (lotteryprizes[m][0][0] == 1) {
                w = "farmhouse/thumbs/" + lotteryprizes[m][0][1] + ".jpg";
                useimgbig = "farmhouse/previews/" + lotteryprizes[m][0][1] + "_1.jpg";
            }
            n += "<div onmouseover=\"showDiv('prizeinfo" + m + "')\" onmouseout=\"hideDiv('prizeinfo" + m + "')\" ";
            n += 'style="position:absolute; top:' + v + "px; left:" + c + "px; width:40px; height:40px; background:url(" + imgpath + w + ') top left no-repeat;">';
            n += '<div id="lotteryprize_forbidden' + m + '" style="position:absolute; top:0px; left:0px; display:none; background:url(' + imgpath + 'cursors/cursor_forbidden.gif) top left no-repeat; width:40px; height:40px;"></div>';
            n += "</div>";
            if (t > 10) {
                var a = (parseInt(c) - parseInt(155));
            }
            else {
                a = c;
            }
            n += '<div style="display:none; width:188px; height:188px; position:absolute; top:' + (v + 50) + "px; left:" + a + "px; background:url(" + imgpath + useimgbig + ') top left no-repeat;" id="prizeinfo' + m + '">';
            n += '<div style="position:absolute; bottom:5px; left:5px;">';
            for (o = 0; o < lotteryprizes[m][1].length; o++) {
                n += '<div style="position:relative; float:left; margin-right:5px;"><img src="' + imgpath + "city/" + lotteryprizes[m][1][o][0] + '.jpg" border="0" width="40">';
                n += '<div style="position:absolute; top:5px; right:5px; color:#000; font-weight:bold;">' + lotteryprizes[m][1][o][1] + "</div>";
                n += "</div>";
            }
            n += '<div style="clear:both;"></div>';
            n += "</div>";
            n += "</div>";
            c = c + 50;
            n += "</div>";
        }
        t++;
    }
} n += '<div class="link" style="position:absolute; top:3px; right:46px; width:47px; height:36px; background:url(' + imgpath + 'farmhouse/right.png)" onclick="updateLotteryPrizes(' + q + ')"></div>'; $("lotteryprizes").innerHTML = n; var s = 1; for (var m = 1; m <= 100; m++) {
    if (lotteryprizes[m]) {
        if (s >= b && s <= h) {
            var e = 0;
            for (o = 0; o < lotteryprizes[m][1].length; o++) {
                var r = lotteryprizes[m][1][o][0];
                var l = lotteryprizes[m][1][o][1];
                if (lotrack[r]) {
                    if (lotrack[r] < l) {
                        e = 1;
                    }
                }
                else {
                    e = 1;
                }
            }
            if (e == 0) {
                if (usetouch == 1) {
                    $("lotteryprize" + m).onclick = new Function("setLotteryPrizeSlot(0," + m + ")");
                }
                else {
                    new Draggable("lotteryprize" + m, { revert: true });
                }
            }
            else {
                showDiv("lotteryprize_forbidden" + m);
            }
        }
        s++;
    }
} if (!usetouch) {
    Droppables.add("prizeslot", { onDrop: function (z) { setLotteryPrizeSlot(z); }, hoverclass: "hover" });
} }
function setLotteryPrizeSlot(b, d) { if (b.id) {
    var a = str_replace("lotteryprize", "", b.id);
}
else {
    if (d > 0) {
        var a = d;
    }
} if (lotteryprizes[a]) {
    $("prizeslotinner").innerHTML = '<img src="' + imgpath + "farmhouse/thumbs/" + lotteryprizes[a][0][1] + '.jpg" border="0">';
    var c = "";
    for (o = 0; o < lotteryprizes[a][1].length; o++) {
        c += '<div style="position:relative; float:left; width:40px; height:40px; background:url(' + imgpath + "city/" + lotteryprizes[a][1][o][0] + '.jpg) top left no-repeat;">';
        c += '<div style="position:absolute; top:5px; right:5px; font-weight:bold; color:#000;">' + lotteryprizes[a][1][o][1] + "</div>";
        c += "</div>";
        if (o < (lotteryprizes[a][1].length - 1)) {
            c += '<div style="float:left; position:relative; margin-top:12px;">&nbsp+&nbsp;</div>';
        }
    }
    hideDiv("lotterybubbleinfo");
    showDiv("lotterybubbleprize");
    showDiv("prizeslotcommit");
    showDiv("prizeslotcancel");
    $("prizeslotcommit").onclick = function () { cashLotteryPrizeCommit(a); };
    $("prizeslotlots").innerHTML = '<div style="float:left; position:relative; margin-top:12px;">&nbsp=&nbsp;</div>' + c + '<div style="clear:both;"></div>';
} }
function cleanLotteryPrizeSlot() { hideDiv("prizeslotcommit"); hideDiv("prizeslotcancel"); $("prizeslotcommit").onclick = function () { }; $("prizeslotinner").innerHTML = ""; $("prizeslotlots").innerHTML = ""; hideDiv("lotterybubbleprize"); showDiv("lotterybubbleinfo"); }
function cashLotteryPrizeCommit(c) { var a = "cashLotteryPrize(" + c + ");"; var b = "<div>" + lotterycommitbody + "</div>"; globalcommitbox(lotterycommithead, b, a); }
function cashLotteryPrize(a) { cityAction("cashlotteryprize", a); }
function cashLotteryPrizeResponse(a) { cleanLotteryPrizeSlot(); lotrack = a[1]; lotteryprizes = a[4]; updateLotRack(); updateLotteryPrizes(); }
function updateLotRack() { var c = ""; var e = 0; var d = 0; var b = 0; for (var a = 0; a < 100; a++) {
    if (lotrack[a]) {
        c += '<div style="position:absolute; bottom:' + e + "px; left:" + d + "px; width:60px; height:102px; background:url(" + imgpath + "city/lot_" + a + '.png) top left no-repeat;">';
        c += '<div style="position:absolute; right:8px; bottom:5px; font-size:14px; font-weight:bold; color:#fff; padding:2px; background-color:#DE9008;">' + lotrack[a] + "</div>";
        c += "</div>";
        b++;
        d += 65;
    }
} $("lotsrack").innerHTML = c; }
function dailyLot() { cityAction("newlot"); }
function dailyLotResponse(a) { lotrack = a[1]; showLotDecision(a[3]); if (a[3] > 0) {
    $("showCurrentLot").style.backgroundImage = "url(" + imgpath + "city/" + a[3] + ".jpg)";
} }
function showLotDecision(a) { showDiv("lotterytransp"); $("currentlot").style.backgroundImage = "url(" + imgpath + "city/lotback_" + a + ".jpg)"; showDiv("currentlot"); }
function hideLotDecision() { $("currentlotinner").innerHTML = ""; hideDiv("currentlot"); hideDiv("lotterytransp"); }
function lotGetPrize() { cityAction("lotgetprize"); }
function lotGetPrizeResponse(b) { hideLotDecision(); lotrack = b[1]; updateLotRack(); if (b[5]) {
    var e = "";
    for (var c = 0; c < 500; c++) {
        if (b[5][c]) {
            e += '<div class="kp' + c + ' lotteryprize_img"></div>';
            e += '<div class="lotteryprize_info">&nbsp;' + b[5][c] + "x&nbsp;" + produkt_name[c] + "</div>";
            e += '<div style="clear:both;"></div>';
        }
    }
    var a = "<div>" + lotterygetlotprize + "</div><br>" + e;
    var d = "hideDiv('lotterytransp'); hideDiv('productboxlottery'); hideDiv('commitboxgarden'); hideDiv('dailylotleft'); hideDiv('globalbox'); hideDiv('globaltransp');";
    if (b[6] && b[6].msg) {
        d += "globalerrorbox('" + b[6].msg + "')";
    }
    globalerrorbox(a, d);
} }
function buyNewLotCommit() { var a = "buyNewLot();"; var b = '<div><img src="' + imgpath + 'menu/coins.gif" height="12" width="12" border="0">&nbsp;' + lotterynewlotcoins + "&nbsp;" + t_coins + "</div>"; b += "<br><div>" + lotterynewlotcommitbody + "</div>"; globalcommitbox(lotterynewlotcommithead, b, a); }
function buyNewLot() { cityAction("buynewlot"); }
function buyNewLotResponse(a) { lotrack = a[1]; updateLotRack(); setLotteryGetLotBubble(); if (a[3] > 0) {
    $("showCurrentLot").style.backgroundImage = "url(" + imgpath + "city/" + a[3] + ".jpg)";
} }
function setLotteryGetLotBubble() { hideDiv("lotterybubbleinfo"); showDiv("lotterybuybubble"); window.setTimeout("setLotteryDefaultBubble()", 5000); }
function setLotteryDefaultBubble() { showDiv("lotterybubbleinfo"); hideDiv("lotterybubbleprize"); hideDiv("lotterybuybubble"); }
var windmill_stock = {};
var windmill_slots = {};
var windmill_slotremain = 0;
var windmill_ready = 0;
var windmill_first = 0;
var windmill_page = 1;
function initWindmill() { hideDiv("windmillformulainfo"); hideDiv("windmilltransp"); hideDiv("windmill_paper"); hideDiv("globalbox"); hideDiv("globaltransp"); cityAction("windmillinit"); }
function windmillStock() { var h = 1; var e = 8; if (windmill_page > 1) {
    h = (((windmill_page - 1) * 8) + 1);
    e = (windmill_page * 8);
} var c = ""; var d = 1; if (windmill_stock) {
    for (var b in windmill_stock) {
        if (d >= h && d <= e) {
            c += '<div class="windmill_stock_item" onmouseover="showFormulaInfosWindmill(' + b + ');" onmouseout="hideDiv(\'windmillformulainfo\');">';
            c += '  <div class="fm' + b + '"></div>';
            c += '  <div id="windmill_stock_amount_' + b + '" class="windmill_stock_amount">' + windmill_stock[b].amount + "</div>";
            c += "</div>";
            if (d % 4 == 0) {
                c += '<div class="clear windmill_stock_newline"></div>';
            }
        }
        d++;
    }
} var a = Math.ceil(d / 8); if (windmill_page > 1) {
    c += '<div class="link windmill_stock_navi_left" onclick="windmillNavi(-1)"></div>';
} if (a > 1 && windmill_page < a) {
    c += '<div class="link windmill_stock_navi_right" onclick="windmillNavi(1)"></div>';
} c += '<div class="clear"></div>'; $("windmillformula").innerHTML = c; }
function windmillNavi(a) { windmill_page = (windmill_page + a); windmillStock(); }
function windmillSlots() { for (var b = 1; b <= 2; b++) {
    var a = "";
    a += '<div id="windmill_slot' + b + '_img" class="windmill_slot_img"></div>';
    a += '<div id="windmill_slot' + b + '_remain" class="windmill_slot_remain"></div>';
    a += '<div id="windmill_slot' + b + '_cancel" class="windmill_slot_cancel mini_close" onclick="windmillDialog(\'windmillcancel\', ' + b + ')"></div>';
    a += '<div id="windmill_slot' + b + '_block" class="link windmill_slot_block"></div>';
    if (b == 2) {
        a += '<div id="windmill_slot_renttime_block" onmouseover="showDiv(\'windmill_slot_renttime_tt\')" onmouseout="hideDiv(\'windmill_slot_renttime_tt\')">';
        a += '  <div id="windmill_slot_renttime"></div>';
        a += '  <div id="windmill_slot_renttime_tt" class="blackbox">' + str_replace(":", "", forestry_slot_time) + "</div>";
        a += "</div>";
    }
    $("windmill_slot" + b).innerHTML = a;
    $("windmill_slot" + b).onclick = new Function("");
    $("windmill_slot" + b).onmouseover = new Function("");
    $("windmill_slot" + b).onmouseout = new Function("");
    hideDiv("windmill_slot" + b + "_cancel");
    if (windmill_slots[b]) {
        $("windmill_slot" + b + "_img").addClassName("fm" + windmill_slots[b].formula);
        $("windmill_slot" + b).onmouseover = new Function("showFormulaInfosWindmill(" + windmill_slots[b].formula + ")");
        $("windmill_slot" + b).onmouseout = new Function("hideDiv('windmillformulainfo')");
        if (windmill_slots[b].remain) {
            if (windmill_slots[b].remain > 0) {
                showDiv("windmill_slot" + b + "_cancel");
                $("windmill_slot" + b + "_remain").innerHTML = formatTime(windmill_slots[b].remain);
                setTimer("windmilltimer");
            }
            else {
                hideDiv("windmill_slot" + b + "_cancel");
                $("windmill_slot" + b + "_remain").innerHTML = statusProductionComplete;
                $("windmill_slot" + b).onclick = new Function("cityAction('windmillcrop', " + b + ")");
            }
        }
    }
    else {
        $("windmill_slot" + b).onclick = new Function("windmillDialog('windmillstartproduction', " + b + ")");
    }
    if (b == 2) {
        if (windmill_slotremain <= 0) {
            hideDiv("windmill_slot_renttime_block");
            showDiv("windmill_slot" + b + "_block");
            $("windmill_slot" + b).onclick = new Function("");
            $("windmill_slot" + b + "_block").onclick = new Function("windmillDialog('windmillbuyslot', " + b + ")");
        }
        else {
            showDiv("windmill_slot_renttime_block");
            hideDiv("windmill_slot" + b + "_block");
            setTimer("windmilltimer");
        }
    }
} }
function windmillDialog(h, s, a) { var r = ""; var l = ""; var t = ""; hideDiv("windmillformulainfo"); if (h == "windmillcancel") {
    r = windmillcancelheadline;
    l = windmillcancelcontent;
    t = "cityAction('windmillcancel', " + s + ")";
} if (h == "windmillstartproduction") {
    if (!s) {
        r += '<div class="headline">' + t_windmill_formula_select_head2 + "</div>";
        l += '<div style="margin-bottom:70px;">&nbsp;</div>';
    }
    else {
        r += '<div class="headline">' + t_windmill_formula_select_head + "</div>";
        l += '<div style="margin-bottom:50px;">' + t_windmill_formula_select_body + "</div>";
    }
    for (var d in windmill_stock) {
        var c = 1;
        if (formulas[0][d] && formulas[0][d][3].length) {
            var q = formulas[0][d][3];
            for (var b = 0; b < q.length; b++) {
                var n = checkRackItem(q[b][0]);
                if (n < q[b][1]) {
                    c = 0;
                }
            }
            if (c == 1 && s > 0) {
                t = "windmillDialog('windmillstartproductioncommit', " + s + ", " + d + ")";
            }
            else {
                t = "";
            }
            l += '<div class="link windmill_formula_select_item" onclick="' + t + '" onmouseover="showFormulaInfosWindmill(' + d + ');" onmouseout="hideDiv(\'windmillformulainfo\');">';
            l += '  <div class="fm' + d + '"></div>';
            l += '  <div class="windmill_stock_amount">' + windmill_stock[d].amount + "</div>";
            l += "</div>";
        }
    }
    $("windmill_formula_select_inner").innerHTML = r + l;
    showDiv("windmilltransp");
    showDiv("windmill_formula_select");
    return false;
} if (h == "windmillstartproductioncommit") {
    showDiv("windmill_paper");
    var e = "";
    if (windmill_stock[a]) {
        e += '<div class="headline">' + formulas[0][a][2] + "</div>";
        e += '<div class="fm' + a + '" style="position:relative; left:155px;"></div>';
        $("windmill_paper_headline").innerHTML = e;
        if (formulas[0][a] && formulas[0][a][3].length) {
            var q = formulas[0][a][3];
            var m = 1;
            for (var b = 0; b < q.length; b++) {
                var e = "";
                e += '<div class="l' + q[b][0] + '">';
                e += '  <div class="windmill_paper_pos_amount">' + q[b][1] + "</div>";
                e += "</div>";
                $("windmill_paper_pos" + m).innerHTML = e;
                m++;
            }
        }
    }
    $("windmill_paper_commit").onclick = new Function("cityAction('windmillstartproduction', " + a + ", " + s + ")");
    return false;
} if (h == "windmillbuyslot") {
    r = t_windmill_coinsslot_head;
    t_windmill_coinsslot_body = str_replace("%TIME%", formatTime(windmill_coinsslot.duration), t_windmill_coinsslot_body);
    t_windmill_coinsslot_body = str_replace("%COINS%", windmill_coinsslot.coins, t_windmill_coinsslot_body);
    l += t_windmill_coinsslot_body;
    t = "cityAction('windmillbuyslot')";
} globalcommitbox(r, l, t); }
function windmillTimer() { for (var a = 1; a <= 2; a++) {
    if (windmill_slots[a]) {
        windmill_slots[a].remain--;
        if (windmill_slots[a].remain <= 0) {
            $("windmill_slot" + a + "_remain").innerHTML = statusProductionComplete;
        }
        else {
            $("windmill_slot" + a + "_remain").innerHTML = formatTime(windmill_slots[a].remain);
        }
    }
} windmill_slotremain--; if (windmill_slotremain > 0) {
    $("windmill_slot_renttime").innerHTML = formatTime(windmill_slotremain);
}
else {
    if (windmill_slotremain == 0) {
        windmillSlots();
    }
} }
function closeWindmillFormulaSelect() { hideDiv("windmilltransp"); hideDiv("windmill_formula_select"); }
function closeWindmill() { closeWindmillFormulaSelect(); hideDiv("transp3"); hideDiv("windmillinner"); }
function checkWindmillStatus() { if (city == 2) {
    hideDiv("windmill_readyani");
    hideDiv("windmillani");
    if (windmill_ready) {
        if (windmill_ready.ready > 0) {
            showDiv("windmill_readyani");
        }
        if (windmill_ready.running > 0) {
            $("cityzone_2_1").onmouseover = new Function("showDiv('cityzone_tt_2_1'); hideDiv('windmillani')");
            $("cityzone_2_1").onmouseout = new Function("hideDiv('cityzone_tt_2_1'); showDiv('windmillani')");
            showDiv("windmillani");
        }
        else {
            $("cityzone_2_1").onmouseover = new Function("showDiv('cityzone_tt_2_1');");
            $("cityzone_2_1").onmouseout = new Function("hideDiv('cityzone_tt_2_1');");
        }
    }
} }
function showFormulaInfosWindmill(a) { $("windmillformulainfo").innerHTML = showFormulaInfos(a); showDiv("windmillformulainfo"); }
function showFormulaInfos(l) { if (formulas[0][l]) {
    var d = formulas[0][l];
    var h = "";
    h += '<div style="font-weight:bold;">' + d[2] + "</div>";
    if (d[5]) {
        if (d[5][0]) {
            var a = "kp" + d[5][0][0];
            var n = str_replace("%PRODUCT%", produkt_name[d[5][0][0]], powerup_bonustext1);
            n = str_replace("%AMOUNT%", d[5][0][1], n);
        }
        if (d[5][1]) {
            if (d[11] == 1) {
                var b = forestry_product[d[5][1][0]];
                var a = "f_m_symbol" + d[5][1][0];
            }
            else {
                var b = produkt_name[d[5][1][0]];
                var a = "kp" + d[5][1][0];
            }
            var n = str_replace("%PRODUCT%", b, powerup_bonustext2);
            n = str_replace("%TIME%", formatTime(d[5][1][2]), n);
            n = str_replace("%CROP%", "+" + d[5][1][1], n);
        }
        if (d[5][2]) {
            var a = "kp" + d[5][2][0];
            var n = str_replace("%PRODUCT%", produkt_name[d[5][2][0]], powerup_bonustext3);
            n = str_replace("%TIME%", formatTime(d[5][2][2]), n);
            n = str_replace("%POINTS%", "+" + d[5][2][1], n);
        }
    }
    h += "<div>" + windmill_bakeingtime + " " + formatTime(d[4]) + "</div>";
    h += '<div style="margin-top:10px; margin-bottom:10px;"><div class="' + a + ' recipedealer_infoimg"></div>';
    h += '<div class="recipedealer_infotxt">' + n + '</div><div style="clear:both;"></div></div>';
    h += "<div>" + windmill_zutaten + "</div>";
    for (var e = 0; e < d[3].length; e++) {
        if (d[3][e]) {
            var q = "";
            var c = d[3][e][1];
            var m = checkRackItem(d[3][e][0]);
            if (m) {
                if (m < d[3][e][1]) {
                    q = "important";
                    c = m + "/" + d[3][e][1];
                }
            }
            else {
                q = "important";
                c = "0/" + d[3][e][1];
            }
            h += '<div style="margin-top:2px;">';
            h += '<div class="kp' + d[3][e][0] + ' recipedealer_plistimg"></div>';
            h += '<div class="' + q + ' recipedealer_plisttxt">' + c + "&nbsp;" + produkt_name[d[3][e][0]] + "</div>";
            h += '<div style="clear:both;"></div>';
            h += "</div>";
        }
    }
    if (d[10] > 0) {
        if (d.endremain <= 0) {
            h += "<br><b>" + formularterminationinfo + "</b>";
        }
        else {
            h += "<div><br>" + str_replace("%TIME%", '<span style="font-weight:bold;" id="formulaterminationtime' + e + '">' + d.end + "</span>", formulartermination) + "</div>";
        }
    }
    return h;
} }
function showWindmillFormulaDropzone() { $("windmillformuladrop").style.border = "2px solid #f00"; }
function hideWindmillFormulaDropzone() { $("windmillformuladrop").style.border = "transparent"; }
function initNewsboy() { if (city == 1) {
    cityAction("initnewsboy");
} }
function initNewsboyResponse(a) { var c = a[1]; var d = ""; for (var b = 0; b < c.length; b++) {
    d += '<div class="newsboysubject">' + c[b]["subject"] + "</div>";
    d += '<div class="newsboybody">' + c[b]["body"] + "</div>";
} $("newsboyinner").innerHTML = d; showDiv("newsboy"); }
function closeNewsboy() { hideDiv("transp3"); hideDiv("newsboy"); }
var clothingdonation_data = new Object;
function showClothingDonation() { var d = clothingdonation_data.data; if (clothingdonation_data.data.gambleremain) {
    gametimer.clothingdonation_gambletimer = 1;
} $("clothingdonation_levelpoints").innerHTML = d.points + "&nbsp;" + t_points; var c = 0; var e = ""; if (setarab) {
    var b = "right";
}
else {
    var b = "left";
} for (var h in d.data["in"]) {
    var l = "";
    var m = checkRackItem(h);
    if (m < d.data["in"][h].amount) {
        l = "important";
        c = 1;
    }
    e += '<div style="margin-bottom:5px;">';
    e += '  <div class="l' + h + '" style="float:' + b + '; border-radius:5px"></div>';
    e += '  <div style="float:' + b + '; margin-top:13px;" class="' + l + '">&nbsp;' + d.data["in"][h].amount + "x&nbsp;" + produkt_name[h] + "</div>";
    e += '  <div class="clear"></div>';
    e += "</div>";
} $("clothingdonation_inner_left_inner").innerHTML = e; var e = ""; for (var h in d.data.out) {
    e += '<div style="margin-bottom:5px;">';
    e += '  <div class="l' + h + '" style="float:' + b + '; border-radius:5px"></div>';
    e += '  <div style="float:' + b + '; margin-top:13px;">&nbsp;' + d.data.out[h].amount + "x&nbsp;" + produkt_name[h] + "</div>";
    e += '  <div class="clear"></div>';
    e += "</div>";
} $("clothingdonation_inner_right_inner").innerHTML = e; $("clothingdonation_wish1_product").className = ""; $("clothingdonation_wish2_product").className = ""; if (d.data.slots) {
    for (var n in d.data.slots) {
        if (d.data.slots[n].pid) {
            $("clothingdonation_wish" + n + "_product").addClassName("l" + d.data.slots[n].pid);
        }
    }
} $("clothingdonation_level").innerHTML = clothingdonation_data.data.level; $("clothingdonation_levelname").innerHTML = clothingdonation_data.data.levelname; if (setarab) {
    $("clothingdonation_levelinner").style.right = -((200 / 100) * (100 - clothingdonation_data.data.percent)) + "px";
}
else {
    $("clothingdonation_levelinner").style.left = -((200 / 100) * (100 - clothingdonation_data.data.percent)) + "px";
} if (c) {
    $("clothingdonation_donatebutton").onclick = new Function();
}
else {
    $("clothingdonation_donatebutton").onclick = new Function("clothingDonationDialog('commit')");
} showDiv("clothingdonation_transp"); showDiv("clothingdonation"); var a = $("clothingdonation").getWidth(); $("clothingdonation").style.marginLeft = -((a + 40) / 2) + "px"; }
var gamblebox = 0;
function clothingDonationDialog(l, s) { if (setarab) {
    var a = "right";
    var t = "left";
}
else {
    var a = "left";
    var t = "right";
} if (l == "gamble") {
    gamblebox = 1;
    var q = t_clothingdonation_gambleheadline;
    var h = t_clothingdonation_gamblebody;
    if (clothingdonation_data.data.gambleremain > 0) {
        h += '<div style="margin-left:100px; margin-top:10px;">';
        h += '  <img border="0" src="' + imgpath + 'menu/coins.gif" style="float:' + a + ';">';
        h += '  <div style="float:' + a + '; margin-top:1px;">&nbsp;' + clothingdonation_data.data.gamblecoins + "&nbsp;" + t_coins + "</div>";
        h += '  <div class="clear"></div>';
        h += "</div>";
        h += '<div class="bonusinfo">' + str_replace("%TIME%", "<span id=clothingdonation_gambletimer></span>", t_clothingdonation_gamblebody_add) + "</div>";
    }
    else {
        h += '<div style="margin-top:10px;">' + forfree + "</div>";
    }
    var u = "cityAction('gambleclothingdonation'); gamblebox=0;";
    var r = "hideDiv('globaltransp'); hideDiv('globalbox'); gamblebox=0;";
} if (l == "commit") {
    var q = t_clothingdonation_commitheadline;
    var h = t_clothingdonation_commitbody;
    var u = "cityAction('donateclothingdonation')";
    var r = 0;
} if (l == "wish") {
    var b = 0;
    var q = t_clothingdonation_wishslotheadline;
    var h = "<div>" + t_clothingdonation_wishslotbody + "</div>";
    if (clothingdonation_data.data.data.slots[s].need.coins) {
        h += '<div style="margin-left:75px; margin-top:10px; margin-bottom:10px;">';
        h += '  <div style="float:' + a + "; margin-" + t + ':5px;">' + cityadcost + "</div>";
        h += '  <img border="0" src="' + imgpath + 'menu/coins.gif" style="float:' + a + ';">';
        h += '  <div style="float:' + a + '; margin-top:1px;">&nbsp;' + clothingdonation_data.data.data.slots[s].need.coins + "&nbsp;" + t_coins + "</div>";
        h += '  <div class="clear"></div>';
        h += "</div>";
    }
    if (clothingdonation_data.data.data.slots[s].need.pid) {
        var e = clothingdonation_data.data.data.slots[s].need.pid;
        var d = clothingdonation_data.data.data.slots[s].need.amount;
        var m = "";
        var n = checkRackItem(e);
        if (n < d) {
            m = "important";
            b = 1;
        }
        h += '<div style="margin-left:50px; margin-top:10px; margin-bottom:10px;">';
        h += '  <div style="float:' + a + "; margin-" + t + ':5px;">' + cityadcost + "</div>";
        h += '  <div style="float:' + a + "; margin-" + t + ':5px;" class="kp' + e + '"></div>';
        h += '  <div style="float:' + a + ';" class="' + m + '">' + d + "x&nbsp;" + produkt_name[e] + "</div>";
        h += '  <div class="clear"></div>';
        h += "</div>";
    }
    h += '<select id="clothingdonation_slotselect">';
    for (var c = 0; c < clothingdonation_data.products.length; c++) {
        var e = clothingdonation_data.products[c];
        if (produkt_name[e]) {
            if (clothingdonation_data.data.data.slots[1] && clothingdonation_data.data.data.slots[1].pid == e || clothingdonation_data.data.data.slots[2] && clothingdonation_data.data.data.slots[2].pid == e) { }
            else {
                h += "<option value='" + e + "'>" + produkt_name[e] + "</option>";
            }
        }
    }
    h += "</select>";
    h += "<input type='hidden' id='clothingdonation_slothidden' value='" + s + "'>";
    if (!b) {
        if (s == 1) {
            var u = "cityAction('setslotclothingdonation')";
        }
        else {
            var u = "clothingDonationDialog('wishcommit'," + s + ")";
        }
    }
    else {
        u = 0;
    }
    var r = 0;
} if (l == "wishcommit") {
    var e = $("clothingdonation_slotselect").value;
    var q = t_clothingdonation_wishslot_coins;
    var h = "<div>" + str_replace("%PRODUCT%", "<b>" + produkt_name[e] + "</b>", t_clothingdonation_wishslot_coins2) + "</div>";
    if (clothingdonation_data.data.data.slots[s].need.coins) {
        h += '<div style="margin-left:75px; margin-top:10px; margin-bottom:10px;">';
        h += '  <div style="float:' + a + "; margin-" + t + ':5px;">' + cityadcost + "</div>";
        h += '  <img border="0" src="' + imgpath + 'menu/coins.gif" style="float:' + a + ';">';
        h += '  <div style="float:' + a + '; margin-top:1px;">&nbsp;' + clothingdonation_data.data.data.slots[s].need.coins + "&nbsp;" + t_coins + "</div>";
        h += '  <div class="clear"></div>';
        h += "</div>";
    }
    h += "<input type='hidden' id='clothingdonation_slotselect' value='" + e + "'>";
    h += "<input type='hidden' id='clothingdonation_slothidden' value='" + s + "'>";
    if (!b) {
        var u = "cityAction('setslotclothingdonation')";
    }
    else {
        u = 0;
    }
    var r = 0;
} globalcommitbox(q, h, u, r); }
function gambleTimerClothingDonation() { if (clothingdonation_data.data.gambleremain && $("clothingdonation_gambletimer")) {
    clothingdonation_data.data.gambleremain--;
    $("clothingdonation_gambletimer").innerHTML = formatTime(clothingdonation_data.data.gambleremain);
} if (!clothingdonation_data.data.gambleremain || clothingdonation_data.data.gambleremain < 0) {
    if (gamblebox == 1) {
        clothingDonationDialog("gamble");
    }
    clearTimer("clothingdonation_gambletimer");
} }
function closeClothingDonation() { hideDiv("clothingdonation_transp"); hideDiv("clothingdonation"); }
var stats_page = 1;
var stats_type = 1;
function statsOpen() { showDiv("city_stats_transp"); showDiv("city_stats"); hideDiv("unknown_player"); hideDiv("unknown_guild"); hideDiv("stats_search_info"); hideDiv("stats_search_info_inner_player"); hideDiv("stats_search_info_inner_guild"); statsAction(0, 0, 0); }
function statsClose() { hideDiv("city_stats_transp"); hideDiv("city_stats"); hideDiv("transp3"); }
function statsAction(e, c, d) { var h = "stats"; if (e) {
    stats_page = 1;
} if (e == 0 && $("stats_type_select").value) {
    e = $("stats_type_select").value;
} if (e) {
    stats_type = e;
} if (!c) {
    c = 0;
} if (e == "statssearch") {
    var b = $("stats_search_field").value;
    if (b == "") {
        return false;
    }
    var a = "ajax/city.php?rid=" + rid + "&mode=statssearch&name=" + encodeURIComponent(b);
}
else {
    var a = "ajax/city.php?rid=" + rid + "&mode=" + h + "&type=" + e + "&page=" + stats_page + "&findme=" + c;
} if (d > 0) {
    a = "ajax/guild.php?rid=" + rid + "&mode=publicinit&guildid=" + d;
} var l = createAjaxRequestObj(); l.open("GET", a, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { statsActionResponse(l, e, d); }; l.send(null); }
var stats_data = {};
function statsActionResponse(request, type, guildid) { var result = _chkRequest(request); if (result != 0) {
    if (result[0] == 0) {
        globalerrorbox(result[1]);
    }
    else {
        var without = ["guilds", "medals", "stock", "buildings", "plants", "animals", "pets"];
        if (in_array(type, without)) {
            hideDiv("stats_findme");
        }
        else {
            showDiv("stats_findme");
        }
        if (type == "quests" || type == "plants") {
            showDiv("stats_cache_info");
        }
        else {
            hideDiv("stats_cache_info");
        }
        if (guildid > 0) {
            var data = result[0][0];
            $("publicguildname").innerHTML = data[1] + "&nbsp;[" + data[3] + "]";
            $("publicguildpts").innerHTML = data[6];
            $("publicguilddesc").innerHTML = data[2];
            $("publicguildjoin").innerHTML = data[13];
            $("publicguildmember").innerHTML = data[10];
            if (data[4]) {
                var parts = data[4].split("_");
                $("publicguildbanner_back").style.backgroundImage = "url(" + imgpath + "guildbanner/backgrounds/back_" + parts[0] + ".jpg)";
                $("publicguildbanner_border").style.backgroundImage = "url(" + imgpath + "guildbanner/borders/GeneriertesBild_" + parts[1] + "_" + parts[2] + ".png)";
                $("publicguildbanner_head").style.backgroundImage = "url(" + imgpath + "guildbanner/heads/GeneriertesBild_" + parts[3] + "_" + parts[4] + ".png)";
            }
            var backimg = "inner_background6.jpg";
            var beauties = "";
            if (result[0][4]) {
                if (result[0][4].length > 15) {
                    var start = 15;
                }
                else {
                    if (result[0][4].length > 6) {
                        var start = 6;
                    }
                    else {
                        var start = 0;
                    }
                }
                for (var i = start; i < result[0][4].length; i++) {
                    if (result[0][4][i]) {
                        beauties += '<div id="guildbeauty' + result[0][4][i] + '"></div>';
                    }
                    if (result[0][4][i] == 6) {
                        backimg = "guild/gh_update_1_complete.jpg";
                    }
                    else {
                        if (result[0][4][i] == 7) {
                            backimg = "inner_background6_2.jpg";
                        }
                        else {
                            if (result[0][4][i] == 16) {
                                backimg = "inner_background6_3.jpg";
                            }
                        }
                    }
                }
            }
            if (result[0][4].length >= 12 && result[0][4].length <= 15) {
                backimg = "guild/gh_update_2_complete.jpg";
            }
            $("guildpublic").style.backgroundImage = "url(" + imgpath + backimg + ")";
            $("publicguildbeauties").innerHTML = beauties;
            if (result[0].achievements) {
                for (var i = 1; i <= 50; i++) {
                    if ($("guildpublicachievement" + i)) {
                        if (result[0].achievements[i]) {
                            $("guildpublicachievement" + i).addClassName("gach" + i);
                        }
                        else {
                            $("guildpublicachievement" + i).addClassName("gach" + i + "off");
                        }
                    }
                }
            }
            var test = eval(result[0]["trophies"]);
            buildGuildWBWtrophies(test);
            for (var s in result[0]["park"]) {
                if ($("publicguildpark" + s)) {
                    if (s == 1) {
                        var name = "megacow" + result[0]["park"][s];
                    }
                    else {
                        if (s == 2) {
                            var name = "megasheep" + result[0]["park"][s];
                        }
                        else {
                            if (s == 3) {
                                var name = "megachicken" + result[0]["park"][s];
                            }
                        }
                    }
                    $("publicguildpark" + s).style.backgroundImage = "url(" + imgpath + "guild/" + name + ".jpg)";
                }
            }
            $("publicguildjoinbutton").onclick = new Function("joinGuild(" + guildid + ")");
            showDiv("guildpublictransp");
            showDiv("guildpublic");
        }
        else {
            if (type == "statssearch") {
                showDiv("stats_search_info");
                hideDiv("unknown_player");
                hideDiv("unknown_guild");
                hideDiv("stats_search_info_inner_player");
                hideDiv("stats_search_info_inner_guild");
                var html = "";
                if (result[1].player) {
                    $("search_info_name").innerHTML = result[1].player.uname + '&nbsp;<img class="link" src="' + imgpath + 'stadt/stats_sf_black.gif" onclick="window.open(\'' + http_host + "schaugarten/index.php?mode=view&user=" + result[1].player.unr + "')\">&nbsp;(<b>" + result[1].player.unr + "</b>)";
                    $("search_info_pkt").innerHTML = result[1].player.pkt;
                    $("search_info_bar").innerHTML = formatPrice(result[1].player.bar);
                    $("search_info_lvl").innerHTML = result[1].player.level;
                    $("search_info_quests").innerHTML = result[1].player.quests;
                    $("search_info_sells").innerHTML = result[1].player.sells;
                    $("search_info_money").innerHTML = formatPrice(result[1].player.money);
                    showDiv("stats_search_info_inner_player");
                }
                else {
                    showDiv("unknown_player");
                }
                if (result[1].guild) {
                    var name = result[1].guild.guildname;
                    if (result[1].guild["short"]) {
                        name += "&nbsp;[" + result[1].guild["short"] + "]";
                    }
                    $("search_info_guildname").innerHTML = name;
                    $("search_info_points").innerHTML = result[1].guild.guildpts;
                    $("search_info_tax").innerHTML = formatPrice(result[1].guild.bar);
                    $("search_info_members").innerHTML = result[1].guild.members;
                    $("search_info_birth").innerHTML = result[1].guild.createguild;
                    var desc = "---";
                    if (result[1].guild.guilddescription) {
                        desc = result[1].guild.guilddescription;
                    }
                    $("search_info_desc").innerHTML = desc;
                    $("search_guild_joinlink").onclick = new Function("statsAction(0, 0, " + result[1].guild.guildid + ")");
                    showDiv("stats_search_info_inner_guild");
                }
                else {
                    showDiv("unknown_guild");
                }
            }
            else {
                var sort = result[1].sort;
                var data = result[1].data;
                stats_data = data;
                stats_page = result[1].page;
                prev = 0;
                if (stats_page > 1) {
                    rank = ((stats_page - 1) * result[1].max) + 1;
                }
                else {
                    rank = 1;
                }
                var html = "";
                for (var i in data) {
                    if (type == "rating" && !data[i].unr) {
                        continue;
                    }
                    var compare = data[i][sort[(sort.length - 1)]];
                    var rank_str = rank + ".";
                    if (prev == compare) {
                        rank_str = "&nbsp;";
                    }
                    var medals = "&nbsp;";
                    if (data[i].gold > 0) {
                        medals += '<img class="link" src="' + imgpath + 'medaillen/10er.gif" title="' + data[i].gold + '">';
                    }
                    if (data[i].silber > 0) {
                        medals += '<img class="link" src="' + imgpath + 'medaillen/5er.gif" title="' + data[i].silber + '">';
                    }
                    if (data[i].bronze > 0) {
                        medals += '<img class="link" src="' + imgpath + 'medaillen/1er.gif" title="' + data[i].bronze + '">';
                    }
                    var addclass = "";
                    var addstyle = "";
                    if (data[i].own) {
                        addclass = "important";
                    }
                    if (data[i].giftid) {
                        addstyle = "opacity:0.5; color:#333;";
                    }
                    html += "<tr>";
                    html += '  <td class="' + addclass + '" style="' + addstyle + '">' + rank_str + "</td>";
                    for (var j = 0; j < sort.length; j++) {
                        if (j == (sort.length - 1)) {
                            addclass += " stats_right";
                        }
                        html += '<td class="' + addclass + " stats_" + sort[j] + '" style="' + addstyle + '">';
                        if (sort[j] == "percent") {
                            html += '<div style="background:url(' + imgpath + "stadt/percentbar.gif); width:" + (data[i][sort[j]] * 2) + 'px; height:15px;"></div>';
                        }
                        else {
                            if (sort[j] == "guildid") {
                                html += '<button type="button" class="link" onclick="statsAction(0, 0, ' + data[i][sort[j]] + ')">' + t_guild_join + "</button>";
                            }
                            else {
                                html += data[i][sort[j]];
                                if (sort[j] == "uname") {
                                    html += '&nbsp;<img class="link" src="' + imgpath + 'stadt/stats_sf_black.gif" onclick="window.open(\'' + http_host + "schaugarten/index.php?mode=view&user=" + data[i].unr + "')\">" + medals;
                                }
                            }
                        }
                        if (sort[j] == "counter" && type == "medals") {
                            html += "%";
                        }
                        html += "</td>";
                    }
                    html += "</tr>";
                    rank++;
                    prev = compare;
                }
                if ($("stats_table")) {
                    $("stats_table").update(html);
                }
                hideDiv("stats_navi_left");
                hideDiv("stats_navi_right");
                if (stats_page > 1) {
                    showDiv("stats_navi_left");
                }
                if (stats_page < result[1].maxpage) {
                    showDiv("stats_navi_right");
                }
                var without = ["stock", "buildings", "plants", "animals", "pets", "rating"];
                if (in_array(type, without)) {
                    hideDiv("statsNaviLine");
                }
                else {
                    showDiv("statsNaviLine");
                }
            }
        }
    }
} }
function statsFindMe() { var b = 0; for (var a in stats_data) {
    if (stats_data[a].own == 1) {
        b = 1;
        break;
    }
} if (!b) {
    statsAction(0, 1);
} }
function closeGuildPublic() { hideDiv("guildpublictransp"); hideDiv("guildpublic"); }
function joinGuild(b) { var a = "sendJoinMessage(" + b + ");"; globalcommitbox(0, guildjoincommit, a); }
function openBeemaster() { cityAction("initbeemaster"); }
function openBeemasterResponse(a) { var c = ""; if (cityzones[2] == 1 && a[1]) {
    var d = 0;
    c += '<div style="width:255px; margin-bottom:10px;">' + beemasterintro2 + "</div>";
    c += '<div style="background-color:#C3A75E; padding:5px; border-radius:5px;">';
    c += '  <select id="selectbees" style="float:left; margin-right:5px; padding:2px; border-radius:5px; border:1px solid #ccc;">';
    for (var b in a[1]) {
        d += a[1][b].p;
        if (b > 0) {
            c += '<option value="' + b + '">' + b + "&nbsp;" + beemasteritemplural + "&nbsp;=&nbsp;" + formatPrice(d) + "</option>";
        }
    }
    c += "  </select>";
    c += '  <button class="button_new link" style="float:right;" onclick="buyBees()">' + t_architect_buy + "</button>";
    c += '  <div class="clear"></div>';
    c += "</div>";
}
else {
    c += '<div style="width:255px; margin-bottom:10px;">' + beemasterintro + "</div>";
} globalcommitbox(t_beemaster, c, 0, 0, 1); }
function buyBees() { var a = $("selectbees").value; if (a > 0) {
    cityAction("buybee", "5_" + a);
}
else {
    return false;
} }
function openMarktschreier() { if (city == 1) {
    var a = "";
    $("marktschreierinner").style.backgroundImage = "url(" + imgpath + "city/marktschreier_inner.jpg)";
    cityAction("initmarktschreier");
} }
function openMarktschreiberResponse(n) { var b = n[1]; var l = ""; var e = ""; for (var d = 0; d < b.length; d++) {
    var c = "messagesOpen('" + b[d]["name"] + "');";
    e += '<div style="padding:5px; border-bottom:1px dashed #9697DA;" onmouseover="this.style.backgroundColor=\'#CACCE3\';" onmouseout="this.style.backgroundColor=\'transparent\';">';
    e += '<div style="float:left; width:75px; overflow:visible;">' + b[d]["date"] + "</div>";
    e += '<div style="float:left; position:relative; width:20px;">';
    e += '<img src="' + imgpath + 'guild/mail.gif" onclick="' + c + '" onmouseover="showDiv(\'msentryinfo' + d + "');\" onmouseout=\"hideDiv('msentryinfo" + d + '\');" class="link">';
    e += '<br><img src="' + imgpath + "guild/contract.gif\" onclick=\"showPage('contracts', '" + b[d]["name"] + "');\" onmouseover=\"showDiv('msentry2info" + d + "');\" onmouseout=\"hideDiv('msentry2info" + d + '\');" class="link">';
    if (b[d]["self"] == 1) {
        e += '<img class="link" width="12" height="12" src="' + imgpath + 'guild/cancel.gif" onclick="delMarktschreierCommit(' + b[d]["msid"] + ');">';
    }
    e += '<div id="msentryinfo' + d + '" style="display:none; position:absolute; top:10px; left:35px; white-space:nowrap;" class="blackbox">' + str_replace("%USER%", b[d]["name"], marktschreierwriteuser) + "</div>";
    e += '<div id="msentry2info' + d + '" style="display:none; position:absolute; top:30px; left:35px; white-space:nowrap;" class="blackbox">' + str_replace("%USER%", b[d]["name"], marktschreierwritecontract) + "</div>";
    e += "</div>";
    e += '<div style="float:left; width:270px; overflow:hidden;"><b>' + str_replace("%USER%", b[d]["name"], marktschreieruserwrote) + "</b><br>" + b[d]["message"] + "</div>";
    e += '<div style="clear:both;"></div>';
    e += "</div>";
} var a = marktschreiermaxletters; l += '<textarea id="marktschreierentry" name="marktschreierentry" rows="2" cols="62" onkeyup="calcMarktschreierLength();" onChange="calcMarktschreierLength();"></textarea>'; l += '<button class="link" type="button" id="marktschreiersend" name="marktschreiersend" onclick="writeMarktschreier();">' + marktschreiersubmit + "</button>&nbsp;"; l += '<span style="font-size:10px;" id="marktschreierletterscounter">' + str_replace("%LETTERS%", a, marktschreierletters) + "</span>"; l += '<div style="font-size:9px; color:#f00;">' + marktschreierwarnung + "</div>"; var h = '<span onmouseover="showDiv(\'infocoins\');" onmouseout="hideDiv(\'infocoins\');"><img src="' + imgpath + 'menu/coins.gif" border="0" width="12" height="12">&nbsp;' + marktschreiercostcoins + "</span>"; var m = '<div class="blackbox" id="infocoins" style="display:none; z-index:100; position:absolute; top:50px; left:105px;">' + t_coins + "</div>"; $("marktschreierinnerintro").innerHTML = marktschreierintro + "<br><br>" + str_replace("%COINS%", h, marktschreiercost); $("marktschreierinnerinput").innerHTML = l; $("marktschreierinnercontent").innerHTML = e; showDiv("transp3"); showDiv("marktschreierinner"); }
function calcMarktschreierLength() { var a = $("marktschreierentry").value; if (a.length > marktschreiermaxletters) {
    $("marktschreierentry").value = a.substring(0, marktschreiermaxletters);
    $("marktschreierentry").scrollTop = $("marktschreierentry").scrollHeight;
    var a = $("marktschreierentry").value;
    var b = a.length;
    $("marktschreierletterscounter").innerHTML = str_replace("%LETTERS%", b, marktschreierletters);
} if (a.length > 0) {
    var b = parseInt(marktschreiermaxletters) - parseInt(a.length);
    $("marktschreierletterscounter").innerHTML = str_replace("%LETTERS%", b, marktschreierletters);
}
else {
    $("marktschreierletterscounter").innerHTML = str_replace("%LETTERS%", marktschreiermaxletters, marktschreierletters);
} }
function writeMarktschreier() { var a = $("marktschreierentry").value; if (a.length == 0 || a.length > marktschreiermaxletters) {
    return false;
}
else {
    cityAction("writemarktschreier", a);
} }
function delMarktschreierCommit(b) { var c = marktschreierdelinfo; var a = "delMarktschreier(" + b + ")"; globalcommitbox(marktschreierdelheadline, c, a); }
function delMarktschreier(a) { cityAction("delmarktschreier", a); }
var birthday_citysheep_data = {};
var birthday_buy_block = 0;
function birthdayCitySheepDialog(c, a) { var e = ""; var d = ""; var l = ""; var h = ""; if (c == "init") {
    e = t_birthday_citysheep_head;
    d += '<div style="margin-top:-15px;">';
    d += '  <div style="float:left; margin-top:6px; margin-right:5px; margin-left:90px;">' + t_birthday_citysheep_stock + "</div>";
    d += '  <div style="position:relative; float:left;" id="birthdayCitySheepAmount">' + birthday_citysheep_data.cards;
    d += '    <div id="birthday_citysheep_flyer"></div>';
    d += "  </div>";
    d += '  <div class="clear"></div>';
    d += "</div>";
    if (birthday_suitcase_buytime == 1) {
        d += '<button type="button" class="link button_new" onclick="birthdayCitySheepDialog(\'buy\')">' + t_birthday_citysheep_buy + "</button>";
    }
    d += '<div id="birthday_citysheep_cards">';
    for (var b in birthday_citysheep_data.sheeps) {
        var m = "";
        var n = "birthdayCitySheepDialog('swap', " + b + ")";
        if (birthday_citysheep_data.sheeps[b].cards > birthday_citysheep_data.cards) {
            m = "important";
            n = "";
        }
        if (birthday_citysheep_data.current && in_array(b, birthday_citysheep_data.current)) {
            n = "";
        }
        d += '<div id="birthday_citysheep_card' + b + '" class="birthday_citysheep_card link" onclick="' + n + '">';
        d += '  <div class="birthday_citysheep_card_points ' + m + '">' + birthday_citysheep_data.sheeps[b].cards + "</div>";
        if (birthday_citysheep_data.current && in_array(b, birthday_citysheep_data.current)) {
            d += '  <div class="birthday_citysheep_card_check"></div>';
        }
        d += "</div>";
    }
    d += '  <div class="clear"></div>';
    d += "</div>";
    globalcommitbox(e, d, l, h);
    $("globalbox_content").addClassName("birthday_townsheep_globalbox_content_mod");
    $("globalbox").addClassName("birthday_townsheep_globalbox_mod");
    if (birthday_citysheep_data.update) {
        window.setTimeout(function (r) { startCityFlyer("birthday_citysheep_flyer", birthday_citysheep_data.update, 3000); });
    }
}
else {
    if (birthday_citysheep_data.update) {
        birthday_citysheep_data.update = 0;
    }
} if (c == "swap") {
    e = t_birthday_citysheep_invite;
    d = str_replace("%AMOUNT%", birthday_citysheep_data.sheeps[a].cards, t_birthday_citysheep_invite_body);
    l = "cityAction('birthday_citysheep_swap', " + a + ")";
    h = "birthdayCitySheepDialog('init');";
    globalcommitbox(e, d, l, h);
} if (c == "buy") {
    e = t_birthday_citysheep_buy;
    for (var b in birthday_citysheep_data.buy) {
        var m = "";
        var n = "birthdayCitySheepDialog('buycommit', " + b + ")";
        if (birthday_citysheep_data.buy[b] > birthday_citysheep_data.coins) {
            m = "important";
            n = "";
        }
        var q = str_replace("%AMOUNT1%", birthday_citysheep_data.buy[b], t_birthday_citysheep_buy_line);
        q = str_replace("%AMOUNT2%", b, q);
        d += '<button type="button" class="birthday_townsheep_buy_button button_new link ' + m + '" onclick="' + n + '">' + q + "</button><br><br>";
        l = "";
        h = "birthdayCitySheepDialog('init');";
        globalcommitbox(e, d, l, h, 1);
    }
} if (c == "buycommit") {
    e = t_birthday_citysheep_buy;
    d = str_replace("%AMOUNT1%", a, t_birthday_citysheep_buy_body);
    d = str_replace("%AMOUNT2%", birthday_citysheep_data.buy[a], d);
    l = "cityAction('birthday_citysheep_buy', " + a + ")";
    h = "birthdayCitySheepDialog('init');";
    globalcommitbox(e, d, l, h);
} }
function showCityEasterEventHelpText() { if ($("eastercityeventhelptext").style.display == "block") {
    $("eastercityeventhelptext").style.display = "none";
    $("cityeasterevent").style.zIndex = "35";
}
else {
    $("eastercityeventhelptext").style.display = "block";
    $("cityeasterevent").style.zIndex = "25";
} }
function initCityEasterEvent() { var a = createAjaxRequestObj(); a.open("GET", "ajax/city.php?rid=" + rid + "&mode=easterinit", true); a.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); a.onreadystatechange = function () { initCityEasterEventResponse(a); }; a.send(null); }
function initCityEasterEventResponse(b) { var a = _chkRequest(b); if (a != 0) {
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        showDiv("transp3");
        showDiv("cityeasterevent");
        $("cityeastereventeggamount").innerHTML = a[2];
        if (a[2] >= city_easterevent_needeggs) {
            hideDiv("eastercityeventrest");
            $("eastercityeventprize").onclick = new Function("createCityEasterPrize()");
        }
        else {
            $("eastercityeventprize").onclick = new Function("");
            $("eastercityeventrest").innerHTML = str_replace("%EGGS%", (city_easterevent_needeggs - a[2]), city_easterevent_rest);
            showDiv("eastercityeventrest");
        }
        if (a[1] > 0) {
            showDiv("eastercityeventdaily");
            $("eastercityeventdaily").innerHTML = str_replace("%EGGS%", a[1], city_easterevent_daily);
        }
        else {
            hideDiv("eastercityeventdaily");
        }
        if (a[3] == 1) {
            showDiv("eastercityeventready");
            hideDiv("eastercityeventinner");
        }
        else {
            hideDiv("eastercityeventready");
            showDiv("eastercityeventinner");
        }
        updateMenu();
        updateRack(_currRack, 0);
    }
} }
function createCityEastereggsCommit() { if (checkRackItem(city_easterevent_changeitem) >= city_easterevent_changeamount) {
    var b = "";
    b += '<div style="margin-bottom:5px;">' + cityadcost + "</div>";
    b += '<div style="float:left; margin-left:40px; margin-bottom:5px;" class="kp' + city_easterevent_changeitem + '"></div>';
    b += '<div style="float:left; margin-bottom:5px;">&nbsp;' + city_easterevent_changeamount + "x&nbsp;" + produkt_name[city_easterevent_changeitem] + "</div>";
    b += '<div style="clear:both;"></div>';
    b += '<div style="float:left; margin-left:40px; margin-bottom:5px;"><img src="' + imgpath + 'menu/coins.gif" border="0" height="12"></div>';
    b += '<div style="float:left; margin-bottom:5px;">&nbsp;' + city_easterevent_changecoins + "&nbsp;" + t_coins + "</div>";
    b += '<div style="clear:both;"></div>';
    var a = "createCityEastereggs()";
    var c = "hideDiv('globaltransp'); hideDiv('globalbox');";
    globalcommitbox(city_easterevent_changechicks, b, a, c);
} }
function createCityEastereggs() { if (checkRackItem(city_easterevent_changeitem) >= city_easterevent_changeamount) {
    hideDiv("globalbox");
    hideDiv("globaltransp");
    var a = createAjaxRequestObj();
    a.open("GET", "ajax/city.php?rid=" + rid + "&mode=eastercreateeggs", true);
    a.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    a.onreadystatechange = function () { initCityEasterEventResponse(a); };
    a.send(null);
} }
function createCityEasterPrize() { var a = createAjaxRequestObj(); a.open("GET", "ajax/city.php?rid=" + rid + "&mode=eastergetprize", true); a.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); a.onreadystatechange = function () { initCityEasterEventResponse(a); }; a.send(null); }
function closeCityEasterEvent() { hideDiv("cityeasterevent"); hideDiv("transp3"); }
function cityTelekomOpen(h) { var e = getRandom(1000000, 9999999); var d = "Das Netz der Zukunft"; var c = ""; c += '<div style="margin-bottom:-5px; margin-top:-25px;"><a href="https://media.gan-online.com/www/delivery/ck.php?oaparams=2__bannerid=13144__zoneid=0__cb=' + e + '" target="_blank"><img src="http://gan.wavecdn.net/logo.png" height="70"></a></div>'; c += '<div style="margin-bottom:5px;">Der Online-Shop in Klein Muhstein benötigt Waren von dir. Damit Du der gestiegenen Nachfrage gerecht werden kannst, schenkt dir die Telekom bis zum Jahresende den <b>zweiten Wachstumsbeschleuniger</b> einmal täglich <b>gratis</b> und ein tolles Setzkastenitem!'; if (h.finished == 1) {
    c += '<div style="margin-botton:5px;"><br><span style="font-weight:bold;">Gratulation, du hast es geschafft!</span><br><br>Du kannst nun täglich bis zum 31.12.2013, 23:59:59 folgenden Beschleuniger bei einem Acker deiner Wahl benutzen:</div>';
    c += '<div style="margin:0px auto;" class="gardenspeedupbox_item">';
    c += '  <div class="gardenspeedupbox_item_coins">kostenlos</div>';
    c += '  <div class="gardenspeedupbox_item_time">00:30:00</div>';
    c += "</div>";
}
else {
    c += "<br><br>Beliefere dafür den Online-Shop bis zum " + h.end + " mit der Grundausstattung:</div>";
    c += '  <div style="float:left; margin-right:5px;"><img src="' + imgpath + "gifts/" + h.config.reward.giftid + '.gif"></div>';
    c += '  <div style="float:right;">';
    for (var b in h.config.need) {
        var a = "";
        var l = 0;
        if (!checkRackItem(b)) {
            a = "important";
        }
        if (h.entries[b]) {
            l = h.entries[b];
        }
        c += '<div class="city_telekom_entry_line">';
        c += '  <div class="kp' + b + ' city_telekom_entry_line_img"></div>';
        c += '  <div class="city_telekom_entry_line_stats ' + a + '">' + l + "/" + h.config.need[b] + "&nbsp;" + t_stk + "</div>";
        if (!h.entries[b]) {
            if (a == "") {
                c += '<button type="button" class="button_new link city_telekom_entry_line_button" onclick="cityAction(\'telekomentry\', ' + b + ')">' + t_inner_feedsubmit + "</button>";
            }
        }
        else {
            c += '<div class="city_telekom_entry_line_ok"></div>';
        }
        c += '  <div class="clear"></div>';
        c += "</div>";
    }
    c += "  </div>";
    c += '  <div class="clear"></div>';
} c += '<iframe style="height:1px; width:1px; border:0px;" src="http://media.gan-online.com/www/delivery/lg.php?zoneid=0&campaignid=4980&bannerid=13145&cb=' + e + '"></iframe>'; c += '<iframe style="height:1px; width:1px; border:0px;" src="http://bs.serving-sys.com/BurstingPipe/adServer.bs?cn=tf&c=19&mc=imp&pli=8582109&PluID=0&ord=' + e + '&rtu=-1"></iframe>'; globalcommitbox(d, c, 0); }
var wm_sheep_block = 0;
var wm_sheep_config = {};
var wm_sheep_coins = {};
function openWM(c) { wm_sheep_block = 0; wm_sheep_config = c.config; wm_sheep_coins = c.coins; for (var b in c.config) {
    if ($("wmbox_sheep" + b)) {
        var a = "";
        if (c.sheeps[b]) {
            showDiv("wmbox_sheep_active" + b);
        }
        else {
            if (!c.balls || c.balls < c.config[b][0]) {
                $("wmbox_sheep_balls" + b).addClassName("important");
            }
            else {
                a = "dialogWM('exchange', " + b + ")";
                $("wmbox_sheep_balls" + b).removeClassName("important");
            }
        }
        $("wmbox_sheep" + b).onclick = new Function(a);
    }
} $("wmbox_sheep_count").innerHTML = c.balls; showDiv("transp3"); showDiv("wmbox"); }
function dialogWM(l, m) { var h = 0; if (l == "buy") {
    var e = t_wm_event_buy_head;
    var b = "";
    for (var d in wm_sheep_coins) {
        var a = str_replace("%AMOUNT%", wm_sheep_coins[d], t_wm_event_buy_body);
        a = str_replace("%COINS%", d, a);
        b += '<div class="wm_coins_button link" onclick="dialogWM(\'buy_commit\', ' + d + ')">' + a + "</div>";
    }
    h = 1;
} if (l == "buy_commit") {
    var e = t_wm_event_buy_head;
    var a = str_replace("%AMOUNT%", wm_sheep_coins[m], t_wm_event_buy_body);
    var b = str_replace("%COINS%", m, a);
    var c = "cityAction('wm_buyballs', " + m + ")";
} if (l == "exchange") {
    var e = t_wm_event_exchange_head;
    var b = str_replace("%NAME%", wm_sheep_config[m][1], t_wm_event_exchange_body);
    b = str_replace("%AMOUNT%", wm_sheep_config[m][0], b);
    var c = "cityAction('wm_exchangeballs', " + m + ")";
} globalcommitbox(e, b, c, 0, h); }
function closeWM() { hideDiv("transp3"); hideDiv("wmbox"); }
var cityFlyerId = "";
function startCityFlyer(c, b, a) { cityFlyerId = c; if (!("transition" in $(c).style) && !("webkitTransition" in $(c).style)) {
    return false;
} $(c).innerHTML = b; $(c).addClassName(c); setTimeout(closeCityFlyer, a); }
function closeCityFlyer() { $(cityFlyerId).innerHTML = ""; $(cityFlyerId).removeClassName(cityFlyerId); }
var collectevent = function () { this.data = {}; };
collectevent.prototype.action = function (a, b) { ajaxAction("farm", a, b, pets.response); };
collectevent.prototype.response = function (b, a, c) { };
collectevent.prototype.init = function () { this.update(); };
collectevent.prototype.update = function () { var e = 0; var h = 0; if (this.data.data.points) {
    e = this.data.data.points;
    h = ((this.data.data.points * 100) / this.data.config.max);
} var d = '<div id="collectevent">'; d += '  <div class="intro">'; d += "    <div>" + t_collectevent_intro + "</div>"; d += '    <div class="timer">' + t_event_resttime + ' <span id="collectevent_timer"></span></div>'; d += "  </div>"; d += '  <div class="bar">'; d += '    <div class="amount">'; d += '      <div class="item birthday_collectitem"></div>'; d += "      <div>" + formatNumber(Math.min(e, this.data.config.max)) + "/" + formatNumber(this.data.config.max) + "</div>"; d += "    </div>"; d += '    <div class="layers_transp">'; for (var a in this.data.config.rewards) {
    d += '<img class="layer layer' + a + '" src="' + imgpath + 'cakelayer2.png">';
} d += "    </div>"; d += '    <div class="layers" style="height:' + Math.min(h, 100) + '%">'; for (var a in this.data.config.rewards) {
    d += '<img class="layer layer' + a + '" src="' + imgpath + 'cakelayer2.png">';
} d += "    </div>"; d += '    <div class="steps">'; for (var a in this.data.config.rewards) {
    var m = "uneven";
    if (a % 2 == 0) {
        m = "even";
    }
    var n = ((this.data.config.rewards[a].points * 100) / this.data.config.max);
    d += '<div id="collectevent_step' + a + '" class="step ' + m + '" style="height:' + n + '%">';
    for (var l in this.data.config.rewards[a].rewards) {
        if (l == "giftid") {
            var b = this.data.config.rewards[a].rewards[l];
            var c = b;
            if (presents_hack[b]) {
                c = presents_hack[b];
            }
            d += '<div class="giftid ' + m + '" style="background-image:url(' + imgpath + "gifts/" + c + '.gif)"></div>';
        }
        if (l == "windmill") {
            d += '<div class="windmill ' + m + '">' + this.data.config.rewards[a].rewards.percent + "%</div>";
        }
        if (l == "package") {
            d += '<div class="package ' + m + " pets_package" + this.data.config.rewards[a].rewards[l] + '"></div>';
        }
    }
    if (this.data.data.reward && this.data.data.reward[a]) {
        d += '<div class="megafield_product_ready ready ' + m + '"></div>';
    }
    d += '  <div class="need ' + m + '">' + formatNumber(this.data.config.rewards[a].points) + "</div>";
    d += "</div>";
} d += "    </div>"; d += "  </div>"; d += '  <div id="collectevent_help_link" class="helpbutton_blue link" onclick="collectevent.help()"></div>'; d += '  <div id="collectevent_sheep" class="sheep" onclick="collectevent.sheepClick()"></div>'; d += "</div>"; globalBoxFlex(t_collectevent_title, d, 0, 0, 1); $("globalbox").style.top = "50px"; };
collectevent.prototype.daily = function (b) { var a = '<div id="collectevent_daily">'; a += '  <div class="line">'; a += '    <div class="item birthday_collectitem"></div>'; a += '    <div class="amount">' + b + "&nbsp;" + t_collectevent_item + "</div>"; a += '    <div class="clear"></div>'; a += "  </div>"; a += '  <div class="bonusinfo">' + str_replace("%POINTS%", b, t_collectevent_daily_intro) + "</div>"; a += '  <div class="button_new link eventbutton" onclick="collectevent.init()">' + t_collectevent_daily_link + "</div>"; a += '  <div id="collectevent_daily_confetti" class="confetti"></div>'; a += "</div>"; globalcommitbox(t_collectevent_daily_head, a, 0, 0, 1); $("globalbox_char").removeClassName("globalbox_sheep").addClassName("globalbox_birthdaysheep"); hideDiv("globalbox_charani"); setTimeout(function () { hideDiv("collectevent_daily_confetti"); }, 1000); };
collectevent.prototype.timer = function () { this.data.data.remain--; if ($("collectevent_timer")) {
    $("collectevent_timer").innerHTML = formatTime(this.data.data.remain);
} if (this.data.data.remain <= 0) {
    collectevent.finish();
} };
collectevent.prototype.flyer = function (c) { var b = getRandom(1000, 100000); var d = "collectevent_link_flyer" + b; var a = '<div id="' + d + '" class="flyer idle">'; a += '  <div class="img birthday_collectitem"></div>'; a += '  <div class="amount">' + c + "x</div>"; a += "</div>"; $("collectevent_link").insert(a); setTimeout(function () { $(d).removeClassName("idle").addClassName("fly"); }, 200); setTimeout(function () { $(d).remove(); }, 1200); };
collectevent.prototype.sheepClick = function () { var b = getRandom(-150, 250); var a = getRandom(-250, 300); $("collectevent").insert('<div id="collectevent_sheep_confetti" class="confetti" style="top:' + b + "px; left:" + a + 'px"></div>'); setTimeout(function () { $("collectevent_sheep_confetti").remove(); }, 1000); };
collectevent.prototype.finish = function () { if ($("collectevent")) {
    hideDiv("globaltransp");
    hideDiv("globalbox");
} hideDiv("collectevent_link"); clearTimer("collectevent"); this.data = {}; };
collectevent.prototype.help = function () { var e = '<div id="collectevent_help">'; e += '  <div class="line"><b>' + t_collectevent_help1 + "</b></div>"; e += '  <div class="reward">'; e += '    <div class="line">'; e += '      <div class="list text">' + t_collectevent_help2 + "</div>"; e += '      <div class="list birthday_collectitem"></div>'; e += '      <div class="list text">' + this.data.config.daily_points + "&nbsp;" + t_collectevent_item + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += '    <div class="line">'; e += '      <div class="list text">' + t_collectevent_help3 + "</div>"; e += '      <div class="list birthday_collectitem"></div>'; e += '      <div class="list text">' + str_replace("%POINTS%", this.data.config.points_for_coin, t_collectevent_help3_1) + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += '    <div class="line">'; e += '      <div class="list text">' + t_collectevent_help4 + "</div>"; e += '      <div class="list birthday_collectitem"></div>'; e += '      <div class="list text">' + t_collectevent_help4_1 + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += "  </div>"; e += '  <div class="bonusinfo">'; e += '    <div class="line">' + t_collectevent_help5 + "</div>"; e += '    <div class="line">'; for (var d = 0; d < this.data.config.valid_buildings.length; d++) {
    e += buildinginfos[0][this.data.config.valid_buildings[d]][10];
    if (d != (this.data.config.valid_buildings.length - 1)) {
        e += ", ";
    }
} e += "    </div>"; e += "  </div>"; var r = ""; var h = ""; for (var b in this.data.config.rewards) {
    var n = "uneven";
    if (b % 2 == 0) {
        n = "even";
    }
    var q = ((this.data.config.rewards[b].points * 100) / this.data.config.max);
    e += '<div id="collectevent_step' + b + '" class="step ' + n + '" style="height:' + q + '%">';
    for (var l in this.data.config.rewards[b].rewards) {
        if (l == "giftid") {
            var a = this.data.config.rewards[b].rewards[l];
            var c = a;
            if (presents_hack[a]) {
                c = presents_hack[a];
            }
            r += '<div class="list giftid" style="background-image:url(' + imgpath + "gifts/" + c + '.gif); height:50px; width:50px;"></div>';
        }
        if (l == "package") {
            h += '<div class="list package pets_package' + this.data.config.rewards[b].rewards[l] + '"></div>';
        }
    }
} e += '  <div class="line"><b>' + t_collectevent_reward + "</b></div>"; e += '  <div class="reward">'; e += '    <div class="line">'; e += r; e += '      <div class="list text">' + t_collectevent_reward_presents + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += '    <div class="line">'; e += h; e += '      <div class="list text">' + t_collectevent_reward_packages + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += '    <div class="line">'; e += '      <div class="list windmill"></div>'; e += '      <div class="list text">' + t_collectevent_reward_powerups + "</div>"; e += '      <div class="clear"></div>'; e += "    </div>"; e += "  </div>"; e += "</div>"; var m = "collectevent.init()"; globalBoxFlex(t_collectevent_title, e, 0, m, 1); $("globalbox").style.top = "35px"; };
var contracts_data = {};
var contracts_cart = {};
var contracts_category = "v";
function contractsInit(a) { contractsNavi(); var d = 0; for (var b = 0; b < contracts_data.overview["in"].length; b++) {
    var e = contracts_data.overview["in"][b];
    if (e.read < 1) {
        d++;
    }
} $("contracts_navi_overview_in_count").innerHTML = d; showDiv("contracts_transp"); showDiv("contracts_main"); if (!a) {
    contractsOverview("in");
}
else {
    contractsNew();
    $("contracts_new_cart_receiver").value = a;
} }
function contractsNavi(a) { if (!a) {
    a = "overview_in";
} $("contracts_navi_new").removeClassName("contracts_navi_item_active"); $("contracts_navi_overview_in").removeClassName("contracts_navi_item_active"); $("contracts_navi_overview_out").removeClassName("contracts_navi_item_active"); $("contracts_navi_" + a).addClassName("contracts_navi_item_active"); hideDiv("contracts_navi_new_content"); hideDiv("contracts_navi_overview_in_content"); hideDiv("contracts_navi_overview_out_content"); $("contracts_navi_overview_in_content").innerHTML = ""; $("contracts_navi_overview_out_content").innerHTML = ""; showDiv("contracts_navi_" + a + "_content"); }
function contractsNewNavi(c) { contracts_category = c; contractsNewProducts(); var b = ["v", "e", "z", "o", "fw", "fl", "md", "breed", "hr", "c", "ex", "alpin"]; for (var a = 0; a < b.length; a++) {
    $("cmenue_" + b[a]).removeClassName("white_tab_active");
} $("cmenue_" + contracts_category).addClassName("white_tab_active"); }
function contractsNew(a) { if (!a) {
    $("contracts_new_cart_receiver").value = "";
}
else {
    $("contracts_new_cart_receiver").value = a;
} contractsNavi("new"); contractsNewNavi(contracts_category); contractsNewCart(); }
function contractsNewProducts() { var b = ""; for (var a in produkt_name) {
    if (a == 0) {
        produkt_category[a] = "c";
    }
    var c = produkt_category[a];
    if (c == "fla") {
        c = "fl";
    }
    if (c == "tea") {
        c = "alpin";
    }
    if (contracts_category == c && in_array(a, contracts_data.products)) {
        if (a == 0) {
            var d = user_coins;
        }
        else {
            var d = checkRackItem(a);
        }
        if (d > 0) {
            var e = "";
            if (contracts_cart[a]) {
                e = "opacity:0.5;";
            }
            b += '<div class="link" style="position:relative; float:left; margin:5px;" onmouseover="showDiv(\'contracts_new_tt' + a + "')\" onmouseout=\"hideDiv('contracts_new_tt" + a + "')\" onclick=\"contractsDialog('select', " + a + ')">';
            b += '  <div class="v' + a + '" style="' + e + '"></div>';
            b += '  <div id="contracts_new_tt' + a + '" class="ttbox">' + produkt_name[a] + "&nbsp;(" + formatNumber(d) + ")</div>";
            b += "</div>";
        }
    }
} b += "</div>"; b += '<div class="clear"></div>'; $("contracts_new_category_products").innerHTML = b; }
function contractsNewCart() { var e = 1; for (var b = 1; b <= 8; b++) {
    $("contracts_new_cart_item" + b).innerHTML = "";
} var c = 0; e = 1; for (var b in contracts_cart) {
    var h = "";
    if (b == 0) {
        h = "width:100%; height:100%;";
    }
    var a = "";
    a += '<div class="contracts_new_cart_item_img tt' + b + ' link" style="' + h + "\" onclick=\"contractsDialog('select', " + b + ')" onmouseover="showDiv(\'contracts_new_cart_item_tt' + b + "')\" onmouseout=\"hideDiv('contracts_new_cart_item_tt" + b + "')\">";
    if (b == 0) {
        a += '<div style="font-size:34px; font-weight:bold; text-align:center; color:#D1D04E;">C</div>';
    }
    a += '  <div id="contracts_new_cart_item_tt' + b + '" class="ttbox contracts_new_cart_item_tt">' + produkt_name[b] + "</div>";
    a += "</div>";
    var d = contracts_cart[b].price;
    if (b == 0) {
        d = contracts_cart[b].coin_price;
    }
    a += '<div class="contracts_new_cart_item_price">' + formatPrice(d) + "</div>";
    a += '<div class="contracts_new_cart_item_amount">' + contracts_cart[b].amount + "x</div>";
    a += '<div class="contracts_new_cart_item_del link" onclick="contractsRemoveCartProduct(' + b + ')"></div>';
    $("contracts_new_cart_item" + e).innerHTML = a;
    c += (d * contracts_cart[b].amount);
    e++;
} $("contracts_new_cart_sum").innerHTML = formatPrice(c); contractsCheckFireCart(); var a = ""; if (contracts_data.templates) {
    a += '<div style="font-weight:bold; margin:5px 0px 5px 5px; color:#6C441D;">' + t_contract_templates + "&nbsp;" + contracts_data.templates.length + "/" + contracts_data.constants.max_templates + "</div>";
    if (contracts_data.templates.length > 0) {
        for (var b = 0; b < contracts_data.templates.length; b++) {
            a += '<div style="border-radius:5px; background-color:#C3A75E; padding:4px; margin-bottom:3px;">';
            a += '  <div style="float:left; margin-top:2px; width:150px; margin-right:5px;">' + contracts_data.templates[b].name + "</div>";
            a += '  <div style="float:right; margin-left:5px;" class="contracts_list_cancel link" onclick="contractsDelTemplate(' + contracts_data.templates[b].id + ')"></div>';
            a += '  <button style="float:right;" onclick="contractsLoadTemplate(' + b + ')" class="link button_new">' + t_contract_templates_load + "</button>";
            a += '  <div class="clear"></div>';
            a += "</div>";
        }
    }
} $("contracts_new_templates").innerHTML = a; }
function contractsLoadTemplate(e) { var d = contracts_data.templates[e]; $("contracts_new_cart_receiver").value = d.receiver; contracts_cart = {}; for (var c = 0; c < d.cart.length; c++) {
    var b = d.cart[c];
    contracts_cart[b.pid] = { amount: b.amount, price: b.price, type: b.type, coin_price: b.coin_price };
} $("contracts_new_cart_template_name").value = d.name; contractsNewCart(); contractsNewProducts(); }
function contractsDelTemplate(b) { var a = { id: b }; generalAction("contracts_deltemplate", a); }
function contractsSaveTemplate() { var e = ""; var a = $("contracts_new_cart_template_name").value; var c = $("contracts_new_cart_receiver").value; for (var b in contracts_cart) {
    e += b + "_" + contracts_cart[b].amount + "_" + contracts_cart[b].price + "_" + contracts_cart[b].type + "_" + contracts_cart[b].coin_price + "|";
} if (a != "" && e != "") {
    var d = { name: a, receiver: c, cart: e };
    generalAction("contracts_savetemplate", d);
} }
function contractsDialog(b, d) { if (b == "select") {
    var q = t_contract_add_product;
    var h = "";
    h += '<div style="position:relative; width:300px;">';
    if (d > 0) {
        h += '<div class="market_pframe" style="margin:0 auto;">';
        h += '  <div class="tt' + d + '" style="top:7px; left:7px;"></div>';
        h += "</div>";
    }
    h += '<div style="font-weight:bold; margin-bottom:5px;">' + produkt_name[d] + "</div>";
    h += '<div class="dialog_input_line">';
    var m = checkRackItem(d);
    if (d == 0) {
        m = user_coins;
    }
    var s = 1;
    var e = 0;
    var n = 0;
    if (contracts_cart[d]) {
        s = contracts_cart[d].amount;
        e = contracts_cart[d].price;
        n = contracts_cart[d].type;
    }
    else {
        var a = contractsCheckPrice(d);
        if (a.min > 0) {
            e = a.min;
        }
        var l = 0;
        for (var c in contracts_cart) {
            l++;
        }
        if (l >= 8) {
            return false;
        }
    }
    h += '<div style="margin-bottom:5px;">';
    h += '  <div style="float:left; width:100px; text-align:right; margin-right:5px; margin-top:3px;">' + t_market_new_amount + "</div>";
    h += '  <input style="float:left; width:100px;" type="text" id="contracts_select_pid_input" value="' + s + '" maxlength="10" onkeyup="contractsProductSelectCheck(' + d + ')" onchange="contractsProductSelectCheck(' + d + ')">';
    h += '  <div class="clear"></div>';
    h += '  <div style="margin-left:105px; margin-top:3px; text-align:left;">' + t_inner_stock + "&nbsp;" + formatNumber(m) + "</div>";
    h += "</div>";
    h += '<div style="margin-bottom:5px;">';
    h += '  <div style="float:left; width:100px; text-align:right; margin-right:5px; margin-top:3px;">' + t_market_price + ":</div>";
    h += '  <input style="float:left; width:100px;" type="text" id="contracts_select_price_input" value="' + e + '" maxlength="10" onkeyup="contractsProductSelectCheck(' + d + ')" onchange="contractsProductSelectCheck(' + d + ')">';
    h += '  <div class="clear"></div>';
    if (d == 0) {
        h += '<div style="margin:5px 0px 5px -5px; padding:5px 0px; width:300px; background:#E5D194;">';
        var r = "";
        if (n == 1) {
            r = "checked";
        }
        h += '  <div style="margin:2px 0px;">';
        h += '  <input id="contracts_coins_option1" name="contracts_coins_option" onclick="contractsProductSelectCheck(' + d + ')" type="radio" style="float:left; margin-top:2px;" value="1" ' + r + ">";
        h += '  <div style="float:left; margin-top:1px;">' + t_market_coins_option1 + "</div>";
        h += '  <div class="clear"></div>';
        h += "  </div>";
        var r = "";
        if (n == 2) {
            r = "checked";
        }
        h += '  <div style="margin-bottom:2px;">';
        h += '  <input id="contracts_coins_option2" name="contracts_coins_option" onclick="contractsProductSelectCheck(' + d + ')" type="radio" style="float:left; margin-top:2px;" value="2" ' + r + ">";
        h += '  <div style="float:left; margin-top:1px;">' + t_market_coins_option2 + "</div>";
        h += '  <div class="clear"></div>';
        h += "  </div>";
        h += '  <div style="border:1px solid #000: border-radius:5px;">';
        h += '    <div style="margin-bottom:2px;">' + t_market_coins_option1_desc + '&nbsp;<span id="constracts_coins_option_price1"></span></div>';
        h += '    <div style="margin:2px 0px;">' + t_market_coins_option2_desc + '&nbsp;<span id="constracts_coins_option_price2"></span></div>';
        h += "  </div>";
        h += "</div>";
    }
    h += "</div>";
    h += '<button class="button_new link" style="margin:0 auto;" id="contracts_button_add_cart" onclick="contractsProductInCart(' + d + ')">' + t_contract_add_product + "</button>";
    h += "</div>";
    var a = contractsCheckPrice(d);
    if (a.min > 0) {
        h += '<div style="float:left; margin-top:0px;" id="contracts_product_min_price" class="bonusinfo">' + t_market_new_price_coins_min + "&nbsp;" + formatPrice(a.min) + "</div>";
    }
    if (a.max > 0) {
        h += '<div style="float:right; margin-top:0px;" class="bonusinfo">' + t_highest_price + ":&nbsp;" + formatPrice(a.max) + "</div>";
    }
    h += '<div class="clear"></div>';
    h += "</div>";
    globalcommitbox(q, h, 0, 0, 1);
    $("contracts_select_pid_input").focus();
    contractsProductSelectCheck(d);
} }
function contractsCheckFireCart() { count = 0; for (var a in contracts_cart) {
    count++;
} if (count > 0 && $("contracts_new_cart_receiver").value != "") {
    showDiv("contracts_new_cart_fire");
}
else {
    hideDiv("contracts_new_cart_fire");
} }
function contractsFireCart() { var a = $("contracts_new_cart_receiver").value; var d = ""; for (var b in contracts_cart) {
    d += b + "_" + contracts_cart[b].amount + "_" + contracts_cart[b].price + "_" + contracts_cart[b].type + "|";
} var c = { name: a, cart: d }; generalAction("contracts_send", c, a); }
function contractsRemoveCartProduct(a) { delete contracts_cart[a]; contractsNewProducts(); contractsNewCart(); }
function contractsProductInCart(b) { var e = $("contracts_select_pid_input").value; var d = $("contracts_select_price_input").value; d = str_replace(",", ".", d); var a = 0; if (b == 0) {
    if ($("contracts_coins_option1").checked == true) {
        var c = 1;
    }
    if ($("contracts_coins_option2").checked == true) {
        var c = 2;
    }
    a = contractsCalcPrice(1);
}
else {
    var c = 0;
} if (e > 0 && d > 0) {
    contracts_cart[b] = { amount: e, price: d, type: c, coin_price: a };
    hideDiv("globaltransp");
    hideDiv("globalbox");
    contractsNewProducts();
    contractsNewCart();
} }
function contractsProductSelectCheck(b) { var h = parseInt(checkRackItem(b)); if (b == 0) {
    h = user_coins;
} var e = $("contracts_select_pid_input").value; var d = $("contracts_select_price_input").value; if (d == "") {
    c = 0;
}
else {
    d = str_replace(",", ".", d);
    e = parseInt(e);
    if (isNaN(e)) {
        e = 0;
    }
    if (e > h) {
        e = h;
    }
    $("contracts_select_pid_input").value = e;
    var a = contractsCheckPrice(b);
    if (a.max > 0 && d > a.max) {
        d = a.max;
    }
    hideDiv("contracts_button_add_cart");
    if (d === undefined || !(!isNaN(parseFloat(d)) && isFinite(d))) {
        d = 0;
    }
    var c = 1;
    if (d <= 0 || (a.min > 0 && d < a.min)) {
        c = 0;
        if ($("contracts_product_min_price")) {
            $("contracts_product_min_price").addClassName("important");
        }
    }
    else {
        if ($("contracts_product_min_price")) {
            $("contracts_product_min_price").removeClassName("important");
        }
    }
    if (a.max > 0 && d > a.max) {
        c = 0;
    }
} if (c == 1) {
    showDiv("contracts_button_add_cart");
} $("contracts_select_price_input").value = d; if (b == 0) {
    contractsCalcPrice();
} }
function contractsOverview(n) { contractsNavi("overview_" + n); var h = ""; for (var e = 0; e < contracts_data.overview[n].length; e++) {
    var m = contracts_data.overview[n][e];
    var q = "";
    var a = "";
    var l = 0;
    var b = 0;
    a += '<div class="contracts_list_detail_block">';
    for (var d = 0; d < m.data.length; d++) {
        l += (m.data[d].anzahl * m.data[d].preis);
        var r = "";
        if (m.data[d].level) {
            r = "important";
            b++;
        }
        q += '<div style="float:left; margin-right:4px;">';
        if (m.data[d].produkt == 0) {
            q += '<img src="' + imgpath + 'menu/coins.gif" style="float:left; width:14px; margin-right:2px;">';
        }
        else {
            q += '<div style="float:left; margin-right:2px;" class="kp' + m.data[d].produkt + '"></div>';
        }
        q += '  <div class="' + r + '" style="float:left;">' + m.data[d].anzahl + "&nbsp;</div>";
        q += '  <div class="clear"></div>';
        q += "</div>";
        a += '<div class="contracts_list_detail_line">';
        if (m.data[d].produkt == 0) {
            a += '<img src="' + imgpath + 'menu/coins.gif" style="float:left; width:14px; margin-right:4px;">';
        }
        else {
            a += '<div style="float:left; margin-right:4px;" class="kp' + m.data[d].produkt + '"></div>';
        }
        a += '  <div class="' + r + '" style="float:left;">' + m.data[d].anzahl + "x&nbsp;</div>";
        a += '  <div class="' + r + '" style="float:left; width:200px;">' + produkt_name[m.data[d].produkt] + "</div>";
        a += '  <div class="' + r + '" style="float:right; text-align:right;">' + formatPrice(m.data[d].preis) + "</div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    q += '<div class="clear"></div>';
    a += "</div>";
    if (n == "in") {
        a += '<div style="float:left; margin:5px 0px;">' + t_contracts_show_confirm + "</div>";
        if (!m.own) {
            a += '<button type="button" style="float:right; margin-top:5px;" class="link button_new" onclick="contractsBlockContact(\'' + m.uname + "')\">" + t_contracts_block + "</button>";
        }
        a += '<div class="clear"></div>';
        if (!b && !m.block) {
            a += '<button type="button" style="float:left; margin-right:10px;" class="link button_new" onclick="contractsAccept(' + m.vnr + ')">' + t_contracts_show_confirm_yes + "</button>";
        }
        a += '<button type="button" style="float:left; margin-right:5px; color:#f00;" class="link button_new" onclick="contractsDeny(' + m.vnr + ')">' + t_contracts_show_confirm_no + "</button>";
        a += '<div class="clear"></div>';
    }
    r = "";
    if (m.read < 1) {
        r = "contracts_list_item_unread";
    }
    addclass2 = "";
    if (m.block) {
        addclass2 = "important";
    }
    h += '<div class="contracts_list_item">';
    h += '  <div class="contracts_list_time">' + m.time + "</div>";
    h += '  <div class="contracts_list_contact addcontact_icon link" onclick="contractsClose(); addMessagesContact(\'' + m.uname + "');\"></div>";
    h += '  <div class="contracts_list_contact link ' + r + '" onclick="contractsClose(); messagesOpen(\'' + m.uname + '\')"><img src="' + imgpath + 'guild/mail.gif"></div>';
    h += '  <div class="contracts_list_name link ' + r + '" onclick="contractsToogleDetail(' + m.vnr + ", '" + n + "')\">" + m.uname + "</div>";
    h += '  <div class="contracts_list_products">' + q + "</div>";
    h += '  <div class="contracts_list_price ' + addclass2 + '">' + formatPrice(l) + "</div>";
    if (m.own && n == "out") {
        h += '  <div class="contracts_list_cancel link" title="' + t_contracts_show_anull + '" onclick="contractsCancel(' + m.vnr + ')"></div>';
    }
    h += '  <div class="clear"></div>';
    h += '  <div id="contracts_list_detail' + m.vnr + '" class="contracts_list_detail">' + a + "</div>";
    h += "</div>";
} $("contracts_navi_overview_" + n + "_content").innerHTML = h; }
function contractsBlockContact(a) { hideDiv("contracts_transp"); hideDiv("contracts_main"); showDiv("messages_transp"); showDiv("messages_main"); messagesAction("contact"); $("messages_contacts_inner_right_input").value = a; }
function contractsToogleDetail(d, b) { if ($("contracts_list_detail" + d)) {
    if ($("contracts_list_detail" + d).style.display == "block") {
        $("contracts_list_detail" + d).style.display = "none";
    }
    else {
        $("contracts_list_detail" + d).style.display = "block";
    }
    for (var a = 0; a < contracts_data.overview[b].length; a++) {
        var h = contracts_data.overview[b][a];
        var e = { vnr: d };
        if (h.vnr == d && h.read < 1) {
            generalAction("contracts_unread", e, d);
        }
    }
} }
function contractsCancel(b) { for (var a = 0; a < contracts_data.overview.out.length; a++) {
    var e = contracts_data.overview.out[a];
    var d = { vnr: b };
    if (e.vnr == b && e.own == 1) {
        generalAction("contracts_cancel", d, b);
    }
} }
function contractsDeny(b) { for (var a = 0; a < contracts_data.overview["in"].length; a++) {
    var e = contracts_data.overview["in"][a];
    var d = { vnr: b };
    if (e.vnr == b) {
        generalAction("contracts_deny", d, b);
    }
} }
function contractsAccept(b) { for (var a = 0; a < contracts_data.overview["in"].length; a++) {
    var e = contracts_data.overview["in"][a];
    var d = { vnr: b };
    if (e.vnr == b) {
        generalAction("contracts_accept", d, b);
    }
} }
function contractsShowContactsList() { var b = ""; for (var a = 0; a < contracts_data.contacts.length; a++) {
    b += '<div class="messages_contacts_link_item link" onclick="contractsSetName(\'' + contracts_data.contacts[a].uname + "')\">" + contracts_data.contacts[a].uname + "</div>";
} $("contracts_new_cart_contactlist_inner").innerHTML = b; showDiv("contracts_new_cart_contactlist"); }
function contractsSetName(a) { $("contracts_new_cart_receiver").value = a; hideDiv("contracts_new_cart_contactlist"); contractsCheckFireCart(); }
function contractsCalcPrice(b) { var d = $("contracts_select_price_input").value; var l = (d / 100) * 10; var c = 0; if ($("contracts_coins_option1").checked == true) {
    c = 1;
} if ($("contracts_coins_option2").checked == true) {
    c = 2;
} if (!c) {
    c = 1;
    $("contracts_coins_option1").checked = true;
} if (c == 2) {
    if (!isNaN(d) && d >= coinsexchange) {
        var a = parseInt(d);
        if (a < 18875) {
            var h = a - (a * (a - coinsexchange) * 0.00002);
        }
        else {
            var h = 0.25 * a + 7125.31;
        }
        l = (((a / 110) * 100) / 100) * 10;
        var e = d - h;
        if (l > e) {
            h = d - l;
        }
        if (b) {
            return Math.round(h);
        }
        $("constracts_coins_option_price1").innerHTML = formatPrice(Math.round(h));
        $("constracts_coins_option_price2").innerHTML = formatPrice(Math.round(a));
    }
    else {
        $("constracts_coins_option_price1").innerHTML = formatPrice(0);
        $("constracts_coins_option_price2").innerHTML = formatPrice(0);
    }
}
else {
    if (!isNaN(d) && d >= coinsexchange) {
        var a = parseInt(d);
        if (a < 11844) {
            var h = 25125 - Math.pow(631265625 - (a / 0.00002), 0.5);
        }
        else {
            var h = 4 * (a - 7125.31);
        }
        var e = h - a;
        if (l > e) {
            h = a + l;
        }
        if (b) {
            return Math.round(a);
        }
        $("constracts_coins_option_price1").innerHTML = formatPrice(Math.round(a));
        $("constracts_coins_option_price2").innerHTML = formatPrice(Math.round(h));
    }
    else {
        $("constracts_coins_option_price1").innerHTML = formatPrice(0);
        $("constracts_coins_option_price2").innerHTML = formatPrice(0);
    }
} }
function contractsCheckPrice(b) { var d = ["e", "o", "fw", "fla", "md", "breed"]; var a = { min: 0, max: 0 }; if (b == 0) {
    a.min = coinsexchange;
}
else {
    if (in_array(produkt_category[b], d)) {
        var c = produkt_price[b];
        if (c) {
            a.min = Math.ceil((c - ((c / 100) * 98)) * 100) / 100;
            a.max = Math.floor(((c / 100) * 300) * 100) / 100;
        }
    }
    else {
        var c = produkt_price[b];
        if (c) {
            if (in_array(b, produkt_coins)) {
                a.min = Math.ceil((c * coinsexchange) / 2);
                a.max = 0;
            }
            else {
                a.min = Math.ceil((c - ((c / 100) * 80)) * 100) / 100;
                a.max = Math.floor(((c / 100) * 300) * 100) / 100;
            }
        }
    }
} return a; }
function contractsResetCart() { $("contracts_new_cart_receiver").value = ""; $("contracts_new_cart_template_name").value = ""; contracts_cart = {}; contracts_category = "v"; contractsNewCart(); contractsNewProducts(); }
function contractsClose() { hideDiv("contracts_transp"); hideDiv("contracts_main"); }
var deliveryevent = function () { this.data = {}; this.click = 0; this.clickBlock = 0; this.stats_cache = 0; this.stats_cache_delay = 0; };
deliveryevent.prototype.stats = function () { if (deliveryevent.stats_cache_delay <= 0 || !deliveryevent.stats_cache) {
    this.action("deliveryevent_stats");
}
else {
    deliveryevent.showStats();
} };
deliveryevent.prototype.speedup = function () { this.action("deliveryevent_speedup"); };
deliveryevent.prototype.startTour = function (a) { this.action("deliveryevent_starttour", { spot: a }); };
deliveryevent.prototype.buyItem = function (a) { this.action("deliveryevent_buyitem", { coins: a }); };
deliveryevent.prototype.init = function () { this.action("deliveryevent_init"); };
deliveryevent.prototype.action = function (a, b) { ajaxAction("farm", a, b, deliveryevent.response); };
deliveryevent.prototype.response = function (b, a, c) { deliveryevent.data = b; setTimer("deliveryevent"); deliveryevent.update(); if (a == "deliveryevent_stats") {
    deliveryevent.stats_cache_delay = 60;
    deliveryevent.stats_cache = b.stats;
    deliveryevent.showStats();
} if (deliveryevent.data.login) {
    deliveryevent.login();
} };
deliveryevent.prototype.login = function () { var a = '<div id="deliveryevent_dialog">'; a += "  <div>" + t_deliveryevent_daily_login.replace("%AMOUNT%", this.data.config.dailypoints) + "</div>"; a += '  <div class="button_yes link" onclick="deliveryevent.update();"></div>'; a += "</div>"; var b = "deliveryevent.update()"; globalcommitbox(t_deliveryevent_head, a, 0, b, 1); };
deliveryevent.prototype.update = function () { var d = 0; var a = 0; if (this.data.data.points) {
    d = this.data.data.points;
} if (this.data.data.saved) {
    a = Math.min(100, (this.data.data.saved * 100) / this.data.config.maxpoints);
} var e = '<div id="deliveryevent">'; e += '  <div class="map">'; e += '    <div class="routes">'; for (var m in this.data.config.spots) {
    e += '<div id="deliveryevent_route_' + m + '" class="route ' + m + '"></div>';
} e += "    </div>"; e += '    <div class="spots">'; for (var m in this.data.config.spots) {
    e += '<div class="spot ' + m + ' link" onclick="deliveryevent.startTourCheckCommit(\'' + m + "')\" onmouseover=\"deliveryevent.spotOver('" + m + "')\" onmouseout=\"deliveryevent.spotOut('" + m + "')\">";
    var q = "";
    if (m == "bath" || m == "football") {
        q = "right";
    }
    e += '  <div id="deliveryevent_spot_' + m + '" class="ttbox ' + q + '">';
    e += '    <div class="name">' + this.data.config.spots[m].name + "</div>";
    var q = "important";
    if (this.data.config.spots[m].points <= this.data.data.points) {
        q = "";
    }
    e += '  	 <div class="' + q + '">' + t_deliveryevent_ice_amount + formatNumber(this.data.config.spots[m].points) + "</div>";
    e += "  	 <div>" + t_deliveryevent_ice_duration + formatTime(this.data.config.spots[m].duration) + "</div>";
    e += "  </div>";
    e += "</div>";
} e += "    </div>"; e += '    <div class="van link"><img id="deliveryevent_van_img" src="' + imgpath + 'leer.gif"><div id="deliveryevent_van_bubble"></div><div class="click" onclick="deliveryevent.clickIt()"></div></div>'; e += "  </div>"; e += '  <div id="deliveryevent_tour" class="tour">'; e += '    <div class="block transp"></div>'; e += '    <div id="deliveryevent_tour_timer" class="timer"></div>'; e += '    <div class="speedup link" onclick="deliveryevent.speedupCommit()"></div>'; e += "  </div>"; e += '  <div class="stats">'; e += '    <div class="amount">' + formatNumber(d) + "</div>"; e += '    <div class="add link" onclick="deliveryevent.buyItemCommit()"></div>'; e += "  </div>"; var h = 0; if (this.data.data.saved) {
    h = this.data.data.saved;
} e += '  <div class="headline">' + t_deliveryevent_delivered_head + "&nbsp;" + h + "/" + this.data.config.maxpoints + "</div>"; e += '  <div class="bar">'; e += '    <div class="inner" style="width:' + a + '%"></div>'; e += '    <div class="front"></div>'; e += '    <div class="rewards">'; for (var c in this.data.config.rewards) {
    var l = '<div style="margin-bottom:10px;">' + t_deliveryevent_delivered_need.replace("%AMOUNT%", formatNumber(this.data.config.rewards[c].points)) + "</div>";
    l += '<div style="margin-bottom:10px;">' + t_help_new_reward + ":</div>";
    var n = "";
    if (c >= 5) {
        n = "right";
    }
    var b = ((this.data.config.rewards[c].points * 100) / this.data.config.maxpoints);
    e += '<div class="reward" style="left:' + b + '%" onmouseover="showDiv(\'deliveryevent_reward' + c + "_tt')\" onmouseout=\"hideDiv('deliveryevent_reward" + c + "_tt')\">";
    if (this.data.config.rewards[c].powerup) {
        l += '<div style="margin-bottom:10px;"><b>' + t_pointsboost_unit + "</b><br>" + t_pointsboost.replace("%PERCENT%", this.data.config.rewards[c].percent) + "</div>";
        e += '<div class="powerup"></div>';
    }
    if (this.data.config.rewards[c].giftid) {
        l += "<div><b>" + t_pan_item + "</b></div>";
        e += '<div class="bubble"><img src="' + imgpath + "gifts/" + this.data.config.rewards[c].giftid + '.gif"></div>';
    }
    if (this.data.data.rewards && this.data.data.rewards[c]) {
        e += '<div id="deliveryevent_reward' + c + '_ready" class="megafield_product_ready ready"></div>';
    }
    e += '  <div id="deliveryevent_reward' + c + '_tt" class="ttbox ' + n + '">' + l + "</div>";
    e += "</div>";
} e += "    </div>"; e += "  </div>"; e += '  <div class="eventtimer">' + t_event_resttime + ':&nbsp;<span id="deliveryevent_timer"></span></div>'; e += '  <div class="help helpbutton_blue link" onclick="deliveryevent.help()"></div>'; e += '  <div class="stats_link link" onclick="deliveryevent.stats()"></div>'; e += "</div>"; globalBoxFlex(t_deliveryevent_head, e, 0, 0, 1); this.timerUpdate(); $("globalbox").style.top = "35px"; };
deliveryevent.prototype.spotOver = function (a) { showDiv("deliveryevent_spot_" + a); showDiv("deliveryevent_route_" + a); };
deliveryevent.prototype.spotOut = function (a) { hideDiv("deliveryevent_spot_" + a); hideDiv("deliveryevent_route_" + a); };
deliveryevent.prototype.startTourCheckCommit = function (c) { if (this.data.config.spots[c].points > this.data.data.points) {
    return 1;
} var a = "<div>" + t_deliveryevent_start_tour_body.replace("%AMOUNT%", formatNumber(this.data.config.spots[c].points)) + "</div>"; a = a.replace("%TIME%", formatTime(this.data.config.spots[c].duration)); var d = "deliveryevent.startTour('" + c + "')"; var b = "deliveryevent.update()"; globalcommitbox(t_deliveryevent_start_tour_head, a, d, b); };
deliveryevent.prototype.speedupCommit = function () { if (this.data.data.tour && this.data.data.tour.remain > 0) {
    var b = Math.ceil(this.data.data.tour.remain / this.data.config.coinduration);
    var a = "<div>" + t_deliveryevent_speedup_body.replace("%AMOUNT%", b) + "</div>";
    var d = "deliveryevent.speedup()";
    var c = "deliveryevent.update()";
    globalcommitbox(t_deliveryevent_speedup_head, a, d, c);
} };
deliveryevent.prototype.buyItemCommit = function () { var a = ""; for (var c in this.data.config.buyitem) {
    var d = str_replace("%COINS%", c, t_deliveryevent_buy_item);
    a += '<div class="coinsbutton_flex link" style="margin-bottom:10px;" onclick="deliveryevent.buyItem(' + c + ')">' + str_replace("%AMOUNT%", this.data.config.buyitem[c], d) + "</div>";
} var b = "deliveryevent.update()"; globalcommitbox(t_deliveryevent_buy_item_head, a, 0, b, 1); };
deliveryevent.prototype.timer = function () { this.data.data.remain--; if (this.data.data.tour) {
    this.data.data.tour.remain--;
} this.timerUpdate(); if (this.data.data.remain <= 0) {
    this.close();
} deliveryevent.stats_cache_delay--; };
deliveryevent.prototype.timerUpdate = function () { if ($("deliveryevent_timer")) {
    $("deliveryevent_timer").innerHTML = formatTime(this.data.data.remain);
} if (this.data.data.tour) {
    if (this.data.data.tour.remain > 0) {
        if ($("deliveryevent_tour_timer")) {
            $("deliveryevent_tour_timer").innerHTML = formatTime(this.data.data.tour.remain);
        }
        showDiv("deliveryevent_tour");
    }
    else {
        hideDiv("deliveryevent_tour");
    }
} };
deliveryevent.prototype.flyer = function (c) { var b = getRandom(1000, 100000); var d = "deliveryevent_link_flyer" + b; var a = '<div id="' + d + '" class="flyer idle">'; a += '  <div class="img deliveryevent_collectitem"></div>'; a += '  <div class="amount">' + c + "x</div>"; a += "</div>"; $("deliveryevent_link").insert(a); setTimeout(function () { $(d).removeClassName("idle").addClassName("fly"); }, 200); setTimeout(function () { $(d).remove(); }, 1200); };
deliveryevent.prototype.close = function () { hideDiv("deliveryevent_link"); if ($("deliveryevent")) {
    hideDiv("globaltransp");
    hideDiv("globalbox");
} clearTimer("deliveryevent"); this.data = {}; };
deliveryevent.prototype.clickIt = function () { this.click++; if (this.click % 2 == 0) {
    this.clickStartOffer();
} };
deliveryevent.prototype.clickStartOffer = function () { if (this.clickBlock == 1) {
    return 1;
} this.clickReset(); this.clickBlock = 1; if (deliveryevent_van_order) {
    var c = "";
    for (var a = 1; a <= 3; a++) {
        var d = "";
        if (a > 1) {
            d = " ";
        }
        var b = getRandom(1, deliveryevent_van_order[a].length);
        c += d + deliveryevent_van_order[a][(b - 1)];
    }
} $("deliveryevent_van_img").src = imgpath + "Present_Delivery_Map_SantaAni_01.gif"; if (deliveryevent_van_order) {
    setTimeout(function () { $("deliveryevent_van_bubble").innerHTML = "Einmal ein " + c + ", bitte."; showDiv("deliveryevent_van_bubble"); }, 4500);
    setTimeout(function () { hideDiv("deliveryevent_van_bubble"); }, 8000);
} setTimeout(function () { deliveryevent.clickReset(); }, 12000); };
deliveryevent.prototype.clickReset = function () { if ($("deliveryevent_van_img")) {
    hideDiv("deliveryevent_van_bubble");
    $("deliveryevent_van_img").src = imgpath + "leer.gif";
    this.clickBlock = 0;
} };
deliveryevent.prototype.showStats = function () { var a = '<div id="deliveryevent_stats">'; a += '  <div class="list">'; a += htmlStatsContent(this.stats_cache); a += "</div>"; var b = "deliveryevent.update()"; globalBoxFlex(t_deliveryevent_stats_head, a, 0, b, 1); };
deliveryevent.prototype.help = function () { var a = '<div id="deliveryevent_help">'; a += "  <ul>"; a += "    <li>" + t_deliveryevent_help1 + "</li>"; a += "    <li>" + t_deliveryevent_help2 + "</li>"; a += "    <li>" + t_deliveryevent_help3 + "</li>"; a += "    <li>" + t_deliveryevent_help4 + "</li>"; a += "  </ul>"; a += '  <div class="hint">'; a += '    <div style="font-weight:bold;">' + t_collectevent_help5 + "</div>"; for (var c = 0; c < this.data.config.validbuildings.length; c++) {
    var d = "";
    if (c > 0) {
        d = ", ";
    }
    if (buildinginfos[0][this.data.config.validbuildings[c]]) {
        a += d + buildinginfos[0][this.data.config.validbuildings[c]][10];
    }
} a += "  </div>"; a += '  <div class="hint">' + t_deliveryevent_daily_login.replace("%AMOUNT%", deliveryevent.data.config.dailypoints) + "</div>"; a += "</div>"; var b = "deliveryevent.update()"; globalcommitbox(t_deliveryevent_head, a, 0, b, 1); };
var factory = function () { this.data = {}; this.currentPosition = 0; this.currentSlot = 0; this.type = ""; };
factory.prototype.start = function (e, d, h, m, l) { factory.action("start", { farm: farm, position: this.currentPosition, slot: this.currentSlot, item: h, guildjob: l }); };
factory.prototype.speedup = function (b, a) { factory.action("speedup", { farm: farm, position: this.currentPosition, slot: b, coins: a }); };
factory.prototype.buy = function (a) { factory.action("buy", { farm: farm, position: this.currentPosition, slot: a }); };
factory.prototype.action = function (a, b) { ajaxAction("farm", a, b, factory.response); };
factory.prototype.response = function (b, a, c) { global_speedup_block = 0; factory.data = b[1]; locationinfo = b[1]; factory.inner(c.position); };
factory.prototype.inner = function (a) { this.currentPosition = a; if (in_array(this.data.buildingid, [13, 14])) {
    this.type = "oil";
} if (this.data.buildingid == 16) {
    this.type = "strickerei";
} if (this.data.buildingid == 21) {
    this.type = "tea";
} var c = ""; c += '<div class="slots">'; for (var d = 1; d <= 3; d++) {
    c += htmlProductionSlot(farm, a, d);
} c += "</div>"; for (var b = 2; b <= this.data.level; b++) {
    showDiv("update_" + this.data.buildingid + "_" + b);
    showDiv("update_" + this.data.buildingid + "_" + b + "_ani");
    if (this.data.buildingid == 14 && b == 5) {
        showDiv("update_14_5_1");
        showDiv("update_14_5_2");
    }
} $("innercontent").innerHTML = c; $("innermaincontainer").className = "inner_back inner_back" + this.data.buildingid; updateProductionSlot(farm, a); };
factory.prototype.speedupCommit = function (a, b) { globalSpeedupBox(this.type, a, b); };
factory.prototype.buyCommit = function (d) { var b = ""; if (factory.data.slots[d].cost[1]) {
    var a = slot_buy.replace("%MONEY%", factory.data.slots[d].cost[1] + "&nbsp;" + gamecurrency);
} if (factory.data.slots[d].cost[2]) {
    var a = slot_rent.replace("%COINS%", factory.data.slots[d].cost[2][0] + "&nbsp;" + t_coins);
    a = a.replace("%TIME%", formatTime(factory.data.slots[d].cost[2][1]));
} var c = "factory.buy(" + d + ")"; globalcommitbox(b, a, c); };
factory.prototype.selection = function (e) { this.currentSlot = e; var d = t_factory_produce_head; var a = '<div id="product_slot_selection">'; for (var c in this.data.products) {
    var b = 0;
    if (this.data.cropbonus) {
        b = this.data.cropbonus;
    }
    a += htmlProductSlotSelection(this.type, c, this.data.products[c], 0, this.currentPosition, this.currentSlot, b);
} a += '<div class="clear"></div>'; if (in_array(this.type, ["strickerei"]) && checkIsValidGuildJobProduct()) {
    a += '<div class="factory_selection_guild_head">' + t_select_product_guild + "</div>";
    for (var c in this.data.products) {
        if (job_data.guild_job_data.data.products[this.data.products[c][2][0]]) {
            a += htmlProductSlotSelection(this.type, c, this.data.products[c], 1, this.currentPosition, this.currentSlot, 0);
        }
    }
    a += '<div class="clear"></div>';
} a += "</div>"; globalBoxFlex(d, a, 0, 0, 1); };
var factory = new factory();
var farm_move = 1;
var farm_number = 1;
var farms_data = { farms: {}, count: 0, freegardenspeedup: 0, freegardenspeedup2: 0 };
var farm_checker = [];
var farm_checker_open = 0;
var farm_water_checker = 0;
var farmersmarket_data = 0;
var farmersmarket_firstvisit = 1;
var farmersmarket_firstvisit_session = 0;
function farmBuyOption(c) { var a = { block: 0, tt: 0 }; if (farms_data.blocked[c]) {
    var b = "";
    if (farms_data.blocked[c].questblock || farms_data.blocked[c].questblock2 || farms_data.blocked[c].levelblock || farms_data.blocked[c].block || farms_data.blocked[c].premiumblock) {
        if (farms_data.blocked[c].questblock) {
            b = str_replace("%FARM%", c, t_getnextfarmquest);
            b = str_replace("%QUEST%", farms_data.blocked[c].questblock, b);
        }
        if (farms_data.blocked[c].questblock2) {
            b = str_replace("%FARM%", c, t_getnextfarmquest2);
            b = str_replace("%QUEST%", farms_data.blocked[c].questblock2, b);
        }
        if (farms_data.blocked[c].levelblock) {
            b = str_replace("%FARM%", c, t_getnextfarmlevel);
            b = str_replace("%LEVEL%", farms_data.blocked[c][0], b);
        }
        if (farms_data.blocked[c].premiumblock) {
            b += t_premium_only;
        }
        if (farms_data.blocked[c].block) {
            b = t_coming_soon;
        }
        a.block = 1;
        a.tt = b;
    }
    else {
        if (c >= 5) {
            if (farms_data.count < 4) {
                a.block = 1;
                a.tt = str_replace("%FARM%", 4, t_map_previous_farm_required);
            }
        }
        else {
            if (c > (parseInt(farms_data.count) + 1)) {
                a.block = 1;
                a.tt = str_replace("%FARM%", (parseInt(farms_data.count) + 1), t_map_previous_farm_required);
            }
            else {
                a.tt = str_replace("%FARM%", c, t_map_farm_buy);
                a.tt = str_replace("%MONEY%", formatPrice(farms_data.blocked[c][1]), a.tt);
            }
        }
    }
} return a; }
function farmBuild() { var h = ""; for (var d = 1; d <= const_maxfarms; d++) {
    var s = "";
    if (xmastime == 1) {
        s = "_xmas";
    }
    var n = "farm_back" + d + s;
    h += '<div class="farm_back ' + n + '">';
    h += '  <div id="farm_positions' + d + '" class="farm_positions"></div>';
    if (d > 1 && d <= 4) {
        h += '<div class="farm_scroller farm_scroller_l link" onclick="farmMove(' + (d - 1) + ')" onmouseover="showDiv(\'farm_scroller_l' + (d - 1) + "')\" onmouseout=\"hideDiv('farm_scroller_l" + (d - 1) + "')\">";
        h += '  <div id="farm_scroller_l' + (d - 1) + '" class="ttbox farm_scroller_tt_l link">' + farmname + (d - 1) + "</div>";
        h += "</div>";
    }
    if (d < 4 && farms_data.farms[d]) {
        var a = 0;
        if (farms_data.farms[(d + 1)]) {
            var t = "farmMove(" + (d + 1) + ")";
            var b = farmname + (d + 1);
            var c = "";
        }
        if (farms_data.blocked[(d + 1)]) {
            var e = farmBuyOption((d + 1));
            if (e.tt != "") {
                var b = e.tt;
            }
            if (e.block) {
                a = 1;
                var c = "max-width:550px";
            }
            else {
                t = "openMap(); mapDialog('buy_farm', " + (d + 1) + ")";
            }
        }
        h += '<div class="farm_scroller farm_scroller_r link" onclick="' + t + '" onmouseover="showDiv(\'farm_scroller_r' + (d + 1) + "')\" onmouseout=\"hideDiv('farm_scroller_r" + (d + 1) + "')\">";
        if (a == 1) {
            h += '<div style="top:5px;" class="rack_lock maketransp"></div>';
        }
        h += '  <div id="farm_scroller_r' + (d + 1) + '" class="ttbox farm_scroller_tt_r link" style="' + c + '">' + b + "</div>";
        h += "</div>";
    }
    h += "</div>";
} h += '<div class="clear"></div>'; var r = str_replace("%LEVEL%", farmersmarket_access_level, error1005); var t = ""; if (farmersmarket_data) {
    h += buildFarmersMarket();
    r = t_farmers_market;
    t = "farmMove(99)";
} h += '<div id="farm_inner_new_area_teaser" class="link" onmouseover="showDiv(\'farm_inner_new_area_teaser_tt\')" onmouseout="hideDiv(\'farm_inner_new_area_teaser_tt\')" onclick="' + t + '">'; h += '  <div id="farm_inner_new_area_teaser_tt" class="ttbox">' + r + "</div>"; h += "</div>"; if (farmersmarket_firstvisit == 1) {
    h += '<div id="farmersmarket_teaser" class="link" onmouseover="showDiv(\'farm_inner_new_area_teaser_tt\')" onmouseout="hideDiv(\'farm_inner_new_area_teaser_tt\')" onclick="' + t + '">';
    h += '  <div id="farmersmarket_teaser_tt" class="ttbox">';
    h += t_farmersmarket_teaser;
    h += '    <div id="farmersmarket_teaser_tt_arrow"></div>';
    h += "  </div>";
    h += "</div>";
} h += '<div id="farm_inner_headquarter" class="link" onclick="initFarmhouse();" onmouseover="showDiv(\'farm_inner_headquarter_tt\')" onmouseout="hideDiv(\'farm_inner_headquarter_tt\')">'; h += '  <div id="hq_upgrade6_ani"></div>'; h += '  <div id="hq_upgrade7_ani1"></div>'; h += '  <div id="hq_upgrade7_ani2"></div>'; h += '  <div id="hq_upgrade7_ani3"></div>'; h += '  <div id="hq_upgrade8_ani"></div>'; h += '  <div id="hq_upgrade9_ani"></div>'; h += '  <div id="hq_upgrade10_ani1"></div>'; h += '  <div id="hq_upgrade10_ani2"></div>'; h += '  <div id="hq_upgrade11_ani"></div>'; h += '  <div id="hq_upgrade1"></div>'; h += '  <div id="hq_upgrade2"></div>'; h += '  <div id="hq_upgrade3"></div>'; h += '  <div id="hq_upgrade16_ani"></div>'; h += '  <div id="hq_upgrade22_ani"></div>'; h += '  <div id="farm_inner_headquarter_tt" class="ttbox">' + t_building_headquarter + "</div>"; h += "</div>"; if (player_guild > 0 && player_guildmemberstatus > 1) {
    var m = "farm_inner_guildlink";
    if (guildquestrun == 1) {
        m = "farm_inner_guildlink_running";
    }
    h += '<div id="farm_inner_guildlink" class="' + m + ' link" onclick="initGuild();" onmouseover="showDiv(\'farm_inner_guildlink_tt\');" onmouseout="hideDiv(\'farm_inner_guildlink_tt\')">';
    h += '  <div id="farm_inner_guildlink_tt" class="ttbox">' + t_guildlink_name + "</div>";
    h += "</div>";
} if (!tutorial && currentuserlevel >= dog_minlevel) {
    h += '<div id="farm_dog" class="farm_dog link" onclick="showFarmDog()" onmouseover="showDiv(\'farm_dog_tt\');" onmouseout="hideDiv(\'farm_dog_tt\')">';
    h += '  <div id="farm_dog_tt" class="ttbox">' + t_farmdog_name + "</div>";
    h += "</div>";
} if (!tutorial && currentuserlevel >= 5) {
    h += '<div id="farm_actionsheep_transp" class="transp"></div>';
    h += '<div id="farm_actionsheep_bubble">';
    h += '  <div id="farm_actionsheep_bubble_inner"></div>';
    h += '  <div class="mini_close link" onclick="closeActionSheep()"></div>';
    h += "</div>";
    h += '<div id="farm_actionsheep" class="link" onclick="clickActionSheep()" onmouseover="showDiv(\'farm_actionsheep_tt\');" onmouseout="hideDiv(\'farm_actionsheep_tt\')">';
    h += '  <div id="farm_actionsheep_tt" class="ttbox"></div>';
    h += '  <div id="farm_actionsheep_flyer" class="panflyer"></div>';
    h += "</div>";
} if (!tutorial && currentuserlevel >= farmhouse_designer_level) {
    h += '<div id="farm_inner_architect" class="link" onclick="farmAction(\'initarchitect\', 1, 1);" onmouseover="showDiv(\'farm_inner_architect_tt\');" onmouseout="hideDiv(\'farm_inner_architect_tt\')">';
    h += '  <div id="farm_inner_architect_tt" class="ttbox">' + t_architect_name + "</div>";
    h += "</div>";
} if (!tutorial && currentuserlevel >= donkey_cropbonus_level) {
    var q = "farm_inner_waltraud";
    if (donkey_isset == 1) {
        q = "farm_inner_waltraud_active";
    }
    h += '<div id="farm_inner_waltraud" class="' + q + ' link" onclick="farmAction(\'dailydonkey\', 1, 1);" onmouseover="showDiv(\'farm_inner_waltraud_tt\');" onmouseout="hideDiv(\'farm_inner_waltraud_tt\')">';
    h += '  <div id="farm_inner_waltraud_tt" class="ttbox">' + t_donkey_name + "</div>";
    h += "</div>";
    h += '<div id="farm_inner_48hbonus" class="link" onclick="showCropBonusBox();" onmouseover="showDiv(\'farm_inner_48hbonus_tt\');" onmouseout="hideDiv(\'farm_inner_48hbonus_tt\')">';
    h += '  <div id="farm_inner_48hbonus_tt" class="ttbox">' + t_cropbonus_name + "</div>";
    if (blackfriday_action == 1) {
        h += '<div id="cropbonus_blackfriday_out" class="blackfriday_mini"></div>';
    }
    h += "</div>";
} if (!tutorial && flower_bonus_action == 1) {
    var l = str_replace("%PERCENT%", ((flower_bonus_bonus - 1) * 100), t_flower_bonus_action_info);
    l = str_replace("%DATE1%", flower_bonus_start, l);
    l = str_replace("%DATE2%", flower_bonus_end, l);
    h += '<div id="flower_action" class="action_star" onmouseover="showDiv(\'flower_action_tt\')" onmouseout="hideDiv(\'flower_action_tt\')">';
    h += '<div class="action_star_text">' + ((flower_bonus_bonus - 1) * 100) + "%</div>";
    h += '<div id="flower_action_tt" class="ttbox">' + l + "</div>";
    h += "</div>";
} h += '<div id="customerstats"></div>'; h += '<div id="customerstatsinfo" class="ttbox"></div>'; h += '<div id="customerline"></div>'; if (!stopanimation && (("animation" in $("farm_inner").style) || ("-webkit-animation" in $("farm_inner").style))) {
    h += '<div id="farm_ani1"></div>';
    h += '<div id="farm_ani2"></div>';
} $("farm_inner").innerHTML = h; $("farm_inner").style.width = (const_maxfarms * 720) + "px"; farmBuildPositions(); setFarmis(); if (farmersmarket_data) {
    setFarmersMarket();
} }
function farmBuildPositions() { for (var d in farms_data.farms) {
    var l = "";
    for (var c in farms_data.farms[d]) {
        var r = farms_data.farms[d][c];
        l += '<div id="farm' + d + "_pos" + c + '" class="farm_pos">';
        if (r.buildingid) {
            l += '  <div id="farm' + d + "_pos" + c + '_back" class="bm' + r.buildingid + ' farm_pos_back link"></div>';
            if (!stopanimation) {
                var a = { 2: 2, 4: 2, 5: 1, 12: 2, 15: 2, 18: 1 };
                if (a[r.buildingid]) {
                    for (var q = 1; q <= a[r.buildingid]; q++) {
                        l += '<div class="farm_pos_ani' + r.buildingid + "_" + q + ' farm_pos_ani"></div>';
                    }
                }
            }
        }
        if (r.bulldoze) {
            l += '<div id="farm' + d + "_pos" + c + '_back" class="bmb' + r.bulldoze.id + ' farm_pos_back"></div>';
        }
        l += '  <div id="farm' + d + "_pos" + c + '_click" class="farm_pos_click link"></div>';
        if (r.bulldoze && (r.bulldoze.questblock || r.bulldoze.levelblock)) {
            l += '<div class="farm_pos_lock" onmouseover="showDiv(\'farm_pos_lock' + d + "_" + c + "')\" onmouseout=\"hideDiv('farm_pos_lock" + d + "_" + c + "')\">";
            var e = "";
            if (r.bulldoze.questblock) {
                e = str_replace("%QUEST%", r.bulldoze.quest[1], t_needs_quest);
                e = '<div style="margin-bottom:10px;">' + str_replace("%CAMPAIGN%", r.bulldoze.quest[0], e) + "</div>";
            }
            if (r.bulldoze.levelblock) {
                e += "<div>" + str_replace("%LEVEL%", r.bulldoze.level, noupdate_lowlevel) + "</div>";
            }
            l += '  <div id="farm_pos_lock' + d + "_" + c + '" class="ttbox farm_pos_lock_tt">' + e + "</div>";
            l += "</div>";
        }
        l += '  <div id="farm' + d + "_pos" + c + '_tt" class="ttbox farm_pos_tt">';
        if (r.bulldoze) {
            l += "<div>" + infobulldozegroundheadline + "<br>" + formatPrice(r.bulldoze.cost) + "</div>";
        }
        if (r.name) {
            var t = "";
            if (d == 5 && r.buildingid == 1) {
                t = '<div class="bonusinfo" style="font-size:10px;">' + t_building_buy_exotic_info + "</div>";
            }
            if (d == 6 && r.buildingid == 1) {
                t = '<div class="bonusinfo" style="font-size:10px;">' + t_building_buy_alpine_info + "</div>";
            }
            l += '<div class="farm_pos_tt_name">' + r.name + "</div>" + t;
        }
        if (r.premiumblock) {
            l += '<div class="bonusinfo important">' + inforequirepremium + "</div>";
        }
        l += "  </div>";
        if (r.level) {
            l += '<div class="farm_pos_level">';
            for (var q = 1; q <= r.level; q++) {
                l += '<div class="icon_star farm_pos_level_item"></div>';
            }
            l += '  <div class="clear"></div>';
            l += "</div>";
        }
        if (r.premiumblock) { }
        else {
            l += '<div id="farm_buttons' + d + "_" + c + '" class="farm_buttons">';
            if (r.upgrade) {
                l += '<div id="farm_button_upgrade' + d + "_" + c + '" class="farm_button_upgrade button_upgrade link" onmouseover="showDiv(\'farm_upgrade_tt' + d + "_" + c + "')\" onmouseout=\"hideDiv('farm_upgrade_tt" + d + "_" + c + "')\">";
                l += '  <div id="farm_upgrade_tt' + d + "_" + c + '" class="ttbox farm_button_tt">';
                l += "    <div>" + infoupdatebuilding + "</div>";
                if (r.upgrade.cost) {
                    var t = formatPrice(r.upgrade.cost);
                }
                if (r.upgrade.coins) {
                    var t = r.upgrade.coins + "&nbsp;" + t_coins;
                }
                l += "    <div>" + t + "</div>";
                if (r.upgrade.block) {
                    l += '<div class="bonusinfo important">' + str_replace("%LEVEL%", r.upgrade.level, error1005) + "</div>";
                }
                l += "  </div>";
                l += "</div>";
            }
            if (r.destruct) {
                l += '<div id="farm_button_destruct' + d + "_" + c + '" class="farm_button_destruct button_destruct link" onmouseover="showDiv(\'farm_destruct_tt' + d + "_" + c + "')\" onmouseout=\"hideDiv('farm_destruct_tt" + d + "_" + c + "')\">";
                l += '  <div id="farm_destruct_tt' + d + "_" + c + '" class="ttbox farm_button_tt">' + infodestructbuilding + "</div>";
                l += "</div>";
            }
            if (r.buildingid && r.buildingid == 1) {
                if (currentuserlevel >= autoplant_level && (premium > 0 || (!premium && autoplant_allow_loads == 1))) {
                    l += '<div id="farm_button_autoplant' + d + "_" + c + '" class="farm_button_autoplant button_autoplant link" onmouseover="showDiv(\'farm_autoplant_tt' + d + "_" + c + "')\" onmouseout=\"hideDiv('farm_autoplant_tt" + d + "_" + c + "')\">";
                    l += '  <div id="farm_autoplant_tt' + d + "_" + c + '" class="ttbox farm_button_tt">' + autoplant_info + "</div>";
                    l += "</div>";
                }
                if (currentuserlevel >= gardenspeedup_level) {
                    var t = "";
                    if (farms_data.freegardenspeedup || farms_data.freegardenspeedup2) {
                        t = "_free";
                    }
                    l += '<div id="farm_button_gardenspeedup' + d + "_" + c + '" class="farm_button_gardenspeedup speedupgardenbutton' + t + ' link" onmouseover="showDiv(\'farm_speedup_tt' + d + "_" + c + "')\" onmouseout=\"hideDiv('farm_speedup_tt" + d + "_" + c + "')\">";
                    l += '  <div id="farm_speedup_tt' + d + "_" + c + '" class="ttbox farm_button_tt">' + gardenspeedup_head + "</div>";
                    l += "</div>";
                }
            }
            l += "</div>";
            if (r.product) {
                l += '<div id="farm_gardenproduct' + d + "_" + c + '" class="stt' + r.product + ' farm_gardenproduct link"></div>';
            }
            l += '<div id="farm_garden_water_timer' + d + "_" + c + '" class="farm_garden_water_timer"></div>';
            if (r.production) {
                var h = r.production[0].pid;
                l += '<div id="farm_production_timer' + d + "_" + c + '" class="farm_production_timer"></div>';
                l += '<div class="farm_pos_production">';
                l += '  <div id="farm_production_running' + d + "_" + c + '">';
                if (in_array(r.buildingid, [2, 15])) {
                    l += '<div class="farm_production_back' + r.buildingid + '"></div>';
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_front' + r.buildingid + '"></div>';
                }
                if (in_array(r.buildingid, [3, 4, 5, 11, 12])) {
                    if (in_array(r.buildingid, [3, 4])) {
                        l += '<div class="farm_production_back2_' + r.buildingid + '"></div>';
                    }
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_back' + r.buildingid + '"></div>';
                    l += '<div class="farm_production_front' + r.buildingid + '"></div>';
                }
                if (r.buildingid == 7) {
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_back' + r.buildingid + "_" + h + '"></div>';
                    l += '<div class="farm_production_front' + r.buildingid + "_" + h + '"></div>';
                }
                if (r.buildingid == 8) {
                    if (h == 27) {
                        l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_cheese1 farm_production_front' + r.buildingid + "_" + h + '"></div>';
                    }
                    else {
                        l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_back' + r.buildingid + "_" + h + '"></div>';
                        l += '<div class="farm_production_front' + r.buildingid + "_" + h + '"></div>';
                    }
                }
                if (r.buildingid == 9) {
                    l += '<div class="farm_production_back' + r.buildingid + "_" + h + '"></div>';
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_front' + r.buildingid + "_" + h + '"></div>';
                }
                if (r.buildingid == 10) {
                    l += '<div class="farm_production_back' + r.buildingid + '"></div>';
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_front' + r.buildingid + '"></div>';
                }
                if (in_array(r.buildingid, [13, 14, 16, 17, 18, 20, 21])) {
                    l += '<div id="farm_production_mover' + d + "_" + c + '" class="farm_production_front' + r.buildingid + '"></div>';
                }
                l += "  </div>";
                if (in_array(r.buildingid, [7, 8, 9])) {
                    l += '<div id="farm_production_ready' + d + "_" + c + '" class="farm_production_ready' + r.buildingid + "_" + h + '"></div>';
                }
                else {
                    l += '<div id="farm_production_ready' + d + "_" + c + '" class="farm_production_ready' + r.buildingid + '"></div>';
                }
                l += "</div>";
            }
        }
        if (r.premium) {
            l += '<div class="icon_premium farm_pos_premium"></div>';
        }
        l += "</div>";
    }
    if ($("farm_positions" + d)) {
        $("farm_positions" + d).innerHTML = l;
    }
} farm_checker = []; delete gametimer.farm_productions; delete gametimer.farm_water; for (var d in farms_data.farms) {
    if (d > farms_data.count) {
        break;
    }
    for (var c = 1; c <= 6; c++) {
        if ($("farm" + d + "_pos" + c + "_click")) {
            $("farm" + d + "_pos" + c + "_click").onmouseover = new Function("");
            $("farm" + d + "_pos" + c + "_click").onmouseout = new Function("");
        }
    }
} for (var d in farms_data.farms) {
    for (var c in farms_data.farms[d]) {
        var r = farms_data.farms[d][c];
        if (r.buildingid > 0 || r.bulldoze) {
            var n = "showDiv('farm_buttons" + d + "_" + c + "');";
            var b = "hideDiv('farm_buttons" + d + "_" + c + "');";
            if (usetouch == 1 || !$("farm_buttons" + d + "_" + c)) {
                var n = "";
                var b = "";
                showDiv("farm_buttons" + d + "_" + c);
            }
            $("farm" + d + "_pos" + c + "_click").onmouseover = new Function("showDiv('farm" + d + "_pos" + c + "_tt'); " + n + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').addClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').addClassName('farm_garden_water_timer_hover'); }");
            $("farm" + d + "_pos" + c + "_click").onmouseout = new Function("hideDiv('farm" + d + "_pos" + c + "_tt'); " + b + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').removeClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').removeClassName('farm_garden_water_timer_hover'); }");
            $("farm" + d + "_pos" + c + "_tt").onmouseover = new Function("showDiv('farm" + d + "_pos" + c + "_tt'); " + n + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').addClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').addClassName('farm_garden_water_timer_hover'); }");
            $("farm" + d + "_pos" + c + "_tt").onmouseout = new Function("hideDiv('farm" + d + "_pos" + c + "_tt'); " + b + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').removeClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').removeClassName('farm_garden_water_timer_hover'); }");
            if (!usetouch && $("farm_buttons" + d + "_" + c)) {
                $("farm_buttons" + d + "_" + c).onmouseover = new Function("showDiv('farm" + d + "_pos" + c + "_tt'); " + n + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').addClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').addClassName('farm_garden_water_timer_hover'); }");
                $("farm_buttons" + d + "_" + c).onmouseout = new Function("hideDiv('farm" + d + "_pos" + c + "_tt'); " + b + " if($('farm_production_timer" + d + "_" + c + "')) { $('farm_production_timer" + d + "_" + c + "').removeClassName('farm_production_timer_hover'); } if($('farm_production_timer" + d + "_" + c + "')) { $('farm_garden_water_timer" + d + "_" + c + "').removeClassName('farm_garden_water_timer_hover'); }");
            }
        }
        var s = "";
        if (r.premiumblock) {
            s = "globalerrorbox('" + inforequirepremium + "')";
        }
        else {
            if (r.buildingid && r.buildingid == 6) {
                s = "showMain(); initGuild();";
            }
            else {
                if (r.buildingid && r.buildingid == 19) {
                    s = "showMain(); buildMegafield();";
                }
                else {
                    if (r.buildingid && r.buildingid == 1) {
                        s = "specialZoneFieldHandler(" + c + ");";
                    }
                    else {
                        if (r.bulldoze) {
                            s = "bulldozeZone(" + c + ");";
                        }
                        else {
                            if (r.buildingid == 0 && r.status == 1) {
                                s = "fillBuildBox(" + c + ");";
                            }
                            else {
                                if (r.buildingid && r.buildingid == 22) {
                                    s = "hillwalk.init();";
                                }
                                else {
                                    s = "initLocation(" + c + ")";
                                }
                            }
                        }
                    }
                }
            }
            if (r.upgrade) {
                var m = "";
                if (!r.upgrade.block) {
                    m = "fillBuildBox(" + c + ");";
                }
                $("farm_button_upgrade" + d + "_" + c).onclick = new Function(m);
            }
            if (r.destruct) {
                $("farm_button_destruct" + d + "_" + c).onclick = new Function("destructBuildingInit(" + c + ", " + r.buildingid + ");");
            }
            if (r.buildingid && r.buildingid == 1) {
                if ($("farm_button_autoplant" + d + "_" + c)) {
                    $("farm_button_autoplant" + d + "_" + c).onclick = new Function("autoPlantCommit(" + c + ", 1);");
                }
                if ($("farm_button_gardenspeedup" + d + "_" + c)) {
                    $("farm_button_gardenspeedup" + d + "_" + c).onclick = new Function("initGardenSpeedup(" + c + ");");
                }
                if (r.product) {
                    $("farm_gardenproduct" + d + "_" + c).onclick = new Function("changeGardenSpecial(" + c + ", " + r.product + ")");
                }
            }
            if (r.production) {
                if (!gametimer.farm_productions) {
                    gametimer.farm_productions = {};
                }
                if (!gametimer.farm_productions[d]) {
                    gametimer.farm_productions[d] = {};
                }
                gametimer.farm_productions[d][c] = 1;
            }
            if (r.water) {
                if (!gametimer.farm_water) {
                    gametimer.farm_water = {};
                }
                if (!gametimer.farm_water[d]) {
                    gametimer.farm_water[d] = {};
                }
                gametimer.farm_water[d][c] = 1;
            }
        }
        if ($("farm" + d + "_pos" + c + "_click")) {
            $("farm" + d + "_pos" + c + "_click").onclick = new Function(s);
        }
    }
} }
function farmProductions() { for (var z in gametimer.farm_productions) {
    for (var y in gametimer.farm_productions[z]) {
        var m = "";
        var d = farms_data.farms[z][y].production[0].time;
        var s = farms_data.farms[z][y].production[0].pid;
        if (farms_data.farms[z][y].buildingid == 17) { }
        if (farms_data.farms[z][y].buildingid == 18) {
            farms_data.farms[z][y].production[0].remain--;
            var u = farms_data.farms[z][y].production[0].remain;
        }
        else {
            if (gametimer.farm_productions[z][y]) {
                var v = farms_data.farms[z][y].production[0].remain;
                var l = 0;
                for (var e in farms_data.farms[z][y].production) {
                    if (farms_data.farms[z][y].production[e]) {
                        if (v > farms_data.farms[z][y].production[e].remain) {
                            v = farms_data.farms[z][y].production[e].remain;
                            l = e;
                        }
                        farms_data.farms[z][y].production[e].remain--;
                    }
                }
            }
            var u = farms_data.farms[z][y].production[l].remain;
            s = farms_data.farms[z][y].production[l].pid;
        }
        if (u > 0) {
            if ($("advancedproduction" + z + "_" + y)) {
                $("advancedproduction" + z + "_" + y).innerHTML = formatTime(u);
            }
            showDiv("farm_production_running" + z + "_" + y);
            hideDiv("farm_production_ready" + z + "_" + y);
            var n = formatTime(u);
            var a = Math.ceil((u * 100) / d);
            var r = { 2: 80, 3: 60, 4: 50, 5: 60, 10: 47, 11: 54, 12: 80, 15: 74 };
            if (r[farms_data.farms[z][y].buildingid]) {
                var t = ((r[farms_data.farms[z][y].buildingid] / 100) * (100 - a));
                $("farm_production_mover" + z + "_" + y).style.height = t + "px";
            }
            if (farms_data.farms[z][y].buildingid == 8) {
                if (s == 27) {
                    var w = (100 / 8);
                    var c = (8 - Math.ceil(a / w));
                    if (!c) {
                        c = 1;
                    }
                    $("farm_production_mover" + z + "_" + y).className = "farm_production_cheese" + c + " farm_production_front8_27";
                }
                else {
                    if (s == 111) {
                        var t = ((66 / 100) * (100 - a));
                        $("farm_production_mover" + z + "_" + y).style.height = t + "px";
                    }
                }
            }
            if (farms_data.farms[z][y].buildingid == 7) {
                var A = 57;
                if (s == 144) {
                    var A = 110;
                }
                var t = ((A / 100) * (100 - a));
                $("farm_production_mover" + z + "_" + y).style.height = t + "px";
            }
            if (farms_data.farms[z][y].buildingid == 9) {
                var A = 81;
                if (s == 152) {
                    var A = 82;
                }
                var t = ((81 / 100) * (100 - a));
                $("farm_production_mover" + z + "_" + y).style.height = t + "px";
            }
        }
        else {
            if ($("advancedproduction" + z + "_" + y)) {
                $("advancedproduction" + z + "_" + y).innerHTML = statusProductionComplete;
                setCompleteProductionAdvanced(y);
            }
            hideDiv("farm_production_running" + z + "_" + y);
            showDiv("farm_production_ready" + z + "_" + y);
            var n = statusProductionComplete;
            if (s > 0) {
                var q = 0;
                for (var C = 0; C < farm_checker.length; C++) {
                    if (farm_checker[C].farm == z && farm_checker[C].position == y) {
                        q++;
                    }
                }
                var B = { pid: s, farm: z, position: y };
                if (!q) {
                    farm_checker.push(B);
                }
            }
        }
        updateProductionSlot(z, y);
        if (s > 0) {
            m += '<div class="kp' + s + '" style="float:left; margin:5px;"></div>';
        }
        m += '<div style="float:left; margin-top:5px;">' + n + "</div>";
        m += '<div class="clear"></div>';
        if ($("farm_production_timer" + z + "_" + y)) {
            $("farm_production_timer" + z + "_" + y).innerHTML = m;
        }
    }
} if (farm_checker.length > 0 && currentuserlevel >= 3 && farm > 0 && premium) {
    showDiv("farm_production_checker_icon");
    farmChecker();
}
else {
    hideDiv("farm_production_checker_icon");
} }
function farmWater() { if (farm_water_checker == 1) {
    for (var c in gametimer.farm_water) {
        for (var b in gametimer.farm_water[c]) {
            if (farms_data.farms[c][b].water) {
                var d = 0;
                for (var a = 0; a < farms_data.farms[c][b].water.length; a++) {
                    if (farms_data.farms[c][b].water[a].waterremain <= 0) {
                        if (farms_data.farms[c][b].water[a].remain > 0) {
                            d++;
                        }
                    }
                    if (d > 0) {
                        break;
                    }
                }
                if (d > 0) {
                    showDiv("farm_garden_water_timer" + c + "_" + b);
                }
                else {
                    hideDiv("farm_garden_water_timer" + c + "_" + b);
                }
            }
        }
    }
} }
function farmCheckerOpen() { showDiv("farm_production_checker"); if (farm_checker_open == 1) {
    farm_checker_open = 0;
    $("farm_production_checker").removeClassName("farm_production_checker_on");
    $("farm_production_checker").addClassName("farm_production_checker_off");
}
else {
    farm_checker_open = 1;
    $("farm_production_checker").addClassName("farm_production_checker_on");
    $("farm_production_checker").removeClassName("farm_production_checker_off");
} }
function farmChecker() { if (!farm_checker_open) {
    return false;
} html = ""; for (var a = 0; a < farm_checker.length; a++) {
    var b = farm_checker[a];
    if (b.pid > 0) {
        html += '<div class="link farm_checker_line" onclick="farmCheckerOpen(); showMain(); farmMove(' + b.farm + ');">';
        html += '  <div class="kp' + b.pid + '" style="float:left; margin:5px; width:15px:"></div>';
        html += '  <div style="float:left; margin-top:5px; width:120px;">' + produkt_name[b.pid] + "</div>";
        html += '  <div class="clear"></div>';
        html += "</div>";
    }
} $("farm_production_checker_inner").innerHTML = html; }
function farmMove(b) { if (b != farm_number) {
    if (city > 0 || foodworld_quicknavi > 0 || forestry_quicknavi > 0) {
        for (var a = 1; a <= farms_data.count; a++) {
            if (a == b) {
                showDiv("farm_positions" + a);
            }
            else {
                hideDiv("farm_positions" + a);
            }
        }
        $("farm_inner").className = "farm_move" + b + "_set";
    }
    else {
        if (farm_move == 1 && (("transition" in $("farm_inner").style) || ("webkitTransition" in $("farm_inner").style)) && ((farm_number <= 4 || farm_number == 99 || farm_number == 100) && (b <= 4 || b == 99 || b == 100))) {
            showDiv("farm_positions" + b);
            if (farm_number == 99) {
                if (b === 100) {
                    $("farm_inner").className = "farm_move_go_down";
                    setTimeout("$('farm_inner').className = 'farm_move100_set';", 400);
                }
                else {
                    $("farm_inner").className = "farm_move_go_up";
                    setTimeout("$('farm_inner').className = 'farm_move" + b + "';", 400);
                }
            }
            else {
                if (farm_number == 100) {
                    if (b == 99) {
                        $("farm_inner").className = "farm_move_go_up2";
                        setTimeout("$('farm_inner').className = 'farm_move99_set';", 400);
                    }
                    else {
                        $("farm_inner").className = "farm_move_go_up";
                        setTimeout("$('farm_inner').className = 'farm_move" + b + "';", 400);
                    }
                }
                else {
                    if (b == 99) {
                        $("farm_inner").addClassName("farm_move99");
                        setTimeout("$('farm_inner').className = 'farm_move99_set'", 800);
                    }
                    else {
                        if (b == 100) {
                            $("farm_inner").addClassName("farm_move100");
                            setTimeout("$('farm_inner').className = 'farm_move100_set'", 800);
                        }
                        else {
                            $("farm_inner").className = "farm_move" + b;
                        }
                    }
                }
            }
        }
        else {
            for (var a = 1; a <= farms_data.count; a++) {
                if (a == b) {
                    showDiv("farm_positions" + a);
                }
                else {
                    hideDiv("farm_positions" + a);
                }
            }
            $("farm_inner").className = "farm_move" + b + "_set";
        }
    }
} farm_number = b; farm = farm_number; if (farm == 1 && powerupactive) {
    showDiv("powerupcontainer");
}
else {
    hideDiv("powerupcontainer");
} if (player_guild > 0 && player_guildmemberstatus > 1) {
    showDiv("farm_inner_guildlink");
}
else {
    hideDiv("farm_inner_guildlink");
} closeFoodcontest(); if (city > 0) {
    showMain();
} hideDiv("transp"); hideDiv("building_inner"); hideDiv("innermaincontainer"); city = 0; inguild = 0; foodworld_quicknavi = 0; forestry_quicknavi = 0; speedLinks(); initActionSheep(); if ((b != 99 && b != 100) && $("reallocatebuilding_symbol") && reallocatebuilding_status == 1) {
    showDiv("reallocatebuilding_symbol");
} if ((b != 99 && b != 100) && $("reallocateanimals_symbol") && reallocateanimals_status == 1) {
    showDiv("reallocateanimals_symbol");
} if (b == 99 || b == 100) {
    if ($("box_button")) {
        $("box_button").style.top = "356px";
    }
    hideDiv("reallocatebuilding_symbol");
    hideDiv("reallocateanimals_symbol");
}
else {
    if ($("box_button")) {
        $("box_button").style.top = "210px";
    }
} if ($("farm_production_checker_icon") && currentuserlevel >= 3 && farm_checker.length > 0 && premium) {
    showDiv("farm_production_checker_icon");
} setTutorialLine(); if (tutorial == 5 || tutorial == 10 || tutorial == 11) {
    initCity(1);
} if (tutorial == 3) {
    specialZoneFieldHandler(1);
} if (farm == 99 && farmersmarket_firstvisit == 1 && !farmersmarket_firstvisit_session) {
    openFarmersMarketHowTo();
} if (farm > 4 && (farm != 99 && farm != 100)) {
    $("lager_info_button_tt").innerHTML = str_replace("%FARM%", farm, t_map_rack_transfer_info_button);
    showDiv("lager_info_button");
}
else {
    hideDiv("lager_info_button");
} }
function showFarmDog() { showDiv("transp"); showDiv("farm_dog_box"); var a = '<div class="headline">' + t_farmdog_name + "</div>"; if (farmdog_isset) {
    if (farmdog_harvest == 1) {
        a += t_farmdog_info3;
    }
    else {
        a += t_farmdog_info2;
        a += '<div id="farm_dog_button"><button type="button" id="farm_dog_button_link" class="coinsbutton_small link" onclick="farmAction(\'dogbonus\', ' + farm + ', 0)">' + t_farmdog_button2 + "</button></div>";
    }
}
else {
    a += t_farmdog_info1;
    a += '<div id="farm_dog_button"><a href="' + PAYMENTLINK + '" target="_blank"><button type="button" class="coinsbutton_small link">' + t_farmdog_button1 + "</button></a></div>";
} $("farm_dog_box_inner").innerHTML = a; }
function closeFarmDog() { hideDiv("transp"); hideDiv("farm_dog_box"); }
function buildFarmersMarket() { var c = farmersmarket_data; var b = ""; var d = ""; if (xmastime == 1) {
    d = "_xmas";
} b += '<div class="farm_back farm_back99' + d + '">'; for (var a = 1; a <= 6; a++) {
    b += buildFarmersMarketPosition(a);
} b += '  <div id="farmersmarket_howto_link" class="link" onclick="openFarmersMarketHowTo()" onmouseover="showDiv(\'farmersmarket_howto_link_tt\')" onmouseout="hideDiv(\'farmersmarket_howto_link_tt\')">'; b += '    <div id="farmersmarket_howto_link_tt" class="ttbox">'; b += "      <div>" + t_farmersmarket_helper + "</div>"; b += '      <div id="farmersmarket_howto_link_tt_arrow"></div>'; b += "    </div>"; b += "  </div>"; b += '  <div id="farm99_scroller" class="link" onclick="farmMove(2);" onmouseover="showDiv(\'farm99_scroller_tt\')" onmouseout="hideDiv(\'farm99_scroller_tt\')">'; b += '    <div id="farm99_scroller_tt" class="ttbox">' + t_farm99_scroller_tt + "</div>"; b += "  </div>"; if (farmersmarket_addon == 1) {
    b += '  <div class="scroller bottom link" onclick="farmMove(100);" onmouseover="showDiv(\'farm99_bottom_scroller_tt\')" onmouseout="hideDiv(\'farm99_bottom_scroller_tt\')">';
    b += '    <div id="farm99_bottom_scroller_tt" class="ttbox">' + t_farmers_market + "&nbsp;2</div>";
    b += "  </div>";
} b += "</div>"; if (farmersmarket_addon == 1) {
    var d = "";
    if (xmastime == 1) {
        d = "_xmas";
    }
    b += '<div class="farm_back farm_back100' + d + '">';
    for (var a = 7; a <= 12; a++) {
        b += buildFarmersMarketPosition(a);
    }
    b += '  <div id="farmersmarket_howto2_link" class="link" onclick="openFarmersMarketHowTo()" onmouseover="showDiv(\'farmersmarket_howto2_link_tt\')" onmouseout="hideDiv(\'farmersmarket_howto2_link_tt\')">';
    b += '    <div id="farmersmarket_howto2_link_tt" class="ttbox">';
    b += "      <div>" + t_farmersmarket_helper + "</div>";
    b += '      <div id="farmersmarket_howto2_link_tt_arrow"></div>';
    b += "    </div>";
    b += "  </div>";
    b += '  <div class="scroller top link" onclick="farmMove(99);" onmouseover="showDiv(\'farm100_top_scroller_tt\')" onmouseout="hideDiv(\'farm100_top_scroller_tt\')">';
    b += '    <div id="farm100_top_scroller_tt" class="ttbox">' + t_farmers_market + "&nbsp;1</div>";
    b += "  </div>";
    b += "</div>";
} setTimer("flowergardener"); setTimer("flowerslots"); setTimer("nursery"); setTimer("flowerarea"); setTimer("megafruit"); setTimer("foodcontest"); setTimer("vet"); setTimer("pets"); setTimer("butterfly"); return b; }
function buildFarmersMarketPosition(c) { var d = "bottom"; if (c > 3) {
    d = "top";
} var b = ""; b += '<div id="farmersmarket_pos' + c + '" class="farmersmarket_pos link">'; b += '  <div id="farmersmarket_pos' + c + '_tt" class="ttbox farmersmarket_pos_tt_' + d + '"></div>'; if (c == 1 && !stopanimation) {
    b += '<div id="farmersmarket_pos1_ani1"></div>';
    b += '<div id="farmersmarket_pos1_ani2"></div>';
} if (c == 7) {
    b += '<div id="farmersmarket_pos7_ani1"></div>';
} b += '  <div id="farmersmarket_pos' + c + '_block" class="farmersmarket_pos_block"></div>'; b += '  <div id="farmersmarket_pos' + c + '_timer" class="farmersmarket_pos_timer"></div>'; b += '  <div id="farmersmarket_pos' + c + '_progress" class="farmersmarket_pos_progress"></div>'; b += '  <div id="farmersmarket_pos' + c + '_click"></div>'; b += '  <div id="farmersmarket_buttons_' + c + '">'; b += '    <div id="farmersmarket_button_upgrade_' + c + '" class="farm_button_upgrade button_upgrade link" onmouseover="showDiv(\'farmersmarket_button_upgrade_' + c + "_tt')\" onmouseout=\"hideDiv('farmersmarket_button_upgrade_" + c + "_tt')\">"; b += '      <div id="farmersmarket_button_upgrade_' + c + '_tt" class="farmersmarket_button_upgrade_tt ttbox"></div>'; b += "    </div>"; b += "  </div>"; b += "</div>"; b += '<div id="farmersmarket_pos' + c + '_inner"></div>'; if (c == 1) {
    b += '<div id="flowers_gardener" class="flowers_gardener_idle link" onclick="flowersGardener()" onmouseover="showDiv(\'flowers_gardener_tt\')" onmouseout="hideDiv(\'flowers_gardener_tt\')">';
    b += '  <div id="flowers_gardener_hello" class="ttbox">';
    b += t_gardener_hello;
    b += '    <div id="flowers_gardener_hello_arrow"></div>';
    b += "  </div>";
    b += '  <div id="flowers_gardener_tt" class="ttbox">' + t_gardener + "</div>";
    b += "</div>";
    b += '<div id="flowers_gardener_box"></div>';
    for (var a = 1; a <= 17; a++) {
        if (a == 1) {
            b += '<div id="farmersmarket_deco_row1">';
        }
        b += '  <div id="farmersmarket_deco' + a + '" class="farmersmarket_deco_item link">';
        b += '    <div id="farmersmarket_deco' + a + '_pid"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_water" class="flowerslots_water"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_plant_cursor" class="flowerslots_plant_cursor"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_water_cursor" class="flowerslots_water_cursor"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_remove_cursor" class="flowerslots_remove_cursor"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_nowater_cursor" class="flowerslots_nowater_cursor"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_status"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_points" class="flowerslots_points"></div>';
        b += '    <div id="farmersmarket_deco' + a + '_tt" class="ttbox" style="display:none; left:auto; right:10px; top:50px; min-width:150px;"></div>';
        b += "  </div>";
        if (a == 7) {
            b += "</div>";
            b += '<div id="farmersmarket_deco_row2">';
        }
    }
    b += "</div>";
    b += '<div id="flowerfarmi_cart">';
    b += '  <div id="flowerfarmi_cart_head"></div>';
    b += '  <div id="flowerfarmi_cart_content"></div>';
    b += '  <div id="flowerfarmi_cart_submit"></div>';
    b += "</div>";
    b += '<div id="farmersmarket_deco_bar_opener" onmouseover="showDiv(\'farmersmarket_deco_bar_box\')" onmouseout="hideDiv(\'farmersmarket_deco_bar_box\')"></div>';
    b += '<div id="farmersmarket_deco_bar_box">';
    b += '  <div style="margin-bottom:5px;">' + str_replace("%POINTS%", formatNumber(flowerfarmis_createlimit), t_flowerfarmi_bar_info) + "</div>";
    b += '  <div id="farmersmarket_deco_bar">';
    b += '    <div id="farmersmarket_deco_bar_inner"></div>';
    b += '    <div id="farmersmarket_deco_bar_front"></div>';
    b += '    <div id="farmersmarket_deco_points"></div>';
    b += "  </div>";
    b += "</div>";
    b += '<div id="farm_flowerfarmis_line"></div>';
} return b; }
function openFarmersMarketHowTo(b, d) { showDiv("transp"); showDiv("farmersmarket_howto"); farmersmarket_firstvisit_session = 1; var c = ["flowers", "rewards", "megafruit", "foodcontest", "vet", "pets", "butterfly"]; for (var a = 0; a < c.length; a++) {
    hideDiv("farmersmarket_howto_navi_item_" + c[a]);
    if ($("farmersmarket_howto_inner_" + c[a]) && $("farmersmarket_howto_navi_item_" + c[a])) {
        hideDiv("farmersmarket_howto_inner_" + c[a]);
        $("farmersmarket_howto_navi_item_" + c[a]).removeClassName("farmersmarket_howto_navi_item_" + c[a] + "_active");
        $("farmersmarket_howto_navi_item_" + c[a]).onclick = new Function("openFarmersMarketHowTo('" + c[a] + "', " + d + ")");
    }
} hideDiv("farmersmarket_howto_inner_rewards1"); hideDiv("farmersmarket_howto_inner_rewards2"); if (farm == 100) {
    var e = ["rewards", "butterfly"];
    showDiv("farmersmarket_howto_inner_rewards2");
}
else {
    var e = ["flowers", "rewards", "megafruit", "foodcontest", "vet", "pets"];
    showDiv("farmersmarket_howto_inner_rewards1");
} for (var a = 0; a < e.length; a++) {
    showDiv("farmersmarket_howto_navi_item_" + e[a]);
} if (!b && farm == 100) {
    b = "butterfly";
}
else {
    if (!b) {
        b = "flowers";
    }
} showDiv("farmersmarket_howto_inner_" + b); $("farmersmarket_howto_navi_item_" + b).addClassName("farmersmarket_howto_navi_item_" + b + "_active"); $("farmersmarket_howto_close").onclick = new Function("closeFarmersMarketHowTo(" + d + ")"); if (d == 1) {
    $("transp").style.zIndex = 25;
} if (b == "vet") {
    handleVetHelp(1);
} }
function closeFarmersMarketHowTo(a) { if (a > 0) {
    $("transp").style.zIndex = 20;
}
else {
    hideDiv("transp");
} hideDiv("farmersmarket_howto"); }
function setFarmersMarket() { var l = farmersmarket_data; if (l) {
    var a = 6;
    if (farmersmarket_addon == 1) {
        a = 12;
    }
    for (var e = 1; e <= a; e++) {
        if (l.pos && l.pos[e]) {
            if (e == 1) {
                var b = "initFlowerArea()";
            }
            if (e == 2) {
                var b = "initNursery()";
            }
            if (e == 3) {
                var b = "initMegaFruit()";
            }
            if (e == 4) {
                var b = "pets.init()";
            }
            if (e == 5) {
                var b = "initVet()";
            }
            if (e == 6) {
                var b = "initFoodcontest()";
            }
            if (e == 7) {
                var b = "butterfly.init()";
            }
            $("farmersmarket_pos" + e + "_tt").innerHTML = l.pos[e].name;
            if (l.pos[e].cost) {
                $("farmersmarket_pos" + e + "_tt").innerHTML += "<div>" + formatPrice(l.pos[e].cost) + "</div>";
            }
            if (l.pos[e].update) {
                var d = "<div>" + infoupdatebuilding + "</div>";
                if (l.pos[e].cost) {
                    d += formatPrice(l.pos[e].cost);
                }
                $("farmersmarket_button_upgrade_" + e + "_tt").innerHTML = d;
                showDiv("farmersmarket_button_upgrade_" + e);
            }
            else {
                hideDiv("farmersmarket_button_upgrade_" + e);
            }
            hideDiv("farmersmarket_pos" + e + "_block");
            if (l.pos[e].block) {
                if (l.pos[e].cost) {
                    if (l.pos[e].costblock) {
                        b = "";
                    }
                    else {
                        b = "buyFarmersMarketBuilding(" + e + ")";
                    }
                }
                else {
                    b = "";
                }
                showDiv("farmersmarket_pos" + e + "_block");
                if (l.pos[e].costblock) {
                    $("farmersmarket_pos" + e + "_tt").innerHTML += '<br><div class="important">' + str_replace("%COST%", formatPrice(l.pos[e].cost), error1001) + "</div>";
                }
                if (l.pos[e].level) {
                    $("farmersmarket_pos" + e + "_tt").innerHTML += '<br><br><div class="important">' + str_replace("%LEVEL%", l.pos[e].level, error1005) + "</div>";
                }
            }
            $("farmersmarket_pos" + e + "_click").onclick = new Function(b);
            var b = "";
            if (l.pos[e].update && l.pos[e].cost) {
                b = "buyFarmersMarketBuilding(" + e + ")";
            }
            else {
                b = "";
            }
            $("farmersmarket_button_upgrade_" + e).onclick = new Function(b);
            var c = "showDiv('farmersmarket_buttons_" + e + "');";
            var h = "hideDiv('farmersmarket_buttons_" + e + "');";
            if (usetouch == 1 || !$("farmersmarket_buttons_" + e)) {
                var c = "";
                var h = "";
                showDiv("farmersmarket_buttons_" + e);
            }
            $("farmersmarket_pos" + e).onmouseover = new Function("showDiv('farmersmarket_pos" + e + "_tt'); $('farmersmarket_pos" + e + "_timer').removeClassName('farmersmarket_pos_timer_off');  $('farmersmarket_pos" + e + "_timer').addClassName('farmersmarket_pos_timer_on'); " + c);
            $("farmersmarket_pos" + e).onmouseout = new Function("hideDiv('farmersmarket_pos" + e + "_tt'); $('farmersmarket_pos" + e + "_timer').removeClassName('farmersmarket_pos_timer_on');  $('farmersmarket_pos" + e + "_timer').addClassName('farmersmarket_pos_timer_off'); " + h);
        }
    }
    updateFarmersMarketFarmis();
    setFlowerSlots();
    setFlowerFarmis(-1);
    timerNursery();
    timerFlowerArea();
    timerMegaFruit();
    if (farmersmarket_firstvisit == 1) {
        showDiv("farmersmarket_teaser");
    }
    else {
        hideDiv("farmersmarket_teaser");
    }
} }
function updateFarmersMarketFarmis() { var b = ""; var c = 0; for (var a = 0; a < farmersmarket_data.farmis.length; a++) {
    var d = farmersmarket_data.farmis[a];
    if (!$("flowerfarmi" + d.id)) {
        b += '<div id="flowerfarmi' + d.id + '" class="link flowerfarmis_item flowerfarmi' + d.img + "_idle flowerfarmis_pos" + (a + 1) + '" onclick="showCart(' + d.id + ', 1)" onmouseover="setFlowerFarmiBubble(' + d.id + ');" onmouseout="hideDiv(\'flowerfarmi' + d.id + "_tt')\">";
        b += '  <div id="flowerfarmi' + d.id + '_emotion" class="flowerfarmi_emotion"></div>';
        b += '  <div id="flowerfarmi' + d.id + '_tt" class="flowerfarmi_tt">';
        b += '    <div class="flowerfarmi_bubble">';
        b += '      <div id="flowerfarmi_bubble' + d.id + '"></div>';
        b += "    </div>";
        b += '    <div class="flowerfarmi_bubblearrow"></div>';
        b += "  </div>";
        b += "</div>";
        c++;
    }
} if (c > 0) {
    $("farm_flowerfarmis_line").innerHTML += b;
} }
function buyFarmersMarketBuilding(b) { var c = "farmAction('buyfarmersmarketbuilding', 1, 1, " + b + ")"; var d = str_replace("%BUILDING%", farmersmarket_data.pos[b].name, t_buybuilding_head); var a = str_replace("%BUILDING%", farmersmarket_data.pos[b].name, t_buybuilding_body); var h = ""; var e = ""; if (carpentry_bonus > 0) {
    h = "*";
    e = '<div class="bonusinfo">' + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
} a = str_replace("%COST%", formatPrice(farmersmarket_data.pos[b].cost) + h, a) + e; globalBox(d, a, c); }
var actionsheep = {};
function initActionSheep() { if ($("farm_actionsheep")) {
    hideDiv("farm_actionsheep");
    if (actionsheep.remain > 0) {
        showDiv("farm_actionsheep");
        var a = t_actionsheep_head;
        if (actionsheep.giver > 0) {
            a += '<div class="bonusinfo">' + str_replace("%POINTS%", actionsheep.giver, t_giverinfo) + "</div>";
        }
        $("farm_actionsheep_tt").innerHTML = a;
    }
} }
function clickActionSheep() { if (actionsheep.giver > 0) {
    farmAction("actionsheep_click", 1, 1);
    $("farm_actionsheep_flyer").innerHTML = "+" + actionsheep.giver;
    $("farm_actionsheep_flyer").addClassName("panflyer_ani");
    setTimeout(function () { hideDiv("farm_actionsheep_flyer"); }, 1000);
} showDiv("farm_actionsheep_transp"); showDiv("farm_actionsheep_bubble"); var a = ""; a += '<div class="headline" style="font-size:16px; margin-top:10px; margin-bottom:20px;">' + t_actionsheep_head + "</div>"; a += '<div style="font-size:16px; margin-bottom:20px; font-weight:bold;">' + str_replace("%BONUS%", actionsheep.bonus, t_actionsheep_info) + "</div>"; a += '<div style="font-size:16px; margin-bottom:20px;">' + str_replace("%TIME%", "<b>" + actionsheep.end + "</b>", t_actionsheep_time) + "</div>"; a += '<a href="' + paymentlink + '" target="_blank" style="text-decoration:none;"><div id="farm_actionsheep_coinsbutton" class="coins_button">' + t_coins_buy_menu + "</div></a>"; $("farm_actionsheep_bubble_inner").innerHTML = a; }
function closeActionSheep() { if ($("farm_actionsheep")) {
    hideDiv("farm_actionsheep_transp");
    hideDiv("farm_actionsheep_bubble");
} }
var global_speedup_block = 0;
function globalSpeedupBox(e, d, m) { if (e == "garden") {
    var b = speedupgarden[0];
}
else {
    if (e == "nursery" && farmersmarket_data.nursery && farmersmarket_data.nursery.speedup) {
        var b = farmersmarket_data.nursery.speedup;
    }
    else {
        if (e == "flowerarea") {
            var b = farmersmarket_data.flowerarea_speedup;
        }
        else {
            if (e == "foodworld") {
                var b = foodworldspeedup[d];
            }
            else {
                if (e == "forestry_speedup") {
                    var b = forestry_bld_fertilize;
                }
                else {
                    if (e == "forestry_fertilize") {
                        var b = forestry_fertilize;
                    }
                    else {
                        if (e == "vet_disease_speedup") {
                            var b = vet_data.disease_speedup;
                        }
                        else {
                            if (e == "vet_production_slot_speedup") {
                                var b = vet_data.production_speedup;
                            }
                            else {
                                if (e == "pets_production_slot_speedup" && pets && pets.data && pets.data.config) {
                                    var b = pets.data.config.speedup;
                                }
                                else {
                                    if (e == "fuelstation_speedup") {
                                        var b = farms_data.farms[farm][d].data.constants.speedup;
                                    }
                                    else {
                                        if (e == "map_tour") {
                                            var b = farms_data.map.config.speedup;
                                        }
                                        else {
                                            if (in_array(e, ["oil", "tea", "strickerei"])) {
                                                var b = factory.data.speedup;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} var a = 0; if (e == "forestry_speedup" && forestry_coinsaction == 1) {
    a = 1;
} var l = building_speeduptext; if (e == "garden" || e == "forestry_fertilize") {
    l = gardenspeedup_head;
} if (e == "vet_disease_speedup") {
    l = t_vet_disease_speedup_head;
} if (e == "map_tour") {
    l = t_speedup_dialog_routetime_head;
} var h = '<div class="headline">' + l + "</div>"; for (var c in b) {
    var n = c + "&nbsp;" + t_coins;
    if (e == "garden") {
        if (freegardenspeedup && c == 1) {
            n = forfree;
        }
        else {
            if (freegardenspeedup2 && c == 2) {
                n = forfree;
            }
        }
    }
    h += '<div class="link speedupbox_item" onclick="globalSpeedupCommit(\'' + e + "', " + d + ", " + m + ", " + c + ');">';
    h += '  <div class="speedupbox_item_coins">' + n + "</div>";
    h += '  <div class="speedupbox_item_time">' + formatTime(b[c]) + "</div>";
    if (a == 1) {
        h += '<div class="speedup_coinsaction"></div>';
    }
    h += "</div>";
} showDiv("speedupbox_ani"); if (e == "garden") {
    $("speedupbox").className = "speedupbox_back1";
    hideDiv("speedupbox_ani");
}
else {
    $("speedupbox").className = "speedupbox_back2";
} $("speedupbox_inner").innerHTML = h; showDiv("globaltransp"); showDiv("speedupbox"); }
function globalSpeedupCommit(l, e, n, q) { var b = {}; b.garden = { data: speedupgarden[0], click: "useGardenSpeedup(" + e + "," + q + ")" }; if (farmersmarket_data.nursery && farmersmarket_data.nursery.speedup) {
    b.nursery = { data: farmersmarket_data.nursery.speedup, click: "farmAction('nursery_speedup', 1, 1, " + n + ", " + q + ")" };
} b.flowerarea = { data: farmersmarket_data.flowerarea_speedup, click: "farmAction('flowerarea_speedup', 1, 1, " + n + ", " + q + ")" }; b.foodworld = { data: foodworldspeedup[e], click: "foodworldAction('speedup', 0, 0, 0, " + e + ", " + n + ", " + q + ")" }; b.forestry_speedup = { data: forestry_bld_fertilize, click: "forestryAjaxAction('speedup', " + e + ", 0, " + n + ", 0, " + q + ")" }; b.forestry_fertilize = { data: forestry_fertilize, click: "forestryAjaxAction('fertilize', " + e + ", 0, " + n + ", 0, " + q + ")" }; b.vet_disease_speedup = { data: vet_data.disease_speedup, click: "farmAction('vet_speeduptreatment', 1, 1, " + n + ", " + q + ")" }; b.vet_production_slot_speedup = { data: vet_data.production_speedup, click: "farmAction('vet_speedupproduction', 1, 1, " + n + ", " + q + ")" }; if (pets && pets.data && pets.data.config) {
    b.pets_production_slot_speedup = { data: pets.data.config.speedup, click: "pets.speedupProduction(" + n + ", " + q + ")" };
} if (farms_data.farms[farm] && farms_data.farms[farm][e] && farms_data.farms[farm][e].data && farms_data.farms[farm][e].data.constants) {
    b.fuelstation_speedup = { data: farms_data.farms[farm][e].data.constants.speedup, click: "farmAction('fuelstation_speedup', " + farm + ", " + e + ", " + n + ", " + q + ")" };
} b.map_tour = { data: farms_data.map.config.speedup, click: "farmAction('map_speedup', 1, 1, " + n + ", " + q + ")" }; b.tea = { data: factory.data.speedup, click: "factory.speedup(" + n + ", " + q + ")" }; b.strickerei = { data: factory.data.speedup, click: "factory.speedup(" + n + ", " + q + ")" }; b.oil = { data: factory.data.speedup, click: "factory.speedup(" + n + ", " + q + ")" }; if (n > 0 && q > 0 && !global_speedup_block && b[l]) {
    global_speedup_block = 1;
    var m = building_speeduptext;
    var a = t_speedup_dialog_productiontime;
    if (l == "garden" || l == "forestry_fertilize") {
        m = gardenspeedup_head;
        a = gardenspeedup_body;
    }
    if (l == "vet_disease_speedup") {
        m = t_vet_disease_speedup_head;
        a = t_vet_disease_speedup_body;
    }
    if (l == "map_tour") {
        m = t_speedup_dialog_routetime_head;
        a = t_speedup_dialog_routetime;
    }
    var c = q + "&nbsp;" + t_coins;
    if (l == "garden") {
        if (freegardenspeedup && q == 1) {
            c = forfree;
        }
        else {
            if (freegardenspeedup2 && q == 2) {
                c = forfree;
            }
        }
    }
    var h = '<div style="margin-bottom:10px;"><img src="' + imgpath + 'menu/coins.gif" width="10" height="10">&nbsp;' + c + "</div>";
    h += str_replace("%TIME%", formatTime(b[l].data[q]), a);
    var d = "hideDiv('globalbox'); global_speedup_block=0;";
    globalcommitbox(m, h, "hideDiv('speedupbox'); " + b[l].click, d);
} }
var flowerarea_cache = {};
var flowerarea_cache_run = 0;
var flowerarea_modus = "";
var flowerarea_autoplant_select = 0;
var flowerarea_changebonus_select = 0;
var flowerslots_cache = {};
var flowerslots_cache_run = 0;
var flowerslots_modus = "";
var flowerslots_ready_cache = 0;
var flowerslots_countpoints = {};
var flowerarea_unique_drops = {};
var flowerslots_need_water = 0;
var megafruit_block = 0;
var megafruit_stats = {};
var megafruit_stats_delay = 0;
var megafruit_stats_select = 99;
var megafruit_stats_cache = {};
var foodcontest_block = 0;
var foodcontest_merch_slot_select = 0;
var foodcontest_pincache = [];
var foodcontest_cache_run = 0;
var foodcontest_feedback = {};
var foodcontest_stats = [];
var foodcontest_stats_select = "fighter";
var foodcontest_merch_category = 1;
var foodcontest_merch_categories_count = { "1": 0, "2": 0, "3": 0 };
var foodcontest_merch_categories_page = 1;
var in_foodcontest = 0;
var nursery_startproduction_block = 0;
function initFlowerArea() { var e = ""; e += '<div id="flowerarea_plantarea">'; for (var d = 1; d <= 36; d++) {
    e += '<div id="flowerarea_tile' + d + '" class="flowerarea_tile" onmouseover="checkFlowerAreaTile(' + d + ', 1);" onmouseout="checkFlowerAreaTile(' + d + ', 0);">';
    e += '  <div id="flowerarea_tile' + d + '_status" class="flowerarea_tile_status"></div>';
    e += '  <div id="flowerarea_tile' + d + '_water" class="flowerarea_tile_water"></div>';
    e += '  <div id="flowerarea_tile' + d + '_pid" class="flowerarea_tile_pid"></div>';
    e += '  <div id="flowerarea_tile' + d + '_tt" class="flowerarea_tile_tt ttbox"></div>';
    e += "</div>";
    if (d % 6 == 0) {
        e += '<div class="clear"></div>';
    }
} e += "</div>"; e += '<div id="flowerarea_buttons">'; e += '  <div class="flowerarea_modus_plant link flowerarea_buttons" onclick="flowerarea_modus=\'plant\';" onmouseover="showDiv(\'flowerarea_button_tt_plant\')" onmouseout="hideDiv(\'flowerarea_button_tt_plant\')">'; e += '    <div id="flowerarea_button_tt_plant" class="ttbox flowerarea_button_tt">' + t_anpflanzen + "</div>"; e += "  </div>"; e += '  <div class="flowerarea_modus_water link flowerarea_buttons" onclick="flowerarea_modus=\'water\';" onmouseover="showDiv(\'flowerarea_button_tt_water\')" onmouseout="hideDiv(\'flowerarea_button_tt_water\')">'; e += '    <div id="flowerarea_button_tt_water" class="ttbox flowerarea_button_tt">' + lng_t_giessen + '<div class="bonusinfo">' + str_replace("%BONUS%", flowerarea_water_percent, garden_waterbonus) + "</div></div>"; e += "  </div>"; var c = "show_page('coins',0);"; var a = "show_page('coins',0);"; var b = "show_page('coins',0);"; var h = ""; if (premium) {
    c = "farmAction('flowerarea_water_all', 1, 1);";
    a = "farmAction('flowerarea_harvest_all', 1, 1);";
    b = "dialogFlowerArea('autoplant')";
}
else {
    h = '<div class="bonusinfo important">' + inforequirepremium + "</div>";
} e += '  <div class="flowerarea_modus_water_all link flowerarea_buttons" onclick="' + c + '" onmouseover="showDiv(\'flowerarea_button_tt_water_all\')" onmouseout="hideDiv(\'flowerarea_button_tt_water_all\')">'; e += '    <div id="flowerarea_button_tt_water_all" class="ttbox flowerarea_button_tt">' + water_all_tttext + h + "</div>"; e += "  </div>"; e += '  <div class="flowerarea_modus_harvest_all link flowerarea_buttons" onclick="' + a + '" onmouseover="showDiv(\'flowerarea_button_tt_harvest_all\')" onmouseout="hideDiv(\'flowerarea_button_tt_harvest_all\')">'; e += '    <div id="flowerarea_button_tt_harvest_all" class="ttbox flowerarea_button_tt">' + crop_all_tttext + h + "</div>"; e += "  </div>"; e += '  <div class="clear"></div>'; e += "</div>"; e += '  <div class="flowerarea_button_autoplant button_autoplant link" onclick="' + b + '" onmouseover="showDiv(\'flowerarea_button_autoplant_tt\')" onmouseout="hideDiv(\'flowerarea_button_autoplant_tt\')">'; e += '    <div id="flowerarea_button_autoplant_tt" class="ttbox">' + autoplant_info + h + "</div>"; e += "  </div>"; e += '  <div class="flowerarea_button_speedup speedupgardenbutton link" onclick="dialogFlowerArea(\'speedup\')" onmouseover="showDiv(\'flowerarea_button_speedup_tt\')" onmouseout="hideDiv(\'flowerarea_button_speedup_tt\')">'; e += '    <div id="flowerarea_button_speedup_tt" class="ttbox">' + gardenspeedup_head + "</div>"; e += "  </div>"; e += '  <div class="flowerarea_button_bonus link" onclick="dialogFlowerArea(\'changebonus\')" onmouseover="showDiv(\'flowerarea_button_bonus_tt\')" onmouseout="hideDiv(\'flowerarea_button_bonus_tt\')">'; e += '    <div id="flowerarea_button_bonus_txt">' + t_flowerarea_growth_bonus + "</div>"; e += '    <div id="flowerarea_button_bonus_img"></div>'; e += '    <div id="flowerarea_button_bonus_tt" class="ttbox"></div>'; e += "  </div>"; e += '<div class="big_close link" onclick="closeFlowerArea()"></div>'; $("farmersmarket_pos1_inner").innerHTML = e; showDiv("transp"); showDiv("farmersmarket_pos1_inner"); buildFlowerArea(); }
function buildFlowerArea() { var b = farmersmarket_data.flower_area; for (var a = 1; a <= 36; a++) {
    if (b[a]) {
        drawFlowerAreaTile(a);
    }
    else {
        $("flowerarea_tile" + a + "_pid").className = "";
        hideDiv("flowerarea_tile" + a + "_water");
    }
} }
function timerFlowerArea() { var d = 0; var b = 0; var h = { pid: 0, remain: 0, pos: 0 }; var a = 0; for (var l in farmersmarket_data.flower_area) {
    if (farmersmarket_data.flower_area[l].pid) {
        farmersmarket_data.flower_area[l].remain--;
        farmersmarket_data.flower_area[l].water_remain--;
        var e = farmersmarket_data.flower_area[l];
        if ($("flowerarea_tile" + l)) {
            if (e.remain < 0) {
                $("flowerarea_tile" + l + "_tt").innerHTML = produkt_name[e.pid] + "<br>" + statusProductionComplete;
            }
            else {
                drawFlowerAreaTile(l);
                $("flowerarea_tile" + l + "_tt").innerHTML = produkt_name[e.pid] + "<br>" + formatTime(e.remain);
            }
            if (e.water_remain > 0 && e.remain > 0) {
                showDiv("flowerarea_tile" + l + "_water");
            }
            else {
                hideDiv("flowerarea_tile" + l + "_water");
            }
        }
        if (e.remain < 0) {
            d++;
            a = e.pid;
        }
        else {
            b++;
            if (!h.pid || h.remain > e.remain) {
                h = { pid: e.pid, remain: e.remain, pos: l };
            }
        }
    }
} if (d > 0) {
    showFarmersmarketPosTimer(1, a, statusProductionComplete);
}
else {
    if (b > 0) {
        showFarmersmarketPosTimer(1, h.pid, formatTime(h.remain));
    }
    else {
        showFarmersmarketPosTimer(1, 0);
    }
} insertFarmChecker(); if (farmersmarket_data.flower_bonus) {
    farmersmarket_data.flower_bonus.remain--;
    if (farmersmarket_data.flower_bonus.remain <= 0) {
        farmAction("farmersmarket_update", 1, 1);
    }
    else {
        if ($("flowerarea_button_bonus_img")) {
            $("flowerarea_button_bonus_img").className = "tt" + farmersmarket_data.flower_bonus.pid;
            var c = produkt_name[farmersmarket_data.flower_bonus.pid];
            c += "<div>" + formatTime(farmersmarket_data.flower_bonus.remain) + "</div>";
            c += '<div class="bonusinfo">' + str_replace("%PERCENT%", flowerarea_dailybonus_percent, t_flowerarea_growth_bonus_info) + "</div>";
            $("flowerarea_button_bonus_tt").innerHTML = c;
        }
        if ($("flowerarea_changebonus_dialog_inner")) {
            $("flowerarea_changebonus_dialog_timer").innerHTML = formatTime(farmersmarket_data.flower_bonus.remain);
        }
    }
} }
function drawFlowerAreaTile(d) { if ($("flowerarea_tile" + d + "_pid")) {
    var b = farmersmarket_data.flower_area[d];
    var a = Math.ceil((b.remain * 100) / b.duration);
    var c = "fl_0";
    if (a <= 90) {
        c = "fl" + b.pid + "_2";
    }
    if (a <= 20 || a > 100) {
        c = "fl" + b.pid + "_3";
    }
    $("flowerarea_tile" + d + "_pid").className = "fl_blank " + c;
} }
function checkFlowerAreaTile(b, a) { if (a == 1) {
    if (farmersmarket_data.flower_area[b]) {
        showDiv("flowerarea_tile" + b + "_tt");
        if (farmersmarket_data.flower_area[b].remain < 0) {
            $("flowerarea_tile" + b + "_status").addClassName("flowerarea_tile_status_harvest");
            $("flowerarea_tile" + b).onclick = new Function("cacheFlowerArea('harvest', " + b + "," + farmersmarket_data.flower_area[b].pid + ");");
        }
        else {
            if (farmersmarket_data.flower_area[b].water_remain < 0) {
                $("flowerarea_tile" + b + "_status").addClassName("flowerarea_tile_status_water");
                $("flowerarea_tile" + b).onclick = new Function("cacheFlowerArea('water', " + b + "," + farmersmarket_data.flower_area[b].pid + ");");
            }
        }
    }
    else {
        if (selected > 0) {
            if (produkt_category[selected] && produkt_category[selected] == flowerarea_product_category && !in_array(selected, flowerarea_dropitems)) {
                if (checkRackItem(selected) > 0 && flowerarea_modus == "plant") {
                    $("flowerarea_tile" + b + "_status").addClassName("flowerarea_tile_status_plant");
                    $("flowerarea_tile" + b).onclick = new Function("cacheFlowerArea('plant', " + b + ", " + selected + ");");
                }
                else { }
            }
            else {
                $("flowerarea_tile" + b + "_status").addClassName("flowerarea_tile_status_block");
            }
        }
    }
}
else {
    hideDiv("flowerarea_tile" + b + "_tt");
    $("flowerarea_tile" + b).onclick = new Function("");
    $("flowerarea_tile" + b + "_status").removeClassName("flowerarea_tile_status_harvest");
    $("flowerarea_tile" + b + "_status").removeClassName("flowerarea_tile_status_block");
    $("flowerarea_tile" + b + "_status").removeClassName("flowerarea_tile_status_plant");
    $("flowerarea_tile" + b + "_status").removeClassName("flowerarea_tile_status_water");
} }
function cacheFlowerArea(b, d, a) { if (!flowerarea_cache[d] && (b == "harvest" || b == "plant" || b == "water")) {
    if (flowerarea_modus != "" && flowerarea_modus != b) {
        fireFlowerAreaCache();
    }
    flowerarea_modus = b;
    $("flowerarea_tile" + d + "_status").addClassName("flowerarea_tile_wait");
    flowerarea_cache[d] = a;
    var c = checkRackItem(selected);
    if (b == "plant" && c) {
        c--;
        setRackItem(selected, c);
    }
    if (!flowerarea_cache_run) {
        flowerarea_cache_run = setTimeout("fireFlowerAreaCache()", 1000);
    }
} }
function fireFlowerAreaCache() { if (flowerarea_modus == "plant") {
    farmAction("flowerarea_plant", 1, 1);
}
else {
    if (flowerarea_modus == "harvest") {
        farmAction("flowerarea_harvest", 1, 1);
    }
    else {
        if (flowerarea_modus == "water") {
            farmAction("flowerarea_water", 1, 1);
        }
    }
} clearTimeout(flowerarea_cache_run); flowerarea_cache_run = 0; flowerarea_cache = {}; }
function dialogFlowerArea(l, n) { var b = 0; if (l == "autoplant") {
    var m = autoplant_headline;
    var e = "<div>" + autoplant_select + "</div><br>";
    var d = 0;
    var s = "";
    s += '<div id="flowerarea_autoplantselectbox">';
    for (var c = 0; c < 250; c++) {
        if (produkt_category[c] == flowerarea_product_category && checkRackItem(c) > 0 && !in_array(c, flowerarea_dropitems)) {
            if (!d) {
                d = c;
            }
            s += '<div class="link flowerarea_autoplant_item" onclick="flowerarea_autoplant_select=' + c + "; dialogFlowerArea('autoplant')\">";
            s += '  <div class="kp' + c + '" style="float:left; margin-right:5px; width:15px;"></div>';
            s += '  <div style="float:left;">' + produkt_name[c] + "</div>";
            s += '  <div class="clear"></div>';
            s += "</div>";
        }
    }
    s += "</div>";
    if (!d) {
        return false;
    }
    if (!flowerarea_autoplant_select > 0) {
        flowerarea_autoplant_select = d;
    }
    e += '<div style="position:relative; width:204px; margin:0 auto;">';
    e += '  <div class="link" onclick="autoplantControlFlowerArea()">';
    e += '    <div style="float:left; padding:2px; height:15px; text-align:left; width:185px; border-bottom:1px solid #000; background-color:#fff; color:#000;">';
    e += '      <div class="kp' + flowerarea_autoplant_select + '" style="float:left; margin-right:5px; width:15px;"></div>';
    e += '      <div style="float:left;">' + produkt_name[flowerarea_autoplant_select] + "</div>";
    e += '      <div class="clear"></div>';
    e += "    </div>";
    e += '    <div class="link" id="flowerarea_autoplantselector" style="background:url(' + imgpath + 'market/sel_open.gif); background-color:#000;"></div>';
    e += '    <div class="clear"></div>';
    e += "  </div>";
    e += s;
    e += "</div>";
    var r = "farmAction('flowerarea_autoplant', 1, 1);";
} if (l == "speedup") {
    globalSpeedupBox("flowerarea", 1, 1);
    return false;
} if (l == "changebonus") {
    var m = t_flowerarea_growth_bonus_head;
    var q = str_replace("%COINS%", flowerarea_dailybonus_coins, t_flowerarea_growth_bonus_body);
    q = str_replace("%PERCENT%", flowerarea_dailybonus_percent, q);
    q = str_replace("%TIME%", formatTime(flowerarea_dailybonus_duration), q);
    var e = "<div>" + q + "</div>";
    e += '<div id="flowerarea_changebonus_dialog_inner" style="position:relative; width:420px; height:215px; margin-top:10px;">';
    var h = 0;
    for (var c = 1; c <= 250; c++) {
        if (produkt_category[c] == flowerarea_product_category && currentuserlevel >= produkt_level[c] && !in_array(c, flowerarea_dropitems) && c != farmersmarket_data.flower_bonus.pid) {
            var a = "left";
            if (h >= 3) {
                a = "right";
            }
            e += '<div class="link flowerarea_changebonus_item" onclick="flowerarea_changebonus_select=' + c + "; dialogFlowerArea('changebonus')\" onmouseover=\"showDiv('flowerarea_changebonus_tt" + c + "')\" onmouseout=\"hideDiv('flowerarea_changebonus_tt" + c + "')\">";
            if (flowerarea_changebonus_select == c) {
                e += '  <div class="flowerarea_changebonus_select"></div>';
            }
            e += '  <div class="flowerarea_changebonus_item_img tt' + c + '"></div>';
            e += '  <div id="flowerarea_changebonus_tt' + c + '" class="flowerarea_changebonus_tt_' + a + ' ttbox">' + produkt_name[c] + "</div>";
            e += "</div>";
            h++;
            if (h == 6) {
                h = 0;
            }
        }
    }
    e += '  <div class="clear"></div>';
    e += "</div>";
    e += '<div style="background-color:#C3A75E; padding:5px; border-radius:5px;">';
    e += '  <div style="float:left; margin-right:5px;">' + t_flowerarea_growth_bonus_current + "</div>";
    e += '  <div class="kp' + farmersmarket_data.flower_bonus.pid + '" style="float:left; margin-right:5px;"></div>';
    e += '  <div style="float:left;">' + produkt_name[farmersmarket_data.flower_bonus.pid] + "</div>";
    e += '  <div style="float:right;" id="flowerarea_changebonus_dialog_timer">' + formatTime(farmersmarket_data.flower_bonus.remain) + "</div>";
    e += '  <div class="clear"></div>';
    e += "</div>";
    var r = 0;
    if (flowerarea_changebonus_select > 0) {
        r = "dialogFlowerArea('changebonus_commit')";
    }
} if (l == "changebonus_commit") {
    var m = t_flowerarea_growth_bonus_head;
    var q = str_replace("%NAME%", "<b>" + produkt_name[flowerarea_changebonus_select] + "</b>", t_flowerarea_growth_bonus_info2);
    q = str_replace("%PERCENT%", flowerarea_dailybonus_percent, q);
    var e = '<div style="margin-bottom:10px;"><img src="' + imgpath + 'menu/coins.gif" width="10" height="10">&nbsp;' + flowerarea_dailybonus_coins + "&nbsp;" + t_coins + "</div>";
    e += '<div class="flowerarea_changebonus_item">';
    e += '  <div style="position:absolute; top:7px; left:8px;" class="tt' + flowerarea_changebonus_select + '"></div>';
    e += "</div>";
    e += '<div style="float:left; width:150px; text-align:left; top:3px; position:relative;">' + q + "</div>";
    e += '<div class="clear"></div>';
    var r = "farmAction('flowerarea_changebonus', 1, 1)";
} if (n == 1) {
    $("globalbox_content").innerHTML = e;
    return false;
} globalcommitbox(m, e, r, b); if (l == "changebonus") {
    $("globalbox_content").addClassName("globalbox_content_big");
    $("globalbox").style.marginLeft = "-265px";
} if (l == "autoplant") {
    $("globalbox_content").style.overflow = "visible";
} }
function autoplantControlFlowerArea() { if ($("flowerarea_autoplantselectbox").style.display == "block") {
    hideDiv("flowerarea_autoplantselectbox");
    $("flowerarea_autoplantselector").style.backgroundImage = "url(" + imgpath + "market/sel_open.gif)";
}
else {
    showDiv("flowerarea_autoplantselectbox");
    $("flowerarea_autoplantselector").style.backgroundImage = "url(" + imgpath + "market/sel_close.gif)";
} }
function uniqueFoundFlowerArea() { var c = t_flowerarea_uniquefound; var a = ""; for (var b in flowerarea_unique_drops) {
    a += '<div style="position:relative; margin:0 auto;" class="fl' + b + '"></div>';
    a += '<div style="position:relative; margin:0 auto;">' + flowerarea_unique_drops[b] + "x&nbsp;" + produkt_name[b] + "</div>";
} globalBox(c, a, 0, 0, 1); flowerarea_unique_drops = {}; }
function closeFlowerArea() { hideDiv("transp"); hideDiv("farmersmarket_pos1_inner"); }
function setFlowerSlots() { flowerslots_countpoints = {}; for (var b = 1; b <= 17; b++) {
    var a = "";
    if (farmersmarket_data.flower_slots.slots[b]) {
        var c = farmersmarket_data.flower_slots.slots[b];
        flowerslots_countpoints[b] = c.nextpoints;
        $("farmersmarket_deco" + b + "_pid").addClassName("fla" + c.pid);
        $("farmersmarket_deco" + b + "_points").innerHTML = "+" + c.points;
    }
    else {
        $("farmersmarket_deco" + b + "_pid").className = "";
        a = "plantFlowerSlot(" + b + ")";
        $("farmersmarket_deco" + b).onmouseover = new Function("canPlantFlowerSlot(" + b + ")");
        $("farmersmarket_deco" + b).onmouseout = new Function("hideDiv('farmersmarket_deco" + b + "_plant_cursor'); hideDiv('farmersmarket_deco" + b + "_tt');");
    }
    $("farmersmarket_deco" + b).onclick = new Function(a);
} setFlowerFarmiBar(); }
function timerFlowerSlots() { flowerslots_need_water = 0; for (var m in farmersmarket_data.flower_slots.slots) {
    farmersmarket_data.flower_slots.slots[m].remain--;
    farmersmarket_data.flower_slots.slots[m].waterremain--;
    var e = farmersmarket_data.flower_slots.slots[m];
    if ($("farmersmarket_deco" + m + "_tt")) {
        var a = "";
        var l = "";
        if (e.remain > 0) {
            if (e.waterremain > 0) {
                hideDiv("farmersmarket_deco" + m + "_water");
            }
            else {
                showDiv("farmersmarket_deco" + m + "_water");
            }
            if (parseInt(e.waterremain) < parseInt(e.remain)) {
                $("farmersmarket_deco" + m).onclick = new Function("cacheFlowerSlots('water', " + m + ", 1)");
                a += "showDiv('farmersmarket_deco" + m + "_water_cursor'); ";
                l += "hideDiv('farmersmarket_deco" + m + "_water_cursor'); ";
            }
            else {
                a += "showDiv('farmersmarket_deco" + m + "_nowater_cursor'); ";
                l += "hideDiv('farmersmarket_deco" + m + "_nowater_cursor'); ";
            }
            flowerslots_countpoints[m]++;
            if (parseInt(flowerslots_countpoints[m]) % parseInt(flower_generatepoints_cycle) == 0 && e.waterremain > 0) {
                animateFlowerSlot(m);
            }
            var d = '<div style="font-weight:bold;">' + produkt_name[e.pid] + "</div>";
            d += "<div>" + t_fla_farmipoints + formatNumber((farmersmarket_data.nursery.products[e.pid].farmipoints * 12)) + "</div>";
            d += '<div style="margin-top:5px;">' + t_flowerslots_planttime + "</div>";
            d += "<div>";
            var b = (50 / 100);
            var h = ((e.remain * 100) / farmersmarket_data.nursery.products[e.pid].lifetime);
            var c = (h * b);
            d += '  <div style="float:left; top:2px; position:relative; width:50px; height:10px; background-color:#C18F74; border-radius:2px; overflow:hidden; margin-right:5px;">';
            d += '    <div style="position:absolute; top:0px; left:0px; width:' + c + 'px; height:10px; background-color:#0f0;"></div>';
            d += "  </div>";
            d += '  <div style="float:left;">' + formatTime(e.remain) + "</div>";
            d += '  <div class="clear"></div>';
            d += "</div>";
            if (parseInt(e.waterremain) < parseInt(e.remain)) {
                if (e.waterremain > 0) {
                    d += "<div>" + t_flowerslots_watertime + "</div>";
                    d += "<div>";
                    var b = (50 / 100);
                    var h = ((e.waterremain * 100) / farmersmarket_data.nursery.products[e.pid].watertime);
                    var c = (h * b);
                    d += '  <div style="float:left; top:2px; position:relative; width:50px; height:10px; background-color:#C18F74; border-radius:2px; overflow:hidden; margin-right:5px;">';
                    d += '    <div style="position:absolute; top:0px; left:0px; width:' + c + 'px; height:10px; background-color:#00f;"></div>';
                    d += "  </div>";
                    d += '  <div style="float:left;">' + formatTime(e.waterremain) + "</div>";
                    d += '  <div class="clear">';
                    d += "</div>";
                }
                else {
                    flowerslots_need_water++;
                }
                if (e.remain > e.waterremain) {
                    d += '<div class="bonusinfo">' + t_flowerslots_water_info + "</div>";
                }
            }
            if (parseInt(e.waterremain) >= parseInt(e.remain)) {
                d += '<div class="bonusinfo">' + t_flowerslots_needsnowater + "</div>";
            }
            $("farmersmarket_deco" + m + "_tt").innerHTML = d;
            a += "showDiv('farmersmarket_deco" + m + "_tt')";
            l += "hideDiv('farmersmarket_deco" + m + "_tt')";
        }
        else {
            if (e.pid) {
                $("farmersmarket_deco" + m + "_pid").addClassName("fla_wither");
                $("farmersmarket_deco" + m).onclick = new Function("removeFlowerSlot(" + m + ")");
                $("farmersmarket_deco" + m + "_tt").innerHTML = '<div style="font-weight:bold;">' + produkt_name[e.pid] + "</div>" + t_flowerslots_withered + '<div class="bonusinfo">' + t_flowerslots_remove + "</div>";
                a += "showDiv('farmersmarket_deco" + m + "_tt'); showDiv('farmersmarket_deco" + m + "_remove_cursor');";
                l += "hideDiv('farmersmarket_deco" + m + "_tt'); hideDiv('farmersmarket_deco" + m + "_remove_cursor');";
                hideDiv("farmersmarket_deco" + m + "_water");
            }
            else {
                $("farmersmarket_deco" + m + "_pid").className = "";
                a = "canPlantFlowerSlot(" + m + ");";
                l = "hideDiv('farmersmarket_deco" + m + "_plant_cursor'); hideDiv('farmersmarket_deco" + m + "_tt');";
                $("farmersmarket_deco" + m).onclick = new Function("plantFlowerSlot(" + m + ")");
                hideDiv("farmersmarket_deco" + m + "_water");
            }
        }
        $("farmersmarket_deco" + m).onmouseover = new Function(a);
        $("farmersmarket_deco" + m).onmouseout = new Function(l);
    }
} }
function canPlantFlowerSlot(a) { if (a > 0 && selected > 0 && produkt_category[selected] == flowerslot_product_category && !(farmersmarket_data.flower_slots && farmersmarket_data.flower_slots[a])) {
    showDiv("farmersmarket_deco" + a + "_plant_cursor");
}
else {
    $("farmersmarket_deco" + a + "_tt").innerHTML = t_flowerslot_empty_info;
    showDiv("farmersmarket_deco" + a + "_tt");
} }
function plantFlowerSlot(a) { if (a > 0 && selected > 0 && produkt_category[selected] == flowerslot_product_category) {
    if (!(farmersmarket_data.flower_slots && farmersmarket_data.flower_slots[a]) && checkRackItem(selected) > 0) {
        cacheFlowerSlots("plant", a, selected);
    }
} }
function removeFlowerSlot(a) { if (a > 0 && farmersmarket_data.flower_slots && farmersmarket_data.flower_slots.slots[a] && farmersmarket_data.flower_slots.slots[a].remain < 0) {
    cacheFlowerSlots("remove", a, 1);
} }
function animateFlowerSlot(a) { $("farmersmarket_deco" + a + "_points").style.opacity = 1; showDiv("farmersmarket_deco" + a + "_points"); Effect.Puff("farmersmarket_deco" + a + "_points", { duration: 2, afterFinish: function (c) { var b = farmersmarket_data.flower_slots.slots[a]; farmersmarket_data.flower_slots.points = (parseInt(farmersmarket_data.flower_slots.points) + parseInt(b.points)); setFlowerFarmiBar(); if (parseInt(farmersmarket_data.flower_slots.points) >= parseInt(flowerfarmis_createlimit)) {
        if (!flowerslots_ready_cache) {
            setTimeout("fireFlowerSlotsReadyCache()", 2500);
        }
        flowerslots_ready_cache++;
    } } }); flowerslots_countpoints[a] = 0; }
function setFlowerFarmiBar() { var a = (233 / 100); var b = (farmersmarket_data.flower_slots.points * 100 / flowerfarmis_createlimit); if (b > 100) {
    b = 100;
} $("farmersmarket_deco_bar_inner").style.width = Math.ceil(b * a) + "px"; $("farmersmarket_deco_points").innerHTML = formatNumber(farmersmarket_data.flower_slots.points) + "/" + formatNumber(flowerfarmis_createlimit); }
function fireFlowerSlotsReadyCache() { farmAction("createflowerfarmi", 1, 1); flowerslots_ready_cache = 0; }
function cacheFlowerSlots(d, l, c) { if (!flowerslots_cache[l] && (d == "plant" || d == "water" || d == "remove")) {
    var e = 0;
    for (var a in flowerslots_cache) {
        e++;
    }
    if (e > 0 && flowerslots_modus != "" && flowerslots_modus != d) {
        fireFlowerSlotsCache();
    }
    flowerslots_modus = d;
    if ($("farmersmarket_deco" + l + "_status")) {
        $("farmersmarket_deco" + l + "_status").addClassName("flowerslots_wait");
    }
    flowerslots_cache[l] = c;
    var h = checkRackItem(selected);
    if (d == "plant" && h) {
        h--;
        setRackItem(selected, h);
    }
    if (!flowerslots_cache_run) {
        flowerslots_cache_run = setTimeout("fireFlowerSlotsCache()", 1000);
    }
} }
function fireFlowerSlotsCache() { if (flowerslots_modus == "plant") {
    farmAction("flowerslot_plant", 1, 1);
}
else {
    if (flowerslots_modus == "water") {
        farmAction("flowerslot_water", 1, 1);
    }
    else {
        if (flowerslots_modus == "remove") {
            farmAction("flowerslot_remove", 1, 1);
        }
    }
} clearTimeout(flowerslots_cache_run); flowerslots_cache_run = 0; flowerslots_cache = {}; }
var flowerfarmi_ignore = [];
function handleFlowerFarmi(b, a) { farmAction("handleflowerfarmi", 1, 1, b, a); }
function setFlowerFarmis(h, n, c) { if (h > -1) {
    if ($("flowerfarmi" + h)) {
        var b = $("flowerfarmi" + h).className;
        var m = b.indexOf("_idle");
        var e = b.substring((m - 1), m);
        flowerfarmi_ignore.push(h);
        if (c == 1) {
            $("flowerfarmi" + h + "_emotion").addClassName("farmi_sun");
        }
        else {
            $("flowerfarmi" + h + "_emotion").addClassName("farmi_cloud");
        }
        showDiv("flowerfarmi" + h + "_emotion");
        $("flowerfarmi" + h).addClassName("flowerfarmi_go_top").removeClassName("flowerfarmi" + e + "_walkleft").addClassName("flowerfarmi" + e + "_walkdown");
        window.setTimeout(function (q) { $("flowerfarmi" + h).removeClassName("flowerfarmi_go_top").removeClassName("flowerfarmi" + e + "_walkdown").addClassName("flowerfarmi_go_left").addClassName("flowerfarmi" + e + "_walkleft"); }, 1000);
        window.setTimeout(function (q) { $("flowerfarmi" + h).removeClassName("flowerfarmi_go_left").removeClassName("flowerfarmi" + e + "_walkleft").addClassName("flowerfarmi_go_away").addClassName("flowerfarmi" + e + "_walkdown"); }, 3000);
    }
    for (var d = 0; d < farmersmarket_data.farmis.length; d++) {
        var a = farmersmarket_data.farmis[d];
        if (a.id > h && !in_array(a.id, flowerfarmi_ignore)) {
            var b = $("flowerfarmi" + a.id).className;
            var l = b.indexOf("flowerfarmis_pos");
            var m = b.substring((l + 16), (l + 18));
            if (a.id > h) {
                $("flowerfarmi" + a.id).className = "link flowerfarmis_item flowerfarmi" + a.img + "_walkleft flowerfarmis_pos" + (parseInt(m) - 1);
            }
            window.setTimeout(function (q) { correctFlowerFarmi(); }, 1000);
        }
    }
} }
function correctFlowerFarmi() { for (var a = 0; a < farmersmarket_data.farmis.length; a++) {
    var c = farmersmarket_data.farmis[a];
    var b = $("flowerfarmi" + c.id).className;
    if (b.indexOf("_walkleft") > -1) {
        $("flowerfarmi" + c.id).removeClassName("flowerfarmi" + c.img + "_walkleft").addClassName("flowerfarmi" + c.img + "_idle");
    }
} }
function setFlowerFarmiBubble(l) { for (var h = 0; h < farmersmarket_data.farmis.length; h++) {
    if (farmersmarket_data.farmis[h].id == l) {
        var e = "";
        for (var c = 0; c < farmersmarket_data.farmis[h].cart.length; c++) {
            var b = farmersmarket_data.farmis[h].cart[c].pid;
            var d = farmersmarket_data.farmis[h].cart[c].amount;
            if (checkRackItem(b) >= d) {
                var a = "";
            }
            else {
                var a = "important";
            }
            e += '<div style="margin-bottom:2px;">';
            e += '  <div class="kp' + b + '" style="float:left; margin-right:5px; width:15px;"></div>';
            e += '  <div style="float:left; width:130px;" class="' + a + '">' + d + "x&nbsp;" + produkt_name[b] + "</div>";
            e += '  <div class="clear"></div>';
            e += "</div>";
        }
        e += '<div style="font-weight:bold; border-top:1px solid #000; padding-top:5px; margin-top:5px;">' + formatNumber(farmersmarket_data.farmis[h].points) + "&nbsp;" + t_points + "</div>";
        e += '<div style="font-weight:bold; margin-top:4px;">' + formatPrice(farmersmarket_data.farmis[h].price) + "</div>";
        $("flowerfarmi_bubble" + farmersmarket_data.farmis[h].id).innerHTML = e;
        showDiv("flowerfarmi" + farmersmarket_data.farmis[h].id + "_tt");
    }
} }
function flowersGardener() { var b = ""; b += '<div id="flowers_gardener_head" class="headline">' + t_gardener + "</div>"; b += '<div id="flowers_gardener_body">'; if (farmersmarket_data.flower_gardener > 0) {
    b += t_gardener_stillrunning + '<div id="flowers_gardener_box_time"></div>';
}
else {
    b += t_gardener_waiting;
    for (var a in farmersmarket_data.flower_gardener_prices) {
        var c = str_replace("%DAYS%", farmersmarket_data.flower_gardener_prices[a], t_gardener_price);
        c = str_replace("%COINS%", a, c);
        b += '<br><button style="font-size:12px; padding:5px; margin-top:10px;" type="button" class="button_new link" onclick="flowersGardenerCommit(' + a + ')">' + c + "</button>";
    }
} b += "</div>"; b += "<div class=\"link mini_close\" onclick=\"hideDiv('transp'); hideDiv('flowers_gardener_box');\"></div>"; $("flowers_gardener_box").innerHTML = b; showDiv("transp"); showDiv("flowers_gardener_box"); }
function flowersGardenerCommit(c) { var a = str_replace("%COINS%", c, t_gardener_price_commit); a = str_replace("%DAYS%", farmersmarket_data.flower_gardener_prices[c], a); var b = "farmAction('buyflowergardener', 1, 1, " + c + ")"; globalBox(t_gardener, a, b); }
function timerFlowerGardener() { farmersmarket_data.flower_gardener--; if (farmersmarket_data.flower_gardener > 0) {
    if ($("flowers_gardener_box_time")) {
        $("flowers_gardener_box_time").innerHTML = formatTime(farmersmarket_data.flower_gardener);
    }
    $("flowers_gardener").removeClassName("flowers_gardener_idle");
    $("flowers_gardener").addClassName("flowers_gardener_active");
}
else {
    $("flowers_gardener").removeClassName("flowers_gardener_active");
    $("flowers_gardener").addClassName("flowers_gardener_idle");
} }
function initNursery() { html = ""; for (var a = 1; a <= 3; a++) {
    html += '<div id="nursery_slot_item' + a + '" class="link nursery_slot_item">';
    html += '  <div id="nursery_slot_item_img' + a + '" class="nursery_slot_item_img"></div>';
    html += '  <div class="nursery_slot_item_info">';
    html += '    <div class="nursery_slot_item_info_name" id="nursery_slot_item_info_name' + a + '"></div>';
    html += '    <div id="nursery_slot_item_info_time' + a + '"></div>';
    html += "  </div>";
    html += '  <div id="nursery_button_speedup' + a + '" class="nursery_button_speedup speedupgardenbutton link" onclick="dialogNursery(\'speedup\', ' + a + ')" onmouseover="showDiv(\'nursery_button_speedup' + a + "_tt')\" onmouseout=\"hideDiv('nursery_button_speedup" + a + "_tt')\">";
    html += '    <div id="nursery_button_speedup' + a + '_tt" class="ttbox nursery_button_speedup_tt">' + building_speeduptext + "</div>";
    html += "  </div>";
    html += '  <div id="nursery_slot_item_status' + a + '" class="nursery_slot_item_status"></div>';
    if (a > 1) {
        html += '<div id="nursery_slot_block' + a + '" class="nursery_slot_block"></div>';
    }
    if (a == 3) {
        html += '<div id="nursery_slot_remain" class="nursery_slot_remain">';
        html += '  <div id="nursery_slot_remain_time"></div>';
        html += "</div>";
    }
    html += "</div>";
} html += '<div class="big_close link" onclick="closeNursery()"></div>'; html += '<div id="nursery_production_box_transp" class="transp"></div>'; html += '<div id="nursery_production_box">'; html += '  <div class="globalbox_scale globalbox_scale_t">'; html += '    <div class="globalbox_scale globalbox_scale_l">'; html += '      <div class="globalbox_scale globalbox_scale_r">'; html += '        <div class="globalbox_scale globalbox_scale_b">'; html += '          <div id="nursery_production_box_inner"></div>'; html += "        </div>"; html += "      </div>"; html += "    </div>"; html += "  </div>"; html += '  <div class="globalbox_edge globalbox_edge_tl"></div>'; html += '  <div class="globalbox_edge globalbox_edge_tr"></div>'; html += '  <div class="globalbox_edge globalbox_edge_bl"></div>'; html += '  <div class="globalbox_edge globalbox_edge_br"></div>'; html += "  <div class=\"mini_close link\" onclick=\"hideDiv('nursery_production_box'); hideDiv('nursery_production_box_transp')\"></div>"; html += "</div>"; $("farmersmarket_pos2_inner").innerHTML = html; showDiv("transp"); showDiv("farmersmarket_pos2_inner"); }
function timerNursery() { if (farmersmarket_data.nursery) {
    var m = 0;
    var l = 0;
    var n = { pid: 0, remain: 0 };
    var b = 0;
    for (var h = 1; h <= 3; h++) {
        if ($("nursery_slot_item" + h)) {
            $("nursery_slot_item_status" + h).innerHTML = "";
            $("nursery_slot_item_img" + h).innerHTML = "";
            hideDiv("nursery_button_speedup" + h);
            hideDiv("nursery_slot_block" + h);
            var r = "dialogNursery('production', " + h + ")";
            var c = t_start_production;
        }
        if (farmersmarket_data.nursery.slots && farmersmarket_data.nursery.slots[h]) {
            if (farmersmarket_data.nursery.slots[h].pid) {
                var q = "";
                if (produkt_ernte_bonus[farmersmarket_data.nursery.slots[h].pid]) {
                    q = '&nbsp;<span class="rack_cropbonus">+' + (produkt_ernte_bonus[farmersmarket_data.nursery.slots[h].pid]) + "</span>";
                }
                var a = croptext + farmersmarket_data.nursery.products[farmersmarket_data.nursery.slots[h].pid].crop + q + "<br>";
                farmersmarket_data.nursery.slots[h].remain--;
                var t = farmersmarket_data.nursery.slots[h];
                c = t_get_products;
                r = "farmAction('nursery_harvest', 1, 1, " + h + ")";
                if (t.remain > 0) {
                    if ($("nursery_button_speedup" + h)) {
                        showDiv("nursery_button_speedup" + h);
                    }
                    a += formatTime(t.remain);
                    r = "";
                    c = "";
                    l++;
                    if (!n.pid || n.remain > t.remain) {
                        n = { pid: t.pid, remain: t.remain };
                    }
                }
                else {
                    a += statusProductionComplete;
                    m++;
                    b = t.pid;
                }
                if ($("nursery_slot_item" + h)) {
                    $("nursery_slot_item_info_name" + h).innerHTML = produkt_name[t.pid];
                    $("nursery_slot_item_info_time" + h).innerHTML = a;
                    var e = '<div class="flab' + t.pid + '"></div>';
                    $("nursery_slot_item_img" + h).innerHTML = e;
                }
            }
            if (h == 3) {
                farmersmarket_data.nursery.slots[h].slotremain--;
                if (farmersmarket_data.nursery.slots[h].slotremain > 0) {
                    if ($("nursery_slot_remain")) {
                        showDiv("nursery_slot_remain");
                    }
                    if ($("nursery_slot_remain_time")) {
                        $("nursery_slot_remain_time").innerHTML = formatTime(farmersmarket_data.nursery.slots[h].slotremain);
                    }
                }
                else {
                    if ($("nursery_slot_remain")) {
                        hideDiv("nursery_slot_remain");
                    }
                    farmersmarket_data.nursery.slots[h]["block"] = 1;
                }
            }
            if (farmersmarket_data.nursery.slots[h].block) {
                r = "dialogNursery('buy', " + h + ")";
                if (farmersmarket_data.nursery.slots[h].coins) {
                    var d = str_replace("%COINS%", farmersmarket_data.nursery.slots[h].coins + "&nbsp" + t_coins, t_rent_slot);
                    c = str_replace("%TIME%", formatTime(farmersmarket_data.nursery.slots[h].duration), d);
                }
                else {
                    if (farmersmarket_data.nursery.slots[h].cost) {
                        c = str_replace("%MONEY%", formatPrice(farmersmarket_data.nursery.slots[h].cost), t_buy_slot);
                    }
                }
                if ($("nursery_slot_block" + h)) {
                    showDiv("nursery_slot_block" + h);
                }
            }
        }
        if ($("nursery_slot_item_status" + h)) {
            $("nursery_slot_item_status" + h).innerHTML = c;
        }
        if ($("nursery_slot_item" + h)) {
            $("nursery_slot_item" + h).onclick = new Function(r);
        }
    }
    if (m > 0) {
        showDiv("farmersmarket_pos2_progress");
        $("farmersmarket_pos2_progress").removeClassName("farmersmarket_pos_progress_active");
        $("farmersmarket_pos2_progress").addClassName("farmersmarket_pos_progress_ready");
        showFarmersmarketPosTimer(2, b, statusProductionComplete);
    }
    else {
        if (l > 0) {
            showDiv("farmersmarket_pos2_progress");
            $("farmersmarket_pos2_progress").addClassName("farmersmarket_pos_progress_active");
            $("farmersmarket_pos2_progress").removeClassName("farmersmarket_pos_progress_ready");
            showFarmersmarketPosTimer(2, n.pid, formatTime(n.remain));
        }
        else {
            hideDiv("farmersmarket_pos2_progress");
            showFarmersmarketPosTimer(2, 0);
        }
    }
} insertFarmChecker(); }
function dialogNursery(t, c, v, l) { var E = 0; if (t == "buy") {
    var u = farmersmarket_data.nursery.slots[c];
    var n = "";
    if (u.coins) {
        var h = "";
        var r = str_replace("%COINS%", u.coins + "&nbsp;" + t_coins, foodworld_rentslot_body);
        n += str_replace("%TIME%", formatTime(u.duration), r);
    }
    if (u.cost) {
        var h = "";
        n += str_replace("%MONEY%", formatPrice(u.cost), foodworld_buyslot_body);
    }
    var H = "farmAction('nursery_buyslot', 1, 1, " + c + ")";
} if (t == "production") {
    var q = "";
    q += '<div style="position:relative; width:100%; height:480px;">';
    q += '  <div class="headline">' + t_nursery_production_start_head + "</div>";
    q += '  <div style="margin-bottom:10px;">' + t_nursery_production_start + "</div>";
    var m = 1;
    var C = 8;
    if (!l) {
        l = 1;
    }
    var B = 0;
    if (l > 1) {
        B = ((l - 1) * C);
    }
    var b = (l * C);
    for (var D in farmersmarket_data.nursery.products) {
        if (m > B && m <= b) {
            var w = farmersmarket_data.nursery.products[D];
            var y = "left";
            var z = "dialogNursery('production_commit', " + c + ", " + D + ");";
            var a = '<div style="font-weight:bold; margin-bottom:5px;">' + produkt_name[D] + "</div>";
            if (w.cost) {
                a += '<div style="margin-bottom:10px;">' + cityadcost + formatPrice(w.cost) + "</div>";
            }
            if (w.coins) {
                a += '<div style="margin-bottom:10px;">' + cityadcost + w.coins + "&nbsp;" + t_coins + "</div>";
            }
            var G = 0;
            for (var A in w.products) {
                if (checkRackItem(A) >= w.products[A]) {
                    var e = "";
                }
                else {
                    G++;
                    var e = "important";
                }
                a += '<div style="margin-bottom:2px;">';
                a += '  <div style="float:left; width:15px; margin-right:5px;" class="kp' + A + '"></div>';
                a += '  <div class="' + e + '" style="float:left;">' + w.products[A] + "x " + produkt_name[A] + "</div>";
                a += '  <div class="clear"></div>';
                a += "</div>";
            }
            a += '<div style="margin-top:10px; margin-bottom:2px;">' + t_production_time + "&nbsp;" + formatTime(w.duration) + "</div>";
            a += "<div>" + croptext + w.crop + "</div>";
            if (G > 0) {
                z = "";
            }
            e = "";
            if (G > 0 || w.block == 1) {
                e = "important";
            }
            var e = "";
            if (w.block == 1) {
                e = "nursery_production_select_item_block";
            }
            var F = "";
            F += '<div class="nursery_production_select_item link ' + e + '" onclick="' + z + '" onmouseover="showDiv(\'nursery_production_select_tt' + D + "')\" onmouseout=\"hideDiv('nursery_production_select_tt" + D + "')\">";
            F += '  <div class="nursery_production_select_img fla' + D + '"></div>';
            F += '  <div style="float:left; width:190px;">';
            F += '    <div class="' + e + '" style="font-weight:bold; margin-bottom:2px;">' + produkt_name[D] + "</div>";
            if (w.block == 1) {
                F += '<div class="important">' + str_replace("%LEVEL%", w.level, t_nursery_needlevel) + "</div>";
            }
            else {
                F += '    <div style="margin-bottom:2px;">' + t_fla_lifetime + formatTime(w.lifetime) + "</div>";
                var d = t_none;
                if (w.watertime > 0) {
                    d = formatTime(w.watertime);
                }
                F += '    <div style="margin-bottom:2px;">' + t_fla_watertime + d + "</div>";
                F += '    <div style="margin-bottom:2px;">' + t_fla_farmipoints + (w.farmipoints * 12) + "</div>";
            }
            F += "  </div>";
            F += '  <div class="clear"></div>';
            F += '  <div id="nursery_production_select_tt' + D + '" class="nursery_production_select_tt nursery_production_select_tt_' + y + ' ttbox">' + a + "</div>";
            F += "</div>";
            q += F;
        }
        m++;
    }
    q += '  <div class="clear"></div>';
    q += '  <div id="nursery_production_navi">';
    if ((l - 1) > 0) {
        q += '<div class="link nursery_production_navi_prev" style="position:absolute; left:200px;" onclick="dialogNursery(\'production\', ' + c + ", 0, " + (l - 1) + ')"></div>';
    }
    q += '<div style="position:absolute; left:252px; font-size:12px; font-weight:bold; top:8px;">' + l + "/" + Math.ceil(m / C) + "</div>";
    if ((l + 1) <= Math.ceil(m / C)) {
        q += '<div class="link nursery_production_navi_next" style="position:absolute; right:205px;" onclick="dialogNursery(\'production\', ' + c + ", 0, " + (l + 1) + ')"></div>';
    }
    q += "  </div>";
    q += "</div>";
    $("nursery_production_box_inner").innerHTML = q;
    showDiv("nursery_production_box_transp");
    showDiv("nursery_production_box");
    return false;
} if (t == "production_commit") {
    var w = farmersmarket_data.nursery.products[v];
    var h = t_nursery_production_start_head;
    var n = "";
    n += '<div style="font-weight:bold; margin-bottom:5px;">' + produkt_name[v] + "</div>";
    n += '<div style="left:70px;" class="nursery_production_select">';
    n += '  <div class="nursery_production_select_img tt' + v + '"></div>';
    n += "</div>";
    n += '<div class="clear"></div>';
    var r = t_nursery_production_start_commit;
    if (w.cost) {
        r = str_replace("%COST%", formatPrice(w.cost), r);
    }
    if (w.coins) {
        r = str_replace("%COST%", w.coins + "&nbsp;" + t_coins, r);
    }
    n += "<div>" + r + "</div>";
    var H = "farmAction('nursery_startproduction', 1, 1, " + v + ", " + c + ");";
} if (t == "speedup") {
    globalSpeedupBox("nursery", 1, c);
    return false;
} globalcommitbox(h, n, H, E); if (t == "production") {
    $("globalbox_content").addClassName("globalbox_content_big");
} }
function closeNursery() { hideDiv("transp"); hideDiv("farmersmarket_pos2_inner"); }
function initMegaFruit() { var h = ""; h += htmlLevelBar("megafruit"); h += htmlCountBar("megafruit"); h += '<div id="megafruit_incubator">'; h += '  <img id="megafruit_incubator_fruit" border="0">'; h += "</div>"; h += '<div id="megafruit_select">'; for (var d = 0; d < farmersmarket_data.megafruit.fruits.length; d++) {
    var e = t_megafruit_fruit_useable;
    var m = "";
    if (farmersmarket_data.megafruit.fruits[d].locked) {
        e = str_replace("%LEVEL%", farmersmarket_data.megafruit.fruits[d].level, t_megafruit_fruit_locked);
        m = "important";
    }
    var l = '<div style="font-weight:bold;" class="' + m + '">' + str_replace("%PRODUCT%", produkt_name[farmersmarket_data.megafruit.fruits[d].pid], t_megafruit_start_head) + "</div>";
    l += '<div class="bonusinfo">' + e + "</div>";
    var q = "dialogMegaFruit('start', " + d + ")";
    if (farmersmarket_data.megafruit.fruits[d].locked) {
        q = "";
    }
    h += '<div id="megafruit_select_item' + d + '" class="link megafruit_select_item" onclick="' + q + '" onmouseover="showDiv(\'megafruit_select_item_tt' + d + "')\" onmouseout=\"hideDiv('megafruit_select_item_tt" + d + "')\">";
    h += '  <img src="' + imgpath + "monsterfruit_" + farmersmarket_data.megafruit.fruits[d].pid + '.png" style="position:absolute; width:115px; top:11px; left:-7px;">';
    var m = "megafruit_select_item_tt";
    if (d >= 6) {
        m = "megafruit_select_item_tt2";
    }
    h += '  <div id="megafruit_select_item_tt' + d + '" class="' + m + ' ttbox">' + l + "</div>";
    if (farmersmarket_data.megafruit.fruits[d].locked) {
        h += '<div class="megafruit_select_lock"></div>';
    }
    h += "</div>";
    if ((d + 1) % 3 == 0 && d > 0) {
        h += '<div class="clear"></div>';
    }
} h += "</div>"; h += '<div id="megafruit_timer">'; h += '  <div id="megafruit_timer_inner"></div>'; h += '  <div id="megafruit_timer_count"></div>'; h += "</div>"; h += '<div id="megafruit_info_board"></div>'; h += '<div id="megafruit_harvest_button" class="link" onclick="farmAction(\'megafruit_harvest\', 1, 1)" onmouseover="showDiv(\'megafruit_harvest_button_tt\')" onmouseout="hideDiv(\'megafruit_harvest_button_tt\')">'; h += '  <div id="megafruit_harvest_button_tt" class="ttbox">' + t_megafruit_harvest + "</div>"; h += "</div>"; h += '<div id="megafruit_need_transp" class="transp link" onclick="showNeedsMegaFruit(0)"></div>'; h += '<div id="megafruit_needs">'; h += '  <div class="link megafruit_need" onmouseover="showDiv(\'megafruit_need_water_tt\')" onmouseout="hideDiv(\'megafruit_need_water_tt\')">'; h += '    <div id="megafruit_need_water"></div>'; h += '    <div id="megafruit_need_water_tt" class="ttbox megafruit_need_tt">' + t_megafruit_need_water + '<span id="megafruit_need_water_timer"></span></div>'; h += "  </div>"; h += '  <div class="link megafruit_need" onmouseover="showDiv(\'megafruit_need_light_tt\')" onmouseout="hideDiv(\'megafruit_need_light_tt\')">'; h += '    <div id="megafruit_need_light"></div>'; h += '    <div id="megafruit_need_light_tt" class="ttbox megafruit_need_tt">' + t_megafruit_need_light + '<span id="megafruit_need_light_timer"></span></div>'; h += "  </div>"; h += '  <div class="link megafruit_need" onmouseover="showDiv(\'megafruit_need_fertilize_tt\')" onmouseout="hideDiv(\'megafruit_need_fertilize_tt\')">'; h += '    <div id="megafruit_need_fertilize"></div>'; h += '    <div id="megafruit_need_fertilize_tt" class="ttbox megafruit_need_tt">' + t_megafruit_need_fertilize + '<span id="megafruit_need_fertilize_timer"></span></div>'; h += "  </div>"; h += "</div>"; h += '<div class="mini_close link" onclick="closeMegaFruit()"></div>'; h += '<div class="link" id="megafruit_stats_button" onclick="openStatsMegaFruit()" onmouseover="showDiv(\'megafruit_stats_button_tt\')" onmouseout="hideDiv(\'megafruit_stats_button_tt\')">'; h += '  <div id="megafruit_stats_button_tt" class="ttbox">' + t_megafruit_stats_button + "</div>"; h += "</div>"; h += '<div id="megafruit_stats_transp" class="transp"></div>'; h += '<div id="megafruit_stats"></div>'; h += '<div class="help_button link" style="z-index:30; position:absolute; top:5px; left:5px; background:url(' + imgpath + 'kaeserei_info.png); width:25px; height:25px;" onclick="openFarmersMarketHowTo(\'megafruit\', 1);"></div>'; if (farmersmarket_data.megafruit.stock) {
    h += '<div id="megafruit_stock" class="link" onclick="dialogMegaFruit(\'stock\')" onmouseover="showDiv(\'megafruit_stock_tt\')" onmouseout="hideDiv(\'megafruit_stock_tt\')">';
    h += '  <img src="' + imgpath + 'monsterfruit_26.png" style="height:25px;">';
    h += '  <div id="megafruit_stock_tt" class="ttbox">' + t_foodcontest_stock_button + "</div>";
    h += "</div>";
} $("farmersmarket_pos3_inner").innerHTML = h; if (farmersmarket_data.megafruit.count > 0) {
    $("megafruit_levelbar_plus_tt").innerHTML = t_megafruit_level_tt;
    showDiv("megafruit_levelbar_plus");
    $("megafruit_levelbar_plus").onclick = new Function("dialogMegaFruit('level')");
}
else {
    hideDiv("megafruit_levelbar_plus");
} $("megafruit_levelbar_inner").style.width = farmersmarket_data.megafruit.percent + "%"; $("megafruit_levelbar_number").innerHTML = farmersmarket_data.megafruit.level; $("megafruit_levelbar_tt").innerHTML = str_replace("%AMOUNT%", farmersmarket_data.megafruit.pointsleft, t_megafruit_level_line); $("megafruit_countbar").onclick = new Function("dialogMegaFruit('buy')"); $("megafruit_countbar_inner").innerHTML = '<div class="megafruit_seed" style="float:left; margin-right:5px; margin-top:-3px;"></div><div style="float:left;">' + farmersmarket_data.megafruit.count + "</div>"; $("megafruit_countbar_plus_tt").innerHTML = t_megafruit_buy_head; if (farmersmarket_data.megafruit.current) {
    $("megafruit_incubator_fruit").src = imgpath + "monsterfruit_" + farmersmarket_data.megafruit.current.pid + ".png";
    if (farmersmarket_data.megafruit.current.percent < 5) {
        farmersmarket_data.megafruit.current.percent = 5;
    }
    var a = (farmersmarket_data.megafruit.current.percent);
    $("megafruit_incubator_fruit").style.width = a + "%";
    $("megafruit_incubator_fruit").style.marginLeft = -(((470 / 100) * a) / 2) + "px";
    $("farmersmarket_pos3_inner").className = "megafruit_inner_back_current";
}
else {
    $("farmersmarket_pos3_inner").className = "megafruit_inner_back";
} var b = ["water", "light", "fertilize"]; for (var d = 0; d < b.length; d++) {
    if (farmersmarket_data.megafruit.objects[b[d]]) {
        var n = farmersmarket_data.megafruit.objects[b[d]];
        var h = '<div id="megafruit_need_' + b[d] + '_img" class="megafruit_need_img megafruit_need_' + b[d] + '" onclick="showNeedsMegaFruit(\'megafruit_need_item_bar_' + b[d] + "');\"></div>";
        h += '<div id="megafruit_need_item_bar_' + b[d] + '" class="megafruit_need_item_bar">';
        for (var c = 0; c < n.length; c++) {
            h += '<div id="megafruit_need_item' + n[c]["oid"] + '" class="megafruit_need_item megafruit_need_item' + n[c]["oid"] + '" onmouseover="showDiv(\'megafruit_need_item' + n[c]["oid"] + "_tt')\" onmouseout=\"hideDiv('megafruit_need_item" + n[c]["oid"] + "_tt')\">";
            var m = "megafruit_need_item_tt";
            if (c >= 4) {
                m = "megafruit_need_item_tt2";
            }
            h += '  <div id="megafruit_need_item' + n[c]["oid"] + '_tt" class="' + m + ' ttbox"></div>';
            if (n[c]["locked"]) {
                h += '<div class="megafruit_object_lock"></div>';
            }
            else {
                if (n[c]["buyable"]) {
                    h += '<div class="megafruit_object_lock2"></div>';
                }
            }
            h += "</div>";
        }
        h += '  <div class="clear"></div>';
        h += "</div>";
        h += '<div id="megafruit_need_' + b[d] + '_timer_box" class="link megafruit_need_timer">';
        h += '  <div id="megafruit_need_' + b[d] + '_timer_inner"></div>';
        h += "</div>";
        $("megafruit_need_" + b[d]).innerHTML = h;
    }
} setObjectsMegaFruit(); if (farmersmarket_data.megafruit.levelend) {
    hideDiv("megafruit_levelbar_updatelevel");
    hideDiv("megafruit_levelbar_plus");
    $("megafruit_levelbar").onmouseover = new Function("");
    $("megafruit_levelbar").onmouseout = new Function("");
} hideDiv("megafruit_timer"); hideDiv("megafruit_harvest_button"); hideDiv("megafruit_info_board"); showDiv("transp"); showDiv("farmersmarket_pos3_inner"); if (farmersmarket_data.megafruit.firstvisit == 1) {
    openFarmersMarketHowTo("megafruit", 1);
} }
function showNeedsMegaFruit(d) { if ($(d)) {
    if ($(d).style.display == "block") {
        $(d).style.display = "none";
        var c = 0;
        var b = ["water", "light", "fertilize"];
        for (var a = 0; a < b.length; a++) {
            if ($("megafruit_need_item_bar_" + b[a]).style.display == "block") {
                c++;
            }
        }
        if (!c) {
            $("megafruit_need_transp").style.display = "none";
        }
    }
    else {
        var b = ["water", "light", "fertilize"];
        for (var a = 0; a < b.length; a++) {
            hideDiv("megafruit_need_item_bar_" + b[a]);
        }
        $(d).style.display = "block";
        $("megafruit_need_transp").style.display = "block";
    }
}
else {
    var b = ["water", "light", "fertilize"];
    for (var a = 0; a < b.length; a++) {
        hideDiv("megafruit_need_item_bar_" + b[a]);
    }
    $("megafruit_need_transp").style.display = "none";
} }
function setObjectsMegaFruit() { var e = 0; if (farmersmarket_data.megafruit.current) {
    e = 1;
} var a = ["water", "light", "fertilize"]; for (var c = 0; c < a.length; c++) {
    if (farmersmarket_data.megafruit.objects[a[c]]) {
        var q = farmersmarket_data.megafruit.objects[a[c]];
        for (var b = 0; b < q.length; b++) {
            var r = "dialogMegaFruit('need', " + q[b]["oid"] + ")";
            if (q[b]["buyable"]) {
                r = "dialogMegaFruit('unlock', " + q[b]["oid"] + ")";
            }
            $("megafruit_need_item" + q[b]["oid"]).onclick = new Function(r);
            var d = t_megafruit_object_useable;
            if (!e || (farmersmarket_data.megafruit.current && farmersmarket_data.megafruit.current.remain <= 0)) {
                d = str_replace("%OBJECT%", q[b].name, t_megafruit_object_idle);
            }
            if (e && (farmersmarket_data.megafruit.current && farmersmarket_data.megafruit.current.data[a[c]] && farmersmarket_data.megafruit.current.data[a[c]].remain > 0)) {
                d = str_replace("%OBJECT%", q[b].name, t_megafruit_object_idle2);
            }
            if (q[b]["buyable"]) {
                if (q[b]["unlock"] > farmersmarket_data.megafruit.count) {
                    d = '<div class="important" style="margin-bottom:10px;">' + str_replace("%AMOUNT%", q[b]["unlock"], t_megafruit_unlock_body) + "</div>";
                }
                else {
                    d = "";
                }
                d += str_replace("%COUNT%", q[b]["unlock"], t_megafruit_object_buyable);
            }
            if (q[b]["locked"]) {
                d = '<div class="important">' + str_replace("%LEVEL%", q[b]["level"], t_megafruit_object_locked) + "</div><br>" + str_replace("%COST%", q[b]["unlock"], t_megafruit_unlock_cost);
            }
            var l = "";
            l += '<div style="font-weight:bold;">' + q[b]["name"] + "</div>";
            l += "<div>" + str_replace("%TIME%", formatTime(q[b]["duration"]), t_megafruit_object_duration) + "</div>";
            var n = "";
            var m = q[b]["points"];
            var h = "";
            if (specialbonus && specialbonus.data && specialbonus.data.megafruit && specialbonus.data.megafruit.points && specialbonus.data.remain > 0) {
                m = Math.ceil(m * (1 + specialbonus.data.megafruit.points));
                h = "color:green; font-weight:bold;";
                n = '<br><span style="' + h + '">' + t_specialbonus_megafruit_points_info + "</span>";
            }
            l += "<div>" + str_replace("%AMOUNT%", '<span style="' + h + '">' + formatNumber(m) + "</span>", t_megafruit_object_points) + n + "</div>";
            if (q[b]["coins"]) {
                l += "<div>" + cityadcost + q[b]["coins"] + "&nbsp;" + t_coins + "</div>";
            }
            if (q[b]["money"]) {
                l += "<div>" + cityadcost + formatPrice(q[b]["money"]) + "</div>";
            }
            if (q[b]["fruits"]) {
                l += "<div>" + cityadcost + q[b]["fruits"] + "&nbsp;" + t_megafruit_fruit_name + "<br>" + n + "</div>";
            }
            l += '<div class="bonusinfo">' + d + "</div>";
            if ($("megafruit_need_item" + q[b]["oid"] + "_tt")) {
                $("megafruit_need_item" + q[b]["oid"] + "_tt").innerHTML = l;
            }
        }
    }
} }
function openStatsMegaFruit() { var a = 99; if ($("megafruit_stats_select")) {
    a = $("megafruit_stats_select").value;
} megafruit_stats_select = a; if (megafruit_stats_cache[a]) {
    megafruit_stats = megafruit_stats_cache[a];
} if (megafruit_stats_delay <= 0 || !megafruit_stats_cache[a]) {
    farmAction("megafruit_stats", 1, 1, a);
}
else {
    dialogMegaFruit("stats");
} }
function dialogMegaFruit(r, v) { var A = 0; var b = 0; if (r == "stock") {
    var d = t_foodcontest_stock_button;
    var n = "";
    b = 1;
    var e = 1;
    for (var z in farmersmarket_data.megafruit.stock) {
        n += '<div style="position:relative; float:left; margin:0px 10px 10px 0px;">';
        n += '  <img src="' + imgpath + "megafruitparts" + z + '.png" style="width:75px;">';
        n += '  <div style="position:relative; margin:0 auto; background-color:#fff; width:60px; height:20px; padding-top:5px; border-radius:5px;">' + farmersmarket_data.megafruit.stock[z] + "</div>";
        n += "</div>";
        if (e % 4 == 0) {
            n += '<div class="clear"></div>';
        }
        e++;
    }
    n += '<div class="clear"></div>';
} if (r == "buy" || r == "buy_confirm") {
    if (r == "buy_confirm") {
        if (!megafruit_block) {
            megafruit_block = 1;
        }
        else {
            return false;
        }
    }
    var d = t_megafruit_buy_head;
    var s = str_replace("%COINS%", farmersmarket_data.megafruit.exchangecoins, t_megafruit_buy_body);
    s = str_replace("%AMOUNT%", (const_megafruit_exchange_fruits * farmersmarket_data.megafruit.level), s);
    if (r == "buy") {
        var n = '<div id="megafruit_buy_button" class="link" onclick="dialogMegaFruit(\'buy_confirm\')">' + s + "</div>";
        var B = 0;
        b = 1;
        megafruit_block = 0;
    }
    else {
        var n = str_replace("%AMOUNT%", (const_megafruit_exchange_fruits * farmersmarket_data.megafruit.level), t_megafruit_buy_confirm);
        n = str_replace("%COINS%", farmersmarket_data.megafruit.exchangecoins, n);
        var B = "farmAction('megafruit_buy', 1, 1)";
    }
} if (r == "level") {
    var d = t_megafruit_level_head;
    var n = htmlLevelAddDialog("megafruit");
    var B = "";
} if (r == "start") {
    var u = farmersmarket_data.megafruit.fruits[v].pid;
    var h = farmersmarket_data.megafruit.fruits[v].amount;
    var l = 1;
    if (checkRackItem(u) >= h) {
        l = 0;
    }
    var c = "";
    if (l == 1) {
        c = "important";
    }
    var d = str_replace("%PRODUCT%", produkt_name[u], t_megafruit_start_head);
    var n = '<div style="background-color:#C3A75E; padding:5px; border-radius:5px; margin-top:10px;">';
    n += '  <div style="float:left; margin-top:6px; margin-right:5px;">' + lotterylotsrequired + "</div>";
    n += '  <div class="kp' + u + '" style="float:left; margin-top:6px; margin-right:5px;"></div>';
    n += '  <div class="' + c + '" style="float:left; margin-top:6px; margin-right:30px;">' + formatNumber(h) + "&nbsp;" + produkt_name[u] + "</div>";
    if (!l) {
        n += '  <button type="button" class="button_new link" style="float:right;" onclick="farmAction(\'megafruit_start\', 1, 1, ' + u + ')">' + t_megafruit_start_button + "</button>";
    }
    n += '  <div class="clear"></div>';
    n += "</div>";
    var B = "";
} if (r == "need") {
    if (farmersmarket_data.megafruit.current && farmersmarket_data.megafruit.current.remain > 0) {
        for (var z in farmersmarket_data.megafruit.objects) {
            for (var w = 0; w < farmersmarket_data.megafruit.objects[z].length; w++) {
                if (farmersmarket_data.megafruit.objects[z][w].oid == v && !farmersmarket_data.megafruit.objects[z][w].locked) {
                    if (!farmersmarket_data.megafruit.current.data[z] || (farmersmarket_data.megafruit.current.data[z] && farmersmarket_data.megafruit.current.data[z].remain <= 0)) {
                        var d = str_replace("%PRODUCT%", produkt_name[farmersmarket_data.megafruit.current.pid], t_megafruit_need_head[z]);
                        var n = "";
                        if (farmersmarket_data.megafruit.objects[z][w].coins) {
                            n += "<div>" + cityadcost + farmersmarket_data.megafruit.objects[z][w].coins + "&nbsp;" + t_coins + "</div>";
                        }
                        if (farmersmarket_data.megafruit.objects[z][w].money) {
                            n += "<div>" + cityadcost + formatPrice(farmersmarket_data.megafruit.objects[z][w].money) + "</div>";
                        }
                        if (farmersmarket_data.megafruit.objects[z][w].fruits) {
                            n += "<div>" + cityadcost + farmersmarket_data.megafruit.objects[z][w].fruits + "&nbsp;" + t_megafruit_fruit_name + "</div>";
                        }
                        n += '<div style="margin-top:4px;">' + str_replace("%TIME%", formatTime(farmersmarket_data.megafruit.objects[z][w].duration), t_megafruit_object_duration) + "</div>";
                        var t = "";
                        var y = farmersmarket_data.megafruit.objects[z][w].points;
                        var q = "";
                        if (specialbonus && specialbonus.data && specialbonus.data.megafruit && specialbonus.data.megafruit.points && specialbonus.data.remain > 0) {
                            y = Math.ceil(y * (1 + specialbonus.data.megafruit.points));
                            q = "color:green; font-weight:bold;";
                            t = '<br><span style="' + q + '">' + t_specialbonus_megafruit_points_info + "</span>";
                        }
                        n += '<div style="margin-top:4px;">' + str_replace("%AMOUNT%", '<span style="' + q + '">' + formatNumber(y) + "</span>", t_megafruit_object_points) + t + "</div>";
                        var B = "farmAction('megafruit_buyobject', 1, 1, " + v + ")";
                    }
                    else {
                        return false;
                    }
                    break;
                }
            }
        }
    }
} if (r == "unlock") {
    for (var z in farmersmarket_data.megafruit.objects) {
        for (var w = 0; w < farmersmarket_data.megafruit.objects[z].length; w++) {
            if (farmersmarket_data.megafruit.objects[z][w].oid == v && farmersmarket_data.megafruit.objects[z][w].buyable) {
                if (farmersmarket_data.megafruit.count >= farmersmarket_data.megafruit.objects[z][w].unlock) {
                    var d = str_replace("%OBJECT%", farmersmarket_data.megafruit.objects[z][w].name, t_megafruit_unlock_head);
                    var n = '<div style="padding:10px; background-color:#C3A75E; border-radius:4px;">' + str_replace("%AMOUNT%", farmersmarket_data.megafruit.objects[z][w].unlock, t_megafruit_unlock_body) + "</div>";
                    var B = "farmAction('megafruit_unlockobject', 1, 1, " + v + ")";
                }
            }
        }
    }
} if (r == "stats") {
    var a = "";
    var m = '<div id="megafruit_stats_inner">';
    m += '  <div id="megafruit_stats_select_line">';
    m += '    <select id="megafruit_stats_select" onchange="openStatsMegaFruit()">';
    var t = "";
    if (megafruit_stats_select == 99) {
        t = "selected";
    }
    m += '    <option value="99">' + t_megafruit_stats_sum_fruits + "</option>";
    for (var z = 0; z < farmersmarket_data.megafruit.fruits.length; z++) {
        var t = "";
        if (megafruit_stats_select == z) {
            t = "selected";
            a = produkt_name[farmersmarket_data.megafruit.fruits[z].pid];
        }
        m += '<option value="' + z + '" ' + t + ">" + str_replace("%PRODUCT%", produkt_name[farmersmarket_data.megafruit.fruits[z].pid], t_megafruit_stats_option) + "</option>";
    }
    m += "    </select>";
    m += "  </div>";
    var s = str_replace("%PRODUCT%", a, t_megafruit_best_player);
    if (megafruit_stats_select == 99) {
        s = t_megafruit_best_player2;
    }
    s = str_replace("%BEST%", const_megafruit_stats_entries, s);
    m += '  <div class="headline" style="margin-top:10px; margin-bottom:10px;">' + s + "</div>";
    m += '  <div id="megafruit_stats_ranking">';
    m += htmlStatsContent(megafruit_stats.ranking);
    if (megafruit_stats.self) {
        m += '<div style="margin-top:10px;">' + str_replace("%COUNT%", "<b>" + megafruit_stats.self.counter + "</b>", t_megafruit_best_result) + "</div>";
    }
    m += "</div>";
    m += "<div class=\"mini_close link\" onclick=\"hideDiv('megafruit_stats_transp'); hideDiv('megafruit_stats');\"></div>";
    $("megafruit_stats").innerHTML = m;
    showDiv("megafruit_stats");
    showDiv("megafruit_stats_transp");
    return false;
} globalcommitbox(d, n, B, A, b); if (r == "level" && $("megafruit_level_insert")) {
    $("megafruit_level_insert").focus();
} }
function megafruitCheckLevelAdd() { var a = $("megafruit_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > farmersmarket_data.megafruit.count) {
    a = farmersmarket_data.megafruit.count;
} $("megafruit_dialog_leveladd_insert").value = a; }
function timerMegaFruit() { if (farmersmarket_data.megafruit && farmersmarket_data.megafruit.current) {
    if (farmersmarket_data.megafruit.current.remain > 0) {
        farmersmarket_data.megafruit.current.remain--;
        showFarmersmarketPosTimer(3, -1, formatTime(farmersmarket_data.megafruit.current.remain));
    }
    else {
        showFarmersmarketPosTimer(3, -1, statusProductionComplete);
    }
} if ($("megafruit_timer")) {
    if (farmersmarket_data.megafruit && farmersmarket_data.megafruit.current) {
        hideDiv("megafruit_select");
        if (farmersmarket_data.megafruit.current.remain > 0) {
            var l = farmersmarket_data.megafruit.current.remain;
            var a = str_replace("%SIZE%", "<b>" + farmersmarket_data.megafruit.current.points + "</b>", t_megafruit_timer_add);
            a = str_replace("%TIME%", "<b>" + formatTime(l) + "</b>", a);
            $("megafruit_timer_count").innerHTML = a;
            showDiv("megafruit_timer");
            showDiv("megafruit_info_board");
            hideDiv("megafruit_harvest_button");
            var e = (100 - ((farmersmarket_data.megafruit.current.remain * 100) / farmersmarket_data.megafruit.current.time));
            $("megafruit_timer_inner").style.width = e + "%";
            for (var d in farmersmarket_data.megafruit.current.data) {
                if (!isNaN(farmersmarket_data.megafruit.current.data[d].remain)) {
                    farmersmarket_data.megafruit.current.data[d].remain--;
                    var h = farmersmarket_data.megafruit.current.data[d].remain;
                    if (farmersmarket_data.megafruit.current.data[d].remain >= 0) {
                        showDiv("megafruit_need_" + d + "_timer_box");
                        var c = farmersmarket_data.megafruit.current.data[d].duration;
                        var e = Math.ceil((h * 100) / c);
                        $("megafruit_need_" + d + "_timer_inner").style.width = (e * (52 / 100)) + "px";
                        $("megafruit_need_" + d + "_timer").innerHTML = "&nbsp;" + formatTime(h);
                        $("megafruit_need_" + d + "_img").removeClassName("megafruit_need_" + d);
                        $("megafruit_need_" + d + "_img").addClassName("megafruit_need_item" + farmersmarket_data.megafruit.current.data[d].oid);
                    }
                    else {
                        hideDiv("megafruit_need_" + d + "_timer_box");
                        $("megafruit_need_" + d + "_timer").innerHTML = "";
                        if ($("megafruit_need_" + d + "_img")) {
                            $("megafruit_need_" + d + "_img").className = "megafruit_need_img megafruit_need_" + d;
                        }
                        setObjectsMegaFruit();
                    }
                }
            }
        }
        else {
            hideDiv("megafruit_timer");
            showDiv("megafruit_info_board");
            showDiv("megafruit_harvest_button");
            for (var d in farmersmarket_data.megafruit.current.data) {
                hideDiv("megafruit_need_" + d + "_timer_box");
                if ($("megafruit_need_" + d + "_img")) {
                    $("megafruit_need_" + d + "_img").className = "megafruit_need_img megafruit_need_" + d;
                }
            }
            setObjectsMegaFruit();
        }
        var b = "";
        b += '<div style="font-weight:bold;">' + t_megafruit_fruit_size + "&nbsp;" + formatNumber(farmersmarket_data.megafruit.current.points) + "</div>";
        if (farmersmarket_data.megafruit.current.rewards.money > 0) {
            b += '<div style="margin-top:5px;">' + formatPrice(farmersmarket_data.megafruit.current.rewards.money) + "</div>";
        }
        if (farmersmarket_data.megafruit.current.rewards.points > 0) {
            b += '<div style="margin-top:5px;">' + formatNumber(farmersmarket_data.megafruit.current.rewards.points) + "&nbsp;" + t_points + "</div>";
        }
        b += '<div style="margin-top:5px;">';
        if (farmersmarket_data.megafruit.current.rewards.fruits > 0) {
            b += '<div class="megafruit_seed" style="float:left; margin-right:5px;"></div><div style="float:left;">' + formatNumber(farmersmarket_data.megafruit.current.rewards.fruits) + "</div>";
        }
        if (farmersmarket_data.megafruit.current.rewards.parts > 0) {
            b += '<div style="float:left; margin-left:15px;"><img src="' + imgpath + "megafruitparts" + farmersmarket_data.megafruit.current.pid + '.png" style="width:20px; margin-right:5px;"></div><div style="float:left;">' + formatNumber(farmersmarket_data.megafruit.current.rewards.parts) + "</div>";
        }
        b += '  <div class="clear"></div>';
        b += "</div>";
        $("megafruit_info_board").innerHTML = b;
    }
    else {
        hideDiv("megafruit_timer");
        hideDiv("megafruit_harvest_button");
        hideDiv("megafruit_info_board");
        showDiv("megafruit_select");
    }
} }
function closeMegaFruit() { hideDiv("transp"); hideDiv("farmersmarket_pos3_inner"); }
function initFoodcontest() { in_foodcontest = 1; var h = farmersmarket_data.foodcontest; var d = "<div>"; d += '  <div id="foodcontest_select_transp" class="transp"></div>'; d += '  <div id="foodcontest_select">'; for (var b = 0; b < h.fruits.length; b++) {
    if (h.fruits[b].pid) {
        var e = 0;
        if (farmersmarket_data.foodcontest.config.stock && farmersmarket_data.foodcontest.config.stock.fruits && farmersmarket_data.foodcontest.config.stock.fruits[h.fruits[b].pid]) {
            e = farmersmarket_data.foodcontest.config.stock.fruits[h.fruits[b].pid];
        }
        d += '<div class="link megafruit_select_item" onclick="dialogFoodcontest(\'start\', ' + h.fruits[b].pid + "," + e + ')" onmouseover="showDiv(\'foodcontest_select_item_tt' + h.fruits[b].pid + "')\" onmouseout=\"hideDiv('foodcontest_select_item_tt" + h.fruits[b].pid + "')\">";
        d += '  <img src="' + imgpath + "megafruitparts" + h.fruits[b].pid + '.png" class="fruit_image_select">';
        d += '  <div id="foodcontest_select_item_amount' + h.fruits[b].pid + '" class="foodcontest_select_item_amount">' + e + "</div>";
        d += '  <div id="foodcontest_select_item_tt' + h.fruits[b].pid + '" class="foodcontest_select_item_tt ttbox"><div style="font-weight:bold;">' + t_foodcontest_start_bold + '</div><div style="margin-top:5px;">' + t_foodcontest_bonus + h.fruits[b].bonus + '%</div><div class="bonusinfo">' + str_replace("%PRODUCT%", produkt_name[h.fruits[b].pid], t_foodcontest_start) + "</div></div>";
        d += "</div>";
    }
} d += '    <div id="foodcontest_select_fighter">'; var c = str_replace("%AMOUNT%", (h.config.fighter_need * Math.floor(h.constants.duration / h.constants.feed_duration)), t_foodcontest_fighter_bubble); d += '      <div id="foodcontest_select_fighter_need">' + c + "</div>"; d += '      <div id="foodcontest_select_fighter_levelbar" onmouseover="showDiv(\'foodcontest_select_fighter_level_tt\')" onmouseout="hideDiv(\'foodcontest_select_fighter_level_tt\')">'; d += '        <div id="foodcontest_select_fighter_levelbar_inner">'; d += '          <div id="foodcontest_select_fighter_levelbar_inner_line" style="width:' + h.config.fighter_levelpercent + '%"></div>'; d += '          <div id="foodcontest_select_fighter_levelbar_front"></div>'; d += '          <div id="foodcontest_select_fighter_level">' + h.config.fighter_level + "</div>"; var l = formatNumber(h.config.fighter_points); if (h.config.fighter_next_level_points) {
    l += "&nbsp;/&nbsp;" + formatNumber(h.config.fighter_next_level_points);
} d += '          <div id="foodcontest_select_fighter_level_tt" class="ttbox" style="top:35px;">' + l + "</div>"; d += "        </div>"; d += "      </div>"; d += "    </div>"; d += "  </div>"; d += '  <div id="foodcontest_current">'; d += '    <div id="foodcontest_stage">'; d += '      <div id="foodcontest_stage_opponent1" class="foodcontest_stage_opponent1_idle"></div>'; d += '      <div id="foodcontest_stage_fighter" class="foodcontest_stage_fighter_idle" onmouseover="showDiv(\'foodcontest_fighter_level_tt\')" onmouseout="hideDiv(\'foodcontest_fighter_level_tt\')">'; d += '        <div id="foodcontest_fighter_level_tt" onmouseover="showDiv(\'foodcontest_fighter_level_tt_level_tt\')" onmouseout="hideDiv(\'foodcontest_fighter_level_tt_level_tt\')">'; d += '          <div id="foodcontest_fighter_level_tt_inner">'; d += '            <div id="foodcontest_fighter_level_tt_inner_line" style="width:' + h.config.fighter_levelpercent + '%"></div>'; d += '            <div id="foodcontest_fighter_level_tt_levelbar_front"></div>'; d += '            <div id="foodcontest_fighter_level_tt_fighter_level">' + h.config.fighter_level + "</div>"; var l = formatNumber(h.config.fighter_points); if (h.config.fighter_next_level_points) {
    l += "&nbsp;/&nbsp;" + formatNumber(h.config.fighter_next_level_points);
} d += '            <div id="foodcontest_fighter_level_tt_level_tt" class="ttbox" style="top:35px;">' + l + "</div>"; d += "          </div>"; d += "        </div>"; d += '        <div id="foodcontest_stage_fighter_bubble" class="foodcontest_stage_fighter_bubble_feed link" onmouseover="showDiv(\'foodcontest_stage_fighter_bubble_tt\')" onmouseout="hideDiv(\'foodcontest_stage_fighter_bubble_tt\')">'; d += '          <div id="foodcontest_stage_fighter_bubble_tt" class="ttbox" style="width:150px;">'; d += '			 <div style="margin-bottom:10px;">' + t_foodcontest_feed_head + "</div>"; if (farmersmarket_data.foodcontest.current.pid) {
    d += '<img style="float:left; margin-right:5px; width:25px; height:25px;" src="' + imgpath + "megafruitparts" + farmersmarket_data.foodcontest.current.pid + '.png">';
} d += '            <div style="float:left; width:100px;">' + farmersmarket_data.foodcontest.config.fighter_need + " " + str_replace("%NAME%", produkt_name[farmersmarket_data.foodcontest.current.pid], t_foodcontest_fruit_name) + "</div>"; d += '            <div class="clear"></div>'; d += "		   </div>"; d += "        </div>"; d += '        <div id="foodcontest_stage_fighter_timer"></div>'; d += "      </div>"; d += '      <div id="foodcontest_stage_opponent2" class="foodcontest_stage_opponent2_idle"></div>'; d += '      <div id="foodcontest_feedback"></div>'; d += "    </div>"; if (h.firsttime) {
    d += '<div id="foodcontest_firsttime" class="firsttime_arrow"></div>';
} d += "    <div id=\"foodcontest_happymeter\" onmouseover=\"showDiv('foodcontest_happymeter_percent1'); showDiv('foodcontest_happymeter_percent2'); showDiv('foodcontest_happymeter_percent3');\" onmouseout=\"hideDiv('foodcontest_happymeter_percent1'); hideDiv('foodcontest_happymeter_percent2'); hideDiv('foodcontest_happymeter_percent3');\">"; d += '      <div id="foodcontest_happymeter_inner1"><div class="ttbox foodcontest_happymeter_percent" id="foodcontest_happymeter_percent1"></div></div>'; d += '      <div id="foodcontest_happymeter_inner2"><div class="ttbox foodcontest_happymeter_percent" id="foodcontest_happymeter_percent2"></div></div>'; d += '      <div id="foodcontest_happymeter_inner3"><div class="ttbox foodcontest_happymeter_percent" id="foodcontest_happymeter_percent3"></div></div>'; d += '	   <div id="foodcontest_happymeter_front"></div>'; d += "    </div>"; d += '    <div id="foodcontest_merch" class="link" onclick="dialogFoodcontest(\'merch_slots\')" onmouseover="showDiv(\'foodcontest_merch_box_tt\')" onmouseout="hideDiv(\'foodcontest_merch_box_tt\')">'; d += '      <div id="foodcontest_merch_box_tt" class="ttbox">' + t_foodcontest_merch_box + "</div>"; d += "    </div>"; d += '    <div id="foodcontest_merch_bubble" class="link" onclick="dialogFoodcontest(\'merch_cash\')" onmouseover="showDiv(\'foodcontest_merch_bubble_tt\')" onmouseout="hideDiv(\'foodcontest_merch_bubble_tt\')">'; d += '      <div id="foodcontest_merch_bubble_tt" style="top:60px;" class="ttbox">' + t_foodcontest_merch_cash + "</div>"; d += "    </div>"; d += '    <div id="foodcontest_blocks">'; for (var b = 1; b <= 4; b++) {
    d += '<div id="foodcontest_block' + b + '" class="foodcontest_block link">';
    d += '  <div id="foodcontest_block_crowd' + b + '"></div>';
    if (b > 1) {
        d += '<div id="foodcontest_block_crowd' + b + '_block" class="foodcontest_block_block"></div>';
    }
    d += '  <div id="foodcontest_block_crowd' + b + '_pin_money" class="foodcontest_block_pin"></div>';
    d += '  <div id="foodcontest_block_crowd' + b + '_pin_points" class="foodcontest_block_pin"></div>';
    d += '  <div id="foodcontest_block_crowd' + b + '_pin_fame" class="foodcontest_block_pin"></div>';
    d += '  <div id="foodcontest_block_crowd' + b + '_pin_products" class="foodcontest_block_pin"></div>';
    var m = t_foodcontest_rent_block_head;
    if (farmersmarket_data.foodcontest.blocks[b] && farmersmarket_data.foodcontest.blocks[b].money) {
        m = t_foodcontest_buy_block_head;
    }
    d += '  <div id="foodcontest_block_crowd' + b + '_tt" class="ttbox foodcontest_block_crowd_tt">' + m + "</div>";
    d += "</div>";
} d += "    </div>"; d += '    <div id="foodcontest_timer">'; d += '      <div id="foodcontest_timer_inner"></div>'; d += '      <div id="foodcontest_timer_count"></div>'; d += "    </div>"; d += "  </div>"; d += '  <div class="foodcontest_stats_button link" onclick="getStatsFoodcontest()" onmouseover="showDiv(\'foodcontest_stats_button_tt\')" onmouseout="hideDiv(\'foodcontest_stats_button_tt\')">'; d += '    <div id="foodcontest_stats_button_tt" class="ttbox">' + t_foodcontest_stats_button + "</div>"; d += "  </div>"; d += '  <div class="foodcontest_stock_button link" onclick="dialogFoodcontest(\'stock\')" onmouseover="showDiv(\'foodcontest_stock_button_tt\')" onmouseout="hideDiv(\'foodcontest_stock_button_tt\')">'; d += '    <div id="foodcontest_stock_button_tt" class="ttbox">' + t_foodcontest_stock_button + "</div>"; d += "  </div>"; d += '  <div id="foodcontest_collection_button" class="foodcontest_collection_button link" onclick="dialogFoodcontest(\'collection\')" onmouseover="showDiv(\'foodcontest_collection_button_tt\')" onmouseout="hideDiv(\'foodcontest_collection_button_tt\')">'; d += '    <div id="foodcontest_collection_button_tt" class="ttbox">' + t_foodcontest_collection_button + "</div>"; d += "  </div>"; d += '  <div id="foodcontest_collection_flyer"></div>'; d += '  <div id="foodcontest_help_button" class="foodcontest_help_button link" onclick="openFarmersMarketHowTo(\'foodcontest\', 1)"></div>'; d += '  <div class="mini_close link" onclick="closeFoodcontest()"></div>'; d += '  <div id="foodcontest_transp" style="z-index:5" class="transp"></div>'; d += '  <div id="foodcontest_merch_box" style="z-index:10">'; d += '    <div id="foodcontest_merch_box_header"></div>'; d += '    <div id="foodcontest_merch_box_inner"></div>'; d += '    <div id="foodcontest_merch_box_footer"></div>'; d += "    <div id=\"foodcontest_merch_box_close\" class=\"mini_close link\" onclick=\"hideDiv('foodcontest_box_merch'); hideDiv('foodcontest_transp'); dialogFoodcontest('merch_slots');\"></div>"; d += '    <div class="globalbox_edge globalbox_edge_tl" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_tr" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_bl" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_br" style="z-index:2"></div>'; d += "  </div>"; d += '  <div id="foodcontest_stock" style="z-index:10">'; d += '    <div id="foodcontest_stock_header"></div>'; d += '    <div id="foodcontest_stock_inner"></div>'; d += '    <div id="foodcontest_stock_footer"></div>'; d += '    <div id="foodcontest_stock_close" class="mini_close link" onclick="hideDiv(\'foodcontest_stock\'); hideDiv(\'foodcontest_transp\')"></div>'; d += '    <div class="globalbox_edge globalbox_edge_tl" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_tr" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_bl" style="z-index:2"></div>'; d += '    <div class="globalbox_edge globalbox_edge_br" style="z-index:2"></div>'; d += "  </div>"; d += '  <div id="foodcontest_stats" style="z-index:10">'; d += '    <div id="foodcontest_stats_inner">'; d += '      <div id="foodcontest_stats_select_line">'; d += '        <select id="foodcontest_stats_select" onchange="getStatsFoodcontest()">'; var a = { fighter: { opt: t_foodcontest_stats_fighter, head: t_foodcontest_stats_fighter_head }, winner: { opt: t_foodcontest_stats_winner, head: t_foodcontest_stats_winner_head }, winsinrow: { opt: t_foodcontest_stats_winsinrow, head: t_foodcontest_stats_winsinrow_head } }; for (var b in a) {
    var n = "";
    if (foodcontest_stats_select == b) {
        n = "selected";
    }
    d += '<option value="' + b + '" ' + n + ">" + a[b].opt + "</option>";
} d += "        </select>"; d += "      </div>"; d += '      <div class="headline" style="margin-top:10px; margin-bottom:10px;">' + a[foodcontest_stats_select].head + "</div>"; d += '      <div id="foodcontest_stats_ranking"></div>'; d += "    </div>"; d += '    <div id="foodcontest_stats_close" class="mini_close link" onclick="hideDiv(\'foodcontest_stats\'); hideDiv(\'foodcontest_transp\')"></div>'; d += "  </div>"; d += "</div>"; $("farmersmarket_pos6_inner").innerHTML = d; hideDiv("foodcontest_timer"); hideDiv("foodcontest_stage_fighter_timer"); hideDiv("foodcontest_stage_fighter_bubble"); if (h.current) {
    hideDiv("foodcontest_select_transp");
    hideDiv("foodcontest_select");
    showDiv("foodcontest_current");
    for (var b = 1; b <= 4; b++) {
        if (stopanimation == 1) {
            $("foodcontest_block_crowd" + b).className = "foodcontest_block_crowd" + b + "_static";
        }
        else {
            if (h.blocks[b] && !h.blocks[b].block) {
                $("foodcontest_block_crowd" + b).className = "foodcontest_block_crowd" + b + "_ani";
            }
            else {
                $("foodcontest_block_crowd" + b).className = "";
            }
        }
    }
    if (h.current.data && h.current.data.collect) {
        showDiv("foodcontest_collection_button");
    }
    else {
        hideDiv("foodcontest_collection_button");
    }
}
else {
    hideDiv("foodcontest_collection_button");
    showDiv("foodcontest_select_transp");
    showDiv("foodcontest_select");
    hideDiv("foodcontest_current");
    for (var b = 1; b <= 4; b++) {
        $("foodcontest_block_crowd" + b).className = "";
    }
} showDiv("transp"); showDiv("farmersmarket_pos6_inner"); setContentFoodcontest(); }
function getStatsFoodcontest(a) { if (!a) {
    if ($("foodcontest_stats_select")) {
        a = $("foodcontest_stats_select").value;
    }
    else {
        a = "fighter";
    }
} foodcontest_stats_select = a; farmAction("foodcontest_stats", 1, 1, a); }
function openStatsFoodcontest() { var a = ""; a += htmlStatsContent(foodcontest_stats.ranking); $("foodcontest_stats_ranking").innerHTML = a; showDiv("foodcontest_transp"); showDiv("foodcontest_stats"); }
function cachePinFoodcontest(d, c) { if (!foodcontest_pincache.length) {
    foodcontest_cache_run = setTimeout("cacheFireFoodcontest()", 2000);
} var e = 0; for (var b = 0; b < foodcontest_pincache.length; b++) {
    if (foodcontest_pincache[b].block == d && foodcontest_pincache[b].type == c) {
        e = 1;
    }
} if (!e) {
    var a = { block: d, type: c };
    foodcontest_pincache.push(a);
    hideDiv("foodcontest_block_crowd" + d + "_pin_" + c);
    delete farmersmarket_data.foodcontest.blocks[d].pin[c];
} }
function cacheFireFoodcontest() { var b = ""; for (var a = 0; a < foodcontest_pincache.length; a++) {
    b += foodcontest_pincache[a].block + "_" + foodcontest_pincache[a].type + ",";
} clearTimeout(foodcontest_cache_run); foodcontest_cache_run = 0; foodcontest_pincache = []; farmAction("foodcontest_pincache", 1, 1, b); }
function timerFoodcontest() { if (farmersmarket_data.foodcontest) {
    if (farmersmarket_data.foodcontest.current) {
        farmersmarket_data.foodcontest.current.remain--;
        farmersmarket_data.foodcontest.current.feedremain--;
        if (farmersmarket_data.foodcontest.current.remain > 0) {
            for (var a = 1; a <= 2; a++) {
                if (farmersmarket_data.foodcontest.current.data["opponent" + a].remain) {
                    farmersmarket_data.foodcontest.current.data["opponent" + a].remain--;
                }
            }
            showFarmersmarketPosTimer(6, -1, formatTime(farmersmarket_data.foodcontest.current.remain));
        }
        else {
            showFarmersmarketPosTimer(6, -1, statusProductionComplete);
        }
    }
    if (farmersmarket_data.foodcontest.current.data && farmersmarket_data.foodcontest.current.data.merchpin_remain) {
        farmersmarket_data.foodcontest.current.data.merchpin_remain--;
    }
    if (farmersmarket_data.foodcontest.blocks) {
        for (var b = 1; b <= 4; b++) {
            if (farmersmarket_data.foodcontest.blocks[b] && farmersmarket_data.foodcontest.blocks[b].pin) {
                for (var c in farmersmarket_data.foodcontest.blocks[b].pin) {
                    if (!farmersmarket_data.foodcontest.blocks[b].block) {
                        farmersmarket_data.foodcontest.blocks[b].pin[c].remain--;
                    }
                }
            }
        }
    }
    setContentFoodcontest();
} }
var foodcontest_last_update = 0;
function setContentFoodcontest() { if (!in_foodcontest) {
    return false;
} var E = farmersmarket_data.foodcontest; if (E.current && $("foodcontest_timer")) {
    if (E.current.remain >= 0) {
        foodcontest_last_update++;
        var u = (E.constants.duration - E.current.remain);
        if (u > 0 && u % E.constants.feed_duration == 0 && foodcontest_last_update >= 5) {
            farmAction("foodcontest_update", 1, 1);
            foodcontest_last_update = 0;
        }
    }
    if ($("firsttime")) {
        if (E.firsttime) {
            showDiv("foodcontest_firsttime");
        }
        else {
            hideDiv("foodcontest_firsttime");
        }
    }
    $("foodcontest_stage_fighter").className = "";
    $("foodcontest_stage_opponent1").className = "";
    $("foodcontest_stage_opponent2").className = "";
    $("foodcontest_stage_fighter_bubble").onclick = new Function();
    var q = E.constants.duration;
    var D = 0;
    var c = { "1": E.constants.duration, "2": E.constants.duration };
    var e = { "1": 0, "2": 0 };
    if (E.current.remain > 0) {
        var F = (E.constants.duration - E.current.remain);
        var t = '<img style="position:relative; float:left; width:20px; margin-right:5px; margin-top:-5px;" src="' + imgpath + "megafruitparts" + E.current.pid + '.png">';
        t += '<div style="position:relative; float:left;">' + t_foodcontest_resttime + '&nbsp;<span style="font-weight:bold;">' + formatTime(E.current.remain) + "</span></div>";
        t += '<div class="clear"></div>';
        $("foodcontest_timer_count").innerHTML = t;
        $("foodcontest_timer_inner").style.width = (((E.constants.duration - E.current.remain) * 100) / E.constants.duration) + "%";
        showDiv("foodcontest_timer");
        if (E.current.feedremain > 0) {
            D = (E.constants.feed_duration - E.current.feedremain);
            if (E.current.data.feed && E.current.data.feed.length > 0) {
                D = (D + ((E.current.data.feed.length - 1) * E.constants.feed_duration));
            }
            $("foodcontest_stage_fighter_timer").innerHTML = formatTime(E.current.feedremain);
            showDiv("foodcontest_stage_fighter_timer");
            hideDiv("foodcontest_stage_fighter_bubble");
            $("foodcontest_stage_fighter").addClassName("foodcontest_stage_fighter_eat");
        }
        else {
            if (E.current.data.feed && E.current.data.feed.length > 0) {
                D = (E.current.data.feed.length * E.constants.feed_duration);
            }
            hideDiv("foodcontest_stage_fighter_timer");
            showDiv("foodcontest_stage_fighter_bubble");
            var w = "dialogFoodcontest('need_more')";
            if (E.config.stock && E.config.stock.fruits && E.config.stock.fruits[E.current.pid] && E.config.stock.fruits[E.current.pid] >= E.config.fighter_need) {
                w = "dialogFoodcontest('feed')";
            }
            $("foodcontest_stage_fighter_bubble").onclick = new Function(w);
            $("foodcontest_stage_fighter").addClassName("foodcontest_stage_fighter_idle");
        }
        for (var z = 1; z <= 2; z++) {
            var A = (E.constants.duration / E.constants.feed_duration);
            var l = Math.ceil(E.current.remain / E.constants.feed_duration);
            var s = (A - l);
            if (E.current.data["opponent" + z].set[s]) {
                $("foodcontest_stage_opponent" + z).addClassName("foodcontest_stage_opponent" + z + "_eat");
            }
            else {
                $("foodcontest_stage_opponent" + z).addClassName("foodcontest_stage_opponent" + z + "_idle");
            }
        }
    }
    else {
        farmAction("foodcontest_finish", 1, 1);
    }
    var b = ((D * 100) / F);
    for (var B = 0; B < E.fruits.length; B++) {
        if (E.fruits[B].pid == E.current.pid) {
            b += E.fruits[B].bonus;
        }
        if (b > 100) {
            b = 100;
        }
    }
    var C = ((125 / 100) * b);
    $("foodcontest_happymeter_inner2").style.height = C + "px";
    $("foodcontest_happymeter_percent2").innerHTML = Math.ceil(b) + "%";
    for (var y = 1; y <= 2; y++) {
        var l = Math.ceil((E.constants.duration - E.current.remain) / E.constants.feed_duration);
        var n = 0;
        for (var B = 0; B < l; B++) {
            if (E.current.data["opponent" + y].set[B] == 1) {
                n++;
            }
        }
        var b = ((n * 100) / l);
        if (isNaN(b)) {
            b = 0;
        }
        var C = 0;
        if (b > 0) {
            C = ((125 / 100) * b);
        }
        var m = 1;
        if (y > 1) {
            m = 3;
        }
        $("foodcontest_happymeter_inner" + m).style.height = C + "px";
        $("foodcontest_happymeter_percent" + m).innerHTML = Math.ceil(b) + "%";
    }
} if (E.merch_slots) {
    for (var B in E.merch_slots) {
        var a = t_foodcontest_set_merch;
        if ($("foodcontest_merch_slot" + B)) {
            if (E.merch_slots[B].pid) {
                for (var z = 0; z < E.merch.length; z++) {
                    if (E.merch[z].id == E.merch_slots[B].pid) {
                        a = E.merch[z].name;
                        break;
                    }
                }
            }
            if (E.merch_slots[B].block) {
                if (E.merch_slots[B].money) {
                    a = str_replace("%MONEY%", formatPrice(E.merch_slots[B].money), t_foodcontest_merch_slot_buy_body);
                }
                if (E.merch_slots[B].coins) {
                    a = str_replace("%COINS%", E.merch_slots[B].coins, t_foodcontest_merch_slot_rent_body);
                }
                if (E.merch_slots[B].level && E.merch_slots[B].level > E.config.fighter_level) {
                    a += '<div style="margin-top:10px; font-style:italic; color:#f00;">' + str_replace("%LEVEL%", E.merch_slots[B].level, t_foodcontest_merch_require_level) + "</div>";
                    showDiv("foodcontest_merch_slot_lock" + B);
                }
                else {
                    $("foodcontest_merch_slot" + B).onclick = new Function("dialogFoodcontest('buy_merch_slot', " + B + ")");
                    showDiv("foodcontest_merch_slot_unlock" + B);
                }
            }
            else {
                $("foodcontest_merch_slot" + B).onclick = new Function("dialogFoodcontest('set_merch_slot', " + B + ")");
                hideDiv("foodcontest_merch_slot_lock" + B);
                hideDiv("foodcontest_merch_slot_unlock" + B);
            }
            $("foodcontest_merch_slot_tt" + B).innerHTML = a;
        }
    }
} if (E.current.data && E.current.data.merchpin_remain) {
    if (E.current.data.merchpin_remain <= 0) {
        showDiv("foodcontest_merch_bubble");
    }
    else {
        hideDiv("foodcontest_merch_bubble");
    }
} if (E.blocks) {
    for (var B = 1; B <= 4; B++) {
        if ($("foodcontest_block" + B) && E.blocks[B]) {
            if (B > 1) {
                $("foodcontest_block" + B).onmouseover = new Function("");
                $("foodcontest_block" + B).onmouseout = new Function("");
                $("foodcontest_block" + B).onclick = new Function("");
                if (!E.blocks[B].block) {
                    hideDiv("foodcontest_block_crowd" + B + "_block");
                    if (stopanimation == 1) {
                        $("foodcontest_block_crowd" + B).className = "foodcontest_block_crowd" + B + "_static";
                    }
                    else {
                        $("foodcontest_block_crowd" + B).className = "foodcontest_block_crowd" + B + "_ani";
                    }
                }
                else {
                    showDiv("foodcontest_block_crowd" + B + "_block");
                    var d = "rent_block";
                    if (E.blocks[B].money) {
                        d = "buy_block";
                    }
                    $("foodcontest_block" + B).onclick = new Function("dialogFoodcontest('" + d + "', " + B + ")");
                    $("foodcontest_block_crowd" + B).className = "";
                    $("foodcontest_block" + B).onmouseover = new Function("showDiv('foodcontest_block_crowd" + B + "_tt')");
                    $("foodcontest_block" + B).onmouseout = new Function("hideDiv('foodcontest_block_crowd" + B + "_tt')");
                }
            }
            if (E.blocks[B].pin) {
                for (var d in E.blocks[B].pin) {
                    if ($("foodcontest_block_crowd" + B + "_pin_" + d)) {
                        if (!E.blocks[B].block) {
                            $("foodcontest_block_crowd" + B + "_pin_" + d).onclick = new Function("");
                            hideDiv("foodcontest_block_crowd" + B + "_pin_" + d);
                            var v = E.blocks[B].pin[d];
                            if (v.remain <= 0 && E.current.remain > 0) {
                                showDiv("foodcontest_block_crowd" + B + "_pin_" + d);
                                $("foodcontest_block_crowd" + B + "_pin_" + d).className = "foodcontest_block_pin foodcontest_block_pin_" + d;
                                $("foodcontest_block_crowd" + B + "_pin_" + d).onclick = new Function("cachePinFoodcontest(" + B + ", '" + d + "')");
                            }
                        }
                        else {
                            hideDiv("foodcontest_block_crowd" + B + "_pin_" + d);
                        }
                    }
                }
                for (var y = 0; y < foodcontest_pincache.length; y++) {
                    var r = foodcontest_pincache[y].block;
                    var d = foodcontest_pincache[y].type;
                    if ($("foodcontest_block_crowd" + r + "_pin_" + d)) {
                        hideDiv("foodcontest_block_crowd" + r + "_pin_" + d);
                    }
                }
            }
        }
    }
} }
function dialogFoodcontest(r, u, b, a) { hideDiv("foodcontest_merch_box"); hideDiv("foodcontest_transp"); var z = farmersmarket_data.foodcontest; var c = 0; var n = 0; if (r == "merch_cash") {
    var h = 0;
    for (var y in z.merch_slots) {
        if (z.merch_slots[y].pid) {
            h++;
        }
    }
    if (h > 0) {
        farmAction("foodcontest_merchpin", 1, 1);
        return false;
    }
    else {
        var e = t_foodcontest_merch_cash;
        var m = t_foodcontest_nomerch_to_cash;
        var v = "farmAction('foodcontest_merchpin', 1, 1)";
    }
} if (r == "buy_block") {
    var e = t_foodcontest_buy_block_head;
    var m = str_replace("%COST%", formatPrice(z.blocks[u].money), t_foodcontest_buy_block_body);
    var v = "farmAction('foodcontest_buy_block', 1, 1, " + u + ")";
} if (r == "rent_block") {
    var e = t_foodcontest_rent_block_head;
    var m = str_replace("%TIME%", formatTime(z.blocks[u].duration), t_foodcontest_rent_block_body);
    if (z.blocks[u].money) {
        m = str_replace("%MONEY%", formatPrice(z.blocks[u].money), m);
    }
    if (z.blocks[u].coins) {
        m = str_replace("%MONEY%", z.blocks[u].coins + "&nbsp;" + t_coins, m);
    }
    var v = "farmAction('foodcontest_rent_block', 1, 1, " + u + ")";
} if (r == "merch_slots") {
    var e = t_foodcontest_merchandise_slots;
    var m = "";
    m += '<div id="foodcontest_merch_slots_inner">';
    for (var y = 1; y <= 6; y++) {
        m += '<div id="foodcontest_merch_slot' + y + '" class="foodcontest_merch_slot link" onmouseover="showDiv(\'foodcontest_merch_slot_tt' + y + "')\" onmouseout=\"hideDiv('foodcontest_merch_slot_tt" + y + "')\">";
        if (z.merch_slots[y]) {
            var t = "_top";
            if (y > 3) {
                t = "_bottom";
            }
            if (z.merch_slots[y].pid) {
                m += '<div class="foodcontest_merch' + z.merch_slots[y].pid + '"></div>';
            }
            m += '<div id="foodcontest_merch_slot_lock' + y + '" class="foodcontest_merch_slot_lock"></div>';
            m += '<div id="foodcontest_merch_slot_unlock' + y + '" class="foodcontest_merch_slot_unlock"></div>';
            m += '<div id="foodcontest_merch_slot_tt' + y + '" class="foodcontest_merch_slot_tt' + t + ' ttbox"></div>';
            if (z.merch_slots[y].pid) {
                for (var w = 0; w < z.merch.length; w++) {
                    if (z.merch_slots[y].pid == z.merch[w].id) {
                        m += '<div class="foodcontest_select_merchitem_amount">' + z.merch[w].amount + "</div>";
                    }
                }
            }
        }
        m += "</div>";
    }
    m += '  <div class="clear"></div>';
    m += "</div>";
    no_buttons = 1;
} if (r == "buy_merch_slot") {
    if (z.merch_slots[u].duration) {
        var e = t_foodcontest_merch_slot_rent_head;
        var m = str_replace("%COINS%", z.merch_slots[u].coins, t_foodcontest_merch_slot_rent_body);
    }
    else {
        var e = t_foodcontest_merch_slot_buy_head;
        var m = str_replace("%MONEY%", formatPrice(z.merch_slots[u].money), t_foodcontest_merch_slot_buy_body);
    }
    var v = "farmAction('foodcontest_buy_slot', 1, 1, " + u + ")";
    var n = "dialogFoodcontest('merch_slots')";
} if (r == "set_merch_slot") {
    if (u > 0) {
        foodcontest_merch_slot_select = u;
    }
    var e = t_foodcontest_merch_overview;
    var m = "";
    m += '<div id="foodcontest_merch_tab">';
    for (var y = 1; y <= 3; y++) {
        var t = "";
        if (y == 1) {
            t = "margin-left:10px;";
        }
        m += '<div style="' + t + '" id="foodcontest_merch_tab' + y + '" class="foodcontest_merch_tab link foodcontest_merch_tab' + y + '" onclick="showMerchCategoryFoodcontest(' + y + ')"></div>';
    }
    m += '  <div class="clear"></div>';
    m += "</div>";
    m += "<div>";
    for (var y = 1; y <= 3; y++) {
        m += '<div id="foodcontest_merch_category' + y + '"></div>';
        m += '<div class="clear"></div>';
    }
    m += "</div>";
    m += '<div id="foodcontest_merch_navi">';
    m += '  <div id="foodcontest_merch_navi_left" class="foodcontest_merch_navi_left link"></div>';
    m += '  <div id="foodcontest_merch_navi_right" class="foodcontest_merch_navi_right link"></div>';
    m += '  <div class="clear"></div>';
    m += '  <div id="foodcontest_merch_navi_middle"></div>';
    m += "</div>";
    $("foodcontest_merch_box_inner").innerHTML = m;
    showDiv("foodcontest_transp");
    showDiv("foodcontest_merch_box");
    hideDiv("globalbox");
    hideDiv("globaltransp");
    showMerchCategoryFoodcontest();
    return false;
} if (r == "buy_merch") {
    var e = str_replace("%NAME%", z.merch[u].name, t_foodcontest_merch_buy_head);
    var m = '<div style="width:350px;">';
    m += '  <div class="foodcontest_merch' + z.merch[u].id + '" style="margin:0 auto; margin-bottom:10px;"></div>';
    m += '  <div style="background-color:#C3A75E; padding:5px; border-radius:5px; margin:10px 0;">';
    m += '    <input type="number" maxlength="5" id="foodcontest_merch_buy_input" style="display:block; float:left; font-weight:bold; padding:2px; border-radius:5px; border:1px solid #ccc; width:75px;" value="1" onkeyup="calcMerchPriceFoodcontest(' + u + ')" onchange="calcMerchPriceFoodcontest(' + u + ')">';
    if (z.merch[u].money || z.merch[u].coins) {
        if (z.merch[u].money) {
            var h = z.merch[u].money[1];
        }
        if (z.merch[u].coins) {
            var h = z.merch[u].coins[1];
        }
        var q = str_replace("%COUNT%", h, t_foodcontest_merch_buy_package);
        q = str_replace("%SUM%", '<span id="foodcontest_merch_package_count" style="font-weight:bold;"></span>', q);
        m += '<div style="float:left; margin:5px 0px 0 5px;">' + q + "</div>";
    }
    m += '    <div style="float:left; margin:5px 0 0 5px;">' + t_inner_stock + "&nbsp;" + z.merch[u].amount + "&nbsp;" + t_stk + "</div>";
    m += '    <button type="button" id="foodcontest_merch_buy_button" class="button_new link" style="float:right;" onclick="dialogFoodcontest(\'buy_merch_commit\', ' + u + ')">' + market_buy + "</button>";
    m += '    <div class="clear"></div>';
    m += "  </div>";
    m += '  <div id="foodcontest_merch_buy_button_line">';
    m += '    <div style="float:left; margin-right:5px;">' + cityadcost + "</div>";
    m += '    <div style="float:left; font-weight:bold;" id="foodcontest_merch_buy_cost"></div>';
    m += '    <div class="clear"></div>';
    m += "  </div>";
    m += "</div>";
    c = 1;
    n = "dialogFoodcontest('set_merch_slot')";
} if (r == "buy_merch_commit") {
    var l = $("foodcontest_merch_buy_input").value;
    var A = 0;
    if (l > 0) {
        l = parseInt(l);
        var h = l;
        if (z.merch[u].money) {
            h = (l * z.merch[u].money[1]);
        }
        if (z.merch[u].coins) {
            h = (l * z.merch[u].coins[1]);
        }
        if (z.merch[u].money) {
            var A = formatPrice(l * z.merch[u].money[0]);
        }
        else {
            if (z.merch[u].coins) {
                var A = (l * z.merch[u].coins[0]) + "&nbsp;" + t_coins;
            }
            else {
                var A = (l * z.merch[u].fruits[1]) + "&nbsp" + str_replace("%NAME%", produkt_name[z.merch[u].fruits[0]], t_foodcontest_fruit_name);
            }
        }
        var e = str_replace("%NAME%", z.merch[u].name, t_foodcontest_merch_buy_head);
        var m = str_replace("%NAME%", z.merch[u].name, t_foodcontest_merch_buy_body);
        m = str_replace("%AMOUNT%", h, m);
        m = str_replace("%COST%", A, m);
        var v = "farmAction('foodcontest_buy_merch', 1, 1, " + z.merch[u].id + ", " + l + ")";
        var n = "dialogFoodcontest('buy_merch', " + u + ")";
    }
    else {
        return false;
    }
} if (r == "stock") {
    var e = t_foodcontest_stock_button;
    var m = "";
    m += '<div class="headline" style="text-align:center;margin-bottom:5px;">' + t_foodcontest_stock_button + "</div>";
    m += '<div class="foodcontest_stock">';
    for (var y = 0; y < z.fruits.length; y++) {
        var l = 0;
        if (z.config.stock && z.config.stock.fruits && z.config.stock.fruits[z.fruits[y].pid]) {
            l = z.config.stock.fruits[z.fruits[y].pid];
        }
        m += '<div class="foodcontest_stock_item" onmouseover="showDiv(\'foodcontest_stock_item_tt' + z.fruits[y].pid + "')\" onmouseout=\"hideDiv('foodcontest_stock_item_tt" + z.fruits[y].pid + "')\">";
        m += '  <img src="' + imgpath + "megafruitparts" + z.fruits[y].pid + '.png" class="foodcontest_stock_item_img">';
        m += '  <div id="foodcontest_stock_item_tt' + z.fruits[y].pid + '" class="ttbox foodcontest_stock_item_tt">';
        m += '    <div style="font-weight:bold;">' + produkt_name[z.fruits[y].pid] + "</div>";
        m += "    <div>" + t_foodcontest_bonus + z.fruits[y].bonus + "%</div>";
        m += "  </div>";
        m += '  <div class="foodcontest_stock_amount_plus amount_plus link" onclick="dialogFoodcontest(\'buy\', ' + z.fruits[y].pid + ')">';
        m += '    <div class="foodcontest_stock_item_amount">' + l + "</div>";
        m += '    <div class="clear"></div>';
        m += "  </div>";
        m += "</div>";
    }
    m += '  <div class="clear"></div>';
    m += "</div>";
    showDiv("foodcontest_transp");
    showDiv("foodcontest_stock");
    $("foodcontest_stock_inner").innerHTML = m;
    return false;
} if (r == "buy") {
    foodcontest_block = 0;
    var e = t_foodcontest_buy_head;
    var m = "";
    for (var y in z.coins) {
        var s = '<div style="font-weight:bold; font-size:16px;">';
        s += '  <div style="position:relative; float:left; margin:5px 0 0 30px;">' + z.coins[y] + "x&nbsp;</div>";
        s += '  <img style="position:relative; float:left; margin:-15px 0 0 0; width:65px;" src="' + imgpath + "megafruitparts" + u + '.png">';
        s += '  <div style="position:relative; float:left; margin:5px 0 0 0;">=&nbsp;' + y + "&nbsp" + t_coins + "</div>";
        s += '  <div class="clear"></div>';
        s += "</div>";
        s = str_replace("%COINS%", y, s);
        s = str_replace("%PRODUCT%", produkt_name[u], s);
        m += '<div class="foodcontest_stock_buy_button link" onclick="dialogFoodcontest(\'buy_commit\', ' + u + ", " + y + ')">' + s + "</div>";
    }
    var v = 0;
} if (r == "buy_commit") {
    foodcontest_block = 1;
    var e = t_foodcontest_buy_head;
    var m = str_replace("%COUNT%", z.coins[b], t_foodcontest_buy_select);
    m = str_replace("%COINS%", b, m);
    m = str_replace("%PRODUCT%", produkt_name[u], m);
    var v = "farmAction('foodcontest_buy', 1, 1, " + u + ", " + b + ")";
} if (r == "feed") {
    farmAction("foodcontest_feed", 1, 1);
} if (r == "need_more") {
    var d = z.config.fighter_need;
    if (z.config.stock && z.config.stock.fruits && z.config.stock.fruits[z.current.pid]) {
        d = (z.config.fighter_need - z.config.stock.fruits[z.current.pid]);
    }
    var s = str_replace("%PRODUCT%", produkt_name[z.current.pid], t_foodcontest_need_more);
    s = str_replace("%NEED%", d, s);
    s += '<button type="button" class="button_new link" style="margin-top:20px;" onclick="dialogFoodcontest(\'buy\', ' + z.current.pid + ')">' + t_foodcontest_buy_head + "</button>";
    globalerrorbox(s);
    return false;
} if (r == "start") {
    var e = str_replace("%PRODUCT%", produkt_name[u], t_foodcontest_start_head);
    var m = '<img src="' + imgpath + "megafruitparts" + u + '.png" style="width:70px; margin-bottom:10px;"><br>' + str_replace("%PRODUCT%", produkt_name[u], t_foodcontest_start_body);
    if (!b) {
        m += '<div style="margin-top:5px;" class="important">' + t_foodcontest_start_warning + "</div>";
    }
    var v = "farmAction('foodcontest_start', 1, 1, " + u + ")";
} if (r == "collection") {
    if (z.current.data.collect) {
        var e = t_foodcontest_collect_head;
        var m = "<div>";
        if (z.current.data.collect.points) {
            m += '<div style="float:left; margin-right:5px; width:135px;"><div style="float:left;" class="miniicons_points"></div><div style="float:left; margin-bottom:4px;">' + formatNumber(z.current.data.collect.points) + "&nbsp;" + t_points + '</div><div class="clear"></div></div>';
        }
        if (z.current.data.collect.money) {
            m += '<div style="float:left; margin-right:5px; width:135px;"><div style="float:left;" class="miniicons_money"></div><div style="float:left; margin-bottom:4px;">' + formatPrice(z.current.data.collect.money) + '</div><div class="clear"></div></div>';
        }
        if (z.current.data.collect.fame) {
            m += '<div style="float:left; margin-right:5px; width:135px;"><div style="float:left;" class="miniicons_fame"></div><div style="float:left; margin-bottom:4px;">' + z.current.data.collect.fame + "&nbsp;" + t_foodcontest_fame + '</div><div class="clear"></div></div>';
        }
        m += '  <div class="clear"></div>';
        m += '  <div style="margin-top:5px;">';
        if (z.current.data.collect.products) {
            for (var y in z.current.data.collect.products) {
                m += '<div style="float:left; margin-bottom:5px; margin-right:5px; width:135px;">';
                m += '  <div style="float:left; margin-right:5px;" class="kp' + y + '"></div>';
                m += '  <div style="float:left">' + z.current.data.collect.products[y] + "x&nbsp;" + produkt_name[y] + "</div>";
                m += '  <div class="clear"></div>';
                m += "</div>";
            }
        }
        m += "  </div>";
        m += "</div>";
        c = 1;
    }
    else {
        return false;
    }
} globalcommitbox(e, m, v, n, c); if (r == "merch_slots" || r == "collection") {
    hideDiv("globalbox_char");
    hideDiv("globalbox_footer");
} if (r == "buy_merch") {
    calcMerchPriceFoodcontest(u);
} if (r == "stock" || r == "merch_slots" || r == "collection") {
    $("globalbox_content").addClassName("globalbox_content_big");
    $("globalbox").style.marginLeft = "-265px";
} if (r == "merch_slots" || r == "rent_slot") {
    setContentFoodcontest();
} }
function navigateMerchCategoryFoodcontest(b, c, a) { if (!a) {
    c--;
}
else {
    c++;
} showMerchCategoryFoodcontest(b, c); }
function showMerchCategoryFoodcontest(b, q) { if (!b) {
    b = 1;
} foodcontest_merch_category = b; if (!q) {
    q = 1;
} for (var h = 1; h <= 3; h++) {
    hideDiv("foodcontest_merch_category" + h);
    $("foodcontest_merch_tab" + h).removeClassName("foodcontest_merch_tab" + h + "_active");
} showDiv("foodcontest_merch_category" + b); $("foodcontest_merch_tab" + b).addClassName("foodcontest_merch_tab" + b + "_active"); var m = farmersmarket_data.foodcontest; var r = []; for (var h = 0; h < m.merch.length; h++) {
    if (m.merch[h].category == b) {
        r.push(h);
    }
} var c = {}; for (var h in m.merch_slots) {
    if (m.merch_slots[h].pid) {
        c[m.merch_slots[h].pid] = 1;
    }
} var n = 3; if (q == 1) {
    var u = 1;
}
else {
    var u = (((q - 1) * n) + 1);
} var t = (q * n); var l = ""; for (var h = 0; h < r.length; h++) {
    if (parseInt(h + 1) >= u && parseInt(h + 1) <= t) {
        var a = r[h];
        var e = 0;
        var s = "";
        if (parseInt(m.merch[a].level) > parseInt(m.config.fighter_level)) {
            s = "important";
            e = 1;
        }
        var v = "";
        if (m.merch[a].money) {
            v = "(" + m.merch[a].money[1] + "&nbsp;" + t_stk + ")";
        }
        if (m.merch[a].coins) {
            v = "(" + m.merch[a].coins[1] + "&nbsp;" + t_stk + ")";
        }
        l += '<div class="foodcontest_merch_overview_item">';
        l += '  <div style="float:left; margin-right:10px;" class="foodcontest_merch' + m.merch[a].id + '_m" onmouseover="showDiv(\'foodcontest_merch_img' + m.merch[a].id + "')\" onmouseout=\"hideDiv('foodcontest_merch_img" + m.merch[a].id + "')\">";
        l += '    <div class="ttbox" id="foodcontest_merch_img' + m.merch[a].id + '" style="top:30px; left:30px;">';
        l += '      <div style="margin-bottom:5px;">' + t_foodcontest_merch_loot + "</div>";
        l += '      <div style="margin-bottom:5px;">' + formatPrice(m.merch[a].sell.money) + "</div>";
        l += '      <div style="margin-bottom:5px;">' + formatNumber(m.merch[a].sell.points) + "&nbsp;" + t_points + "</div>";
        l += '      <div style="margin-bottom:10px;">' + m.merch[a].sell.fame + "&nbsp;" + t_foodcontest_fame + "</div>";
        l += "    </div>";
        if (c[m.merch[a].id]) {
            l += '<img style="width:35px; top:30px; position:absolute; left:15px;" src="' + imgpath + 'merchslot_isset.png">';
        }
        l += "  </div>";
        l += '  <div style="float:left;">';
        l += '    <div style="float:left; width:250px;">';
        l += '      <div style="margin-bottom:5px; font-weight:bold;" class="' + s + '">' + m.merch[a].name + "</div>";
        if (e) {
            l += '<div style="font-style:italic; color:#f00; margin-bottom:5px;">' + str_replace("%LEVEL%", m.merch[a].level, t_foodcontest_merch_require_level) + "</div>";
        }
        if (m.merch[a].money) {
            var d = formatPrice(m.merch[a].money[0]) + "&nbsp;(" + m.merch[a].money[1] + "&nbsp;" + t_stk + ")";
        }
        if (m.merch[a].coins) {
            var d = m.merch[a].coins[0] + "&nbsp;" + t_coins + "&nbsp;(" + m.merch[a].coins[1] + "&nbsp;" + t_stk + ")";
        }
        if (m.merch[a].fruits) {
            var d = m.merch[a].fruits[1] + "&nbsp;" + str_replace("%NAME%", produkt_name[m.merch[a].fruits[0]], t_foodcontest_fruit_name);
        }
        l += '      <div style="margin-bottom:5px;">' + t_sell_price + "&nbsp;" + d + "</div>";
        l += '      <div style="margin-bottom:5px;">' + t_inner_stock + "&nbsp;" + m.merch[a].amount + "&nbsp;" + t_stk + "</div>";
        l += "    </div>";
        l += '    <div style="float:left;">';
        if (m.merch[a].amount > 0 && foodcontest_merch_slot_select > 0) {
            l += '<div style="float:left;" class="link foodcontest_merchslot_setbutton" onclick="farmAction(\'foodcontest_set_slot\', 1, 1, ' + foodcontest_merch_slot_select + ", " + m.merch[a].id + ')" onmouseover="showDiv(\'foodcontest_merchslot_setbutton_tt\')" onmouseout="hideDiv(\'foodcontest_merchslot_setbutton_tt\')">';
            l += '  <div id="foodcontest_merchslot_setbutton_tt" class="ttbox">' + t_foodcontest_merch_button_set_item + "</div>";
            l += "</div>";
        }
        if (!e) {
            l += '<div style="float:left;" class="link foodcontest_merchslot_buybutton" onclick="dialogFoodcontest(\'buy_merch\', ' + a + ')" onmouseover="showDiv(\'foodcontest_merchslot_buybutton_tt\')" onmouseout="hideDiv(\'foodcontest_merchslot_buybutton_tt\')">';
            l += '  <div id="foodcontest_merchslot_buybutton_tt" class="ttbox">' + t_foodcontest_merch_button_buy_more + "</div>";
            l += "</div>";
        }
        l += '      <div class="clear"></div>';
        l += "    </div>";
        l += '    <div class="clear"></div>';
        l += "  </div>";
        l += '  <div class="clear"></div>';
        l += "</div>";
    }
} $("foodcontest_merch_category" + b).innerHTML = l; hideDiv("foodcontest_merch_navi_left"); hideDiv("foodcontest_merch_navi_right"); if (q > 1) {
    showDiv("foodcontest_merch_navi_left");
    $("foodcontest_merch_navi_left").onclick = new Function("showMerchCategoryFoodcontest(" + b + ", " + (q - 1) + ")");
} if (r.length > n && parseInt(t + 1) <= r.length) {
    showDiv("foodcontest_merch_navi_right");
    $("foodcontest_merch_navi_right").onclick = new Function("showMerchCategoryFoodcontest(" + b + ", " + (q + 1) + ")");
} hideDiv("foodcontest_merch_navi_middle"); if (r.length > n) {
    showDiv("foodcontest_merch_navi_middle");
    $("foodcontest_merch_navi_middle").innerHTML = q + "/" + Math.ceil(r.length / n);
} }
function calcMerchPriceFoodcontest(b) { var e = farmersmarket_data.foodcontest.merch[b]; var a = $("foodcontest_merch_buy_input").value; var d = 0; if (a) {
    if (!isNumeric(a)) {
        a = 1;
    }
    a = parseInt(a);
    if (a <= 0) {
        a = 0;
    }
    if (e.money) {
        d = formatPrice(e.money[0] * a);
    }
    if (e.coins) {
        d = (e.coins[0] * a) + "&nbsp;" + t_coins;
    }
    if (e.fruits) {
        d = '<div style="float:left; margin-right:5px;" class="kp' + e.fruits[0] + '"></div>';
        d += '<div style="float:left;">' + (e.fruits[1] * a) + "&nbsp;" + str_replace("%NAME%", produkt_name[e.fruits[0]], t_foodcontest_fruit_name) + "</div>";
        d += '<div class="clear"></div>';
    }
    $("foodcontest_merch_buy_input").value = a;
} if (a > 0) {
    $("foodcontest_merch_buy_cost").innerHTML = d;
    if (e.money || e.coins) {
        if (e.money) {
            var c = (a * e.money[1]);
        }
        if (e.coins) {
            var c = (a * e.coins[1]);
        }
        $("foodcontest_merch_package_count").innerHTML = c;
    }
    showDiv("foodcontest_merch_buy_button_line");
    showDiv("foodcontest_merch_buy_button");
}
else {
    if (e.money || e.coins) {
        $("foodcontest_merch_package_count").innerHTML = 0;
    }
    hideDiv("foodcontest_merch_buy_button_line");
    hideDiv("foodcontest_merch_buy_button");
} }
function merchPinResultFoodcontest(a) { var h = farmersmarket_data.foodcontest; var n = t_foodcontest_merchpin_head; var e = ""; var l = { money: 0, points: 0, fame: 0 }; e += '<div style="width:465px;">'; for (var b = 1; b <= 6; b++) {
    e += '<div class="foodcontest_merchpin_item">';
    e += '  <div class="foodcontest_merchpin_slot">';
    var d = 0;
    if (h.merch_slots[b] && h.merch_slots[b].pid) {
        var d = h.merch_slots[b].pid;
    }
    if (a[b] && a[b].pid) {
        var d = a[b].pid;
    }
    if (d > 0) {
        e += '<div style="margin-top:2px; margin-left:5px;" class="foodcontest_merch' + d + '_m"></div>';
    }
    e += "  </div>";
    if (h.merch_slots[b].block) {
        e += '<div class="foodcontest_merchslot_lock"></div>';
    }
    e += '  <div style="margin-top:5px; padding:5px;">';
    if (a[b]) {
        e += '<div style="margin-bottom:4px;">' + t_foodcontest_merch_sold + a[b].amount + "</div>";
        e += '<div style="margin-bottom:4px;">' + t_foodcontest_merch_demanded + a[b].demand + "</div>";
        var c = 0;
        if (h.config.stock.merch && h.config.stock.merch[h.merch_slots[b].pid]) {
            c = h.config.stock.merch[h.merch_slots[b].pid];
        }
        e += "<div>" + t_inner_stock + " " + c + "</div>";
        l.money += a[b].money;
        l.points += a[b].points;
        l.fame += a[b].fame;
    }
    else {
        if (h.config.stock.merch && h.config.stock.merch[h.merch_slots[b].pid]) {
            e += t_foodcontest_merch_nodemand;
        }
        else {
            if (h.merch_slots[b].block) {
                e += t_foodcontest_merch_block;
            }
            else {
                e += t_foodcontest_merch_empty;
            }
        }
    }
    e += "  </div>";
    e += "</div>";
} e += '<div class="clear"></div>'; e += '<div style="position:relative; background-color:#C3A75E; border-radius:5px; padding:4px; width:452px;">'; e += '  <div style="margin-bottom:5px;">' + t_foodcontest_merchpin_total + "</div>"; e += '  <div style="float:left; margin-right:5px; width:145px;"><div style="float:left;" class="miniicons_points"></div><div style="float:left; margin-bottom:4px; font-size:12px; font-weight:bold;">' + formatNumber(l.points) + "&nbsp;" + t_points + '</div><div class="clear"></div></div>'; e += '  <div style="float:left; margin-right:5px; width:145px;"><div style="float:left;" class="miniicons_money"></div><div style="float:left; margin-bottom:4px; font-size:12px; font-weight:bold;">' + formatPrice(l.money) + '</div><div class="clear"></div></div>'; e += '  <div style="float:left; margin-right:5px; width:145px;"><div style="float:left;" class="miniicons_fame"></div><div style="float:left; margin-bottom:4px; font-size:12px; font-weight:bold;">' + l.fame + "&nbsp;" + t_foodcontest_fame + '</div><div class="clear"></div></div>'; e += '  <div class="clear"></div>'; e += "</div>"; e += "</div>"; foodcontest_flyer_data = { money: l.money, points: l.points, fame: l.fame }; var m = "hideDiv('globalbox'); hideDiv('globaltransp'); collectionFlyerFoodcontest()"; globalBoxFlex(n, e, 0, m, 1); }
function rewardFoodcontest(h) { var e = t_foodcontest_reward_head[h.rank]; var a = ""; a += '<div style="position:relative; width:325px;">'; a += '  <div class="foodcontest_podium">'; var l = 1; for (var d in h.ranking) {
    var b = "foodcontest_podium_char2";
    if (d == "opponent1") {
        b = "foodcontest_podium_char1";
    }
    if (d == "opponent2") {
        b = "foodcontest_podium_char3";
    }
    a += '<div class="' + b + " foodcontest_podium_pos" + l + '"></div>';
    l++;
} a += "  </div>"; if (h.reward) {
    a += '  <div class="headline" style="margin-top:10px;">' + t_foodcontest_reward_collect_head + "</div>";
    a += '  <div style="height:80px; overflow:auto;">';
    if (h.reward.money) {
        a += '<div style="margin-bottom:4px;">';
        a += '  <div style="float:left;" class="miniicons_money"></div>';
        a += '  <div style="float:left; width:285px; text-align:left;"><span style="font-weight:bold;">' + formatPrice(h.reward.money) + "</span>";
        if (h.reward.bonus && h.reward.bonus.money) {
            var c = str_replace("%AMOUNT%", formatPrice(h.reward.bonus.money), t_foodcontest_reward_incl);
            a += "&nbsp;" + str_replace("%POS%", h.rank, c);
        }
        a += "  </div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (h.reward.fame) {
        a += '<div style="margin-bottom:4px;">';
        a += '  <div style="float:left;" class="miniicons_fame"></div>';
        a += '  <div style="float:left; width:285px; text-align:left;"><span style="font-weight:bold;">' + h.reward.fame + "&nbsp;" + t_foodcontest_fame + "</span>";
        if (h.reward.bonus && h.reward.bonus.fame) {
            var c = str_replace("%AMOUNT%", h.reward.bonus.fame + "&nbsp;" + t_foodcontest_fame, t_foodcontest_reward_incl);
            a += "&nbsp;" + str_replace("%POS%", h.rank, c);
        }
        a += "  </div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (h.reward.points) {
        a += '<div style="margin-bottom:4px;">';
        a += '  <div style="float:left;" class="miniicons_points"></div>';
        a += '  <div style="float:left; width:285px; text-align:left;"><span style="font-weight:bold;">' + formatNumber(h.reward.points) + "&nbsp;" + t_points + "</span>";
        if (h.reward.bonus && h.reward.bonus.points) {
            var c = str_replace("%AMOUNT%", formatNumber(h.reward.bonus.points) + "&nbsp;" + t_points, t_foodcontest_reward_incl);
            a += "&nbsp;" + str_replace("%POS%", h.rank, c);
        }
        a += "  </div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    a += "  <div>";
    a += '    <div class="link" style="margin:5px 0;" onclick="toogleDiv(\'foodcontest_product_overview\')">';
    a += '      <img style="float:left; margin-right:5px;" id="foodcontest_product_overview_plus" src="' + imgpath + 'guild/plus.gif">';
    a += '      <div style="float:left;">' + t_foodcontest_products_overview + "</div>";
    a += '      <div class="clear"></div>';
    a += "    </div>";
    a += '  <div id="foodcontest_product_overview" style="display:none;">';
    for (var d in h.reward.products) {
        a += '<div style="margin-bottom:4px; float:left; width:150px;">';
        a += '  <div class="kp' + d + '" style="float:left; margin-right:5px;"></div>';
        a += '  <div style="float:left;">' + h.reward.products[d] + "x&nbsp;" + produkt_name[d] + "</div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    a += '  <div class="clear"></div>';
    a += "  </div>";
    a += "  </div>";
    a += "  </div>";
} a += '  <div class="button_yes link" onclick="hideDiv(\'globalbox\'); hideDiv(\'globaltransp\')" style="position:relative; left:50%; margin-left:-25px; width:50px; height:50px;"></div>'; a += "</div>"; globalBoxFlex(e, a, 0, 0, 0); }
var foodcontest_flyer_data = {};
function collectionFlyerFoodcontest() { var c = foodcontest_flyer_data; if (!("transition" in $("foodcontest_collection_flyer").style) && !("webkitTransition" in $("foodcontest_collection_flyer").style)) {
    return false;
} var b = ""; if (c.points) {
    b += '<div style="margin-bottom:4px;">+' + formatNumber(c.points) + "&nbsp;" + t_points + "</div>";
} if (c.money) {
    b += '<div style="margin-bottom:4px;">+' + formatPrice(c.money) + "</div>";
} if (c.fame) {
    b += '<div style="margin-bottom:4px;">+' + c.fame + "&nbsp;" + t_foodcontest_fame + "</div>";
} if (c.products) {
    for (var a in c.products) {
        b += '<div style="margin-bottom:4px;">';
        b += '<div style="float:left; margin-right:5px;" class="kp' + a + '"></div>';
        b += '<div style="float:left">' + c.products[a] + "x&nbsp;" + produkt_name[a] + "</div>";
        b += '<div class="clear"></div>';
        b += "</div>";
    }
} $("foodcontest_collection_flyer").innerHTML = b; $("foodcontest_collection_flyer").addClassName("collection_move"); setTimeout(closeCollectionFlyerFoodcontest, 3000); }
function closeCollectionFlyerFoodcontest() { $("foodcontest_collection_flyer").innerHTML = ""; $("foodcontest_collection_flyer").removeClassName("collection_move"); }
function closeFoodcontest() { in_foodcontest = 0; hideDiv("transp"); if ($("farmersmarket_pos6_inner")) {
    hideDiv("farmersmarket_pos6_inner");
} }
function showFarmersmarketPosTimer(d, a, c) { var b = ""; if (a != 0) {
    if (a > -1) {
        b += '<div class="kp' + a + '" style="float:left; margin:5px;"></div>';
    }
    b += '<div style="float:left; margin-top:5px;">' + c + "</div>";
    b += '<div class="clear"></div>';
} $("farmersmarket_pos" + d + "_timer").innerHTML = b; }
function insertFarmChecker() { var a = {}; var e = {}; for (var m in farmersmarket_data.flower_area) {
    var l = farmersmarket_data.flower_area[m];
    if (l.pid > 0 && l.remain < 0) {
        a[1] = l.pid;
    }
} for (var d = 1; d <= 3; d++) {
    if (farmersmarket_data.nursery.slots[d]) {
        var l = farmersmarket_data.nursery.slots[d];
        if (l.pid && l.remain < 0) {
            a[2] = l.pid;
        }
    }
} for (var d = 1; d <= 5; d++) {
    if (a[d]) {
        var h = 0;
        var c = { pid: a[d], farm: 99, position: d };
        for (var b = 0; b < farm_checker.length; b++) {
            if (farm_checker[b] && farm_checker[b].farm == 99 && farm_checker[b].position == d) {
                h = 1;
            }
        }
        if (!h) {
            farm_checker.push(c);
        }
    }
    else {
        e[d] = 1;
    }
} var c = []; for (var d = 0; d < farm_checker.length; d++) {
    if ((e[1] == 1 && farm_checker[d].farm == 99 && farm_checker[d].position == 1) || (e[2] == 1 && farm_checker[d].farm == 99 && farm_checker[d].position == 2)) { }
    else {
        c.push(farm_checker[d]);
    }
} farm_checker = c; }
var foodworld_products = {};
var foodworld_quest = {};
var foodworld_maxquest = {};
var foodworld_bonus = {};
function foodworldAction(b, a, m, h, d, e, n) { if (!a) {
    a = 0;
} if (!m) {
    m = 0;
} if (!h) {
    h = 0;
} var l = ""; if (b == "speedup") {
    l += "&pos=" + d + "&slot=" + e + "&coins=" + n;
} showGlobalWait(b); var c = createAjaxRequestObj(); c.open("GET", "ajax/foodworld.php?action=" + b + "&id=" + a + "&table=" + m + "&chair=" + h + "&rid=" + rid + l, true); c.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); c.onreadystatechange = function () { foodworldActionResponse(c, b, a, m, h); }; c.send(null); }
function foodworldActionResponse(d, h, m, c, b) { var a = _chkRequest(d); if (a != 0) {
    hideGlobalWait();
    if (h == "speedup") {
        global_speedup_block = 0;
    }
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        farm_checker_open = 0;
        hideDiv("farm_production_checker_icon");
        hideDiv("farm_production_checker");
        foodworld_touch_farmi = -1;
        hideDiv("foodworld_questblock");
        hideDiv("foodworld_questblock_bubble");
        hideDiv("foodworld_questblock_zzz");
        if (a.quest) {
            foodworld_maxquest = a.maxquest;
            foodworld_quest = a.quest;
            if (a.quest.remain > 0) {
                gametimer.foodworldquest = 1;
            }
            else {
                if (!(a.quest.config) || parseInt(a.quest.config.level) > parseInt(currentuserlevel)) { }
                else {
                    $("foodworld_questblock_bubble").innerHTML = "";
                    $("foodworld_questblock").onclick = new Function("setFoodworldDialog('quest')");
                    $("foodworld_questblock").addClassName("foodworld_questblock_work");
                    $("foodworld_questblock").removeClassName("foodworld_questblock_wait");
                    showDiv("foodworld_questblock");
                }
            }
            if (a.quest.questid >= 20) {
                $("foodworld_questblock").removeClassName("position1").addClassName("position2");
            }
        }
        if (a.bonus) {
            foodworld_bonus = a.bonus;
        }
        if (a.farmicount > 5) {
            $("food_minihelp_link").style.background = "url(" + imgpath + "foodworld/minihelp.gif)";
        }
        if (a.levelup && a.levelup.level) {
            levelupAlert(a.levelup.level, a.levelup.leveltitle);
        }
        if (a.farmis) {
            foodworldfarmis = a.farmis;
            foodworldfarmiscount = a.farmicount || 0;
            createFoodworldFarmis();
        }
        if (a.tables) {
            foodworldtables = a.tables;
            if (h == "cash") {
                if (a.transfer && (a.transfer["tip"] || a.transfer["price"] || a.transfer["bonus"] || a.transfer["ktbonus"])) {
                    var l = "";
                    if (a.transfer["price"]) {
                        l = formatPrice(a.transfer["price"]) + "<br>";
                    }
                    if (a.transfer["tip"]) {
                        l += "+" + formatPrice(a.transfer["tip"]) + "<br>";
                    }
                    if (a.transfer["bonus"]) {
                        l += "+" + formatPrice(a.transfer["bonus"]) + "<br>";
                    }
                    if (a.transfer["ktbonus"]) {
                        l += "+" + formatPrice(a.transfer["ktbonus"]);
                    }
                    $("foodworldchair" + c + "_" + b + "_tip").innerHTML = l;
                    $("foodworldchair" + c + "_" + b + "_tip").appear({ duration: 0.1, from: 1, to: 1 });
                    var e = new Effect.Opacity("foodworldchair" + c + "_" + b + "_tip", { duration: 5, transition: Effect.Transitions.linear, from: 1, to: 0 });
                }
                moveFoodworldFarmi(c, b);
            }
            else {
                createFoodWorldTables();
            }
        }
        if (a.buildings) {
            foodworldbuildings = a.buildings;
            setFoodworldBuildings();
        }
        if (a.speedup) {
            foodworldspeedup = a.speedup;
        }
        if (h == "foodworld_init") {
            farm = 0;
            city = 0;
            hideDiv("reallocateanimals_symbol");
            hideDiv("reallocatebuilding_symbol");
            forestry_quicknavi = 0;
            foodworld_quicknavi = 1;
            speedLinks();
            closeFoodworldBuilding();
            closeMarket();
            if (a.showTutorial) {
                showDiv("food_minihelp_content");
            }
            if ($("questbox")) {
                hideDiv("questboxtransp");
                hideDiv("questbox");
            }
        }
        if (h == "open") {
            openFoodworldBuilding(m);
        }
        if (h == "crop" || h == "production" || h == "cancel" || h == "buyslot") {
            openFoodworldBuilding(c);
        }
        if (h == "kick") {
            hideDiv("food_buildinginner_transp");
            deselectFoodworldFarmiTouch();
        }
        if (a.products) {
            foodworld_products = a.products;
        }
        if ($("globaltransp")) {
            hideDiv("globaltransp");
            hideDiv("globalbox");
        }
        showDiv("foodworld");
        if (h == "questentry") {
            setFoodworldDialog("quest");
        }
        if (a.quest && a.quest.remain > 0) {
            hideDiv("globaltransp");
            hideDiv("globalbox");
        }
        if (h == "foodworld_init" && m == "questbox") {
            setFoodworldDialog("quest");
        }
    }
} }
function foodworldQuestTimer() { if ($("foodworld_questblock_bubble") && foodworld_quest) {
    showDiv("foodworld_questblock");
    foodworld_quest.remain--;
    if (foodworld_quest.remain > 0) {
        showDiv("foodworld_questblock_bubble");
        showDiv("foodworld_questblock_zzz");
        $("foodworld_questblock_bubble").innerHTML = formatTime(foodworld_quest.remain);
        $("foodworld_questblock").onclick = new Function("");
        $("foodworld_questblock").removeClassName("foodworld_questblock_work");
        $("foodworld_questblock").addClassName("foodworld_questblock_wait");
    }
    else {
        if (foodworld_quest.config.level > currentuserlevel) {
            $("foodworld_questblock_bubble").innerHTML = str_replace("%LEVEL%", foodworld_quest.config.level, error1005);
            $("foodworld_questblock").onclick = new Function("");
            hideDiv("foodworld_questblock");
        }
        else {
            hideDiv("foodworld_questblock_bubble");
            hideDiv("foodworld_questblock_zzz");
            $("foodworld_questblock_bubble").innerHTML = "";
            $("foodworld_questblock").onclick = new Function("setFoodworldDialog('quest')");
            $("foodworld_questblock").removeClassName("foodworld_questblock_wait");
            $("foodworld_questblock").addClassName("foodworld_questblock_work");
        }
        clearTimer("foodworldquest");
    }
} }
function closeFoodworld() { for (var b = 1; b <= 3; b++) {
    foodworldClearTimer("slot" + b);
    foodworldClearTimer("slot" + b + "_time");
} for (var b = 0; b < 5; b++) {
    foodworldClearTimer("table" + b);
    for (var a = 1; a <= 4; a++) {
        foodworldClearTimer("chair" + b + "_" + a);
    }
} hideDiv("foodworld"); }
function setFoodworldBuildings() { for (var c = 1; c <= foodworldpos; c++) {
    hideDiv("food_lock" + c);
    hideDiv("food_unlock" + c);
    hideDiv("food_cost" + c);
    hideDiv("food_update" + c);
    $("food_pos" + c).onclick = new Function("");
} for (var c = 1; c <= foodworldpos; c++) {
    hideDiv("food_prod" + c);
    var h = 0;
    var d = 0;
    for (var b = 1; b <= 3; b++) {
        if (foodworldbuildings[c] && foodworldbuildings[c].slots && foodworldbuildings[c].slots[b]) {
            if (foodworldbuildings[c].slots[b].remain > 0) {
                h++;
            }
            else {
                if (foodworldbuildings[c].slots[b].remain < 1) {
                    d++;
                }
            }
            if (foodworldbuildings[c].slots[b].ready) {
                d++;
            }
        }
    }
    if (d > 0) {
        showDiv("food_prod" + c);
        $("food_prod" + c).className = "food_prod" + c + "_ready";
    }
    else {
        if (h > 0) {
            showDiv("food_prod" + c);
            $("food_prod" + c).className = "food_prod" + c + "_" + foodworldbuildings[c]["level"];
        }
    }
    html = '<div style="font-weight:bold;">' + foodworldbuildings[c]["name"] + "</div>";
    html += '<div style="margin-bottom:10px; font-style:italic;">' + foodworldbuildings[c]["desc"] + "</div>";
    if (foodworldbuildings[c]["level"] > 0 && !foodworldbuildings[c]["block"]) {
        var a = "";
        for (var e = 1; e <= foodworldbuildings[c]["level"]; e++) {
            a += '<img style="width:15px;" src="' + imgpath + 'star.png">';
        }
        $("food_stars" + c).innerHTML = a;
    }
    if (foodworldbuildings[c]["block"] == 1) {
        showDiv("food_lock" + c);
        if (foodworldbuildings[c].quest) {
            html += "<div>" + str_replace("%QUEST%", foodworldbuildings[c].quest, t_foodworld_quest_block) + "</div>";
        }
        else {
            html += "<div>" + str_replace("%LEVEL%", foodworldbuildings[c]["level"], minlevel_feature) + "</div>";
        }
    }
    else {
        if (foodworldbuildings[c]["cost"] > 0) {
            showDiv("food_cost" + c);
            showDiv("food_unlock" + c);
            $("food_pos" + c).onclick = new Function("buyFoodworldbuilding(" + c + ")");
            html += "<div>" + str_replace("%COST%", formatNumber(foodworldbuildings[c]["cost"]) + "&nbsp;" + gamecurrency, foodworld_blockcost) + "</div>";
        }
        else {
            $("food_pos" + c).onclick = new Function("foodworldAction('open'," + c + ")");
        }
    }
    if (foodworldbuildings[c]["update"] == 1) {
        showDiv("food_update" + c);
        $("food_update" + c + "_tt").innerHTML = infoupdatebuilding;
        $("food_update" + c).onmouseover = new Function("showDiv('food_update" + c + "_tt'); $('food_update" + c + "').style.backgroundImage = 'url(" + imgpath + "buildingupdatebutton_on.png)'");
        $("food_update" + c).onmouseout = new Function("hideDiv('food_update" + c + "_tt'); $('food_update" + c + "').style.backgroundImage = 'url(" + imgpath + "buildingupdatebutton_off.png)'");
    }
    if (foodworldbuildings[c]["level"]) {
        $("food_pos" + c).addClassName("food_pos" + c + "_" + foodworldbuildings[c]["level"]);
    }
    $("food_pos" + c + "_tt").innerHTML = html;
} }
function buyFoodworldbuilding(d) { var l = ""; var h = ""; if (carpentry_bonus > 0) {
    l = "*";
    h = '<div class="bonusinfo">' + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
} var a = str_replace("%BUILDING%", foodworldbuildings[d]["name"], foodworld_buybuilding_body); a = str_replace("%COST%", formatPrice(foodworldbuildings[d]["cost"]) + l, a); var c = str_replace("%BUILDING%", foodworldbuildings[d]["name"], foodworld_buybuilding_head); var b = "<div>" + a + "</div>" + h; var e = "foodworldAction('buy'," + d + ")"; globalcommitbox(c, b, e); }
function updateFoodworldbuilding(d) { var l = ""; var h = ""; if (carpentry_bonus > 0) {
    l = "*";
    h = '<div class="bonusinfo">' + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
} var a = str_replace("%BUILDING%", foodworldbuildings[d]["name"], foodworld_updatebuilding_body); a = str_replace("%COST%", formatPrice(foodworldbuildings[d]["ucost"]) + l, a); a = str_replace("%PERCENT%", foodworldbuildings[d]["ubonus"], a); var c = str_replace("%BUILDING%", foodworldbuildings[d]["name"], foodworld_updatebuilding_head); var b = "<div>" + a + "</div>" + h; var e = "foodworldAction('update'," + d + ")"; globalcommitbox(c, b, e); }
function openFoodworldBuilding(h) { foodworld_bldselect_starter = 1; closeFoodworldBuildingSelect(); showDiv("food_buildinginner_transp"); showDiv("food_buildinginner"); $("food_buildinginner").className = "foodworld_building_inner" + h + "_" + foodworldbuildings[h]["level"]; for (var c = 1; c <= 3; c++) {
    $("food_slot" + c).className = "link food_slot_pos" + h;
    $("food_slot" + c + "_back").onclick = new Function("openFoodworldBuildingSelect(" + h + "," + c + ")");
    $("food_slot" + c + "_img").innerHTML = "";
    hideDiv("food_slot" + c + "_block");
    showDiv("food_slot" + c + "_remain");
    $("food_slot" + c + "_remain").update(foodworld_start_production);
    hideDiv("food_slot" + c + "_ready");
    hideDiv("food_slot" + c + "_time");
    hideDiv("food_slot" + c + "_cancel");
    hideDiv("food_slot" + c + "_speedup");
    $("food_slot" + c + "_cancel").onclick = new Function();
    $("food_slot" + c + "_speedup").onclick = new Function();
    foodworldClearTimer("slot" + c);
    if (foodworldbuildings[h]["slots"][c]) {
        $("food_slot" + c + "_back").className = "food_slot_pos" + h + "_back";
        if (foodworldbuildings[h]["slots"][c]["remain"] > 0) {
            $("food_slot" + c + "_back").onclick = new Function();
            showDiv("food_slot" + c + "_remain");
            var d = new Array;
            d.slot = c;
            d.bld = h;
            foodworldSetTimer("slot" + c, remainFoodworldSlot, d);
            showDiv("food_slot" + c + "_cancel");
            showDiv("food_slot" + c + "_speedup");
            $("food_slot" + c + "_cancel").onclick = new Function("cancelFoodworldProduction(" + h + "," + c + ")");
            $("food_slot" + c + "_speedup").onclick = new Function("speedupFoodworldProduction(" + h + "," + c + ")");
            $("food_slot" + c + "_remain").update(foodworld_productiontime + "<br>" + formatTime(foodworldbuildings[h]["slots"][c]["remain"]));
        }
        if (foodworldbuildings[h]["slots"][c]["sremain"] > 0) {
            var d = new Array;
            d.slot = c;
            d.bld = h;
            foodworldClearTimer("slot" + c + "_time");
            foodworldSetTimer("slot" + c + "_time", slotFoodworldTime, d);
            showDiv("food_slot" + c + "_time");
            $("food_slot" + c + "_time").setStyle({ backgroundImage: "url(" + imgpath + "foodworld/prod" + h + "_back.png)" }).update(forestry_slot_time + "&nbsp;" + formatTime(foodworldbuildings[h]["slots"][c]["sremain"]));
        }
        if (foodworldbuildings[h]["slots"][c]["ready"] == 1) {
            $("food_slot" + c + "_back").onclick = new Function();
            showDiv("food_slot" + c + "_ready");
            $("food_slot" + c + "_back").onclick = new Function("foodworldAction('crop',0," + h + "," + c + ")");
            $("food_slot" + c).addClassName("link");
            showDiv("food_slot" + c + "_remain");
            $("food_slot" + c + "_remain").innerHTML = foodworld_getproducts;
            foodworldClearTimer("slot" + c);
        }
        if (foodworldbuildings[h]["slots"][c]["pid"]) {
            var b = '<div class="kp' + foodworldbuildings[h]["slots"][c]["pid"] + '" style="float:left; width:15px;"></div>';
            b += '<div style="float:left; width:120px; margin-left:5px; font-weight:bold;">' + foodworldbuildings[h]["slots"][c]["amount"] + "x&nbsp;" + produkt_name[foodworldbuildings[h]["slots"][c]["pid"]];
            var e = {};
            if (specialbonus && specialbonus.data && specialbonus.data.foodworld && specialbonus.data.foodworld.harvest && specialbonus.data.remain > 0) {
                b += '<div class="bonus">(' + t_incl + " +" + specialbonus.data.foodworld.harvest + " " + t_specialbonus_foodworld_harvest_info + ")</div>";
            }
            b += "</div>";
            b += '<div style="clear:both;"></div>';
            $("food_slot" + c + "_img").innerHTML = b;
            if (foodworldbuildings[h]["slots"][c]["ready"]) {
                $("food_slot" + c).className = "food_slot_pos" + h + "_ready";
            }
            else {
                $("food_slot" + c).className = "food_slot_pos" + h + "_full";
            }
        }
        if (foodworldbuildings[h]["slots"][c]["block"] == 1) {
            $("food_slot" + c + "_back").onclick = new Function();
            showDiv("food_slot" + c + "_block");
            $("food_slot" + c + "_back").onclick = new Function("buyFoodworldSlot(" + h + "," + c + ")");
            $("food_slot" + c).addClassName("link");
            showDiv("food_slot" + c + "_remain");
            if (foodworldbuildings[h]["slots"][c]["duration"] > 0) {
                var a = str_replace("%COINS%", foodworldbuildings[h]["slots"][c]["coins"] + "&nbsp;" + t_coins, foodworld_rentslot);
                a = str_replace("%TIME%", formatTime(foodworldbuildings[h]["slots"][c]["duration"]), a);
                $("food_slot" + c + "_remain").innerHTML = a;
            }
            else {
                $("food_slot" + c + "_remain").innerHTML = str_replace("%MONEY%", formatNumber(foodworldbuildings[h]["slots"][c]["cost"]) + "&nbsp;" + gamecurrency, foodworld_buyslot);
            }
        }
    }
} }
function slotFoodworldTime(e, a) { var d = a.slot; var b = a.bld; var c = foodworldbuildings[b]["slots"][d]["sremain"]; c--; $("food_slot" + d + "_time").innerHTML = forestry_slot_time + "&nbsp;" + formatTime(c); $("food_slot" + d + "_time").style.backgroundImage = "url(" + imgpath + "foodworld/prod" + b + "_back.png)"; if (c < 1) {
    foodworldClearTimer(e);
    hideDiv("food_slot" + d + "_time");
    showDiv("food_slot" + d + "_block");
    hideDiv("food_slot" + d + "_speedup");
    hideDiv("food_slot" + d + "_cancel");
    $("food_slot" + d + "_back").onclick = new Function("buyFoodworldSlot(" + b + "," + d + ")");
} foodworldbuildings[b]["slots"][d]["sremain"] = c; }
function remainFoodworldSlot(e, a) { var d = a.slot; var b = a.bld; var c = foodworldbuildings[b]["slots"][d]["remain"]; c--; $("food_slot" + d + "_remain").innerHTML = foodworld_productiontime + "<br>" + formatTime(c); if (c < 1 || isNaN(c)) {
    foodworldClearTimer(e);
    foodworldbuildings[b]["slots"][d]["ready"] = 1;
    foodworldbuildings[b]["slots"][d]["remain"] = 0;
    setFoodworldBuildings();
    openFoodworldBuilding(b);
} foodworldbuildings[b]["slots"][d]["remain"] = c; }
function cancelFoodworldProduction(d, c) { var a = "<div>" + foodworld_cancelbody + "</div>"; var b = "foodworldAction('cancel',0," + d + "," + c + ")"; globalcommitbox(foodworld_cancelhead, a, b); }
function speedupFoodworldProduction(b, a) { if (foodworldspeedup[b]) {
    globalSpeedupBox("foodworld", b, a);
    return false;
} }
function buyFoodworldSlot(h, e) { var c = foodworld_buyslot_dialog_head; var a = ""; if (foodworldbuildings[h]["slots"][e]["cost"] > 0) {
    a = '<div style="margin-bottom:10px;"><img src="' + imgpath + 'money.gif" style="height:12px;">&nbsp;' + formatPrice(foodworldbuildings[h]["slots"][e]["cost"]) + "</div>";
} a += str_replace("%MONEY%", formatNumber(foodworldbuildings[h]["slots"][e]["cost"]) + "&nbsp;" + gamecurrency, foodworld_buyslot_dialog_body); if (foodworldbuildings[h]["slots"][e]["duration"] > 0) {
    a = '<div style="margin-bottom:10px;"><img src="' + imgpath + 'menu/coins.gif" style="height:12px;">&nbsp;' + foodworldbuildings[h]["slots"][e]["coins"] + "&nbsp;" + t_coins + "</div>";
    a += str_replace("%COINS%", foodworldbuildings[h]["slots"][e]["coins"] + "&nbsp;" + t_coins, foodworld_rentslot_dialog_body);
    a = str_replace("%TIME%", formatTime(foodworldbuildings[h]["slots"][e]["duration"]), a);
} var b = "<div>" + a + "</div>"; var d = "foodworldAction('buyslot',0," + h + "," + e + ")"; globalcommitbox(c, b, d); }
function openFoodworldBuildingSelect(q, t) { var u = ((foodworld_bldselect_starter - 1) * 4) + 1; var v = (foodworld_bldselect_starter * 4); var b = {}; var l = 0; var r = {}; if (specialbonus && specialbonus.data && specialbonus.data.foodworld && specialbonus.data.foodworld.harvest && specialbonus.data.remain > 0) {
    r.harvest = specialbonus.data.foodworld.harvest;
} html = ""; html += '<div id="foodworld_selection">'; for (var a in foodworldbuildings[q].products) {
    for (var h in foodworldbuildings[q].products[a].out) {
        if (produkt_name[h]) {
            l++;
            if (l >= u && l <= v) {
                var e = foodworldbuildings[q].products[a].out[h];
                if (r.harvest) {
                    e += r.harvest;
                }
                html += '<div id="foodworld_selection_item' + h + '" class="item link">';
                html += '  <div class="tt' + h + ' img"></div>';
                html += '  <div class="info">';
                html += '    <div style="font-weight:bold;">' + e + "x " + produkt_name[h] + "</div>";
                if (r.harvest) {
                    html += '<div class="bonus">(' + t_incl + " +" + specialbonus.data.foodworld.harvest + " " + t_specialbonus_foodworld_harvest_info + ")</div>";
                }
                html += "    <div>" + formatTime(foodworldbuildings[q].products[a].duration) + "</div>";
                html += "    <div>" + formatNumber(produkt_points[h] * e) + "&nbsp;" + t_points + "</div>";
                html += "  </div>";
                html += '  <div class="clear"></div>';
                html += '  <div class="needs">';
                html += '    <div style="margin-bottom:2px; text-align:left;">' + t_needs + ":&nbsp;</div>";
                html += '    <div class="clear"></div>';
                for (var d in foodworldbuildings[q].products[a]["in"]) {
                    if (produkt_name[d]) {
                        var s = "";
                        if (checkRackItem(d) < foodworldbuildings[q].products[a]["in"][d]) {
                            s = "important";
                            b[h] = 1;
                        }
                        html += '<div style="position:relative; float:left; margin-right:5px;" onmouseover="showDiv(\'foodworld_selection' + h + "_" + d + "_tt')\" onmouseout=\"hideDiv('foodworld_selection" + h + "_" + d + "_tt')\">";
                        html += '  <div class="l' + d + '" style="border-radius:5px;"></div>';
                        html += '  <div class="' + s + ' amount">' + foodworldbuildings[q].products[a]["in"][d] + "x</div>";
                        html += '  <div id="foodworld_selection' + h + "_" + d + '_tt" class="ttbox">' + produkt_name[d] + "</div>";
                        html += "</div>";
                    }
                }
                html += '    <div class="clear"></div>';
                html += "  </div>";
                html += '  <div class="stars" onmouseover="showDiv(\'foodworld_selection_stars' + h + "_" + d + "_tt')\" onmouseout=\"hideDiv('foodworld_selection_stars" + h + "_" + d + "_tt')\">";
                for (var c = 1; c <= 5; c++) {
                    var y = "off";
                    if (foodworldbuildings[q].products[a].star && foodworldbuildings[q].products[a].star >= c) {
                        y = "";
                    }
                    html += '<div class="foodworld_star ' + y + '" style="float:left;"></div>';
                }
                html += '<div class="clear"></div>';
                if (foodworldbuildings[q].products[a].star == 5) {
                    var n = formatNumber(foodworldbuildings[q].products[a].starcurrent);
                }
                else {
                    if (!foodworldbuildings[q].products[a].starcurrent) {
                        var m = 0;
                    }
                    else {
                        var m = foodworldbuildings[q].products[a].starcurrent;
                    }
                    var n = formatNumber(m) + "/" + formatNumber(foodworldbuildings[q].products[a].starremain);
                }
                html += '    <div class="ttbox" id="foodworld_selection_stars' + h + "_" + d + '_tt">' + n + "</div>";
                html += "  </div>";
                html += "</div>";
            }
        }
    }
} html += '  <div id="foodworld_selection_navi_top" class="link" onclick="foodworldSelectionNavi(-1, ' + l + ", " + q + ", " + t + ')"></div>'; html += '  <div id="foodworld_selection_navi_down" class="link" onclick="foodworldSelectionNavi(1, ' + l + ", " + q + ", " + t + ')"></div>'; html += "</div>"; globalBoxFlex(t_foodworld_selection_head, html, 0, 0, 1); for (var a in foodworldbuildings[q].products) {
    for (var h in foodworldbuildings[q].products[a].out) {
        if ($("foodworld_selection_item" + h)) {
            var w = "foodworldAction('production', " + a + ", " + q + ", " + t + ")";
            if (b[h]) {
                w = "";
            }
            $("foodworld_selection_item" + h).onclick = new Function(w);
        }
    }
} }
function foodworldSelectionNavi(b, c, e, d) { var a = Math.ceil(c / 4); foodworld_bldselect_starter += b; if (foodworld_bldselect_starter < 1) {
    foodworld_bldselect_starter = 1;
} if (foodworld_bldselect_starter >= a) {
    foodworld_bldselect_starter = a;
} openFoodworldBuildingSelect(e, d); showDiv("foodworld_selection_navi_top"); showDiv("foodworld_selection_navi_down"); if (foodworld_bldselect_starter == 1) {
    hideDiv("foodworld_selection_navi_top");
} if (foodworld_bldselect_starter == a) {
    hideDiv("foodworld_selection_navi_down");
} }
function closeFoodworldBuildingSelect() { hideDiv("food_buildinginner_select"); hideDiv("food_buildinginner_select_transp"); }
function closeFoodworldBuilding() { hideDiv("food_buildinginner_transp"); hideDiv("food_buildinginner"); }
var chairsize = 2;
function createFoodWorldTables() { var c = ""; for (var b = 0; b < 5; b++) {
    c += '<div class="foodworldtable' + b + '" id="foodworldtable' + b + '">';
    c += '  <div class="blackbox" id="foodworldtable' + b + '_tt"></div>';
    c += '  <div class="blackbox" id="foodworldtable' + b + '_remain"></div>';
    c += "</div>";
    c += '<div class="foodworldchairs' + b + '">';
    for (var a = 1; a <= chairsize; a++) {
        c += '<div class="foodworldchair' + a + '" id="foodworldchair' + b + "_" + a + '">';
        c += ' <div id="foodworldchair' + b + "_" + a + '_remain" class="blackbox" style="display:none; position:absolute; top:-20px; left:-20px;"></div>';
        c += ' <div class="foodworldchair_ready link" id="foodworldchair' + b + "_" + a + "_ready\" onclick=\"foodworldAction('cash',0," + b + "," + a + ');"></div>';
        c += ' <div class="foodworldchair_touch" id="foodworldchair' + b + "_" + a + '_touch" onclick="dropFoodworldFarmiTouch(' + b + "," + a + ');"></div>';
        c += ' <div class="foodworldchair_tip" id="foodworldchair' + b + "_" + a + '_tip"></div>';
        c += "</div>";
    }
    c += "</div>";
} $("food_tables").innerHTML = c; updateFoodWorldTables(); }
function updateFoodWorldTables() { for (var c = 0; c < 5; c++) {
    if (!foodworldtables[c]["locked"]) {
        showDiv("foodworldtable" + c);
        hideDiv("foodworldtable" + c + "_remain");
        $("foodworldtable" + c).removeClassName("foodworldtable" + c + "_ready");
        $("foodworldtable" + c + "_remain").innerHTML = "";
        $("foodworldtable" + c).removeClassName("link");
        for (var a = 1; a <= chairsize; a++) {
            if ($("foodworldchair" + c + "_" + a)) {
                Droppables.remove("foodworldchair" + c + "_" + a);
            }
        }
        for (var a = 1; a <= chairsize; a++) {
            showDiv("foodworldchair" + c + "_" + a);
            hideDiv("foodworldchair" + c + "_" + a + "_ready");
            $("foodworldchair" + c + "_" + a + "_ready").onmouseover = new Function("");
            $("foodworldchair" + c + "_" + a + "_ready").onmouseout = new Function("");
            $("foodworldchair" + c + "_" + a).className = "foodworldchair" + a;
            $("foodworldchair" + c + "_" + a).onmouseover = new Function("");
            $("foodworldchair" + c + "_" + a).onmouseout = new Function("");
            if (!foodworldtables[c]["chairs"][a]["id"] && !foodworldtables[c]["block"]) {
                Droppables.add("foodworldchair" + c + "_" + a, { accept: "foodworldfarmi", hoverclass: "foodworldchairhover", onDrop: droppedFoodworldFarmi });
            }
            else {
                if (foodworldtables[c]["chairs"][a]["remain"] > 0) {
                    $("foodworldchair" + c + "_" + a).onmouseover = new Function("showDiv('foodworldchair" + c + "_" + a + "_remain')");
                    $("foodworldchair" + c + "_" + a).onmouseout = new Function("hideDiv('foodworldchair" + c + "_" + a + "_remain')");
                    var l = foodworldtables[c]["chairs"][a]["id"];
                    for (var h = 0; h < foodworldfarmis.length; h++) {
                        if (foodworldfarmis[h]["id"] == l) {
                            $("foodworldchair" + c + "_" + a).className = "foodworldchair" + a + " food_farmi" + foodworldfarmis[h]["img"] + "_2_" + a;
                            break;
                        }
                    }
                    var e = new Array;
                    e.i = c;
                    e.j = a;
                    foodworldSetTimer("chair" + c + "_" + a, remainFoodworldChair, e);
                }
                if (foodworldtables[c]["chairs"][a]["ready"] == 1) {
                    var l = foodworldtables[c]["chairs"][a]["id"];
                    for (var h = 0; h < foodworldfarmis.length; h++) {
                        if (foodworldfarmis[h]["id"] == l) {
                            showDiv("foodworldchair" + c + "_" + a + "_ready");
                            var b = '<div style="display:none; white-space:nowrap; position:absolute; bottom:35px; left:-20px;" class="blackbox" id="foodworldchair' + c + "_" + a + '_ready_tt">';
                            b += "  <div>" + formatPrice(foodworldfarmis[h]["price"]) + "</div>";
                            if (foodworld_bonus.bonus) {
                                questbonus = Math.ceil(foodworldfarmis[h]["price"] * (foodworld_bonus.bonus / 100));
                                b += '<div style="color:green;">+' + formatPrice(questbonus) + "&nbsp;" + t_foodworld_quest_bonus + "</div>";
                            }
                            if (specialbonus && specialbonus.data && specialbonus.data.foodworld && specialbonus.data.foodworld.farmis && specialbonus.data.remain > 0) {
                                var d = (foodworldfarmis[h]["price"] * specialbonus.data.foodworld.farmis);
                                if (foodworld_bonus.bonus && questbonus) {
                                    d += questbonus;
                                }
                                b += '<div style="color:green;">+' + formatPrice(d) + "&nbsp;" + t_specialbonus_money_bonus + "</div>";
                            }
                            b += "</div>";
                            $("foodworldchair" + c + "_" + a + "_ready").innerHTML = b;
                            $("foodworldchair" + c + "_" + a + "_ready").className = "food_farmi" + foodworldfarmis[h]["img"] + "_4_" + a;
                            $("foodworldchair" + c + "_" + a + "_ready").onmouseover = new Function("showDiv('foodworldchair" + c + "_" + a + "_ready_tt')");
                            $("foodworldchair" + c + "_" + a + "_ready").onmouseout = new Function("hideDiv('foodworldchair" + c + "_" + a + "_ready_tt')");
                            break;
                        }
                    }
                }
            }
        }
        if (foodworldtables[c]["block"] == 1) {
            $("foodworldtable" + c).onmouseover = new Function("showDiv('foodworldtable" + c + "_tt')");
            $("foodworldtable" + c).onmouseout = new Function("hideDiv('foodworldtable" + c + "_tt')");
            $("foodworldtable" + c).onclick = new Function("buyFoodworldTable(" + c + ")");
            var b = "";
            if (foodworldtables[c]["cost"]) {
                b += "<div>" + foodworld_buy + "</div>";
            }
            if (foodworldtables[c]["coins"]) {
                b += "<div>" + foodworld_rent + "</div>";
            }
            $("foodworldtable" + c + "_tt").innerHTML = b;
            $("foodworldtable" + c).addClassName("link");
        }
        else {
            $("foodworldtable" + c).addClassName("foodworldtable" + c + "_ready");
        }
        if (foodworldtables[c]["remain"]) {
            $("foodworldtable" + c).onmouseover = new Function("showDiv('foodworldtable" + c + "_remain')");
            $("foodworldtable" + c).onmouseout = new Function("hideDiv('foodworldtable" + c + "_remain')");
            var e = new Array;
            e.i = c;
            foodworldSetTimer("table" + c, remainFoodworldTable, e);
        }
    }
    else {
        hideDiv("foodworldtable" + c);
        for (var a = 1; a <= chairsize; a++) {
            hideDiv("foodworldchair" + c + "_" + a);
        }
    }
} }
function buyFoodworldTable(d) { var c = foodworld_buytable_head; var a = str_replace("%COST%", formatNumber(foodworldtables[d]["cost"]) + "&nbsp;" + gamecurrency, foodworld_buytable_body); if (foodworldtables[d]["coins"] > 0) {
    c = foodworld_renttable_head;
    a = str_replace("%COINS%", foodworldtables[d]["coins"] + "&nbsp;" + t_coins, foodworld_renttable_body);
    a = str_replace("%TIME%", formatTime(foodworldtables[d]["duration"]), a);
} var b = "<div>" + a + "</div>"; var e = "foodworldAction('buytable'," + foodworldtables[d]["id"] + ")"; globalcommitbox(c, b, e); }
function remainFoodworldTable(d, b) { var a = b.i; var c = foodworldtables[a]["remain"]; c--; $("foodworldtable" + a + "_remain").innerHTML = formatTime(c); if (c < 1) {
    foodworldClearTimer(d);
    foodworldtables[a]["block"] = 1;
    delete foodworldtables[a]["remain"];
    updateFoodWorldTables();
} foodworldtables[a]["remain"] = c; }
function remainFoodworldChair(h, c) { var b = c.i; var a = c.j; var e = foodworldtables[b]["chairs"][a]["remain"]; e--; $("foodworldchair" + b + "_" + a + "_remain").innerHTML = formatTime(e); for (var d = 0; d < foodworldfarmis.length; d++) {
    if (foodworldfarmis[d]["id"] == foodworldtables[b]["chairs"][a]["id"]) {
        $("foodworldchair" + b + "_" + a).className = "foodworldchair" + a + " food_farmi" + foodworldfarmis[d]["img"] + "_2_" + a;
        break;
    }
} if (e < 1) {
    foodworldClearTimer(h);
    delete foodworldtables[b]["chairs"][a]["remain"];
    foodworldtables[b]["chairs"][a]["ready"] = 1;
    $("foodworldchair" + b + "_" + a).className = "foodworldchair" + a;
    updateFoodWorldTables();
} foodworldtables[c.i]["chairs"][c.j]["remain"] = e; }
function createFoodworldFarmis() { hideDiv("food_cart"); if (foodworldfarmis.length > 0) {
    var d = "";
    for (var c = 0; c < foodworldfarmis.length; c++) {
        if (foodworldfarmis[c] && foodworldfarmis[c]["status"] == 0) {
            d += '<div id="foodworldfarmi' + c + '" class="link foodworldfarmi food_farmi' + foodworldfarmis[c]["img"] + '_1" onmouseover="showDiv(\'foodworldfarmi' + c + "tt');\" onmouseout=\"hideDiv('foodworldfarmi" + c + 'tt\');" onclick="showFoodworldFarmiCart(' + c + ')">';
            d += '  <div class="foodworldfarmi_tt" id="foodworldfarmi' + c + 'tt">';
            d += '  <div style="border-bottom:1px solid #000; padding:0px 0 5px; margin-bottom:5px;">';
            for (var b in foodworldfarmis[c]["products"]) {
                d += '<div style="float:left; width:15px;" class="kp' + b + '"></div>';
                var a = "";
                if (checkRackItem(b) < foodworldfarmis[c]["products"][b]) {
                    a = "important";
                }
                d += '<div style="float:left; margin-left:5px; width:180px;" class="' + a + '">' + foodworldfarmis[c]["products"][b] + "x&nbsp;" + produkt_name[b] + "</div>";
                d += '<div style="clear:both;"></div>';
            }
            d += "    </div>";
            d += '    <div style="border-bottom:1px solid #000; padding:0px 0 5px; margin-bottom:5px;">' + formatTime(foodworldfarmis[c]["duration"]) + "</div>";
            d += '    <div class="big">' + formatPrice(foodworldfarmis[c]["price"]) + "</div>";
            if (foodworld_bonus.bonus) {
                questbonus = Math.ceil(foodworldfarmis[c]["price"] * (foodworld_bonus.bonus / 100));
                d += '<div style="font-weight:bold; color:green;">+' + formatPrice(questbonus) + "&nbsp;" + t_foodworld_quest_bonus + "</div>";
            }
            if (specialbonus && specialbonus.data && specialbonus.data.foodworld && specialbonus.data.foodworld.farmis && specialbonus.data.remain > 0) {
                var e = foodworldfarmis[c]["price"] * specialbonus.data.foodworld.farmis;
                if (foodworld_bonus.bonus && questbonus) {
                    e += questbonus;
                }
                d += '<div style="font-weight:bold; color:green;">+' + formatPrice(e) + "&nbsp;" + t_specialbonus_money_bonus + "</div>";
            }
            d += '    <div class="foodworld_farmi_bubble_zipfel"></div>';
            d += "  </div>";
            d += "</div>";
        }
    }
    d += '<div class="clear"></div>';
    $("food_farmis").innerHTML = d;
}
else {
    $("food_farmis").innerHTML = "";
} }
function showFoodworldFarmiCart(a) { var e = -1; var r = -1; for (var q = 0; q < foodworldfarmis.length; q++) {
    if (q < a && foodworldfarmis[q]["status"] == "0") {
        e = q;
    }
    else {
        if (q > a && foodworldfarmis[q]["status"] == "0" && r == -1) {
            r = q;
        }
    }
} if (e > -1) {
    showDiv("food_cart_pre");
    $("food_cart_pre").onclick = new Function("showFoodworldFarmiCart(" + e + ")");
}
else {
    hideDiv("food_cart_pre");
} if (r > -1) {
    showDiv("food_cart_next");
    $("food_cart_next").onclick = new Function("showFoodworldFarmiCart(" + r + ")");
}
else {
    hideDiv("food_cart_next");
} if (foodworldfarmis[a]) {
    foodworld_touch_farmi = a;
    var s = "";
    var d = 0;
    for (var t in foodworldfarmis[a]["products"]) {
        s += '<div style="margin-bottom:4px;">';
        s += '  <div style="float:left; width:15px;" class="kp' + t + '"></div>';
        var l = "";
        var v = "";
        if (checkRackItem(t) < foodworldfarmis[a]["products"][t]) {
            v = "link important";
            var h = 1;
            for (var b in foodworld_products) {
                for (var c in foodworld_products[b].out) {
                    if (c == t) {
                        h = foodworld_products[b].pos;
                    }
                }
            }
            l = "onclick=\"foodworldAction('open'," + h + ')"';
            d = 1;
        }
        s += '  <div style="float:left; margin-left:5px; width:250px; font-size:16px; font-weight:bold;" class="' + v + '" ' + l + ">" + foodworldfarmis[a]["products"][t] + "x&nbsp;" + produkt_name[t] + "</div>";
        s += '  <div style="clear:both;"></div>';
        s += "</div>";
    }
    $("food_cart_products").innerHTML = s;
    showDiv("food_buildinginner_transp");
    showDiv("food_cart");
    if (!d) {
        showDiv("food_cart_button_set");
        $("food_cart_button_set").onclick = new Function("dragFoodworldFarmiTouch(" + a + "); closeFoodworldFarmiCart();");
    }
    else {
        hideDiv("food_cart_button_set");
    }
    $("food_cart_button_kick").onclick = new Function("foodworldAction('kick'," + foodworldfarmis[a]["id"] + ")");
    var w = "";
    if (foodworld_bonus.bonus) {
        questbonus = Math.ceil(foodworldfarmis[a]["price"] * (foodworld_bonus.bonus / 100));
        w += '<div style="font-size:11px;">+' + formatPrice(questbonus) + "&nbsp;" + t_foodworld_quest_bonus + "</div>";
    }
    var u = "";
    if (specialbonus && specialbonus.data && specialbonus.data.foodworld && specialbonus.data.foodworld.farmis && specialbonus.data.remain > 0) {
        price = foodworldfarmis[a]["price"] * specialbonus.data.foodworld.farmis;
        if (foodworld_bonus.bonus && questbonus) {
            price += questbonus;
        }
        u += '<div style="font-size:11px;">+' + formatPrice(price) + "&nbsp;" + t_specialbonus_money_bonus + "</div>";
    }
    $("food_cart_sum").innerHTML = formatPrice(foodworldfarmis[a]["price"]) + w + u;
    $("food_cart_time").innerHTML = formatTime(foodworldfarmis[a]["duration"]);
} }
function closeFoodworldFarmiCart() { hideDiv("food_cart"); hideDiv("food_buildinginner_transp"); }
function showPossibleChairs() { for (var b = 0; b < 5; b++) {
    for (var a = 1; a <= chairsize; a++) {
        if (!foodworldtables[b]["block"] && !foodworldtables[b]["chairs"][a]["remain"] && !foodworldtables[b]["chairs"][a]["ready"]) {
            $("foodworldchair" + b + "_" + a).addClassName("foodworldchairover");
        }
    }
} }
function hidePossibleChairs() { for (var b = 0; b < 5; b++) {
    for (var a = 1; a <= chairsize; a++) {
        $("foodworldchair" + b + "_" + a).removeClassName("foodworldchairover");
    }
} }
function droppedFoodworldFarmi(b, l) { var d = str_replace("foodworldfarmi", "", b.id); var h = foodworldfarmis[d]["id"]; var c = str_replace("foodworldchair", "", l.id); var e = c.substring(0, 1); var a = c.substring(2, 3); foodworldAction("dropped", h, e, a); }
function moveFoodworldFarmi(d, b) { var c = 0; var a = 0; if ((d == 0 && b == 1) || (d == 2 && b == 1) || (d == 3 && b == 1)) {
    a = -400;
} if ((d == 0 && b == 2) || (d == 1 && b == 1)) {
    c = -400;
} if ((d == 1 && b == 2) || (d == 2 && b == 2)) {
    a = 400;
} if ((d == 3 && b == 2)) {
    c = 400;
} if ((d == 0 && b == 1) || (d == 2 && b == 1) || (d == 3 && b == 1)) {
    o = 1;
} if ((d == 1 && b == 1) || (d == 0 && b == 2)) {
    o = 4;
} if ((d == 1 && b == 2) || (d == 2 && b == 2)) {
    o = 3;
} if ((d == 3 && b == 2)) {
    o = 4;
} $("foodworldchair" + d + "_" + b + "_ready").className = str_replace("_4_" + b, "_3_" + o, $("foodworldchair" + d + "_" + b + "_ready").className); new Effect.Move("foodworldchair" + d + "_" + b + "_ready", { x: c, y: a, duration: getRandom(3, 6), transition: Effect.Transitions.linear, mode: "relative", afterFinish: function () { hideDiv("foodworldchair" + d + "_" + b + "_ready"); Droppables.add("foodworldchair" + d + "_" + b, { accept: "foodworldfarmi", hoverclass: "foodworldchairhover", onDrop: droppedFoodworldFarmi }); createFoodWorldTables(); } }); }
function dragFoodworldFarmiTouch(b) { deselectFoodworldFarmiTouch(); foodworld_touch_farmi = b; $("foodworldfarmi" + b).addClassName("foodworldselectfarmitouch"); for (var b = 0; b < 5; b++) {
    for (var a = 1; a <= 4; a++) {
        if (!foodworldtables[b]["block"] && !foodworldtables[b]["chairs"][a]["id"]) {
            showDiv("foodworldchair" + b + "_" + a + "_touch");
        }
    }
} if (parseInt(foodworldfarmiscount, 10) < 10) {
    $("foodworld_placeseat_tutorial").setStyle({ display: "block" });
} }
function dropFoodworldFarmiTouch(b, a) { $("foodworld_placeseat_tutorial").hide(); var c = foodworldfarmis[foodworld_touch_farmi]["id"]; foodworldAction("dropped", c, b, a); }
function deselectFoodworldFarmiTouch() { $("foodworld_placeseat_tutorial").hide(); foodworld_touch_farmi = -1; for (var b = 0; b < foodworldfarmis.length; b++) {
    if ($("foodworldfarmi" + b)) {
        $("foodworldfarmi" + b).removeClassName("foodworldselectfarmitouch");
    }
} for (var b = 0; b < 5; b++) {
    for (var a = 1; a <= 4; a++) {
        hideDiv("foodworldchair" + b + "_" + a + "_touch");
    }
} }
function setFoodworldDialog(q, n) { var l = ""; var t = ""; if (q == "quest") {
    for (var h = 0; h < foodworld_quest.config["in"].length; h++) {
        var n = foodworld_quest.config["in"][h][0];
        var m = foodworld_quest.config["in"][h][1];
        var c = 0;
        if (foodworld_quest.entries[n]) {
            c = foodworld_quest.entries[n];
        }
        var r = "";
        var u = "setFoodworldDialog('questentry', " + n + ")";
        var s = checkRackItem(n);
        if (!s) {
            r = "important";
            u = "";
        }
        if (c == m) {
            u = "";
        }
        var a = (Math.ceil(c * 100 / m)) + 8;
        l += '<div class="foodworld_questbar_line">';
        l += '  <div class="kp' + n + ' foodworld_questbar_icon"></div>';
        l += '  <div class="foodworld_questbar link" onclick="' + u + '" onmouseover="showDiv(\'foodworld_questbar_tt' + foodworld_quest.questid + "_" + n + "')\" onmouseout=\"hideDiv('foodworld_questbar_tt" + foodworld_quest.questid + "_" + n + "')\">";
        l += '    <div class="foodworld_questbar_inner" style="width:' + a + 'px"></div>';
        l += "  </div>";
        l += '  <div class="foodworld_questbar_amount ' + r + '">' + c + "/" + m + "</div>";
        if (r != "") {
            l += '<div class="clear"></div><div class="important" style="text-align:left; margin-left:20px;">' + product_notavailable_info + "</div>";
        }
        if (c < m && s > 0) {
            l += '  <button type="button" class="foodworld_questbar_button button_new link" onclick="' + u + '">' + t_inner_feedsubmit + "</button>";
        }
        l += '  <div class="clear"></div>';
        l += '  <div class="foodworld_questbar_tt ttbox" id="foodworld_questbar_tt' + foodworld_quest.questid + "_" + n + '">' + produkt_name[n] + "</div>";
        l += "</div>";
    }
    if (foodworld_quest.config.reward) {
        l += '<div style="margin-top:10px;">' + windmill_out + "</div>";
        if (foodworld_quest.config.reward.points) {
            l += '<div style="margin-top:5px;">' + foodworld_quest.config.reward.points + "&nbsp;" + t_points + "</div>";
        }
        if (foodworld_quest.config.reward.building) {
            l += '<div style="margin-top:5px;">' + foodworld_quest.config.reward.building + "</div>";
        }
        if (foodworld_quest.config.reward.bonus) {
            l += '<div style="margin-top:5px;">' + str_replace("%PERCENT%", foodworld_quest.config.reward.bonus, t_foodworld_reward_bonus) + "</div>";
        }
    }
    if (foodworld_quest.nextbuilding) {
        for (var h in foodworld_quest.nextbuilding) {
            if (foodworld_quest.nextbuilding[h] > 0) {
                var e = str_replace("%COUNT%", foodworld_quest.nextbuilding[h], t_quest_foodworld_nextbuilding);
                e = str_replace("%BUILDING%", h, e);
                l += '<div style="margin-top:5px;">' + e + "</div>";
            }
        }
    }
    t = t_quest_foodworld + "&nbsp" + foodworld_quest.questid + " / " + foodworld_maxquest;
    globalBox(t, l, 0, 0, 0, 1);
} if (q == "questentry") {
    for (var h = 0; h < foodworld_quest.config["in"].length; h++) {
        if (n == foodworld_quest.config["in"][h][0]) {
            var m = 0;
            if (foodworld_quest.entries[n]) {
                m = foodworld_quest.entries[n];
            }
            var b = (foodworld_quest.config["in"][h][1] - m);
            var d = { pid: n };
            globalcommitbox(t_foodworld_questbox_entry_head, htmlEntryLine(d), 0, 0, 1);
            $("dialog_entryline_number").focus();
            $("dialog_entryline_number").onchange = new Function("chkfoodworldQuestEntry(" + n + ", " + b + ")");
            $("dialog_entryline_number").onkeyup = new Function("chkfoodworldQuestEntry(" + n + ", " + b + ")");
            chkfoodworldQuestEntry(n, b);
            break;
        }
    }
} }
function chkfoodworldQuestEntry(a, b) { var c = { stockamount: checkRackItem(a), rest: b, click: "foodworldQuestEntry(" + a + ")" }; checkEntryLine(c); }
function foodworldQuestEntry(a) { if (!$("dialog_entryline_number").value) {
    return false;
} var b = $("dialog_entryline_number").value; foodworldAction("questentry", a, b); }
function foodworldSetTimer(a, c, b) { if (!ftimer[a]) {
    if (typeof c == "function") {
        ftimer[a] = window.setInterval(function () { c(a, b); }, 1000);
    }
} }
function foodworldClearTimer(a) { if (ftimer[a]) {
    window.clearInterval(ftimer[a]);
    ftimer[a] = 0;
    if (fremains[a]) {
        fremains[a] = 0;
    }
} }
function foodworldShowHelp() { showDiv("food_minihelp_content"); }
function forestryAutoplant() { var c = '<div style="margin-bottom:10px;">' + t_forestry_autoplantinfo + "</div>"; c += "<select id='forestry_autoplant_pid'>"; for (var a in forestry_stock[1]) {
    c += "<option value='" + a + "'>" + produkt_name_forestry[a] + "</option>";
} c += "</select>"; var b = "forestryAjaxAction('autoplant')"; globalcommitbox(t_forestry_autoplantheadline, c, b); if ($("globalbox_char")) {
    $("globalbox_char").className = "globalbox_plantbot";
    hideDiv("globalbox_charani");
} }
function openForestryTutorial(a) { if (!a) {
    a = 1;
} hideDiv("forestry_questlist_container"); $("forestry_tutorial_headline").innerHTML = forestry_tutorial_head[a]; var b = ""; b += '<div id="forestry_tutorial_img' + a + '"></div>'; b += forestry_tutorial_content[a]; $("forestry_tutorial_content").innerHTML = b; showDiv("forestry_productiondialog_transp"); showDiv("forestry_tutorial_container"); }
function closeForestryTutorial() { hideDiv("forestry_productiondialog_transp"); hideDiv("forestry_tutorial_container"); }
function forestryUpdate() { var c = new Array(); for (var b = 1; b <= forestry_maxpos; b++) {
    if (forestry_cache_area[b]) {
        for (var a = 0; a < forestry_area.length; a++) {
            if (forestry_area[a]) {
                if (forestry_area[a]["position"] == b) {
                    var c = forestry_area[a];
                    var d = a;
                    break;
                }
            }
        }
        if (!c.category) {
            forestryEmptyZone(b);
        }
        else {
            if (c.category == 0 || c.block > 0) {
                forestryWeedZone(d);
            }
            else {
                forestryProductZone(d);
            }
        }
    }
} }
function forestryEmptyZone(a) { if (forestry_area_run[a]) {
    window.clearInterval(forestry_area_run[a]);
    forestry_area_run[a] = 0;
    forestry_area_time[a] = 0;
    forestry_area_pid[a] = 0;
} $("forestry_pos" + a).onclick = new Function("forestryPosOption(1," + a + ")"); $("forestry_pos" + a).onmouseover = new Function("forestrySetStatus(" + a + ",1)"); $("forestry_pos" + a).onmouseout = new Function("forestrySetStatus(" + a + ",0)"); $("forestry_pos" + a).className = "forestry_pos link"; hideDiv("forestry_pos_block" + a); hideDiv("forestry_pos_info" + a); hideDiv("forestry_pos_load" + a); hideDiv("forestry_pos_water" + a); }
function forestryWeedZone(a) { if (forestry_area[a]) {
    var c = " forestry_forest_weedblock1";
    if (forestry_area[a]["block"] > 0) {
        $("forestry_pos" + forestry_area[a]["position"]).className += " tree" + forestry_area[a]["productid"] + "_3";
        $("forestry_pos_block" + forestry_area[a]["position"]).style.background = "url(" + imgpath + "forestry/blocker" + forestry_area[a]["block"] + ".gif)";
        $("forestry_pos_info" + forestry_area[a]["position"]).innerHTML = forestry_quests_blockerinfo;
        showDiv("forestry_pos_block" + forestry_area[a]["position"]);
    }
    if (forestry_area[a]["category"] == 0) {
        $("forestry_pos" + forestry_area[a]["position"]).className += " tree" + forestry_area[a]["productid"];
        $("forestry_pos_info" + forestry_area[a]["position"]).innerHTML = forestry_quests_weedinfo;
    }
    var d = "";
    if (forestry_area[a]["block"] > 0) {
        d = "<div class='headline'>" + forestry_remove_blocker + "</div>";
    }
    d += "<div style='float:left'>" + cityadcost + "</div>";
    if (forestry_area[a]["block"] > 0) {
        d += "<div style='float:left' class='kp" + forestry_area[a]["blockproduct"][0] + "'></div>";
        d += "<div style='float:left'>&nbsp;" + forestry_area[a]["blockproduct"][1] + "x " + produkt_name[forestry_area[a]["blockproduct"][0]] + "</div>";
    }
    else {
        d += "<div style='float:left'><img src='" + imgpath + "money.gif' border='0' width='14px'></div>";
        d += "<div style='float:left'>&nbsp;" + forestry_area[a]["cost"] + "</div>";
    }
    d += "<div class='clear'></div>";
    var b = "forestryAjaxAction('deleteweed'," + forestry_area[a]["position"] + ")";
    if (forestry_area[a]["block"] > 0 && (checkRackItem(forestry_area[a]["blockproduct"][0]) < forestry_area[a]["blockproduct"][1])) {
        d += "<div class='important' style='margin-top:10px;'>" + product_notavailable_info + "</div>";
        b = 0;
    }
    $("forestry_pos" + forestry_area[a]["position"]).onclick = new Function('globalcommitbox("' + removeweedheadline + '","' + d + '","' + b + '")');
    $("forestry_pos" + forestry_area[a]["position"]).onmouseover = new Function("forestrySetStatus(" + forestry_area[a]["position"] + ",1,1); showDiv('forestry_pos_info" + forestry_area[a]["position"] + "')");
    $("forestry_pos" + forestry_area[a]["position"]).onmouseout = new Function("forestrySetStatus(" + forestry_area[a]["position"] + ",0,1); hideDiv('forestry_pos_info" + forestry_area[a]["position"] + "')");
} }
function forestryProductZone(a) { if (forestry_area[a]) {
    var b = forestry_area[a];
    forestryEmptyZone(b.position);
    $("forestry_pos" + b.position).onclick = new Function("forestryChkReady(" + b.position + "," + b.productid + ")");
    $("forestry_pos" + b.position).onmouseover = new Function("forestrySetStatus(" + b.position + ",1,1); showDiv('forestry_pos_info" + b.position + "')");
    $("forestry_pos" + b.position).onmouseout = new Function("forestrySetStatus(" + b.position + ",0,1); hideDiv('forestry_pos_info" + b.position + "')");
    forestry_area_time[b.position] = b.remain;
    forestry_area_run[b.position] = window.setInterval("forestryAreaRun(" + b.position + ")", 1000);
    forestry_area_watertime[b.position] = b.waterremain;
    forestry_area_pid[b.position] = b.productid;
    forestry_area_name[b.position] = b.name;
    forestryAreaRun(b.position);
} }
function forestrySetStatus(a, c, d) { if ($("forestry_pos" + a)) {
    $("forestry_pos_status" + a).className = str_replace(" forestry_forest_crop", "", $("forestry_pos_status" + a).className);
    $("forestry_pos_status" + a).className = str_replace(" forestry_forest_empty", "", $("forestry_pos_status" + a).className);
    $("forestry_pos_status" + a).className = str_replace(" forestry_forest_plant", "", $("forestry_pos_status" + a).className);
    if (d == 1) {
        var b = " forestry_forest_crop";
    }
    else {
        if (forestry_plant == 0) {
            var b = " forestry_forest_empty";
        }
        else {
            var b = " forestry_forest_plant";
        }
    }
    if (c == 1) {
        $("forestry_pos_status" + a).className += b;
    }
    else {
        $("forestry_pos_status" + a).className = str_replace(b, "", $("forestry_pos_status" + a).className);
    }
} }
function initForestry(c) { temp_reachlimit = new Array(); killGardenTimeruns(); time = new Array(); run = new Array(); if (guildquestrun) {
    window.clearInterval(guildquestrun);
} guildquestrun = 0; guildquesttime = 0; hideDiv("questboxtransp"); hideDiv("questbox"); closeFoodworld(); for (var b = 1; b <= 4; b++) {
    for (var a = 1; a <= 100; a++) {
        if (forestry_questdelay_run[b + "_" + a]) {
            window.clearInterval(forestry_questdelay_run[b + "_" + a]);
            forestry_questdelay_run[b + "_" + a] = 0;
            forestry_questdelay_time[b + "_" + a] = 0;
        }
    }
} if (premium == 1) {
    $("forestry_forest_button2").onclick = new Function("forestryAjaxAction('cropall')");
    if ($("forestry_forest_button6")) {
        $("forestry_forest_button6").onclick = new Function("forestryAutoplant()");
    }
    hideDiv("forestry_forest_button2_premium");
    if ($("forestry_forest_button6_premium")) {
        hideDiv("forestry_forest_button6_premium");
    }
    $("forestry_forest_button2_info").innerHTML = forestry_forestbutton2;
    if ($("forestry_forest_button6_info")) {
        $("forestry_forest_button6_info").innerHTML = forestry_forestbutton6;
    }
}
else {
    $("forestry_forest_button2").onclick = new Function();
    if ($("forestry_forest_button6")) {
        $("forestry_forest_button6").onclick = new Function();
    }
    $("forestry_forest_button2_info").innerHTML = forestry_forestbutton2 + "<br><br><div class='important'>" + inforequirepremium + "</div>";
    if ($("forestry_forest_button6_premium")) {
        $("forestry_forest_button6_info").innerHTML = forestry_forestbutton6 + "<br><br><div class='important'>" + inforequirepremium + "</div>";
    }
    showDiv("forestry_forest_button2_premium");
    if ($("forestry_forest_button6_info")) {
        showDiv("forestry_forest_button6_premium");
    }
} forestryAjaxAction("initforestry"); }
var forestry_achievements = [];
function initForestryResponse(b, a, G, u, N) { var A = _chkRequest(b); if (A != 0) {
    hideGlobalWait();
    if (a == "updatebuilding") {
        updatebuilding_block = 0;
    }
    if (a == "speedup" || a == "fertilize") {
        global_speedup_block = 0;
    }
    if (A[0] == 0) {
        globalerrorbox(A[1]);
        for (var U = 1; U <= forestry_maxpos; U++) {
            hideDiv("forestry_pos_load" + U);
        }
    }
    else {
        farm = 0;
        city = 0;
        hideDiv("reallocateanimals_symbol");
        hideDiv("reallocatebuilding_symbol");
        forestryClearAllTimer();
        closeMarket();
        closeForestryProductionBox();
        if (u > 0) {
            openForestryTutorial(u);
        }
        forestry_production_products = A[4];
        forestry_slots = A[11];
        closeForestrySelection();
        forestry_achievements = A[15];
        $("forestry_waterbonus_info").innerHTML = str_replace("%PERCENT%", A[12], $("forestry_waterbonus_info").innerHTML);
        if (A[13] && A[13].level) {
            levelupAlert(A[13].level, A[13].leveltitle);
        }
        var J = A[1];
        forestry_area = J;
        if (A[7] == 0) {
            forestryUpdate();
        }
        else {
            for (var U = 1; U <= forestry_maxpos; U++) {
                forestryEmptyZone(U);
            }
            for (var U = 0; U < J.length; U++) {
                if (J[U]) {
                    var G = J[U];
                    if (G.category == 0 || G.block > 0) {
                        forestryWeedZone(U);
                    }
                    else {
                        forestryProductZone(U);
                    }
                }
            }
        }
        if (A[9] == 1) {
            $("forestry_forest_button1").onclick = new Function("forestryWater()");
            hideDiv("forestry_forest_button1_info_locked");
        }
        else {
            $("forestry_forest_button1").onclick = new Function("");
            showDiv("forestry_forest_button1_info_locked");
        }
        var e = A[2];
        forestry_user_buildings = e;
        for (var U = 1; U <= 2; U++) {
            if (forestry_production_run[U]) {
                window.clearInterval(forestry_production_run[U]);
                forestry_production_run[U] = 0;
                forestry_production_time[U] = 0;
            }
            $("forestry_building_click" + U).onmouseover = new Function();
            $("forestry_building_click" + U).onmouseout = new Function();
            if ($("forestry_building_progress" + U)) {
                $("forestry_building_progress" + U).className = "";
            }
            if ($("forestry_building_progress_add" + U)) {
                hideDiv("forestry_building_progress_add" + U);
            }
        }
        forestry_production_run = new Array();
        for (var U in e) {
            if (e[U]) {
                var G = e[U];
                var M = 1;
                if (G.level >= 4) {
                    M = 3;
                }
                else {
                    if (G.level >= 2) {
                        M = 2;
                    }
                }
                $("forestry_stock" + (parseInt(G.position) + 1) + "_object").style.background = "url(" + imgpath + "forestry/stock" + (parseInt(G.position) + 1) + "_" + M + ".png)";
                if (G.locked == 1) {
                    $("forestry_building_click" + G.position).onclick = new Function();
                    if (G.position == 1) {
                        $("forestry_building_info" + G.position).innerHTML = forestry_bld1_info + '<br><br><div class="important">' + forestry_quests_locked + "</div>";
                    }
                    if (G.position == 2) {
                        $("forestry_building_info" + G.position).innerHTML = forestry_bld2_info + '<br><br><div class="important">' + forestry_quests_locked + "</div>";
                    }
                }
                else {
                    if (G.status > 0) {
                        if ($("forestry_building" + U)) {
                            $("forestry_building" + U).style.background = "url(" + imgpath + "forestry/building" + U + ".jpg)";
                        }
                        if (G.next) {
                            var d = "";
                            var c = "";
                            if (carpentry_bonus > 0) {
                                d = "*";
                                c = "<div class='bonusinfo'>" + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
                            }
                            showDiv("forestry_building" + G.position + "_update");
                            var C = "";
                            C += "<div style='float:left'>" + cityadcost + "</div>";
                            C += "<div style='float:left'><img src='" + imgpath + "money.gif' border='0' width='14px'></div>";
                            C += "<div style='float:left'>&nbsp;" + formatPrice(G.cost) + d + "</div>";
                            C += "<div class='clear'></div>";
                            var z = forestry_buildings[G.position][(parseInt(G.level) + parseInt(1))][2];
                            var E = forestry_buildings[G.position][(parseInt(G.level) + parseInt(1))][3];
                            if (z > 0) {
                                C += "<div style='margin:5px 0 0 0;'>" + str_replace("%PERCENT%", z, forestry_productionboni) + "</div>";
                            }
                            if (E > 0) {
                                C += "<div style='margin:5px 0 0 0;'>" + str_replace("%AMOUNT%", E, forestry_productioncapacity) + "</div>";
                            }
                            var K = "forestryAjaxAction('updatebuilding'," + G.position + ")";
                            $("forestry_building" + G.position + "_update").onclick = new Function('globalcommitbox("' + infoupdatebuilding + '","' + C + c + '","' + K + '")');
                        }
                        else {
                            hideDiv("forestry_building" + G.position + "_update");
                            $("forestry_building" + G.position + "_update").onclick = new Function();
                        }
                        var B = "";
                        for (var Q = 0; Q < G.level; Q++) {
                            B += '<img src="' + imgpath + 'star.png" border="0">';
                            if ($("forestry_building_update_level" + (Q + 1) + "_" + G.position)) {
                                showDiv("forestry_building_update_level" + (Q + 1) + "_" + G.position);
                            }
                        }
                        $("forestry_building" + G.position + "_stars").innerHTML = B;
                        $("forestry_building_click" + G.position).onclick = new Function();
                        var h = 0;
                        if (G.slots) {
                            for (var H in G.slots) {
                                if (G.slots[H]) {
                                    if (G.slots[H]["ready"] > 0) {
                                        if (G.slots[H]["ready"] == 1) {
                                            h = 1;
                                            break;
                                        }
                                        else {
                                            h = G.slots[H]["ready"];
                                        }
                                    }
                                }
                            }
                            for (var H in G.slots) {
                                if (G.slots[H]["ready"] > 1) {
                                    if (!ftimer["productionrun" + H + "_" + G.position]) {
                                        var W = new Array;
                                        W.position = G.position;
                                        W.slot = H;
                                        forestrySetTimer("productionrun" + H + "_" + G.position, forestryProductionRun, W);
                                        fremains["productionrun" + H + "_" + G.position] = G.slots[H]["remain"];
                                    }
                                }
                            }
                        }
                        if (h) {
                            if (h == 1) {
                                hideDiv("forestry_building" + G.position + "_update");
                                $("forestry_building" + G.position + "_production_tooltip_time").innerHTML = statusProductionComplete;
                                $("forestry_building_progress" + G.position).className = "forestry_building_progress_finish" + G.position;
                            }
                            else {
                                if (h == 2) {
                                    hideDiv("forestry_building" + G.position + "_update");
                                    $("forestry_building_progress" + G.position).className = "forestry_building_progress_go" + G.position;
                                    if ("forestry_building_progress_add" + G.position) {
                                        showDiv("forestry_building_progress_add" + G.position);
                                    }
                                }
                            }
                            if (G.position == 1 || G.position == 2) {
                                $("forestry_building_click" + G.position).onclick = new Function("showForestryProductionBox(" + G.position + ")");
                            }
                        }
                        else {
                            $("forestry_building_click" + G.position).onclick = new Function("showForestryProductionBox(" + G.position + ")");
                        }
                    }
                    else {
                        var d = "";
                        var c = "";
                        if (carpentry_bonus > 0) {
                            d = "*";
                            c = "<div class='clear'></div><div class='bonusinfo'>" + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
                        }
                        if (G.position == 1) {
                            var t = forestry_build_bld1;
                        }
                        else {
                            if (G.position == 2) {
                                var t = forestry_build_bld2;
                            }
                        }
                        var C = "<div style='float:left'>" + cityadcost + "</div>";
                        C += "<div style='float:left'><img src='" + imgpath + "money.gif' border='0' width='14px'></div>";
                        C += "<div style='float:left'>&nbsp;" + formatPrice(G.cost) + d + "</div>";
                        var K = "forestryAjaxAction('updatebuilding'," + G.position + ")";
                        $("forestry_building_click" + G.position).onclick = new Function('globalcommitbox("' + t + '","' + C + c + '","' + K + '")');
                    }
                    if (G.position == 1) {
                        $("forestry_building_info" + G.position).innerHTML = forestry_bld1_info;
                    }
                    if (G.position == 2) {
                        $("forestry_building_info" + G.position).innerHTML = forestry_bld2_info;
                    }
                    for (var S = 0; S < 10; S++) {
                        if (forestry_production_run[S]) { }
                    }
                }
            }
        }
        forestry_stock = A[3];
        buildForestryStocks();
        var O = A[5];
        forestry_farmis = O;
        var D = "";
        for (var U = 1; U <= 10; U++) {
            D += '<div class="forestry_farmi link" id="forestry_farmi' + U + '">';
            D += '  <div class="forestry_farmi_info blackbox" id="forestry_farmi_info' + U + '">';
            for (Q = 1; Q <= 10; Q++) {
                D += '<div id="forestry_farmi_info_product_line' + U + "_" + Q + '">';
                D += '  <div class="forestry_farmi_info_productimg" id="forestry_farmi_info_productimg' + U + "_" + Q + '"></div>';
                D += '  <div class="forestry_farmi_info_amount" id="forestry_farmi_info_amount' + U + "_" + Q + '"></div>';
                D += '  <div class="forestry_farmi_info_product" id="forestry_farmi_info_product' + U + "_" + Q + '"></div>';
                D += '  <div class="clear"></div>';
                D += "</div>";
            }
            D += '    <div class="forestry_farmi_info_price">' + farmcartsum + '&nbsp;<span id="forestry_farmi_info_price' + U + '"></span></div>';
            D += '    <div class="forestry_farmi_info_points">' + farmicartpoints + '&nbsp;<span id="forestry_farmi_info_points' + U + '"></span></div>';
            D += '    <div class="forestry_farmi_info_buttonline" id="forestry_farmi_info_buttonline' + U + '">';
            D += '      <button style="margin:0 4px 0 0;" class="main_float_right link" id="forestry_farmi_info_button1' + U + '" type="button">' + farmcartyes + "</button>";
            D += '      <button style="margin:0 4px 0 0; color:#f00; font-weight:bold;" class="main_float_right link" id="forestry_farmi_info_button2' + U + '" type="button">' + farmcartno + "</button>";
            D += '      <div class="clear"></div>';
            D += "    </div>";
            D += '    <div class="forestry_farmi_bubble_zipfel"></div>';
            D += "  </div>";
            D += "</div>";
        }
        D += '<div class="clear"></div>';
        $("forestry_farmiline").innerHTML = D;
        for (var U = 1; U <= 10; U++) {
            if ($("forestry_farmi" + U)) {
                hideDiv("forestry_farmi" + U);
            }
        }
        var P = 1;
        for (var U = 0; U < O.length; U++) {
            if ($("forestry_farmi" + P)) {
                $("forestry_farmi" + P).className += " forestry_farmi" + O[U]["pic"];
                $("forestry_farmi" + P).onmouseover = new Function("showDiv('forestry_farmi_info" + P + "')");
                $("forestry_farmi" + P).onmouseout = new Function("hideDiv('forestry_farmi_info" + P + "')");
                for (var Q = 1; Q <= 10; Q++) {
                    if ($("forestry_farmi_info_product_line" + P + "_" + Q)) {
                        hideDiv("forestry_farmi_info_product_line" + P + "_" + Q);
                    }
                    if ($("forestry_farmi_info_product" + P + "_" + Q)) {
                        $("forestry_farmi_info_product" + P + "_" + Q).className = "forestry_farmi_info_product";
                    }
                    if ($("forestry_farmi_info_amount" + P + "_" + Q)) {
                        $("forestry_farmi_info_amount" + P + "_" + Q).className = "forestry_farmi_info_amount";
                    }
                    if ($("forestry_farmi_info_productimg" + P + "_" + Q)) {
                        $("forestry_farmi_info_productimg" + P + "_" + Q).className = "forestry_farmi_info_productimg";
                    }
                }
                var v = 1;
                var I = 1;
                for (var Q = 0; Q < O[U]["products"].length; Q++) {
                    var L = O[U]["products"][Q]["product"];
                    var m = O[U]["products"][Q]["amount"];
                    var s = O[U]["products"][Q]["name"];
                    if ($("forestry_farmi_info_product_line" + P + "_" + I)) {
                        var F = 0;
                        for (var T = 1; T <= 4; T++) {
                            if (forestry_stock[T]) {
                                if (forestry_stock[T][L]) {
                                    if (parseInt(forestry_stock[T][L]["amount"]) >= parseInt(m)) {
                                        F = 1;
                                    }
                                }
                            }
                        }
                        if (F == 1) {
                            $("forestry_farmi_info_product" + P + "_" + I).className = str_replace("forestry_farmi_uncomplete", "", $("forestry_farmi_info_product" + P + "_" + I).className);
                            $("forestry_farmi_info_amount" + P + "_" + I).className = str_replace("forestry_farmi_uncomplete", "", $("forestry_farmi_info_amount" + P + "_" + I).className);
                            $("forestry_farmi_info_product_line" + P + "_" + I).onclick = new Function();
                        }
                        else {
                            v = 0;
                            $("forestry_farmi_info_product" + P + "_" + I).className += " forestry_farmi_uncomplete";
                            $("forestry_farmi_info_amount" + P + "_" + I).className += " forestry_farmi_uncomplete";
                            var w = 1;
                            for (var R in forestry_production_products) {
                                if (forestry_production_products[R][L]) {
                                    w = (R - 2);
                                }
                            }
                            $("forestry_farmi_info_product_line" + P + "_" + I).onclick = new Function("showForestryProductionBox(" + w + ")");
                        }
                        $("forestry_farmi_info_productimg" + P + "_" + I).className += " f_m_symbol" + L;
                        $("forestry_farmi_info_product" + P + "_" + I).innerHTML = s;
                        $("forestry_farmi_info_amount" + P + "_" + I).innerHTML = m + "x";
                        showDiv("forestry_farmi_info_product_line" + P + "_" + I);
                        I++;
                    }
                }
                $("forestry_farmi_info_price" + P).innerHTML = O[U]["price"] + "&nbsp;" + gamecurrency;
                $("forestry_farmi_info_points" + P).innerHTML = O[U]["points"];
                if (v == 1) {
                    showDiv("forestry_farmi_info_button1" + P);
                    $("forestry_farmi_info_button1" + P).onclick = new Function("forestryAjaxAction('sellfarmi',0," + O[U]["farmiid"] + ")");
                }
                else {
                    hideDiv("forestry_farmi_info_button1" + P);
                }
                $("forestry_farmi_info_button2" + P).onclick = new Function("forestryAjaxAction('kickfarmi',0," + O[U]["farmiid"] + ")");
                showDiv("forestry_farmi" + P);
                P++;
            }
        }
        var y = A[6];
        forestry_quests = y;
        var r = A[8];
        if (r != 0) {
            var V = "";
            for (pid in r) {
                V += "<div style='margin:0 0 4px 0; float:left' class='f_m_symbol" + pid + "'></div>";
                V += "<div style='margin:0 0 4px 0; float:left; color:#fff;'>&nbsp;" + r[pid] + "x</div>";
                V += "<div class='clear'></div>";
            }
            $("forestry_stock1_setzlinge").innerHTML = V;
            $("forestry_stock1_setzlinge").appear({ duration: 0.1, from: 1, to: 1 });
            var q = new Effect.Opacity("forestry_stock1_setzlinge", { duration: 4, transition: Effect.Transitions.linear, from: 1, to: 0 });
        }
        if (A[10] != 0) {
            for (var G in A[10]) {
                if ($("forestry_pos_crop" + G)) {
                    $("forestry_pos_status" + G).className = str_replace(" forestry_forest_crop", "", $("forestry_pos_status" + G).className);
                    $("forestry_pos_status" + G).className = str_replace(" forestry_forest_empty", "", $("forestry_pos_status" + G).className);
                    $("forestry_pos_status" + G).className = str_replace(" forestry_forest_plant", "", $("forestry_pos_status" + G).className);
                    var V = "<div style='margin:25px 0 0 25px;'>";
                    V += "<div style='margin:0 0 4px 0; float:left' class='f_m_symbol" + A[10][G] + "'></div>";
                    V += "<div style='margin:0 0 4px 0; float:left; color:#fff;'>&nbsp;1x</div>";
                    V += "<div class='clear'></div>";
                    V += "</div>";
                    $("forestry_pos_crop" + G).innerHTML = V;
                    $("forestry_pos_crop" + G).appear({ duration: 0.1, from: 1, to: 1 });
                    var q = new Effect.Opacity("forestry_pos_crop" + G, { duration: 4, transition: Effect.Transitions.linear, from: 1, to: 0 });
                }
            }
        }
        if ($("globaltransp")) {
            hideDiv("globaltransp");
            hideDiv("globalbox");
        }
        showDiv("forestry_container");
        foodworld_quicknavi = 0;
        forestry_quicknavi = 1;
        speedLinks();
        farm_checker_open = 0;
        hideDiv("farm_production_checker_icon");
        hideDiv("farm_production_checker");
        if (N > 0 && a != "cancelcrop") {
            showForestryProductionBox(N);
        }
        if ($("forestry_building_inner")) {
            setTimer("forestry_inner");
        }
        forestry_production_log = A[14];
    }
} }
function forestryAreaRun(a) { forestry_area_time[a] = (forestry_area_time[a] - 1); forestry_area_watertime[a] = (forestry_area_watertime[a] - 1); if (forestry_area_time[a] < 0) {
    $("forestry_pos" + a).className = "forestry_pos link tree" + forestry_area_pid[a] + "_3";
    window.clearInterval(forestry_area_run[a]);
    forestry_area_run[a] = 0;
    forestry_area_time[a] = 0;
    forestry_area_pid[a] = 0;
    forestry_area_watertime[a] = 0;
    $("forestry_pos_info" + a).innerHTML = "<b>" + forestry_area_name[a] + "</b><br>" + statusProductionComplete;
    forestry_area_name[a] = "";
}
else {
    var b = forestry_area_pid[a];
    $("forestry_pos" + a).className = "forestry_pos link tree" + b + "_1";
    if (forestry_area_time[a] < ((forestry_production_products[1][b][0] / 100) * (100 - forestry_plantphase1))) {
        $("forestry_pos" + a).className += " tree" + b + "_2";
    }
    if (forestry_area_time[a] < ((forestry_production_products[1][b][0] / 100) * (100 - forestry_plantphase2))) {
        $("forestry_pos" + a).className += " tree" + b + "_3";
    }
    $("forestry_pos_info" + a).innerHTML = "<b>" + forestry_area_name[a] + "</b><br>" + formatTime(forestry_area_time[a]);
} if (forestry_area_watertime[a] <= 0) {
    hideDiv("forestry_pos_water" + a);
}
else {
    showDiv("forestry_pos_water" + a);
} }
function forestryChkReady(d, a) { if (forestry_area_time[d] <= 0) {
    forestryPosOption(2, d);
}
else {
    var c = forestry_harvest_notready_dialogtext;
    var b = "forestryAjaxAction('cancelcrop'," + d + ")";
    globalcommitbox(forestry_harvest_notready_text, c, b);
} }
function forestryPosOption(d, e) { if (forestry_current_mode != d) {
    forestryPosAction();
} var c = 1; if (d == 1 && forestry_plant > 0) {
    if (forestry_stock[1]) {
        if (forestry_stock[1] && forestry_stock[1][forestry_plant]) {
            forestry_stock[1][forestry_plant]["amount"]--;
            if (forestry_stock[1][forestry_plant]["amount"] >= 0) {
                if (!forestry_action["pos" + e]) {
                    forestry_action["pos" + e] = forestry_plant;
                }
                else {
                    c = 0;
                }
            }
            else {
                forestry_plant = 0;
                c = 0;
            }
        }
        else {
            c = 0;
        }
    }
    else {
        c = 0;
    }
}
else {
    if (d == 2) {
        if (!forestry_action["pos" + e]) {
            forestry_action["pos" + e] = 1;
        }
        else {
            c = 0;
        }
    }
    else {
        c = 0;
    }
} if (c == 1) {
    showDiv("forestry_pos_load" + e);
    var b = 0;
    for (var a = 1; a <= forestry_maxpos; a++) {
        if (forestry_action["pos" + a]) {
            b++;
        }
    }
    if (b >= forestry_cache_items) {
        forestryPosAction();
    }
    else {
        if (forestry_cache_run == 0) {
            forestry_cache_run = setTimeout("forestryPosAction()", forestry_cache_timeout);
        }
    }
} forestry_current_mode = d; }
function forestryPosAction() { var b = ""; forestry_cache_area = new Array(); for (var a = 1; a <= forestry_maxpos; a++) {
    if (forestry_action["pos" + a]) {
        b += "&z[]=" + a + "&p[]=" + forestry_action["pos" + a];
        forestry_cache_area[a] = forestry_action["pos" + a];
    }
} if (b != "") {
    clearTimeout(forestry_cache_run);
    forestry_cache_run = 0;
    forestry_action = new Array();
    forestryAreaAction(b);
} }
function buildForestryStocks() { if (forestry_stock[0] && forestry_stock[0][300]) {
    if ($("forestry_stock0_amount")) {
        $("forestry_stock0_amount").innerHTML = "&nbsp;" + forestry_stock[0][300]["amount"];
    }
} for (var d = 1; d <= 4; d++) {
    for (var n = 0; n < 5; n++) {
        if (forestry_user_buildings[n]) {
            if (forestry_user_buildings[n]["position"] && forestry_user_buildings[n]["position"] == (d - 1)) {
                var m = forestry_user_buildings[n]["capacity"];
                break;
            }
        }
    }
    if (d == 1) {
        var a = 1, c = 20;
    }
    if (d == 2) {
        var a = 21;
        var c = 40;
    }
    if (d == 3) {
        var a = 41;
        var c = 100;
    }
    if (d == 4) {
        var a = 101;
        var c = 200;
    }
    for (var b = a; b <= c; b++) {
        if ($("f_stock_amount_" + b)) {
            var e = 0;
            var l = 0;
            if (forestry_stock[d] && forestry_stock[d][b]) {
                e = forestry_stock[d][b]["amount"];
            }
            if (forestry_stock[d] && forestry_stock[d][b] && forestry_stock[d][b].produced) {
                l = forestry_stock[d][b].produced;
            }
            if ($("f_stock_growing_" + b) && forestry_stock[d] && forestry_stock[d][b]) {
                hideDiv("f_stock_info_" + b);
                $("f_stock_growing_" + b).innerHTML = formatTime(forestry_stock[d][b]["duration"]);
                showDiv("f_stock_growing_" + b);
            }
            else {
                hideDiv("f_stock_growing_" + b);
                showDiv("f_stock_info_" + b);
            }
            if (d == 1) {
                $("f_stock_amount_" + b).innerHTML = e;
            }
            else {
                if (d == 4) {
                    $("f_stock_amount_" + b).innerHTML = e + "x";
                }
                else {
                    $("f_stock_amount_" + b).innerHTML = "&nbsp;" + e + "/" + m;
                }
            }
            if ($("f_stock_bar_" + b)) {
                var h = forestryCalcQuestBar(m, e);
                if (h > 0) {
                    $("f_stock_bar_" + b).style.left = "-" + h + "px";
                }
            }
            if (d == 1) {
                $("f_stock_item" + b).onclick = new Function("forestrySetStockItem(" + d + "," + b + ")");
            }
            if (d == 4) {
                if (e > 0) {
                    showDiv("f_stock_item" + b);
                }
                else {
                    hideDiv("f_stock_item" + b);
                }
            }
        }
    }
    if ($("forestry_stock_capacity" + d)) {
        $("forestry_stock_capacity" + d).innerHTML = str_replace("%AMOUNT%", m, forestry_stockcapacityinfo);
    }
    if (d == 1) {
        if (usetouch == 1) {
            $("forestry_stock1_object").onclick = new Function("showDiv('forestry_stock1')");
            $("forestry_stock1_object").onmouseover = new Function("");
            $("forestry_stock1_object").onmouseout = new Function("");
            $("forestry_stock1").onmouseover = new Function("");
            $("forestry_stock1").onmouseout = new Function("");
        }
        else {
            $("forestry_stock1_object").onclick = new Function("");
            $("forestry_stock1_object").onmouseover = new Function("showDiv('forestry_stock1')");
            $("forestry_stock1_object").onmouseout = new Function("hideDiv('forestry_stock1')");
            $("forestry_stock1").onmouseover = new Function("showDiv('forestry_stock1')");
            $("forestry_stock1").onmouseout = new Function("hideDiv('forestry_stock1')");
        }
    }
    else {
        $("forestry_stock" + d + "_object").onclick = new Function("showForestryStock(" + d + ")");
    }
} }
function setForestryStockInfo(c, a, b) { if (a > 0) {
    if (forestry_stock[c][a]) {
        $("forestry_stock" + c + "_item_time" + b).innerHTML = formatTime(forestry_stock[c][a]["duration"]);
        showDiv("forestry_stock" + c + "_item_time" + b);
    }
}
else {
    hideDiv("forestry_stock" + c + "_item_info" + b);
} }
function forestrySetStockItem(e, a, d) { if (e == 1) {
    forestry_plant = a;
    if (a > 0) {
        $("forestry_stock1_select").className = "f_m_symbol" + a;
    }
    else {
        $("forestry_stock1_select").className = "";
    }
    if (usetouch == 1) {
        hideDiv("forestry_stock1");
    }
} for (var c = 1; c <= 10; c++) {
    if ($("forestry_stock" + e + "_item_symbol" + c)) {
        var b = $("forestry_stock" + e + "_item_symbol" + c).className;
        $("forestry_stock" + e + "_item_symbol" + c).className = str_replace(" forestry_stockitem_selected", "", b);
    }
} }
function showForestryProductionBox(a) { showForestryBuildingInner(a); }
function closeForestryProductionBox() { hideDiv("forestry_productiondialog_transp"); hideDiv("forestry_productiondialog"); }
function forestrySetTimer(a, c, b) { if (typeof c == "function") {
    ftimer[a] = window.setInterval(function () { c(a, b); }, 1000);
} }
function forestryClearTimer(a) { if (ftimer[a]) {
    window.clearInterval(ftimer[a]);
    ftimer[a] = 0;
    if (fremains[a]) {
        fremains[a] = 0;
    }
} }
function forestryClearAllTimer() { for (var a in ftimer) {
    forestryClearTimer(a);
} ftimer = new Array; fremains = new Array; }
function forestrySlotRun(a, c) { fremains[a]--; var b = str_replace("slotrun", "", a); if (fremains[a] > 0) {
    $("forestry_slot_timer_value" + c.slot + "_" + b).innerHTML = formatTime(fremains[a]);
}
else {
    forestryClearTimer(a);
    delete forestry_slots[b][c.slot];
    showForestryProductionBox(b);
} }
function forestryProductionRun(a, b) { fremains[a]--; if (fremains[a] > 0) {
    $("forestry_slot_run_info" + b.slot + "_" + b.position).innerHTML = formatTime(fremains[a]);
}
else {
    forestryClearTimer(a);
    forestry_user_buildings[b.position]["slots"][b.slot]["ready"] = 1;
    showForestryProductionBox(b.position);
} }
function forestrySetSlot(a, c, b) { if (a == 1) {
    showDiv("forestry_sawmill_productbox_transp");
    showDiv("forestry_sawmill_productbox");
}
else {
    if (a == 2) {
        showDiv("forestry_carpenter_productbox_transp");
        showDiv("forestry_carpenter_productbox");
    }
} currenttype = a; currentslot = c; }
function forestryUnsetSlot() { hideDiv("forestry_sawmill_productbox_transp"); hideDiv("forestry_sawmill_productbox"); hideDiv("forestry_carpenter_productbox_transp"); hideDiv("forestry_carpenter_productbox"); currenttype = 0; currentslot = 0; }
function forestryBuySlotResponse(c, b) { var a = _chkRequest(c); if (a != 0) {
    hideGlobalWait();
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        hideDiv("globalbox");
        hideDiv("globaltransp");
        updateMenu();
        forestry_slots = a[11];
        showForestryProductionBox(b);
    }
} }
function showForestryProductionInfo(s, u, q, t, e) { if (s == 1) {
    for (var m = 1; m <= 20; m++) {
        if ($("forestry_productiondialog_content_item" + m)) {
            $("forestry_productiondialog_content_item" + m).className = str_replace("selected", "", $("forestry_productiondialog_content_item" + m).className);
        }
    }
    if ($("forestry_productiondialog_content_item" + t)) {
        $("forestry_productiondialog_content_item" + t).className += " selected";
    }
} for (var m = 1; m <= 5; m++) {
    if ($("forestry_productioninfo_item" + m)) {
        hideDiv("forestry_productioninfo_item" + m);
    }
    if ("forestry_productioninfo_item_con" + m) {
        hideDiv("forestry_productioninfo_item_con" + m);
    }
    $("forestry_productioninfo_item_amount" + m).className = str_replace("redalert", "", $("forestry_productioninfo_item_amount" + m).className);
} if (forestry_production_products[u]) {
    if (forestry_production_products[u][q]) {
        var l = forestry_production_products[u][q];
        var r = 1;
        if (s == 1) {
            var h = l[5];
        }
        else {
            if (s == 2) {
                var h = l[6];
            }
        }
        var b = 1;
        for (var m = 0; m < h.length; m++) {
            var v = h[m][0];
            var n = h[m][1];
            if (s == 1) {
                var a = forestry_production_products[(u + 1)][v][9];
                var c = formatTime(forestry_production_products[(u + 1)][v][0]);
            }
            else {
                if (s == 2) {
                    var a = forestry_production_products[(u - 1)][v][9];
                    var c = "";
                }
            }
            $("forestry_productioninfo_item" + r).className = "link forestry_productiondialog_content_item f_symbol" + v;
            $("forestry_productioninfo_item_amount" + r).innerHTML = n + "x&nbsp;" + a + "<br>" + c;
            if (s == 1) {
                var w = "<div style='width:25px; float:left' class='f_symbol" + v + "'></div><div style='width:130px; float:left'>&nbsp;" + n + "x&nbsp;" + forestry_production_products[(u + 1)][v][9] + "</div><div class='clear'></div>";
                var d = "forestryAjaxAction('startproduction'," + s + "," + v + ")";
                $("forestry_productioninfo_item" + r).onclick = new Function('globalcommitbox("' + forestry_productionstart + '","' + w + '","' + d + '")');
            }
            if (s == 2) {
                if (forestry_stock[(u - 1)]) {
                    if (forestry_stock[(u - 1)][v]) {
                        if (parseInt(forestry_stock[(u - 1)][v]["amount"]) < parseInt(n)) {
                            b = 0;
                            $("forestry_productioninfo_item_amount" + r).className += " redalert";
                        }
                    }
                    else {
                        b = 0;
                        $("forestry_productioninfo_item_amount" + r).className += " redalert";
                    }
                }
                else {
                    b = 0;
                    $("forestry_productioninfo_item_amount" + r).className += " redalert";
                }
            }
            showDiv("forestry_productioninfo_item" + r);
            showDiv("forestry_productioninfo_item_con" + r);
            r++;
        }
        if (s == 2) {
            if (b == 1) {
                var w = "<div style='width:25px; float:left' class='f_symbol" + q + "'></div><div style='width:130px; float:left'>&nbsp;" + forestry_production_products[u][q][9] + "</div><div class='clear'></div>";
                var d = "forestryAjaxAction('startproduction'," + s + "," + q + ",1)";
                $("forestry_productiondialog_content_item" + t).onclick = new Function('globalcommitbox("' + forestry_productionstart + '","' + w + '","' + d + '")');
            }
            else {
                $("forestry_productiondialog_content_item" + t).onclick = new Function();
            }
        }
    }
} if (e == 1) {
    showDiv("forestry_productioninfo");
}
else {
    hideDiv("forestry_productioninfo");
} }
function forestryProductionCarpenterRun(a) { forestry_production_time[a] = (forestry_production_time[a] - 1); if (forestry_production_time[a] < 0) {
    window.clearInterval(forestry_production_run[a]);
    forestry_production_run[a] = 0;
    forestry_production_time[a] = 0;
    $("forestry_building" + a + "_production_tooltip_time").innerHTML = statusProductionComplete;
    initForestry();
}
else {
    $("forestry_building" + a + "_production_tooltip_time").innerHTML = formatTime(forestry_production_time[a]);
} }
function forestryAreaAction(a) { if (forestry_current_mode == 1) {
    forestryAjaxAction("plant", 0, 0, 0, a);
}
else {
    if (forestry_current_mode == 2) {
        forestryAjaxAction("crop", 0, 0, 0, a);
    }
} }
function forestryWater() { if (forestry_waterall_cost > 0) {
    var b = "";
    b += "<div style='float:left'>" + cityadcost + "</div><div style='float:left'><img src='" + imgpath + "money.gif' border='0' height='12px'></div><div>&nbsp;" + forestry_waterall_cost + "&nbsp;" + gamecurrency + "</div><div class='clear'></div>";
    b += forestry_waterall_dialogtext;
    var a = "forestryAjaxAction('water')";
    globalcommitbox(forestry_wateralltext, b, a);
}
else {
    forestryAjaxAction("water");
} }
function forestryFertilize() { globalSpeedupBox("forestry_fertilize", 1, 1); }
var forestry_schredder_p = 0;
var forestry_schredder_a = 0;
function forestrySchredder() { var d = ""; d += shredder_product + "<br>"; d += "<select id='forestry_schredder_items'>"; for (var c in forestry_stock) {
    for (var a in forestry_stock[c]) {
        if (a >= 20) {
            d += "<option value='" + a + "'>" + forestry_stock[c][a]["name"] + "</option>";
        }
    }
} d += "</select><br>"; d += shredder_amount + "<br>"; d += "<input id='forestry_schredder_amount' type='text' size='15'>"; var b = "forestrySchredderCommit()"; globalcommitbox(forestry_schreddertext, d, b); }
function forestrySchredderCommit() { if ($("forestry_schredder_items").value > 0 && $("forestry_schredder_amount").value > 0) {
    forestry_schredder_p = $("forestry_schredder_items").value;
    forestry_schredder_a = $("forestry_schredder_amount").value;
    var b = shredder_commit;
    var a = "forestryAjaxAction('schredder')";
    globalcommitbox(forestry_schreddertext, b, a);
} }
var updatebuilding_block = 0;
function forestryAjaxAction(c, h, e, n, b, r) { forestry_cache_area = new Array(); var a = 0; var d = 0; if (c == "updatebuilding") {
    if (updatebuilding_block == 1) {
        return false;
    }
    updatebuilding_block = 1;
} if (c == "autoplant") {
    e = $("forestry_autoplant_pid").value;
} if (c == "startproduction") {
    if (currentslot > 0) {
        n = currentslot;
    }
} if (c == "schredder") {
    e = forestry_schredder_p;
    d = forestry_schredder_a;
    forestry_schredder_p = 0;
    forestry_schredder_a = 0;
} var q = ""; if (h > 0) {
    q += "&position=" + h;
} if (e > 0) {
    q += "&productid=" + e;
} if (n > 0) {
    q += "&slot=" + n;
} if (d > 0) {
    q += "&amount=" + d;
} if (c == "fertilize" || c == "speedup") {
    q += "&speed=" + r;
} if (c == "plant" || c == "crop") {
    q += "&params=" + b;
} var m = 0; if (c == "startproduction" || c == "cropproduction" || c == "cancelproduction" || c == "speedup" || c == "cancelcrop") {
    var m = h;
} showGlobalWait(c); var l = createAjaxRequestObj(); l.open("GET", "ajax/forestry.php?rid=" + rid + "&action=" + c + q, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); if (c == "buyslot") {
    l.onreadystatechange = function () { forestryBuySlotResponse(l, h); };
}
else {
    l.onreadystatechange = function () { initForestryResponse(l, c, 0, 0, m); };
} l.send(null); }
function initCampaigns() { var a = createAjaxRequestObj(); a.open("GET", "ajax/forestry.php?rid=" + rid + "&action=initcampaigns", true); a.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); a.onreadystatechange = function () { initCampaignsResponse(a); }; a.send(null); }
function campaignQuestEntry(e, a, b, d) { var c = $("dialog_entryline_number").value; if (c > 0 && e > 0 && a > 0 && b > 0 && d > 0) {
    var h = createAjaxRequestObj();
    h.open("GET", "ajax/forestry.php?rid=" + rid + "&action=questentry&campaignid=" + e + "&questid=" + a + "&type=" + d + "&productid=" + b + "&amount=" + c, true);
    h.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    h.onreadystatechange = function () { initCampaignsResponse(h, 1); };
    h.send(null);
} }
function initCampaignsResponse(c, e) { var a = _chkRequest(c); if (a != 0) {
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        showDiv("transp3");
        if (a[1] == 1) {
            showDiv("forestry_teaser");
        }
        else {
            if (a[2] > 1) {
                forestry_unlock = 1;
                if (premium == 1) {
                    showDiv("quicknavifarmforestry");
                }
                $("cityzone_2_10").onclick = new Function("initForestry()");
                $("cityzone_tt_2_10").innerHTML = str_replace("%INFO%", "", cityzone_f);
                initForestry(a[2]);
            }
            forestry_stock = a[3];
            if (a[6] && a[6].level) {
                levelupAlert(a[6].level, a[6].leveltitle);
            }
            hideDiv("forestry_teaser");
            showDiv("forestry_questlist_container");
            hideDiv("globaltransp");
            hideDiv("globalbox");
            forestryBuildQuestLines(a[1]);
            for (var b = 1; b <= 20; b++) {
                hideDiv("forestry_questlist_end" + b);
            }
            for (var d in a[5]) {
                showDiv("forestry_questlist_end" + d);
            }
        }
    }
} }
function forestryBuildQuestLines(B) { for (var C = 1; C <= 4; C++) {
    if ($("forestry_questlist_locked" + C)) {
        hideDiv("forestry_questlist_locked" + C);
    }
    for (var z = 1; z <= 100; z++) {
        if ($("forestry_questlist_item" + C + "_" + z)) {
            hideDiv("forestry_questlist_item" + C + "_" + z);
        }
        if (forestry_questdelay_run[C + "_" + z]) {
            window.clearInterval(forestry_questdelay_run[C + "_" + z]);
            forestry_questdelay_run[C + "_" + z] = 0;
            forestry_questdelay_time[C + "_" + z] = 0;
        }
    }
} var h = 0; for (var C = 1; C <= 3; C++) {
    if ($("forestry_questlist_container_inner" + C)) {
        hideDiv("forestry_questlist_container_inner" + C);
    }
} for (campaign in B) {
    if (B[campaign]) {
        if ($("forestry_questlist_container_inner" + campaign)) {
            showDiv("forestry_questlist_container_inner" + campaign);
        }
        h++;
    }
    if (B[campaign] == "locked") {
        showDiv("forestry_questlist_locked" + campaign);
    }
    else {
        var G = B[campaign];
        var E = G.questid;
        if ($("forestry_questlist_item_title" + campaign + "_current")) {
            $("forestry_questlist_item_title" + campaign + "_current").innerHTML = E + ". " + G[3];
            $("forestry_questlist_item_desc" + campaign + "_current").innerHTML = G[4];
        }
        var D = 0;
        var n = "";
        n += '<div id="forestry_quest_require' + campaign + "_" + E + '" class="forestry_quest_require" style="display:block;">';
        for (var C = 0; C <= 1; C++) {
            if (G[1] && G[1][C]) {
                var d = 1;
                if (C == 1) {
                    d = 2;
                }
                for (var u in G[1][C]) {
                    var a = "";
                    var m = "kp";
                    var H = produkt_name[u];
                    if (d == 2) {
                        if (u <= 20) {
                            D++;
                            a = "*";
                        }
                        m = "f_m_symbol";
                        H = produkt_name_forestry[u];
                    }
                    n += '<div id="forestry_quest_entry' + campaign + "_" + E + "_" + d + "_" + u + '" style="position:relative;" onmouseover="showDiv(\'forestry_tt_' + campaign + "_" + E + "_" + d + "_" + u + "')\" onmouseout=\"hideDiv('forestry_tt_" + campaign + "_" + E + "_" + d + "_" + u + "')\">";
                    n += '  <div class="main_float_left ' + m + u + '" style="position:relative;"></div>';
                    n += '  <div class="main_float_left" style="position:relative; margin:0 0 0 5px; width:100px; height:15px; overflow:hidden; background-color:#000;">';
                    n += '    <div id="forestry_questbar_' + campaign + "_" + E + "_" + d + "_" + u + '" style="position:absolute; top:0px; left:-100px; background:url(' + imgpath + 'guild/innerbar.png) 0 -5px; width:100px; height:15px;"></div>';
                    n += "  </div>";
                    n += '  <div class="clear"></div>';
                    n += '  <div id="forestry_tt_' + campaign + "_" + E + "_" + d + "_" + u + '" class="blackbox" style="display:none; position:absolute; bottom:16px; left:20px;">' + H + "</div>";
                    n += "</div>";
                    n += '<div style="margin:0 0 5px 20px;">';
                    n += '  <div class="main_float_left" id="forestry_quest_amount' + campaign + "_" + E + "_" + d + "_" + u + '">0</div>';
                    n += '  <div class="main_float_left">&nbsp;/&nbsp;</div>';
                    n += '  <div class="main_float_left" id="forestry_quest_amount_max' + campaign + "_" + E + "_" + d + "_" + u + '">' + G[1][C][u] + "</div>";
                    if (a != "") {
                        n += '  <div class="main_float_left">&nbsp;' + a + "</div>";
                    }
                    n += '  <div class="main_float_left" id="forestry_quest_amount_stockinfo' + campaign + "_" + E + "_" + d + "_" + u + '" style="display:none; color:#f00; font-weight:bold;">&nbsp;' + product_notavailable_info + "</div>";
                    n += '  <div class="clear"></div>';
                    n += "</div>";
                }
            }
        }
        n += "</div>";
        if (D > 0) {
            n += '<div class="bonusinfo">* ' + t_forestry_settling_min + "</div>";
        }
        if ($("forestry_quest_require" + campaign + "_current")) {
            $("forestry_quest_require" + campaign + "_current").innerHTML = n;
        }
        var n = "";
        if (G[2]) {
            if (G[2][0] || (G[2][1] && G[2][1][1]) || G[2][13]) {
                n += '<div style="margin:0 0 5px 0;">' + forestry_quests_reward + "</div>";
            }
            if (G[2][0] > 0) {
                n += '<div style="margin:0 0 5px 0;">';
                n += '<div class="main_float_left"><img src="' + imgpath + 'points.gif" border="0" height="13" width="13"></div>';
                n += '<div class="main_float_left">&nbsp;' + G[2][0] + "&nbsp;" + t_points + "</div>";
                n += '<div class="clear"></div>';
                n += "</div>";
            }
            for (var s in G[2][1][1]) {
                n += '<div style="margin:0 0 5px 0;">';
                n += '  <div class="main_float_left f_m_symbol' + s + '"></div>';
                n += '  <div class="main_float_left">&nbsp;' + G[2][1][1][s] + "x " + produkt_name_forestry[s] + "</div>";
                n += '  <div class="clear"></div>';
                n += "</div>";
            }
            if (G[2][13] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + quest_reward_6 + "</div>";
                n += '<img src="' + imgpath + "farmhouse/thumbs/" + G[2][13] + '.jpg" style="margin:0 0 5px 0; border:0px;">';
            }
            if (G[2][2] > 0 || G[2][4] == 1 || G[2][5] != 0 || G[2][6] != 0 || G[2][7] != 0 || G[2][8] == 1 || G[2][10] > 0) {
                n += '<div style="margin:15px 0 5px 0;">' + forestry_quests_reward2 + "</div>";
            }
            if (G[2][4] == 1) {
                n += '<div style="margin:0 0 5px 0;">' + forestry_quests_new_forestry + "</div>";
            }
            if (G[2][2] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + forestry_bld[G[2][2]] + "</div>";
            }
            if (G[2][5] != 0) {
                for (var y = 0; y < G[2][5].length; y++) {
                    n += '<div style="margin:0 0 5px 0;">';
                    n += '  <div class="main_float_left f_m_symbol' + G[2][5][y] + '"></div>';
                    n += '  <div class="main_float_left">&nbsp;' + produkt_name_forestry[G[2][5][y]] + "</div>";
                    n += '  <div class="clear"></div>';
                    n += "</div>";
                }
            }
            if (G[2][6] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + str_replace("%BUILDING%", forestry_bld[G[2][6]], forestry_quests_unlock_questline) + "</div>";
            }
            if (G[2][7] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + forestry_quest_unlock_waterall + "</div>";
            }
            if (G[2][8] > 0) {
                n += '<div style="margin:0 0 5px 0;">';
                n += '  <div class="main_float_left" style="width:15px;"><img src="' + imgpath + 'adbonus.gif" border="0"></div>';
                n += '  <div class="main_float_left" style="width:150px;">' + forestry_quest_addfarmi + "</div>";
                n += '  <div class="clear"></div>';
                n += "  </div>";
            }
            if (G[2][9] > 0) {
                n += '<div style="margin:0 0 5px 0;">';
                n += '  <div class="main_float_left" style="width:15px;"><img src="' + imgpath + 'adbonus_queue.gif" border="0"></div>';
                n += '  <div class="main_float_left" style="width:150px;">' + forestry_guildqueue + "</div>";
                n += '  <div class="clear"></div>';
                n += "</div>";
            }
            if (G[2][10] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + str_replace("%AMOUNT%", G[2][10], forestry_quests_stockadd1) + "</div>";
            }
            if (G[2][11] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + giftname[G[2][11]] + "</div>";
            }
            if (G[2][12] > 0) {
                n += '<div style="margin:0 0 5px 0;">' + forestry_newquests + "</div>";
            }
        }
        if ($("forestry_quest_reward" + campaign + "_current")) {
            $("forestry_quest_reward" + campaign + "_current").innerHTML = n;
        }
        if ($("forestry_questlist_item" + campaign + "_current")) {
            if (B[campaign]["remain"]) {
                hideDiv("forestry_nextquest");
                showDiv("forestry_questlist_delay" + campaign + "_current");
                hideDiv("forestry_quest_require" + campaign + "_current");
                forestry_questdelay_time[campaign + "_" + E] = B[campaign]["remain"];
                forestry_questdelay_run[campaign + "_" + E] = window.setInterval("forestryQuestDelayRun(" + campaign + "," + E + ")", 1000);
            }
            else {
                hideDiv("forestry_questlist_delay" + campaign + "_current");
                if (B[campaign]["entries"]) {
                    for (var d = 1; d <= 2; d++) {
                        if (B[campaign]["entries"][d]) {
                            var F = B[campaign]["entries"][d];
                            for (var C = 0; C < F.length; C++) {
                                var u = F[C]["productid"];
                                var c = F[C]["sum"];
                                var A = $("forestry_quest_amount_max" + campaign + "_" + E + "_" + d + "_" + u).innerHTML;
                                var w = 0;
                                if (d == 1) {
                                    if (checkRackItem(u) > 0) {
                                        w = 1;
                                    }
                                }
                                else {
                                    if (d == 2) {
                                        for (var y = 1; y < 5; y++) {
                                            if (forestry_stock[y]) {
                                                if (forestry_stock[y][u]) {
                                                    if (forestry_stock[y][u]["amount"] > 0) {
                                                        w = 1;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (parseInt(c) > 0) {
                                    $("forestry_quest_amount" + campaign + "_" + E + "_" + d + "_" + u).innerHTML = c;
                                    var b = forestryCalcQuestBar(A, c);
                                    $("forestry_questbar_" + campaign + "_" + E + "_" + d + "_" + u).style.left = "-" + b + "px";
                                }
                                if (parseInt(c) < parseInt(A)) {
                                    var q = (parseInt(A) - parseInt(c));
                                    $("forestry_quest_entry" + campaign + "_" + E + "_" + d + "_" + u).onclick = new Function("buildForestryQuestEntry(" + d + ", " + u + ", " + q + ", " + campaign + ", " + E + ");");
                                }
                                else {
                                    $("forestry_quest_entry" + campaign + "_" + E + "_" + d + "_" + u).onclick = new Function();
                                }
                                if (w == 0 && parseInt(c) < parseInt(A)) {
                                    $("forestry_quest_entry" + campaign + "_" + E + "_" + d + "_" + u).onclick = new Function();
                                    showDiv("forestry_quest_amount_stockinfo" + campaign + "_" + E + "_" + d + "_" + u);
                                }
                                else {
                                    hideDiv("forestry_quest_amount_stockinfo" + campaign + "_" + E + "_" + d + "_" + u);
                                }
                            }
                        }
                    }
                }
                showDiv("forestry_quest_require" + campaign + "_current");
            }
            showDiv("forestry_questlist_item" + campaign + "_current");
        }
    }
} if (h == 1) {
    var v = 220;
    var t = 260;
}
else {
    if (h == 2) {
        var v = 110;
        var t = 150;
    }
    else {
        var v = 0;
        var t = 40;
    }
} for (var C = 1; C <= 3; C++) {
    $("forestry_questlist_close").style.right = t + "px";
    if ($("forestry_questlist_container_inner" + C) && $("forestry_questlist_container_inner" + C).style.display == "block") {
        $("forestry_questlist_container_inner" + C).style.marginLeft = v + "px";
        break;
    }
} if (B.length == 0) {
    hideDiv("forestry_nextquest");
    showDiv("forestry_questlist_container_inner1");
    $("forestry_questlist_container_inner1").style.marginLeft = "220px";
} }
function buildForestryQuestEntry(e, b, d, l, a) { if (e == 1) {
    var c = "product";
} if (e == 2) {
    var c = "forestry";
} var h = { type: c, pid: b, rest: d, campaign: l, questid: a }; globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(h), 0, 0, 1); $("dialog_entryline_number").focus(); $("dialog_entryline_number").onchange = new Function("chkForestryQuestEntryValue(" + e + ", " + b + ", " + d + ", " + l + ", " + a + ")"); $("dialog_entryline_number").onkeyup = new Function("chkForestryQuestEntryValue(" + e + ", " + b + ", " + d + ", " + l + ", " + a + ")"); chkForestryQuestEntryValue(e, b, d, l, a); }
function chkForestryQuestEntryValue(d, b, c, l, a) { var h = 0; if (d == 1) {
    h = checkRackItem(b);
} if (d == 2) {
    h = checkForestryRackItem(b);
} var e = { type: d, stockamount: h, rest: c, click: "campaignQuestEntry(" + l + "," + a + "," + b + "," + d + ")" }; checkEntryLine(e); }
function forestryQuestDelayRun(b, a) { forestry_questdelay_time[b + "_" + a] = (forestry_questdelay_time[b + "_" + a] - 1); if (forestry_questdelay_time[b + "_" + a] < 0) {
    window.clearInterval(forestry_questdelay_run[b + "_" + a]);
    forestry_questdelay_run[b + "_" + a] = 0;
    forestry_questdelay_time[b + "_" + a] = 0;
    showDiv("forestry_nextquest");
    initCampaigns();
}
else {
    $("forestry_questlist_delay_time" + b + "_current").innerHTML = formatTime(forestry_questdelay_time[b + "_" + a]);
} }
function forestryCalcQuestBar(a, d) { if (!d) {
    return 0;
} var b = parseInt(a - d); var c = Math.floor(parseInt(b * 100) / a); if (c > 100) {
    c = 100;
} return c; }
function closeForestry() { for (var a = 1; a <= forestry_maxpos; a++) {
    if (forestry_area_run[a]) {
        window.clearInterval(forestry_area_run[a]);
        forestry_area_run[a] = 0;
        forestry_area_time[a] = 0;
        forestry_area_pid[a] = 0;
        forestry_area_watertime[a] = 0;
        forestry_area_name[a] = "";
    }
} forestry_area_run = new Array(); forestry_area_time = new Array(); forestry_area_pid = new Array(); forestry_area_watertime = new Array(); forestry_area_name = new Array(); forestry_plant = 0; for (var a = 1; a <= 10; a++) {
    if (forestry_production_run[a]) {
        window.clearInterval(forestry_production_run[a]);
        forestry_production_run[a] = 0;
        forestry_production_time[a] = 0;
    }
} forestry_production_run = new Array(); forestry_production_time = new Array(); forestry_quicknavi = 0; hideDiv("forestry_productiondialog_transp"); hideDiv("forestry_container"); }
var forestry_building_inner_current = 0;
function showForestryBuildingInner(c) { forestry_building_inner_current = c; $("forestry_building_inner").className = "forestry_building_inner_back" + c; var b = ""; for (var a = 1; a <= 3; a++) {
    b += '<div id="forestry_building_inner_slot' + a + '" class="nursery_slot_item">';
    b += '  <div id="forestry_building_inner_slot_img_main' + a + '" class="link nursery_slot_item_img">';
    b += '    <div id="forestry_building_inner_slot_img' + a + '" class="forestry_building_inner_slot_img"></div>';
    b += "  </div>";
    b += '  <div id="forestry_building_inner_slot_info' + a + '" class="nursery_slot_item_info link" style="width:145px; height:120px;">';
    b += "  </div>";
    b += '  <div id="forestry_building_inner_slot_locked' + a + '" class="nursery_slot_block"></div>';
    b += '  <div id="forestry_building_inner_slot_cancel' + a + '" class="forestry_building_inner_slot_cancel button_destruct link" onclick="dialogForestry(\'cancelproduction\', ' + c + ", " + a + ')"></div>';
    b += '  <div id="forestry_building_inner_slot_speedup' + a + '" class="forestry_building_inner_slot_speedup speedupgardenbutton link" onclick="globalSpeedupBox(\'forestry_speedup\',' + c + "," + a + ')"></div>';
    if (a == 3) {
        b += '<div id="forestry_building_inner_slot_remain"></div>';
    }
    b += "</div>";
} $("forestry_building_inner_slots").innerHTML = b; showDiv("forestry_building_inner_transp"); showDiv("forestry_building_inner"); timerForestryInner(); }
function closeForestryBuildingInner() { hideDiv("forestry_building_inner_transp"); hideDiv("forestry_building_inner"); forestry_building_inner_current = 0; }
function dialogForestry(e, l, q, d, c) { if (e == "cancelproduction") {
    var m = forestry_productioncancel;
    var h = forestry_productioncancel_content;
    var r = "forestryAjaxAction('cancelproduction', " + l + ", 0, " + q + ")";
} if (e == "startproduction") {
    currentslot = q;
    var m = forestry_productionstart;
    var h = "<div style='position:relative; width:25px; margin:0 auto;' class='f_symbol" + d + "'></div>";
    if (specialbonus && specialbonus.data && specialbonus.data.forestry && specialbonus.data.forestry.harvest && specialbonus.data.remain > 0) {
        var n = "bonus";
        c++;
    }
    h += '<div class="' + n + "\" style='margin-top:10px;'>&nbsp;" + c + "x&nbsp;" + forestry_production_products[(l + 2)][d][9] + "</div>";
    if (n != "" && specialbonus && specialbonus.data && specialbonus.data.forestry) {
        h += '<div class="bonus">(' + t_incl + " +" + specialbonus.data.forestry.harvest + " " + t_specialbonus_foodworld_harvest_info + ")</div>";
    }
    h += "<div class='clear'></div>";
    var r = "forestryAjaxAction('startproduction', " + l + ", " + d + ", " + q + ")";
} if (e == "buyslot") {
    if (forestry_slot_config[l][q]) {
        var a = forestry_slot_config[l][q];
        var m = forestry_buy_slot;
        var h = "";
        if (q == 2) {
            h += "<div>" + str_replace("%MONEY%", formatPrice(forestry_slot_config[l][q][0]), t_buy_slot) + "</div>";
        }
        if (q == 3) {
            var b = str_replace("%COINS%", a[1] + "&nbsp;" + t_coins, t_rent_slot);
            b = str_replace("%TIME%", formatTime(a[2]), b);
            h += "<div>" + b + "</div>";
        }
        var r = "forestryAjaxAction('buyslot', " + l + ", 0, " + q + ")";
    }
    else {
        return false;
    }
} globalcommitbox(m, h, r); }
function timerForestryInner() { var m = forestry_building_inner_current; if ($("forestry_building_inner") && m > 0) {
    for (var n = 1; n <= 3; n++) {
        var l = "";
        var b = "";
        var a = "";
        var r = "showForestrySelection(" + m + ", " + n + ")";
        hideDiv("forestry_building_inner_slot_speedup" + n);
        hideDiv("forestry_building_inner_slot_cancel" + n);
        hideDiv("forestry_building_inner_slot_locked" + n);
        $("forestry_building_inner_slot_img" + n).className = "";
        $("forestry_building_inner_slot_info" + n).innerHTML = "";
        if (forestry_user_buildings[m] && forestry_user_buildings[m].slots && forestry_user_buildings[m].slots[n]) {
            if (forestry_user_buildings[m].slots[n].remain) {
                forestry_user_buildings[m].slots[n].remain--;
            }
            var e = forestry_user_buildings[m].slots[n];
            if (e.productid) {
                $("forestry_building_inner_slot_img" + n).className = "fbig" + e.productid + " nursery_slot_item_img";
                var q = "";
                var h = forestry_products[e.productid][2];
                if (specialbonus && specialbonus.data && specialbonus.data.forestry && specialbonus.data.forestry.harvest && specialbonus.data.remain > 0) {
                    var q = "bonus";
                    h++;
                }
                l += '<div class="' + q + '" style="font-weight:bold; margin-bottom:5px;">' + h + "x&nbsp;" + produkt_name_forestry[e.productid] + "</div>";
                if (q != "" && specialbonus && specialbonus.data && specialbonus.data.forestry) {
                    l += '<div class="bonus">(' + t_incl + " +" + specialbonus.data.forestry.harvest + " " + t_specialbonus_foodworld_harvest_info + ")</div>";
                }
            }
            if (e.remain > 0) {
                l += "<div>" + formatTime(e.remain) + "</div>";
                var r = "";
            }
            else {
                l += "<div>" + statusProductionComplete + "</div>";
                b = '<div style="position:absolute; bottom:5px;">' + click4products + "</div>";
                forestry_user_buildings[m].slots[n].speedup = 0;
                var r = "forestryAjaxAction('cropproduction'," + m + ",0," + n + ")";
            }
            if (e.speedup == 0) {
                hideDiv("forestry_building_inner_slot_speedup" + n);
            }
            else {
                showDiv("forestry_building_inner_slot_speedup" + n);
            }
            showDiv("forestry_building_inner_slot_cancel" + n);
        }
        var d = 0;
        if (n == 3) {
            hideDiv("forestry_building_inner_slot_remain");
        }
        if (n == 2 || n == 3) {
            if (forestry_slots[m] && forestry_slots[m][n]) {
                if (n == 3) {
                    forestry_slots[m][n]--;
                    if (forestry_slots[m][n] > 0) {
                        showDiv("forestry_building_inner_slot_remain");
                        $("forestry_building_inner_slot_remain").innerHTML = formatTime(forestry_slots[m][n]);
                    }
                }
                if (forestry_slots[m][n] < 0) {
                    d = 1;
                }
            }
            else {
                d = 1;
            }
            if (d == 1) {
                if (n == 2) {
                    b = '<div style="position:absolute; bottom:5px;">' + str_replace("%MONEY%", formatPrice(forestry_slot_config[m][n][0]), t_buy_slot) + "</div>";
                }
                if (n == 3) {
                    var c = str_replace("%COINS%", forestry_slot_config[m][n][1] + "&nbsp" + t_coins, t_rent_slot);
                    c = str_replace("%TIME%", formatTime(forestry_slot_config[m][n][2]), c);
                    b = '<div style="position:absolute; bottom:5px;">' + c + "</div>";
                }
                showDiv("forestry_building_inner_slot_locked" + n);
                r = "dialogForestry('buyslot', " + m + ", " + n + ")";
                $("forestry_building_inner_slot_locked" + n).onclick = new Function(r);
            }
        }
        if (!(forestry_user_buildings[m] && forestry_user_buildings[m].slots && forestry_user_buildings[m].slots[n]) && d == 0) {
            b = '<div style="position:absolute; bottom:5px;">' + t_start_production + "</div>";
        }
        $("forestry_building_inner_slot_info" + n).innerHTML = l + b;
        $("forestry_building_inner_slot_info" + n).onclick = new Function(r);
        $("forestry_building_inner_slot_img_main" + n).onclick = new Function(r);
    }
} }
function showForestrySelection(c, b) { if (!c) {
    c = 1;
} if (!b) {
    b = 1;
} forestry_productionselect_navi = 1; var m = 9; var l = 0; var r = ""; if (c == 1) {
    var h = t_forestry_bld1_production_head;
    var d = forestry_stock[2];
} if (c == 2) {
    var h = t_forestry_bld2_production_head;
    var d = forestry_stock[3];
} $("forestry_selectproduction_head").innerHTML = h; for (var t in forestry_products) {
    var z = forestry_products[t];
    if ((t == 113 || t == 114 || t == 133) && xmastimeforestry != 1) {
        continue;
    }
    if (forestry_production_products[(c + 2)] && forestry_production_products[(c + 2)][t] && forestry_production_products[(c + 2)][t][13]) {
        continue;
    }
    if (z[3] == (c + 2) && (forestry_production_products[(c + 2)] && forestry_production_products[(c + 2)][t])) {
        var q = [];
        if (z[3] == 3) {
            q.push([z[11], 1]);
        }
        if (z[3] == 4) {
            q = z[6];
        }
        var e = "";
        var u = "dialogForestry('startproduction', " + c + ", " + b + ", " + t + ", " + z[2] + ")";
        for (var w = 0; w < q.length; w++) {
            if (!(d && d[q[w][0]] && d[q[w][0]].amount >= q[w][1])) {
                e = "important";
                u = "";
            }
        }
        r += '<div class="forestry_selectproduction_item link" onclick="' + u + '">';
        r += '  <div class="f_symbol' + t + '" style="float:left; margin-right:10px;"></div>';
        r += '  <div style="float:left; width:155px;">';
        var y = "";
        var n = z[2];
        if (specialbonus && specialbonus.data && specialbonus.data.forestry && specialbonus.data.forestry.harvest && specialbonus.data.remain > 0) {
            y = "bonus";
            n++;
        }
        r += '    <div style="font-weight:bold; margin-bottom:3px;" class="' + y + " " + e + '">' + n + "x&nbsp;" + z[9] + "</div>";
        if (y != "" && specialbonus && specialbonus.data && specialbonus.data.forestry) {
            r += '<div class="bonus">(' + t_incl + " +" + specialbonus.data.forestry.harvest + " " + t_specialbonus_foodworld_harvest_info + ")</div>";
        }
        r += '    <div style="margin-bottom:3px; float:left; margin-right:15px;">' + formatTime(forestry_production_products[(c + 2)][t][0]) + "</div>";
        if (z[14]) {
            r += '<div style="float:left;">';
            r += '  <img src="' + imgpath + 'menu/coins.gif" style="float:left; margin-right:2px; margin-top:1px; height:12px;">';
            r += '  <div style="float:left;">' + z[14] + "&nbsp;" + t_coins + "</div>";
            r += '  <div class="clear"></div>';
            r += "</div>";
        }
        r += '<div class="clear"></div>';
        for (var w = 0; w < q.length; w++) {
            var e = "";
            var a = 0;
            if (!(d && d[q[w][0]] && d[q[w][0]].amount >= q[w][1])) {
                e = "important";
            }
            if (d && d[q[w][0]]) {
                a = d[q[w][0]].amount;
                if (a > q[w][1]) {
                    a = q[w][1];
                }
            }
            r += '<div style="position:relative; float:left; margin:0 9px 5px 0;" onmouseover="showDiv(\'forestry_productionselect_item_need_tt' + t + "_" + q[w][0] + "')\" onmouseout=\"hideDiv('forestry_productionselect_item_need_tt" + t + "_" + q[w][0] + "')\">";
            r += '  <div style="float:left; margin-right:2px;" class="f_symbol' + q[w][0] + '"></div>';
            r += '  <div style="float:left; margin-top:5px;" class="' + e + '">' + a + "/" + q[w][1] + "</div>";
            r += '  <div class="clear"></div>';
            var s = "";
            if (w >= 2) {
                s = "bottom:25px;";
            }
            r += '  <div id="forestry_productionselect_item_need_tt' + t + "_" + q[w][0] + '" class="ttbox" style="' + s + '">' + forestry_products[q[w][0]][9] + "</div>";
            r += "</div>";
        }
        r += '    <div class="clear"></div>';
        r += "  </div>";
        r += '  <div class="clear"></div>';
        r += "</div>";
        l++;
    }
} $("forestry_selectproduction_scrollcontent").innerHTML = r; var v = Math.ceil(l / m); $("forestry_selectproduction_navi_pre").onclick = new Function("forestryProductionselectNavi(" + v + ", -1)"); $("forestry_selectproduction_navi_next").onclick = new Function("forestryProductionselectNavi(" + v + ", 1)"); forestryProductionselectNavi(v, 0); showDiv("forestry_production_select"); showDiv("forestry_production_select_transp"); }
function closeForestrySelection() { hideDiv("forestry_production_select"); hideDiv("forestry_production_select_transp"); }
var forestry_productionselect_navi = 1;
function forestryProductionselectNavi(a, b) { forestry_productionselect_navi += b; $("forestry_selectproduction_scrollcontent").className = "forestry_selectproduction_scrollpage" + forestry_productionselect_navi; if (forestry_productionselect_navi <= 1) {
    hideDiv("forestry_selectproduction_navi_pre");
    forestry_productionselect_navi = 1;
}
else {
    showDiv("forestry_selectproduction_navi_pre");
} if (forestry_productionselect_navi >= a) {
    hideDiv("forestry_selectproduction_navi_next");
    forestry_productionselect_navi = a;
}
else {
    showDiv("forestry_selectproduction_navi_next");
} }
function forestryProductionLog() { var b = '<div style="overflow:auto; height:200px; width:350px;">'; for (var a in forestry_production_log) {
    if (a > 0 && produkt_name_forestry[a]) {
        b += '<div style="margin-bottom:2px;">';
        b += '  <div class="f_m_symbol' + a + '" style="float:left; margin-right:5px;"></div>';
        b += '  <div style="float:left; width:200px; margin-right:5px; text-align:left;">' + produkt_name_forestry[a] + "</div>";
        b += '  <div style="float:left; width:100px; margin-right:5px;">' + forestry_production_log[a] + "</div>";
        b += '  <div class="clear"></div>';
        b += "</div>";
    }
} b += "</div>"; globalBoxFlex(t_produced_products, b, 0, 0, 1); }
function showForestryStock(m) { if (forestry_stock[m]) {
    var d = 0;
    if (forestry_user_buildings[(m - 1)]) {
        var d = forestry_user_buildings[(m - 1)].capacity;
    }
    var c = "";
    if (m > 1 && m < 4) {
        c += '<div class="bonusinfo" style="margin:-5px 0px 20px 0px;">' + str_replace("%AMOUNT%", d, t_forestry_stockcapacityinfo) + "</div>";
    }
    c += '<div style="position:relative; width:500px; height:320px; overflow:auto;">';
    var l = 1;
    for (var a in forestry_products) {
        var b = 0;
        if (forestry_stock[m] && forestry_stock[m][a]) {
            b = forestry_stock[m][a].amount;
        }
        var h = 0;
        if (m < 4 && forestry_products[a][3] == m) {
            h = 1;
        }
        if (m == 4 && b > 0) {
            h = 1;
        }
        if (h == 1) {
            if (l == 1 && m == 3) {
                c += '<div style="float:left; width:230px; margin-bottom:20px;">';
            }
            c += '<div style="position:relative; float:left; width:230px; margin-right:10px; margin-bottom:10px; text-align:left;">';
            c += '  <div class="f_symbol' + a + '" style="float:left; margin-right:5px;"></div>';
            c += '  <div style="position:relative; float:left;">';
            c += "    <div>" + produkt_name_forestry[a] + "</div>";
            if (m == 4) {
                c += "<div>" + b + "x</div>";
            }
            else {
                c += '<div class="forestry_stockitembar" style="float:left; margin-right:5px;">';
                var e = ((b * 100) / d);
                c += '  <div class="forestry_stockitembarinner" style="width:' + e + '%;"></div>';
                c += "</div>";
                c += '<div style="float:left;">' + b + "/" + d + "</div>";
                c += '<div class="clear"></div>';
            }
            c += "  </div>";
            c += "</div>";
            if (l % 3 == 0 && m == 3) {
                c += '</div><div style="float:left; width:225px; margin-bottom:20px;">';
            }
            l++;
        }
    }
    c += '  </div><div class="clear;"></div>';
    c += "</div>";
    globalBoxFlex(t_map_stock_overview_head, c, 0, 0, 1);
} }
function forestryHelp() { showDiv("forestry_help_transp"); showDiv("forestry_help"); if (forestry_achievements && forestry_achievements.length) {
    for (var a = 0; a < forestry_achievements.length; a++) {
        showDiv("forestry_achievement_check" + forestry_achievements[a]);
    }
} }
function forestryHelpClose() { hideDiv("forestry_help_transp"); hideDiv("forestry_help"); }
function session_failed() { location.href = http_host + "logout.php"; }
function speedLinksFarmsControl() { if ($("farm_speedlinks_farm_list").style.display == "block") {
    hideDiv("farm_speedlinks_farm_list");
    $("farm_speedlinks_farm_control").style.backgroundImage = "url(" + imgpath + "market/sel_open.gif)";
}
else {
    showDiv("farm_speedlinks_farm_list");
    $("farm_speedlinks_farm_control").style.backgroundImage = "url(" + imgpath + "market/sel_close.gif)";
} }
function speedLinks() { if (!premium || tutorial > 0) {
    hideDiv("farm_speedlinks");
}
else {
    showDiv("farm_speedlinks");
    for (var a = 1; a <= const_maxfarms; a++) {
        hideDiv("speedlink_farm" + a);
    }
    for (var a in farms_data.farms) {
        showDiv("speedlink_farm" + a);
        if ($("speedlink_farm" + a)) {
            $("speedlink_farm" + a).removeClassName("speedlink_farm_active");
        }
    }
    showDiv("speedlink_city1");
    if (currentuserlevel < 8) {
        hideDiv("speedlink_city2");
    }
    else {
        showDiv("speedlink_city2");
    }
    if (!player_guild) {
        hideDiv("speedlink_guild");
    }
    else {
        showDiv("speedlink_guild");
    }
    if (!forestry_unlock) {
        hideDiv("speedlink_forestry");
    }
    else {
        showDiv("speedlink_forestry");
    }
    if (currentuserlevel < 11) {
        hideDiv("speedlink_foodworld");
    }
    else {
        showDiv("speedlink_foodworld");
    }
    if (!farmersmarket_data) {
        hideDiv("speedlink_farmersmarket");
        hideDiv("speedlink_farmersmarket2");
    }
    else {
        showDiv("speedlink_farmersmarket");
        showDiv("speedlink_farmersmarket2");
    }
    if (!megafield_data || megafield_data.block) {
        hideDiv("speedlink_megafield");
    }
    else {
        showDiv("speedlink_megafield");
    }
    if (farm > 0 && (farm != 99 && farm != 100)) {
        $("speedlink_farm" + farm).addClassName("speedlink_farm_active");
    }
    $("speedlink_farmersmarket").removeClassName("speedlink_farmersmarket_active");
    if ($("speedlink_farmersmarket2")) {
        $("speedlink_farmersmarket2").removeClassName("speedlink_farmersmarket2_active");
    }
    if (farm == 99) {
        $("speedlink_farmersmarket").addClassName("speedlink_farmersmarket_active");
    }
    if (farm == 100 && $("speedlink_farmersmarket2")) {
        $("speedlink_farmersmarket2").addClassName("speedlink_farmersmarket2_active");
    }
    $("speedlink_city1").removeClassName("speedlink_city_active");
    $("speedlink_city2").removeClassName("speedlink_city_active");
    if (city > 0) {
        $("speedlink_city" + city).addClassName("speedlink_city_active");
    }
    if (inguild) {
        $("speedlink_guild").addClassName("speedlink_guild_active");
    }
    else {
        $("speedlink_guild").removeClassName("speedlink_guild_active");
    }
    if (forestry_quicknavi) {
        $("speedlink_forestry").addClassName("speedlink_forestry_active");
    }
    else {
        $("speedlink_forestry").removeClassName("speedlink_forestry_active");
    }
    if (foodworld_quicknavi) {
        $("speedlink_foodworld").addClassName("speedlink_foodworld_active");
    }
    else {
        $("speedlink_foodworld").removeClassName("speedlink_foodworld_active");
    }
} }
function selectMode(c, a, b) { g("bedientext").style.fontSize = "12pt"; mode = c; if (mode == 0) {
    g("lagerlock").style.display = "none";
    if (b) {
        selectRackItem(b);
    }
    else {
        sortRackNew(0, 1);
    }
}
else {
    if (mode == 1) {
        g("bedientext").innerHTML = lng_t_ernten;
        g("erntewasserpic").src = imgpath + "lager/ernten.gif";
        g("erntewasserpic").style.display = "block";
        g("lager_pic").style.display = "none";
        g("lager_info").style.zIndex = 15;
        g("lager_name").innerHTML = "&nbsp;";
        g("lager_wachsezeit").src = imgpath + "leer.gif";
        g("lager_ist1").innerHTML = "";
        g("lager_zeit").innerHTML = "";
        g("lager_ertrag").src = imgpath + "leer.gif";
        g("lager_ist2").innerHTML = "";
        g("lager_ernte").innerHTML = "";
        $("lager_info").style.display = "none";
    }
    else {
        if (mode == 2) {
            g("bedientext").innerHTML = lng_t_giessen;
            g("erntewasserpic").src = imgpath + "lager/giessen.gif";
            g("erntewasserpic").style.display = "block";
            g("lager_pic").style.display = "none";
            g("lager_info").style.zIndex = 15;
            g("lager_name").innerHTML = "&nbsp;";
            g("lager_wachsezeit").src = imgpath + "leer.gif";
            g("lager_ist1").innerHTML = "";
            g("lager_zeit").innerHTML = "";
            g("lager_ertrag").src = imgpath + "leer.gif";
            g("lager_ist2").innerHTML = "";
            g("lager_ernte").innerHTML = "";
            $("lager_info").style.display = "none";
        }
        else {
            if (mode == -1) {
                deleteCursor();
            }
        }
    }
} }
function showMain() { var c = ["transp", "cart", "globaltransp", "globalerrorbox", "notepad", "farmhousecontainer", "farmhousetransp", "headquarteroptions", "gardenmaincontainer", "innermaincontainer", "guildmaincontainer", "createguildbox", "reallocatebox", "guildmultibox", "guildnewsticker", "transp9", "commitbox", "buildbox", "transp2", "locationwait", "feedcommit", "citymaincontainer", "friendscontainer", "reallocateBuildingContainer", "transp3", "newsboy", "newsboystart", "fundpopup", "glock", "shop", "animaldealer", "giftshopinner", "marktschreierinner", "beemasterinner", "collectorscontainer", "transp4", "ordercommit", "einkaufszettel", "multiframe", "popup_garden", "forestry_questlist_container", "questboxtransp", "questbox", "xmasevent_city", "minigameShipTransp", "minigameShip", "clothingdonation_transp", "clothingdonation", "building_inner", "farm_dog_box", "farmersmarket_pos1_inner", "farmersmarket_pos2_inner", "farmersmarket_pos3_inner", "farmersmarket_pos4_inner", "farmersmarket_pos5_inner", "farmersmarket_pos6_inner", "megafield", "kniffel", "olympia_transp", "olympia_box", "hillwalk"]; for (var b = 0; b < c.length; b++) {
    if ($(c[b])) {
        hideDiv(c[b]);
    }
} if (megafield_data && !megafield_data.block) {
    closeMegafield();
} closeFoodworld(); $("multiframe").src = ""; closeMarket(); city = ""; closeForestry(); closeFoodcontest(); closeMap(); for (var b = 1; b <= 4; b++) {
    for (var a = 1; a <= 100; a++) {
        if (forestry_questdelay_run[b + "_" + a]) {
            window.clearInterval(forestry_questdelay_run[b + "_" + a]);
            forestry_questdelay_run[b + "_" + a] = 0;
            forestry_questdelay_time[b + "_" + a] = 0;
        }
    }
} }
function setBlockMain(a) { if (a == 1) {
    $("blockmainnavi").style.width = "170px";
    $("blockmainnavi").style.left = "635px";
}
else {
    $("blockmainnavi").style.width = "275px";
    $("blockmainnavi").style.left = "530px";
} }
function generalAction(c, d, b, a) { if (d) {
    if (b) {
        d.opt1 = b;
    }
    if (a) {
        d.opt2 = a;
    }
} ajaxAction("main", c, d, generalActionResponse); }
function generalActionResponse(m, h, e) { var u = m; var s = 0; if (e && e.opt1) {
    s = e.opt1;
} var r = 0; if (e && e.opt2) {
    r = e.opt2;
} if (h == "setnewsunread" && specialoffer && specialoffer.data && specialoffer.data.active && specialoffer.data.today) {
    specialoffer.init(1);
}
else {
    if (h == "setnewsunread" && collectevent && collectevent.data && collectevent.data.daily) {
        collectevent.daily(collectevent.data.daily);
    }
    else {
        hideDiv("globalbox");
        hideDiv("globaltransp");
    }
} if (h == "help") {
    newhelp_data[s] = u[1];
    helpInit(s);
} if (h == "setnewsunread") {
    var q = s;
    if (q == 1) {
        closeNewsboyStart();
    }
    if (q == 2) {
        nextNews();
    }
} if (h == "boxinit") {
    initBoxFeaturesResponse(u);
} if (h == "boxpremium") {
    location.href = "main.php";
} if (h == "boxad") {
    currentad = u[1];
    setAdCountDown(u[1]);
    initBoxFeatures();
} if (h == "box48hbonus" || h == "boxitem" || h == "boxsendcode") {
    initBoxFeatures();
} if (h == "initnotepad") {
    $("notepadentry").value = u[1];
    calcNotepadLetters();
    showDiv("notepad");
} if (h == "savenotepad") {
    hideDiv("notepad");
} if (h == "rackupdate") {
    var t = s;
    rackobj = u[1];
    racklocks = u[2];
    rackbonis = u[3];
    updateRackGo(t);
} if (h == "savefriendinfo") {
    initFriendsResponse(u);
    hideDiv("friendlist_infofield");
} if (h == "initwbw") {
    setCityWBWContentResponse(u);
} if (h == "sendwbwproduct") {
    setCityWBWContent(2);
} if (h == "sendcanvass") {
    profilCanvassSendResponse();
} if (h == "closetutorial") {
    tutorial = 0;
    showMain();
    initZones(1);
} if (h == "friendinfo") {
    var d = s;
    friendinfo = u[1];
    setFriendInfoContent(1);
    setActivateFriend(d);
} if (h == "addfriend") {
    checkedfriends = u[1];
    uncheckedfriends = u[2];
    showfriendslist(2);
    hideDiv("friendscontainertransp");
    showFriendlistFeedback("friendslistfeedback", str_replace("%NAME%", $("friendsearchinput").value, friendslist_invite_success));
    $("friendsearchinput").value = "";
    hideDiv("friendsearch");
} if (h == "acceptfriend") {
    initFriends();
    showFriendlistFeedback("friendslistfeedback", friendslist_invite_accept);
} if (h == "denyfriend") {
    globalerrorbox(friendslist_invite_deny);
} if (h == "delfriend") {
    var c = s;
    var b = r;
    for (var l = 0; l < checkedfriends.length; l++) {
        if (checkedfriends[l]["id"] == c) {
            checkedfriends[l] = 0;
        }
    }
    for (var l = 0; l < uncheckedfriends.length; l++) {
        if (uncheckedfriends[l]["id"] == c) {
            uncheckedfriends[l] = 0;
        }
    }
    showFriendlistFeedback("friendslistfeedback", str_replace("%NAME%", b, friendslist_del_info));
    showfriendslist(friendslistsel);
    $("friendsinfo").innerHTML = "";
    hideDiv("friendscontainertransp");
} if (h == "memoryinit" || h == "memoryflip") {
    openMemoryResponse(u);
} if (h == "watchtravelad") {
    if (u == 1) {
        travelad = 0;
    }
    mapTravelEnd();
} if (h == "pollvote") {
    pollvotes = new Array;
    hideDiv("pollcontainer");
} var a = ["contracts_init", "contracts_unread", "contracts_cancel", "contracts_accept", "contracts_deny", "contracts_send", "contracts_savetemplate", "contracts_deltemplate"]; if (in_array(h, a)) {
    if (h == "contracts_send") {
        contractsResetCart();
    }
    contracts_data = u;
    contractsInit(s);
    if (h == "contracts_send") {
        contractsOverview("out");
        contractsToogleDetail(s, "out");
        var n = str_replace("[*player*]", s, t_contracts_sent_text);
        globalerrorbox(n);
    }
    if (h == "contracts_cancel") {
        contractsOverview("out");
    }
    if (h == "contracts_accept" || h == "contracts_deny") {
        contractsOverview("in");
    }
    if (h == "contracts_unread") {
        contractsOverview("in");
        contractsToogleDetail(s, "in");
    }
    if (h == "contracts_deltemplate" || h == "contracts_savetemplate") {
        contractsNew();
    }
} }
function farmAction(q, m, C, t, d, c, b) { var e = "ajax/farm.php?"; var A = "rid=" + rid + "&mode=" + q + "&farm=" + m + "&position=" + C; if (t && typeof t != "undefined") {
    t = t.toString();
    if (t.indexOf("[]") == -1) {
        A += "&id=" + t;
    }
} if (C > 1) {
    currentposition = C;
} if (q == "cropgarden" && t) {
    A += "&ignoreguild=1";
} if (q == "autoplant_buy_load" && t) {
    A += "&coins=" + t;
} if (q == "createnewrack" && t) {
    A += "&deco=" + t;
} if (q == "garden_removeweed") {
    A += "&tile=" + t;
} if (q == "garden_plant") {
    A += "&" + t + "&cid=" + d;
} if (q == "garden_water") {
    A += "&" + t;
} if (q == "garden_harvest") {
    if (t.indexOf("[]") > -1) {
        A += "&" + t;
    }
    else {
        A += "&pflanze[]=" + t + "&feld[]=" + d + "&felder[]=" + c + "&closepopup=1&force=" + b;
    }
} if (q == "cancelproduction" || q == "harvestproduction" || q == "startproduction" || q == "cancelguildproduction") {
    A += "&slot=" + t;
} if (q == "startproduction") {
    A += "&pid=" + d + "&guildjob=" + c;
} if (q == "fuelstation_stats") {
    A += "&type=" + fuelstation_stats_select;
} if (q == "fuelstation_level") {
    A += "&slot=" + t + "&amount=" + $("fuelstation_dialog_leveladd_insert").value;
} if (q == "fuelstation_entry") {
    var l = $("fuelstation_product_select_input").value;
    if (l <= 0) {
        return false;
    }
    A += "&amount=" + l + "&slot=" + t + "&pid=" + d;
} if (q == "fuelstation_buyslot") {
    A += "&slot=" + t;
} if (q == "fuelstation_harvest") {
    A += "&slot=" + t;
} if (q == "fuelstation_speedup") {
    A += "&slot=" + t + "&coins=" + d;
} if (q == "fuelstation_buy" && !fuelstation_block) {
    return false;
}
else {
    fuelstation_block = 0;
} if (q == "map_speedup") {
    A += "&slot=" + t + "&coins=" + d;
} if (q == "map_sendvehicle") {
    var w = "";
    for (var y in map_vehicle_cart[map_current_vehicle]) {
        var u = map_vehicle_cart[map_current_vehicle][y].pid;
        var B = map_vehicle_cart[map_current_vehicle][y].amount;
        w += y + "," + u + "," + B + "_";
    }
    A += "&route=" + map_current_route + "&vehicle=" + map_current_vehicle + "&cart=" + w;
    map_current_route = 0;
    map_current_vehicle = 0;
    map_vehicle_cart = {};
} if (q == "map_buyvehicle") {
    A += "&route=" + t + "&vehicle=" + d;
} if (q == "map_buyfarm") {
    A += "&newfarm=" + t;
} if (q == "vet_setrole") {
    A += "&role=" + t;
} if (q == "vet_leveladd") {
    A += "&amount=" + $("vet_dialog_leveladd_insert").value;
} if (q == "vet_questentry") {
    A += "&pid=" + t + "&amount=" + d;
} if (q == "vet_buyanimalslot") {
    A += "&slot=" + t;
} if (q == "vet_rentanimalslot") {
    A += "&slot=" + t;
} if (q == "vet_buyproductionslot") {
    A += "&slot=" + t;
} if (q == "vet_rentproductionslot") {
    A += "&slot=" + t;
} if (q == "vet_harvestproduction") {
    A += "&slot=" + t + "&pos=" + d;
} if (q == "vet_speedupproduction") {
    A += "&slot=" + t + "&coins=" + d;
} if (q == "vet_startproduction") {
    A += "&slot=" + t + "&pid=" + d + "&pos=" + c;
} if (q == "vet_stats") {
    A += "&type=" + t;
} if (q == "vet_setslot") {
    A += "&slot=" + t + "&aid=" + d;
} if (q == "vet_endtreatment") {
    A += "&slot=" + t;
} if (q == "vet_speeduptreatment") {
    A += "&slot=" + t + "&coins=" + d;
} if (q == "vet_starttreatment") {
    var n = "";
    for (var r in vet_selected_drugs[t]) {
        n += r + "_" + vet_selected_drugs[t][r] + ",";
    }
    A += "&slot=" + t + "&set=" + n;
} if (q == "foodcontest_stats") {
    A += "&type=" + t;
} if (q == "foodcontest_pincache") {
    A += "&value=" + t;
} if (q == "foodcontest_rent_block" || q == "foodcontest_buy_block") {
    A += "&block=" + t;
} if (q == "foodcontest_buy_merch") {
    A += "&pid=" + t + "&amount=" + d;
} if (q == "foodcontest_set_slot") {
    A += "&slot=" + t + "&pid=" + d;
} if (q == "foodcontest_buy_slot") {
    A += "&slot=" + t;
} if (q == "foodcontest_buy") {
    if (!foodcontest_block) {
        return false;
    }
    A += "&pid=" + t + "&coins=" + d;
    foodcontest_block = 0;
} if (q == "foodcontest_start") {
    A += "&pid=" + t;
} if (q == "megafruit_buy" && !megafruit_block) {
    return false;
}
else {
    megafruit_block = 0;
} if (q == "megafruit_stats") {
    A += "&pos=" + t;
} if (q == "megafruit_start") {
    A += "&pid=" + t;
} if (q == "megafruit_buyobject" || q == "megafruit_unlockobject") {
    A += "&oid=" + t;
} if (q == "megafruit_level") {
    A += "&amount=" + $("megafruit_dialog_leveladd_insert").value;
} if (q == "flowerarea_plant" || q == "flowerarea_harvest" || q == "flowerarea_water") {
    var n = "";
    for (var h in flowerarea_cache) {
        t = flowerarea_cache;
        n += h + ":" + flowerarea_cache[h] + ",";
    }
    A += "&set=" + n;
} if (q == "flowerarea_changebonus") {
    if (!flowerarea_changebonus_select) {
        return false;
    }
    A += "&pid=" + flowerarea_changebonus_select;
} if (q == "flowerarea_autoplant") {
    if (!flowerarea_autoplant_select) {
        return false;
    }
    A += "&set=0&pid=" + flowerarea_autoplant_select;
} if (q == "flowerarea_speedup") {
    A += "&coins=" + d + "&slot=" + t;
} if (q == "flowerslot_plant" || q == "flowerslot_water" || q == "flowerslot_remove") {
    var n = "";
    for (var h in flowerslots_cache) {
        t = flowerslots_cache;
        n += h + ":" + flowerslots_cache[h] + ",";
    }
    A += "&set=" + n;
} if (q == "handleflowerfarmi") {
    A += "&farmi=" + t + "&status=" + d;
} if (q == "buyflowergardener") {
    A += "&coins=" + t;
} if (q == "nursery_speedup") {
    A += "&coins=" + d + "&slot=" + t;
} if (q == "nursery_harvest") {
    A += "&slot=" + t;
} if (q == "nursery_startproduction") {
    if (nursery_startproduction_block == 1) {
        return false;
    }
    nursery_startproduction_block = 1;
    A += "&pid=" + t + "&slot=" + d;
} if (q == "nursery_buyslot") {
    A += "&slot=" + t;
} if (q == "buyfarmersmarketbuilding") {
    A += "&pos=" + t;
} if (q == "touchpad") {
    A += "&dir=" + t;
} if (q == "coinsbonusitems") {
    A += "&aktion=" + t;
} if (q == "getcoinsbonus") {
    A += "&itemid=" + t;
} if (q == "buyfarmhouseitem") {
    A += "&itemid=" + t + "&color=" + d;
} if (q == "changegardenspecial") {
    A += "&product=" + t;
} if (q == "reallocatebuilding") {
    A += "&set=" + t;
} if (q == "setfarmhouseitem") {
    A += "&itemid=" + t + "&color=" + d;
} if (q == "setpetname") {
    A += "&itemid=" + t + "&color=" + d + "&name=" + encodeURIComponent(c);
} if (q == "shredderstart") {
    A += "&product=" + t + "&amount=" + d;
} if (q == "sellfarmi") {
    A += "&farmi=" + t + "&status=" + d;
} if (q == "buybuilding") {
    A += "&buildingid=" + t;
} if (q == "activatepowerup") {
    A += "&formula=" + t;
} if (q == "destructbuilding") {
    A += "&pass=" + encodeURIComponent(t);
} if (q == "setadvancedproduction") {
    A += "&product=" + t + "&guildjob=" + d;
} if (q == "gardenspeedup") {
    A += "&coins=" + t;
} if (q == "autoplant") {
    A += "&product=" + t;
} if (q == "pony_setfarmi") {
    if (!pony_sel_farmi || !pony_sel_pony) {
        return false;
    }
    A += "&farmi=" + pony_sel_farmi + "&pony=" + pony_sel_pony;
} if (q == "pony_feed") {
    if (!$("pony_feed_amount").value) {
        return false;
    }
    A += "&pos=" + t + "&amount=" + $("pony_feed_amount").value;
} if (q == "pony_speedup") {
    if (!$("pony_speedup_amount").value) {
        return false;
    }
    A += "&pos=" + t + "&amount=" + $("pony_speedup_amount").value;
} if (q == "buyarchitect" || q == "activatearchitect") {
    A += "&id=" + architect_current_item;
} if (q == "carpentryentry") {
    if (carpentry_entryblock == 1) {
        return false;
    }
    carpentry_entryblock = 1;
    if (!($("carpentrybox_entry_pid").value > 0 && $("carpentrybox_entry").value > 0)) {
        return false;
    }
    A += "&pid=" + $("carpentrybox_entry_pid").value + "&amount=" + $("carpentrybox_entry").value;
} if (q == "reallocate_animals") {
    A += "&set=" + t;
} if (q == "megafield_fuel") {
    A += "&vehicle=" + megafield_vehicle_id;
} if (q == "megafield_plant") {
    var z = "";
    for (var y in megafield_plant_cache) {
        z += y + "_" + megafield_plant_cache[y] + "|";
    }
    if (z == "") {
        return false;
    }
    A += "&set=" + z;
} if (q == "megafield_tour") {
    var z = "";
    for (var y = 0; y < megafield_vehicle_tour.length; y++) {
        for (var v = 0; v < megafield_vehicle_tour[y].length; v++) {
            z += megafield_vehicle_tour[y][v] + ",";
        }
        z += "|";
    }
    if (z == "") {
        return false;
    }
    A += "&set=" + z + "&vid=" + megafield_vehicle_id;
} if (q == "megafield_buytile") {
    A += "&tile=" + t;
} if (q == "megafield_selectjob") {
    A += "&option=" + t;
} if (q == "megafield_vehicle_unlock" || q == "megafield_vehicle_buy") {
    A += "&vid=" + t;
} if (q == "megafield_level") {
    var l = $("megafield_dialog_leveladd_insert").value;
    if (l > 0) {
        A += "&amount=" + l;
    }
    else {
        return false;
    }
} if (q == "megafield_stats") {
    A += "&type=" + t;
} if (q == "megafield_insert") {
    if (megafield_insert_block == 1) {
        return false;
    }
    megafield_insert_block = 1;
    var l = $("dialog_entryline_number").value;
    if (!l) {
        return false;
    }
    A += "&pid=" + t + "&amount=" + l;
} if (q == "megafield_buylicense") {
    buy_license_block = 1;
} if (q == "megafield_autoplant") {
    A += "&pid=" + t;
} showGlobalWait(q); var s = createAjaxRequestObj(); s.open("GET", e + A, true); s.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); s.onreadystatechange = function () { farmActionResponse(s, q, m, C, t, d, c, b); }; s.send(null); }
function farmActionResponse(n, A, v, N, C, d, b, a) { var y = _chkRequest(n, A); if (y != 0) {
    hideGlobalWait();
    powerup_block = 0;
    carpentry_entryblock = 0;
    blockgardenspeedup = 0;
    megafield_insert_block = 0;
    if (A == "nursery_startproduction") {
        nursery_startproduction_block = 0;
    }
    if (A == "vet_setrole") {
        vet_wait_checkrole = 0;
    }
    if ($("gardenspeedupbox")) {
        hideDiv("gardenspeedupbox");
    }
    if (A == "gardenspeedup" || A == "nursery_speedup" || A == "flowerarea_speedup" || A == "vet_speeduptreatment" || A == "vet_speedupproduction" || A == "pets_speedupproduction" || A == "fuelstation_speedup" || A == "map_speedup") {
        global_speedup_block = 0;
    }
    if (A == "megafield_buylicense") {
        buy_license_block = 0;
    }
    if (y[0] == 0) {
        var L = { mode: A, farm: v, position: N, id: C, id2: d, id3: b, id4: a };
        if (A == "vet_checkrole") {
            vet_wait_checkrole = 0;
        }
        else {
            if (A == "watergarden") {
                errorboxgarden(gardennothingtowater);
            }
            else {
                if (A == "getadvancedcrop") {
                    var E = "closeLocationwait(" + N + ")";
                    globalerrorbox(y[1], E);
                }
                else {
                    if (A == "cropgarden" || A == "garden_harvest") {
                        var O = 0;
                        if (y[2] == 1) {
                            O = "hideDiv('globalbox'); hideDiv('globaltransp');";
                        }
                        errorboxgarden(y[1], O, L);
                    }
                    else {
                        globalerrorbox(y[1], 0, L);
                    }
                }
            }
        }
    }
    else {
        var D = ["carpentryentry", "setdonkey", "setcropbonus", "pony_buy", "pony_feed", "pony_speedup", "getadvancedcrop", "gardenspeedup", "autoplant", "updatebuilding", "buybuilding", "activatepowerup", "shredderstart", "setpetname", "changegardenspecial", "buyfarmhouseitem", "bulldozeground", "createnewrack", "createnewfarm", "getcoinsbonus", "setadvancedproduction", "deleteproduction", "reallocatebuilding", "megafruit_start", "megafruit_buyobject", "megafruit_unlockobject", "megafruit_level", "megafruit_buy", "buyarchitect", "foodcontest_start", "foodcontest_feed", "foodcontest_buy", "foodcontest_buy_slot", "foodcontest_set_slot", "foodcontest_buy_merch", "foodcontest_rent_block", "foodcontest_buy_block", "foodcontest_merchpin", "megafield_buytile", "megafield_selectjob", "megafield_level", "megafield_buylicense", "megafield_vehicle_unlock", "megafield_vehicle_buy", "megafield_update", "megafield_gamblejob", "megafield_insert", "megafield_autoplant", "megafield_teaser_close", "megafield_fuel", "vet_speeduptreatment", "vet_startproduction", "vet_speedupproduction", "vet_buyproductionslot", "vet_rentproductionslot", "vet_buyanimalslot", "vet_rentanimalslot", "vet_questentry", "vet_leveladd", "vet_buyleveladd", "vet_setrole", "vet_checkrole", "map_buyfarm", "map_buyvehicle", "map_sendvehicle", "map_speedup", "fuelstation_entry", "fuelstation_harvest", "fuelstation_speedup", "fuelstation_buy", "fuelstation_level", "fuelstation_stats", "reallocate_animals", "weather_forecast", "fuelstation_buyslot", "vet_buypharmacist", "megafield_harvest_all", "megafield_fertilize_all", "cancelproduction", "garden_removeweed", "garden_harvest", "autoplant_buy_load", "cancelguildproduction"];
        if (in_array(A, D)) {
            hideDiv("globalbox");
            hideDiv("globaltransp");
        }
        if (A == "carpentryentry") {
            carpentry_data = y[1];
            carpentryBuild(N);
        }
        if (A == "initarchitect" || A == "buyarchitect" || A == "activatearchitect") {
            if (A == "buyarchitect" || A == "activatearchitect") {
                setFarmhouse(architect_current_item);
            }
            architect_config = [y[1], y[2], y[3]];
            initArchitect();
        }
        if (A == "setdonkey") {
            closeDonkeyBuy();
        }
        if (A == "dailydonkey") {
            dailyDonkeyResult(y);
        }
        if (A == "setcropbonus") {
            closeCropBonusBox();
        }
        if (A == "initcropbonus") {
            cropbonus_data = y[1];
            gametimer.cropbonus_cooldown;
            cropBonusCoolDownTimer();
            showDiv("cropbonusbox");
            showDiv("box_donkeydialogtransp");
        }
        if (A == "pony_buy" || A == "pony_setfarmi" || A == "pony_crop" || A == "pony_feed" || A == "pony_speedup") {
            pony_sel_farmi = 0;
            pony_sel_pony = 0;
            pony_sel_farmi_pos = 0;
            pony_data = y[1];
            ponyBuild(N, A);
            if (y[1].levelup && y[1].levelup.level) {
                levelupAlert(y[1].levelup.level, y[1].levelup.leveltitle);
            }
        }
        if (A == "innerinfos" || A == "harvestproduction") {
            innerinfos_data = y;
            setBuildingInnerInfo(v, N, innerinfos_data);
            innerInfosResponse(N);
        }
        if (A == "getadvancedcrop") {
            getAdvancedCropResponse(y, N);
        }
        if (A == "setadvancedproduction" || A == "cancelproduction") {
            createAdvancedProductResponse(y, N, C);
        }
        if (A == "inithq") {
            initFarmhouseResponse(y);
        }
        if (A == "gardenspeedup") {
            useGardenSpeedupResponse(y, v, N);
        }
        if (A == "updatebuilding") {
            updateBuildingResponse(y, N, d, C, 0);
        }
        if (A == "cropgarden" || A == "garden_harvest") {
            cropGardenResponse(y, N);
            if (y[5]) {
                getGardenInfoResponse(y[5], N);
            }
        }
        if (A == "destructbuilding") {
            afterDestruction(N);
        }
        if (A == "buybuilding") {
            buyBuildingResponse(y, N, C);
        }
        if (A == "sellfarmi") {
            farmilist[b] = 0;
            goFarmi(b, d);
        }
        if (A == "activatepowerup") {
            poweruprack = y[1].rack;
            powerupactive = y[1].active;
            handlePowerups(1);
            if (y[1].points) {
                globalerrorbox(t_get_points_text.replace("%POINTS%", formatNumber(y[1].points)), "hideDiv('globalbox'); hideDiv('globaltransp')");
                $("globalbox_headline").innerHTML = t_get_points;
            }
        }
        if (A == "autoplant" || A == "garden_plant") {
            if (y[4] == 1) {
                showTutorial("4_1", 1);
            }
            autoplantposition = 0;
            if (y[3]) {
                showDiv("transp");
                showDiv("gardenmaincontainer");
                getGardenInfoResponse(y[3], N);
            }
            if (y[2] == 1) {
                waterGarden(N);
            }
        }
        if (A == "gardeninit") {
            getGardenInfoResponse(y, N);
        }
        if (A == "garden_removeweed") {
            AbrissResponse(y);
        }
        if (A == "cleargarden") {
            clearGardenResponse(y, N);
        }
        if (A == "watergarden" || A == "garden_water") {
            getGardenInfoResponse(y, N);
        }
        if (A == "setpetname") {
            setPetnameResponse(y, a);
        }
        if (A == "setfarmhouseitem") {
            farmhouseSelectedResponse(y, b);
        }
        if (A == "reallocatebuilding") {
            openReallocateBuilding(1);
        }
        if (A == "initreallocatebuildings") {
            initReallocateBuildingResponse(y);
        }
        if (A == "initreallocateanimals") {
            reallocateAnimalsInitResponse(y);
        }
        if (A == "changegardenspecial") {
            hideDiv("transp");
            hideDiv("headquarteroptions");
        }
        if (A == "getbuildingoptions") {
            buildBoxResponse(y, N);
        }
        if (A == "deleteproduction") {
            deleteProductionResponse(y, N);
        }
        if (A == "buyfarmhouseitem") {
            buyFarmhouseItemResponse(y, b, a, d);
        }
        if (A == "createnewrack") {
            createNewRackResponse(y);
        }
        if (A == "createnewfarm") {
            createNewFarmResponse(y);
        }
        if (A == "getcoinsbonus") {
            getCoinsBonusResponse();
        }
        if (A == "coinsbonusitems") {
            coinsBonusItemsResponse(y);
        }
        if (A == "showpan") {
            showPanResponse(y);
        }
        if (A == "touchpad") {
            usetouch = y[1];
            setTouchControl(C, d);
            if ($("farm_main")) {
                farmBuildPositions();
            }
        }
        if (A == "questbar") {
            questbarstatus = y[1];
            setQuestbarControl();
        }
        if (A == "initfriends") {
            initFriendsResponse(y);
        }
        if (A == "getfarms") {
            farmMove(1);
            setFarmersMarket();
            speedLinks();
        }
        if (A == "map_buyfarm") {
            speedLinks();
        }
        if (A == "weather_forecast") {
            openWeather();
        }
        if (A == "dogbonus") {
            hideDiv("transp");
            hideDiv("farm_dog_box");
        }
        if (A == "megafruit_harvest" || A == "megafruit_start" || A == "megafruit_buyobject" || A == "megafruit_unlockobject" || A == "megafruit_level" || A == "megafruit_buy") {
            if (y[1] && y[1].levelup && y[1].levelup.level) {
                levelupAlert(y[1].levelup.level, y[1].levelup.leveltitle);
            }
            if (y[1] && y[1].megafruit_levelup) {
                var r = t_megafruit_levelup_head;
                if (y[1].megafruit_levelup.pid) {
                    var z = str_replace("%PRODUCT%", produkt_name[y[1].megafruit_levelup.pid], t_megafruit_levelup_body);
                    z += '<br><img style="position:relative; margin-top:20px; width:35%" src="' + imgpath + "monsterfruit_" + y[1].megafruit_levelup.pid + '.png">';
                }
                else {
                    var z = t_megafruit_levelup_body2;
                }
                z = str_replace("%LEVEL%", y[1].megafruit_levelup.level, z);
                globalcommitbox(r, z);
            }
            if (y[1] && y[1].reward) {
                var r = t_megafruit_reward_head;
                var z = "<div>" + t_megafruit_reward_body1 + "</div>";
                z += '<div style="font-weight:bold; font-size:12px; margin-bottom:10px;">' + formatNumber(y[1].reward.reached) + "</div>";
                z += "<div>" + t_megafruit_reward_body2 + "</div>";
                if (y[1].reward.points > 0) {
                    z += "<div>" + formatNumber(y[1].reward.points) + "&nbsp;" + t_points + "</div>";
                }
                z += "<div>" + formatPrice(y[1].reward.money) + "</div>";
                if (y[1].reward.count > 0) {
                    z += "<div>" + formatNumber(y[1].reward.count) + "&nbsp;" + t_megafruit_fruit_name + "</div>";
                }
                if (y[1].reward.parts > 0) {
                    z += "<div>" + y[1].reward.parts + "&nbsp;" + str_replace("%NAME%", produkt_name[y[1].reward.pid], t_foodcontest_fruit_name) + "</div>";
                }
                if (y[1].reward["package"] > 0) {
                    z += '<div class="pets_package' + y[1].reward["package"] + '" style="width:50px; height:50px; background-size:100%; float:left; margin-left:65px;"></div><div style="float:left; margin:10px 0px 5px 0px;">1x</div><div class="clear"></div>';
                }
                globalcommitbox(r, z);
            }
            if (y[1] && y[1].feedback) {
                var r = t_megafruit_need_object_feedback;
                var z = "<div>" + t_megafruit_fruit_size + ":&nbsp;<b>" + farmersmarket_data.megafruit.current.points + "</b></div>";
                var l = (farmersmarket_data.megafruit.current.rewards.points - y[1].feedback.points);
                if (l > 0) {
                    z += '<div style="margin-top:4px;">+' + formatNumber(l) + "&nbsp;" + t_points + "</div>";
                }
                var q = (farmersmarket_data.megafruit.current.rewards.money - y[1].feedback.money);
                if (q > 0) {
                    z += '<div style="margin-top:4px;">+' + formatPrice(q) + "</div>";
                }
                var h = (farmersmarket_data.megafruit.current.rewards.fruits - y[1].feedback.fruits);
                if (h > 0) {
                    z += '<div style="margin-top:4px;">+' + formatNumber(h) + "&nbsp;" + t_megafruit_fruit_name + "</div>";
                }
                var w = (farmersmarket_data.megafruit.current.rewards.parts - y[1].feedback.parts);
                if (w > 0) {
                    z += '<div style="margin-top:4px;">+' + formatNumber(w) + "&nbsp;" + str_replace("%NAME%", produkt_name[farmersmarket_data.megafruit.current.rewards.pid], t_foodcontest_fruit_name) + "</div>";
                }
                globalcommitbox(r, z);
            }
            if (A == "megafruit_harvest") {
                delete megafruit_stats_cache[megafruit_stats_select];
            }
            initMegaFruit();
        }
        if (A == "megafruit_stats") {
            megafruit_stats = y[1].stats;
            megafruit_stats_delay = const_megafruit_stats_delay;
            if (!megafruit_stats_cache[megafruit_stats_select]) {
                megafruit_stats_cache[megafruit_stats_select] = {};
            }
            megafruit_stats_cache[megafruit_stats_select] = megafruit_stats;
            dialogMegaFruit("stats");
        }
        if (A == "foodcontest_update" || A == "foodcontest_start" || A == "foodcontest_feed" || A == "foodcontest_finish" || A == "foodcontest_buy" || A == "foodcontest_buy_slot" || A == "foodcontest_set_slot" || A == "foodcontest_buy_merch" || A == "foodcontest_rent_block" || A == "foodcontest_buy_block" || A == "foodcontest_pincache" || A == "foodcontest_stats" || A == "foodcontest_merchpin") {
            if (y[1] && y[1].levelup && y[1].levelup.level) {
                levelupAlert(y[1].levelup.level, y[1].levelup.leveltitle);
            }
            if (y[1] && y[1].finish) {
                rewardFoodcontest(y[1].finish);
            }
            if (A == "foodcontest_update") {
                setContentFoodcontest();
            }
            else {
                var F = 1;
                if (A == "foodcontest_pincache" && $("farmersmarket_pos6_inner").style.display != "block") {
                    F = 0;
                }
                if (F == 1) {
                    initFoodcontest();
                }
            }
            if (A == "foodcontest_buy") {
                dialogFoodcontest("stock");
            }
            if (A == "foodcontest_buy_slot" || A == "foodcontest_set_slot") {
                dialogFoodcontest("merch_slots");
            }
            if (A == "foodcontest_buy_merch") {
                dialogFoodcontest("set_merch_slot", foodcontest_merch_slot_select);
            }
            if (A == "foodcontest_pincache" || A == "foodcontest_rent_block") { }
            if (A == "foodcontest_feed") {
                var M = getRandom(0, (t_foodcontest_sound.length - 1));
                showFeedback("foodcontest_feedback", t_foodcontest_sound[M]);
            }
            if (y[1] && y[1].stats) {
                foodcontest_stats = y[1].stats;
                openStatsFoodcontest();
            }
            if (y[1] && y[1].result) {
                merchPinResultFoodcontest(y[1].result);
            }
            if (y[1] && y[1].collect) {
                foodcontest_flyer_data = y[1].collect;
                setTimeout(collectionFlyerFoodcontest, 100);
            }
        }
        if (A == "farmersmarket_update") {
            if ($("flowerarea_changebonus_dialog_inner")) {
                flowerarea_changebonus_select = 0;
                dialogFlowerArea("changebonus", 1);
            }
        }
        var m = ["flowerarea_plant", "flowerarea_harvest", "flowerarea_harvest_all", "flowerarea_water", "flowerarea_water_all", "flowerarea_autoplant", "flowerarea_speedup", "flowerarea_changebonus", "buyflowergardener", "buyfarmersmarketbuilding", "createflowerfarmi", "handleflowerfarmi", "flowerslot_plant", "flowerslot_water", "flowerslot_remove", "nursery_speedup", "nursery_harvest", "nursery_startproduction", "nursery_buyslot"];
        if (in_array(A, m)) {
            if (C) {
                for (var I in C) {
                    if ($("flowerarea_tile" + I + "_status")) {
                        $("flowerarea_tile" + I + "_status").removeClassName("flowerarea_tile_wait");
                    }
                    if ($("farmersmarket_deco" + I + "_status")) {
                        hideDiv("farmersmarket_deco" + I + "_plant_cursor");
                        hideDiv("farmersmarket_deco" + I + "_water_cursor");
                        hideDiv("farmersmarket_deco" + I + "_remove_cursor");
                        hideDiv("farmersmarket_deco" + I + "_nowater_cursor");
                        $("farmersmarket_deco" + I + "_status").removeClassName("flowerslots_wait");
                    }
                    if (A == "flowerslot_plant") {
                        animateFlowerSlot(I);
                    }
                }
            }
            if (A == "flowerarea_speedup" || A == "nursery_speedup") {
                hideDiv("speedupbox");
            }
            if (A != "createflowerfarmi" && A != "flowerslot_plant" && A != "flowerslot_water") {
                hideDiv("globalbox");
                hideDiv("globaltransp");
                if (A == "buyflowergardener") {
                    hideDiv("transp");
                }
                hideDiv("flowers_gardener_box");
                flowerarea_autoplant_select = 0;
                flowerarea_changebonus_select = 0;
                var t = ["flowerarea_plant", "flowerarea_harvest", "flowerarea_harvest_all", "flowerarea_water", "flowerarea_water_all", "flowerarea_autoplant", "flowerarea_speedup", "flowerarea_changebonus"];
                if (in_array(A, t)) {
                    buildFlowerArea();
                }
                var c = ["flowerslot_plant"];
                if (in_array(A, c)) {
                    setFlowerSlots();
                }
                if (y[1] && y[1].levelup && y[1].levelup.level) {
                    levelupAlert(y[1].levelup.level, y[1].levelup.leveltitle);
                }
                var O = 0;
                if (y[1] && y[1].drops) {
                    flowerarea_unique_drops = y[1].drops;
                    if (y[1] && y[1].harvested) {
                        O = "uniqueFoundFlowerArea()";
                    }
                    else {
                        uniqueFoundFlowerArea();
                    }
                }
                if (y[1] && y[1].harvested) {
                    var r = cropalllistheadline;
                    var z = "";
                    for (var B in y[1].harvested) {
                        z += '<div style="float:left; margin-right:5px;" class="kp' + B + '"></div>';
                        z += '<div style="float:left;">' + y[1].harvested[B] + "x " + produkt_name[B] + "</div>";
                        z += '<div class="clear"></div>';
                    }
                    globalBox(r, z, O, 0, 1);
                }
            }
            if (A == "nursery_speedup" || A == "nursery_harvest" || A == "nursery_startproduction" || A == "nursery_buyslot") {
                initNursery();
            }
            if (A == "flowerslot_plant" || A == "flowerslot_water" || A == "flowerslot_remove") {
                timerFlowerSlots();
            }
            if (A == "handleflowerfarmi" || A == "createflowerfarmi") {
                updateFarmersMarketFarmis();
                var s = [];
                if (A == "createflowerfarmi") {
                    s = y;
                    setFlowerFarmis(C, s);
                }
                else {
                    clearCart();
                    setFlowerFarmis(C, s, d);
                }
            }
            else {
                setFarmersMarket();
            }
            if (A == "buyfarmersmarketbuilding" && C == 5) {
                openFarmersMarketHowTo("vet");
            }
        }
        var u = ["megafield_update", "megafield_buytile", "megafield_selectjob", "megafield_level", "megafield_buylicense", "megafield_vehicle_unlock", "megafield_vehicle_buy", "megafield_gamblejob", "megafield_tour", "megafield_stats", "megafield_closetutorial", "megafield_insert", "megafield_autoplant", "megafield_harvest_all", "megafield_fuel"];
        if (in_array(A, u)) {
            buildMegafield();
            if (A == "megafield_insert") {
                megafield_insert_block = 0;
            }
            if (A == "megafield_gamblejob") {
                dialogMegafield("show_job");
            }
            if (A == "megafield_stats") {
                megafield_stats = y[1].stats;
                megafield_stats_delay = megafield_data.constants.stats_delay;
                if (!megafield_stats_cache[C]) {
                    megafield_stats_cache[C] = {};
                }
                megafield_stats_cache[C] = megafield_stats;
                dialogMegafield("stats", 0, 0, C);
            }
        }
        var K = ["vet_setslot", "vet_starttreatment", "vet_endtreatment", "vet_speeduptreatment", "vet_stats", "vet_startproduction", "vet_speedupproduction", "vet_harvestproduction", "vet_buyproductionslot", "vet_rentproductionslot", "vet_buyanimalslot", "vet_rentanimalslot", "vet_questentry", "vet_leveladd", "vet_buyleveladd", "vet_setrole", "vet_checkrole"];
        if (in_array(A, K)) {
            if (A == "vet_stats") {
                vet_data.stats = y[1].stats;
                vet_stats_cache_delay[vet_stats_select] = 30;
                if (!vet_stats_cache[vet_stats_select]) {
                    vet_stats_cache[vet_stats_select] = {};
                }
                vet_stats_cache[vet_stats_select] = vet_data.stats;
                vetDialog("stats", C);
            }
            vet_selected_drugs = {};
            updateVet();
            if (A == "vet_endtreatment" || A == "vet_starttreatment") {
                hideDiv("vet_transp");
                hideDiv("vet_animal_record");
            }
            if (A == "vet_checkrole" || A == "vet_endtreatment") {
                if (y[1] && y[1].role_reward) {
                    vetDialog("role_reward", 0, y[1].role_reward, y[1].reward_bonus);
                }
                else {
                    if (A == "vet_endtreatment" && y[1] && y[1].animal_reward) {
                        setTimeout(function J() { vetSetAnimalFlyer(C, y[1].animal_reward); }, 500);
                    }
                }
            }
            if (A == "vet_harvestproduction") { }
            if (A == "vet_questentry") {
                vetDialog("quests");
            }
        }
        var H = ["map_buyfarm", "map_buyvehicle", "map_sendvehicle", "map_update", "map_speedup"];
        if (in_array(A, H)) {
            updateMap();
            if (A == "map_buyfarm") {
                hideDiv("transp");
                hideDiv("farmhousecontainer");
                openMap();
                if (C == 5) {
                    mapHelpOpen();
                }
            }
            if (A == "map_update") {
                mapDialog("vehicleSheetTour");
            }
            else {
                if (A == "map_buyvehicle") {
                    mapDialog("openVehicleSheet", C);
                }
                else {
                    mapCloseVehicleSheet();
                    if (A == "map_sendvehicle") {
                        mapVehicleTours();
                    }
                }
            }
        }
        var G = ["fuelstation_entry", "fuelstation_harvest", "fuelstation_speedup", "fuelstation_buy", "fuelstation_level", "fuelstation_stats", "fuelstation_buyslot"];
        if (in_array(A, G)) {
            updateFuelstation(N);
            if (A == "fuelstation_stats") {
                fuelstation_stats_cache_delay[fuelstation_stats_select] = 30;
                if (!fuelstation_stats_cache[fuelstation_stats_select]) {
                    fuelstation_stats_cache[fuelstation_stats_select] = {};
                }
                fuelstation_stats_cache[fuelstation_stats_select] = y[1].stats;
                dialogFuelstation("stats", fuelstation_stats_select);
            }
            if (A == "fuelstation_harvest") {
                if (y[1] && y[1].levelup && y[1].levelup.level) {
                    levelupAlert(y[1].levelup.level, y[1].levelup.leveltitle);
                }
            }
        }
        if (A == "autoplant_buy_load") {
            autoPlantCommit(N, 1);
        }
        if (A == "cancelguildproduction") {
            showMain();
        }
        if (y.guildjob_log) {
            jobProductionInfoFlyer(v, N, y.guildjob_log);
        }
    }
} }
function initZones(a, b) { farmMove(a); return false; }
function killGardenTimeruns() { for (var a = 1; a <= fieldsamount; a++) {
    if (to[a]) {
        window.clearTimeout(to[a]);
    }
} }
function setTutorialLine() { if (tutorial) {
    if (tutorialarray && tutorialarray[tutorial]) {
        $("tutoriallinecontent").innerHTML = tutoriallinepre + tutorialarray[tutorial];
        showDiv("tutorialline");
    }
    showDiv("blockmainnavi");
    setBlockMain(2);
    if (tutorial == 1) {
        showTutorial(1);
    }
    else {
        if (tutorial == 2) {
            showTutorial(3, 1);
        }
        else {
            if (tutorial == 4) {
                setBlockMain(1);
                showTutorial(7, 1);
            }
            else {
                if (tutorial == 5) {
                    setBlockMain(2);
                    showTutorial(8, 1);
                }
                else {
                    if (tutorial == 6 && currentuserlevel == 1) {
                        showTutorial(10);
                    }
                    else {
                        if (tutorial == 7) {
                            showTutorial(12, 1);
                        }
                        else {
                            if (tutorial == 8) {
                                showTutorial(14, 1);
                            }
                            else {
                                if (tutorial == 9) {
                                    showTutorial(17, 1);
                                    setBlockMain(1);
                                }
                                else {
                                    setBlockMain(2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
else {
    if (currentuserlevel == 1 && tutorial == 0) {
        if ($("tutorialline")) {
            $("tutoriallinecontent").innerHTML = tutoriallinepre + tutorialreachnextlevel;
            showDiv("tutorialline");
        }
    }
    else {
        if (tutorial == 0 && $("tutorialline")) {
            hideDiv("tutorialline");
        }
    }
} if (!tutorial) {
    hideDiv("blockmainnavi");
} }
var poweruprack = 0;
var powerupactive = 0;
var player_guild = 0;
var player_guildmemberstatus = 0;
var freegardenspeedup = 0;
var freegardenspeedup2 = 0;
var freegardenspeeduptelekom = 0;
function bulldozeZone(a) { if (farms_data.farms[farm][a].bulldoze.premium == 1) {
    var b = "bulldozeZoneCommit2(" + a + ");";
}
else {
    var b = "letsBulldozeZone(" + a + ");";
} var c = str_replace("%MONEY%", "<b>" + formatPrice(farms_data.farms[farm][a].bulldoze.cost) + "</b>", infobulldozegroundtext); globalcommitbox(infobulldozegroundheadline, c, b); }
function bulldozeZoneCommit2(a) { var b = "letsBulldozeZone(" + a + ");"; var c = premiumzoneinfo; globalcommitbox(infobulldozegroundheadline, c, b); }
function letsBulldozeZone(a) { farmAction("bulldozeground", farm, a); }
function specialZoneFieldHandler(a) { showDiv("transp"); showDiv("gardenmaincontainer"); initGarten(a); }
function destructBuildingInit(a, d) { if (checkPartnerPortal()) {
    var b = "destructBuilding(" + a + ");";
}
else {
    var b = "destructBuildingInit2(" + a + ");";
} var c = infodestructbuildingcommit; if (d && d == 17) {
    c = str_replace("%CARPENTRYBONUS%", carpentry_bonus, t_carpentry_destruct1);
} globalcommitbox(infodestructbuildingheadline, c, b); }
function destructBuildingInit2(a) { var b = "destructBuilding(" + a + ");"; var c = infodestructbuildingcommit2 + '<br><input type="password" id="destruct_pass" name="destruct_pass">'; globalcommitbox(infodestructbuildingheadline2, c, b); }
function destructBuilding(a, c) { if (checkPartnerPortal()) {
    var b = "none";
}
else {
    if ($("destruct_pass").value != "") {
        if (upportaluser == 1) {
            var b = $("destruct_pass").value;
        }
        else {
            var b = $("destruct_pass").value;
        }
    }
    else {
        return false;
    }
} farmAction("destructbuilding", farm, a, b); }
function afterDestruction(a) { if (gametimer.carpentrytimer) {
    clearTimer("carpentrytimer");
} if (checkPartnerPortal()) { }
else {
    $("destruct_pass").value = "";
} window.clearInterval(run[a]); run[a] = 0; temp_reachlimit[a] = 0; hideDiv("globaltransp"); hideDiv("globalbox"); speedLinks(); }
function updateBuilding(a, c, b) { farmAction("updatebuilding", farm, a, c, b); }
function updateBuildingResponse(b, a, e, d, c) { hideDiv("transp"); hideDiv("headquarteroptions"); }
function fillBuildBox(a) { if ((currentuserlevel < buildingallowedminlevel) && tutorial == 0) {
    globalerrorbox(str_replace("%LEVEL%", buildingallowedminlevel, noupdate_lowlevel));
}
else {
    farmAction("getbuildingoptions", farm, a);
} }
function buyBuildingCategoryInfo(b, h, d) { var a = ""; if (in_array("ex", farm_garden_products[farm]) && h == 1) {
    a = t_building_buy_exotic_info;
} if (in_array("alpin", farm_garden_products[farm]) && h == 1) {
    a = t_building_buy_alpine_info;
} if (a == "") {
    buyBuildingCommit(b, h, d);
}
else {
    var c = errorheadline;
    var e = "buyBuildingCommit(" + b + "," + h + ",'" + d + "')";
    globalcommitbox(c, a, e);
} }
function buildBoxResponse(r, h) { buildinginfos[0] = r.options; if (r.main) {
    var e = "";
    for (buildingid in r.options) {
        var a = r.options[buildingid];
        var q = "buyBuildingCommit(" + h + ", " + buildingid + ", '" + a[10] + "')";
        if (farm_garden_products[farm]) {
            q = "buyBuildingCategoryInfo(" + h + ", " + buildingid + ", '" + a[10] + "')";
        }
        if (buildingid == 6) {
            q = "createGuildCommit(" + h + ", 0, 0)";
        }
        var l = '<div class="name">' + a[10] + "</div>";
        if (a.block) {
            q = "";
            l += '<div class="block">';
            if (a.block.level) {
                var m = t_requirements.replace("%NAME%", a[10]);
                l += "<div>" + m.replace("%LEVEL%", a[6]) + "</div>";
            }
            if (a.block.quest) {
                var m = t_needs_quest.replace("%CAMPAIGN%", a[14].campaign);
                l += "<div>" + m.replace("%QUEST%", a[14].questid) + "</div>";
            }
            if (a.block.unique) {
                l += "<div>" + t_building_only_once_allowed + "</div>";
            }
            if (a.block.premium) {
                l += "<div>" + t_error1053 + "</div>";
            }
            if (a.block.farm) {
                l += "<div>" + t_build_only_info + a[13].join() + "</div>";
            }
            l += "</div>";
        }
        var n = "";
        if (buildingid == 1 && farm == 5) {
            n = "_ex";
        }
        if (buildingid == 1 && farm == 6) {
            n = "_alpin";
        }
        var d = "";
        if (user_bar < a[1]) {
            d = "invalid";
            q = "";
        }
        e += '<div class="link option" onclick="' + q + '" onmouseover="showDiv(\'buildBoxItem' + buildingid + "')\" onmouseout=\"hideDiv('buildBoxItem" + buildingid + "')\">";
        e += '  <div class="img buildoption' + buildingid + n + '"></div>';
        if (!in_array(tutorial, [1, 7])) {
            e += '<div class="price ' + d + '">' + formatPrice(a[1]) + "</div>";
        }
        if (a.block) {
            e += '<div class="blocked"></div>';
        }
        e += '  <div id="buildBoxItem' + buildingid + '" class="ttbox">' + l + "</div>";
        e += "</div>";
    }
    $("buildboxcontent").innerHTML = e;
    showDiv("transp");
    showDiv("buildbox");
} if (r.addon) {
    if (run[h]) {
        globalerrorbox(noupdate_whileproduction);
    }
    else {
        var a = r.upgrade;
        var e = "";
        var q = "callCommitBox(" + h + "," + a[9] + "," + a[10] + ")";
        if (a[10] == 1 && a[9] == 5) {
            var c = r.options[a[10]][9] + a[2];
            q = "updateChoiceProduct(" + h + "," + a[9] + "," + a[10] + "," + c + "," + currentuserlevel + ");";
        }
        var l = "";
        var b = "";
        if (a[2] > 0) {
            if (a[10] == 1) {
                if (a[9] == 5) {
                    l += "<div>" + updatetext[7].replace("%MORE%", (r.options[a[10]][9] + a[2])) + "</div>";
                }
                else {
                    l += updatetext[6].replace("%MORE%", (5 + (r.options[a[10]][9] + a[2])));
                }
                b = "bo_waterboni.jpg";
            }
            else {
                l += updatetext[1].replace("%MORE%", (r.options[a[10]][9] + a[2]));
                var n = "";
                if (a[10] == 3) {
                    n = "2";
                }
                b = "bo" + n + "_animalbonus_" + a[10] + ".jpg";
            }
        }
        if (a[3] > 0) {
            l += "<div>" + updatetext[2].replace("%MORE%", a[3]) + "</div>";
            if (a[10] <= 6) {
                b = "bo_timebonus_" + a[10] + ".jpg";
            }
            else {
                b = "bo_timebonus_" + a[10] + "_" + a[9] + ".jpg";
            }
        }
        if (a[4] > 0) {
            l += "<div>" + updatetext[3].replace("%MORE%", a[4]) + "</div>";
            b = "bo_cropbonus_" + a[10] + ".jpg";
        }
        e += '<div class="upgrade link" onclick="' + q + '" onmouseover="showDiv(\'buildboxupgrade_tt\')" onmouseout="hideDiv(\'buildboxupgrade_tt\')">';
        e += '  <img class="img" src="' + imgpath + b + '">';
        e += '  <div class="stars" style="width:' + (a[9] * 13) + 'px"></div>';
        var n = "";
        if (carpentry_bonus > 0) {
            n = "*";
        }
        if (a[0] > 0) {
            e += '<div class="price">' + formatPrice(a[0]) + n + "</div>";
        }
        if (a[8] > 0) {
            e += '<div class="price">' + a[8] + "&nbsp;" + t_coins + "</div>";
        }
        e += '  <div id="buildboxupgrade_tt" class="ttbox">' + l + "</div>";
        e += "</div>";
        if (carpentry_bonus > 0) {
            e += '<div class="bonusinfo">' + t_price_add_carpentry.replace("%BONUS%", carpentry_bonus) + "</div>";
        }
        $("headquarteroptionscontent").innerHTML = e;
        showDiv("transp");
        showDiv("headquarteroptions");
    }
} if (tutorial == 1) {
    showTutorial(2, 2);
}
else {
    if (tutorial == 7) {
        showTutorial(13, 2);
    }
} }
function callCommitBox(a, h, e) { var b = "updateBuilding(" + a + "," + h + "," + e + ");"; if (e == 1) {
    var c = infoupdatebuildingfield;
    var d = infoupdatebuildingcommitfield;
}
else {
    var c = infoupdatebuilding;
    var d = infoupdatebuildingcommit;
} globalcommitbox(c, d, b); }
function updateBuildingBox(d, q, a, n, b) { var e = 0; for (_obj in buildinginfos[0]) {
    e++;
} var m = buildinginfos[0]; var c = ""; for (var l = 1; l <= e; l++) {
    if (m[l]) {
        if (q == m[l][0]) {
            var r = "buyBuildingCommit(" + d + "," + q + ",'" + m[l][10] + "'," + b + ");";
            if (q == 6) {
                r = "createGuildCommit(" + d + "," + b + ",0);";
            }
            var h = '<div class="link" style="position:absolute; top:' + n + "px; left:" + a + 'px;" ';
            h += 'onclick="' + r + '" onmouseover="showDiv(\'buildingoptionsinfo' + q + "');\" onmouseout=\"hideDiv('buildingoptionsinfo" + q + "');\">";
            h += '<img src="' + imgpath + "bo_" + str_replace(".png", ".jpg", m[l][5]) + '" >';
            if (tutorial != 1 && tutorial != 7) {
                h += '<div class="pricesign">' + formatPrice(m[l][1]) + "</div>";
            }
            h += "</div>";
            c += '<div style="position:absolute; top:' + (n + 50) + "px; left:" + (a + 50) + 'px;" id="buildingoptionsinfo' + q + '" class="blackbox tooltip_bo" onmouseover="showDiv(\'buildingoptionsinfo' + q + "');\" onmouseout=\"hideDiv('buildingoptionsinfo" + q + "');\">" + str_replace("%BUILDING%", m[l][10], infobuildingbuytext) + "</div>";
        }
    }
} return h + c; }
function updateChoiceProduct(d, a, l, h, m) { var e = ""; e += str_replace("%MORE%", h, buildinglastupdategardenintro) + "<br>"; e += '<select name="updatechoiceproduct" id="updatechoiceproduct" style="margin-top:10px;">'; if (farm > 4) {
    f = farm;
}
else {
    f = 1;
} var b = farm_garden_products[f]; for (var c in produkt_name) {
    if (produkt_name[c] && produkt_level[c] <= m && in_array(produkt_category[c], b)) {
        e += '<option value="' + c + '">' + produkt_name[c] + "</option>";
    }
} e += "</select>"; var n = "buyBuildingGardenChoiceProduct(" + d + "," + l + "," + a + ")"; globalcommitbox(buildinglastupdategardenheadline, e, n); }
function buyBuildingGardenChoiceProduct(a, d, c) { var b = $("updatechoiceproduct").value; farmAction("changegardenspecial", farm, a, b); }
function changeGardenSpecial(h, m) { var c = ""; if (changegardenspecialcost > 0) {
    c += "<span onmouseover=\"showDiv('chggardenspecialinfomoney');\" onmouseout=\"hideDiv('chggardenspecialinfomoney');\">";
    c += '<img src="' + imgpath + 'money.gif" width="12" height="12">&nbsp;' + formatPrice(changegardenspecialcost) + "</span>";
    c += "&nbsp;&nbsp;";
} c += "<span onmouseover=\"showDiv('chggardenspecialinfocoins');\" onmouseout=\"hideDiv('chggardenspecialinfocoins');\">"; c += '<img src="' + imgpath + 'menu/coins.gif" width="10" height="10">&nbsp;' + changegardenspecialcoins + "</span>"; if (changegardenspecialcost > 0) {
    c += '<div class="blackbox" id="chggardenspecialinfomoney" style="display:none; z-index:100; position:absolute; top:-2px; left:0px;">' + t_money + "</div>";
    var a = 105;
}
else {
    var a = 0;
} c += '<div class="blackbox" id="chggardenspecialinfocoins" style="display:none; z-index:100; position:absolute; top:-2px; left:' + a + 'px;">' + t_coins + "</div>"; var b = c + "<br><br>" + gardenupdatechangespecialinfo; var l = ""; l += b + "<br>"; l += '<select name="updatechoiceproductchg" id="updatechoiceproductchg">'; if (farm > 4) {
    f = farm;
}
else {
    f = 1;
} var d = farm_garden_products[f]; for (var e in produkt_name) {
    if (produkt_name[e] && parseInt(produkt_level[e]) <= parseInt(currentuserlevel) && in_array(produkt_category[e], d) && produkt_category[e] != "z") {
        if (e != m) {
            l += '<option value="' + e + '">' + produkt_name[e] + "</option>";
        }
    }
} l += "</select>"; var n = "changeGardenSpecialGo(" + h + ")"; globalcommitbox(gardenupdatechangespecialheadline, l, n); }
function changeGardenSpecialGo(a) { var b = $("updatechoiceproductchg").value; farmAction("changegardenspecial", farm, a, b); }
function buyBuildingCommit(a, m, c) { var l = ""; var h = ""; if (carpentry_bonus > 0) {
    l = "*";
    h = '<div class="bonusinfo">' + str_replace("%BONUS%", carpentry_bonus, t_price_add_carpentry) + "</div>";
} if (farms_data.farms[farm][a].premium) {
    var b = "buyBuildingCommit2(" + a + "," + m + ",'" + c + "');";
}
else {
    var b = "buyBuilding(" + a + "," + m + ")";
} var d = str_replace("%BUILDING%", c, infobuildingbuycommittext); var e = str_replace("%COST%", "<b>" + formatPrice(buildinginfos[0][m][1]) + "</b>" + l, t_buybuilding + h); globalcommitbox(d, e, b); }
function buyBuildingCommit2(a, h, c) { var b = "buyBuilding(" + a + "," + h + ")"; var d = str_replace("%BUILDING%", c, infobuildingbuycommittext); var e = premiumzoneinfo; globalcommitbox(d, e, b); }
function buyBuilding(a, b) { farmAction("buybuilding", farm, a, b); }
function buyBuildingResponse(b, a, d) { if (b[7]) {
    if (b[7][0] == 1) {
        b[7][1] = str_replace("%MONEY%", formatPrice(b[7][1]), gambletext[b[7][0]]);
        globalerrorbox(b[7][1]);
    }
} if (b[5] > 0) {
    tutorial = b[5];
} if (tutorial == 2) {
    showTutorial(3, 1);
} if (tutorial == 8) {
    showTutorial(14, 1);
} var c = 0; hideDiv("transp"); hideDiv("globaltransp"); hideDiv("buildbox"); hideDiv("globalbox"); speedLinks(); }
function shredderCommit() { var c = ""; c += "<div>" + shredder_product + "</div>"; c += '<div style="margin-bottom:5px;"><select id="shredderselect" name="shredderselect" onchange="fillShredderAmount();">'; for (var b = 0; b < 500; b++) {
    if (checkRackItem(b) > 0 && produkt_category[b] != "ex") {
        c += '<option value="' + b + '">' + produkt_name[b] + "</option>";
    }
} c += "</select></div>"; c += "<div>" + shredder_amount + '</div><div><input type="text" name="shredderamount" id="shredderamount" maxlength="5" size="20"></div>'; var a = "shredderStartSecure()"; globalcommitbox(shredder_headline, c, a); fillShredderAmount(); }
function shredderStartSecure(a, c) { var a = parseInt($("shredderselect").value); var c = parseInt($("shredderamount").value); if (c < 0) {
    return false;
} var b = "shredderStart(" + a + "," + c + ");"; var d = shredder_commit; globalcommitbox(shredder_headline, d, b); }
function shredderStart(a, b) { farmAction("shredderstart", farm, 0, a, b); }
function fillShredderAmount() { var a = $("shredderselect").value; $("shredderamount").value = checkRackItem(a); }
function hqBuildingOptions(e, d, c) { if (e == 1) {
    var a = "createNewRack()";
    if (!d) {
        var b = str_replace("%COST%", "<b>" + formatPrice(farmhouse_rack_data.price) + "</b>", infoheadquarterbuyracktext);
        if (farmhouse_rack_data.quest && farmhouse_rack_data.altprice) {
            b += '<div class="bonusinfo">' + str_replace("%COST%", formatPrice(farmhouse_rack_data.altprice), t_rack6_info) + "</div>";
            b = str_replace("%QUEST%", farmhouse_rack_data.quest, b);
        }
    }
    else {
        var b = str_replace("%COST%", "<b>" + d + "</b>", infoheadquarterbuyracktext);
    }
} if (e == 2) {
    var a = "farmAction('map_buyfarm', 1, 1, " + c + ")";
    var b = str_replace("%COST%", "<b>" + d + "</b>", infoheadquarterbuyfarmtext);
} globalcommitbox(0, b, a); }
function createNewFarm() { farmAction("createnewfarm", farm, 0); }
function createNewFarmResponse(a) { farmamount = a[2]; hideDiv("headquarteroptions"); hideDiv("iconnewfarm"); }
function createNewRack() { farmAction("createnewrack", farm, 0); }
function createNewRackResponse(a) { userracks = a[2]; if (a[3] && a[3] == "DECO") {
    decorack = 1;
    showDiv("rackcontrol");
} hideDiv("iconnewrack"); hideDiv("headquarteroptions"); }
function showAwards(l, b, a, h, d) { var e = '<div id="awardsimg' + b + '" style="position:relative; font-size:10px; margin-left:2px;">'; if (a > 0) {
    var c = "onmouseover=\"document.getElementById('" + l + "goldanz" + b + "').style.display='block';\" onmouseout=\"document.getElementById('" + l + "goldanz" + b + "').style.display='none';\"";
    e += '<div class="link" style="float:left; margin-top:2px;" ' + c + '><img src="' + imgpath + 'medaillen/10er.gif" border="0"></div>';
    e += '<div style="float:left; display:none;" id="' + l + "goldanz" + b + '">' + a + "</div>";
} if (h > 0) {
    var c = "onmouseover=\"document.getElementById('" + l + "silberanz" + b + "').style.display='block';\" onmouseout=\"document.getElementById('" + l + "silberanz" + b + "').style.display='none';\"";
    e += '<div class="link" style="float:left; margin-top:2px;" ' + c + '><img src="' + imgpath + 'medaillen/5er.gif" border="0"></div>';
    e += '<div style="float:left; display:none;" id="' + l + "silberanz" + b + '">' + h + "</div>";
} if (d > 0) {
    var c = "onmouseover=\"document.getElementById('" + l + "bronzeanz" + b + "').style.display='block';\" onmouseout=\"document.getElementById('" + l + "bronzeanz" + b + "').style.display='none';\"";
    e += '<div class="link" style="float:left; margin-top:2px;" ' + c + '><img src="' + imgpath + 'medaillen/1er.gif" border="0"></div>';
    e += '<div style="float:left; display:none;" id="' + l + "bronzeanz" + b + '">' + d + "</div>";
} e += '<div style="clear:both;"></div>'; e += "</div>"; return e; }
function cancelProduction(a, c) { var b = "farmAction('cancelproduction', " + farm + ", " + a + ", " + c + ")"; globalcommitbox(productionfinishheadline, productionfinish, b); }
function buildProductionOptions(a) { var c = "<div>"; if (innerinfos_data[1]["in"]) {
    for (var b = 0; b < innerinfos_data[1]["in"].length; b++) {
        c += htmlProductionSlotOption(a, innerinfos_data[1]["out"][b][1], innerinfos_data[1]["in"][b], innerinfos_data[1]["need"][b], innerinfos_data[1]["out"][b][2]);
    }
} c += ' <div class="clear"></div>'; if (checkIsValidGuildJobProduct()) {
    c += '<div class="headline">' + t_select_product_guild + "</div>";
    for (var b = 0; b < innerinfos_data[1]["in"].length; b++) {
        if (job_data.guild_job_data.data.products[innerinfos_data[1]["out"][b][1]]) {
            c += htmlProductionSlotOption(a, innerinfos_data[1]["out"][b][1], innerinfos_data[1]["in"][b], innerinfos_data[1]["need"][b], innerinfos_data[1]["out"][b][2], 1);
        }
    }
    c += '<div class="clear"></div>';
} c += "</div>"; globalBoxFlex(t_select_product, c, 0, 0, 1); }
function initLocation(a) { currentposition = a; hideDiv("guildmaincontainer"); hideDiv("gardenmaincontainer"); if ($("commitboxcrop")) {
    hideDiv("commitboxcrop");
} hideDiv("globalbox"); hideDiv("globaltransp"); hideDiv("transp2"); if (farms_data.farms[farm][a].animals > 0) {
    buildingInnerAction("init", farm, a);
}
else {
    if ($("innercontent")) {
        $("innercontent").innerHTML = "";
    }
    innerInfos(a);
} }
function innerInfos(a) { farmAction("innerinfos", farm, a); }
var carpentry_data = {};
var pony_data = {};
var innerinfos_data = {};
function innerInfosResponse(e) { var n = innerinfos_data; showDiv("transp"); showDiv("innermaincontainer"); locationinfo = n[1]; var h = ["beeaniinner", "kaeserei_info", "mayo_info", "wollerei_info", "update_crop_2", "update_crop_3", "update_crop_4", "update_crop_5", "update_crop_11_1", "update_crop_11_2", "update_crop_12", "update_time_2", "update_time_3", "update_time_4", "update_time_5", "update_time_11_1", "update_time_11_2", "update_time_12", "update_time_15", "update_13_2", "update_13_4", "update_13_5", "update_13_5_ani", "update_14_2", "update_14_4", "update_14_5", "update_14_5_1", "update_14_5_2", "update_16_2", "update_16_3", "update_16_4", "update_16_4_ani", "update_16_5", "update_21_2", "update_21_3", "update_21_4", "update_21_5"]; for (var c = 0; c < h.length; c++) {
    hideDiv(h[c]);
} if (locationinfo.buildingid == 17) {
    carpentry_data = locationinfo;
    carpentryBuild(e);
}
else {
    if (locationinfo.buildingid == 18) {
        pony_data = locationinfo;
        ponyBuild(e);
    }
    else {
        if (locationinfo.buildingid == 20) {
            buildFuelstation(e);
        }
        else {
            if (in_array(locationinfo.buildingid, [13, 14, 16, 21])) {
                factory.data = locationinfo;
                factory.inner(e);
            }
            else {
                var m = locationinfo[6];
                var d = "";
                if (farms_data.farms[farm][e].level > 1) {
                    for (var c = 2; c <= farms_data.farms[farm][e].level; c++) {
                        if (stopanimation == 1) {
                            d += '<div id="buildingani_' + m + "_" + c + '_static"></div>';
                        }
                        else {
                            d += '<div id="buildingani_' + m + "_" + c + '"></div>';
                        }
                    }
                }
                d += htmlProductionSlot(farm, e, 1);
                d += '<div class="big_close link" onclick="closeBuildingInner()"></div>';
                if (innerinfos_data[1]["in"].length > 1) {
                    d += '<div class="helpbutton_blue" style="position:absolute; top:45px; right:11px;" onmouseover="showDiv(\'inner_infos_helpbutton_tt\')" onmouseout="hideDiv(\'inner_infos_helpbutton_tt\')">';
                    d += '  <div id="inner_infos_helpbutton_tt" class="ttbox" style="left:auto; right:30px; width:200px;">';
                    d += '    <div style="margin-bottom:5px;">' + t_select_product_info + "</div>";
                    if (innerinfos_data[1]["in"]) {
                        for (var c = 0; c < innerinfos_data[1]["in"].length; c++) {
                            d += '<div style="margin-bottom:2px;">' + htmlProductBody(innerinfos_data[1]["out"][c][1]) + "</div>";
                        }
                    }
                    d += "  </div>";
                    d += "</div>";
                }
                $("innercontent").innerHTML = d;
                for (var l = 1; l <= 3; l++) {
                    if (farms_data.farms[farm][e].production && farms_data.farms[farm][e].production[(l - 1)]) {
                        var b = farms_data.farms[farm][e].production[(l - 1)];
                        var a = { farm: farm, position: e, slot: l, pid: b.pid, img_class: "production_slot_img" + b.pid, guild: b.guild };
                        if (b.remain <= 0) {
                            a.harvest = 1;
                            a.click = "getAdvancedCrop(" + e + ")";
                        }
                        else {
                            a.cancel = 1;
                        }
                        fillProductionSlot(a);
                    }
                    else {
                        var a = { farm: farm, position: e, slot: l, click: "buildProductionOptions(" + e + ")" };
                        fillProductionSlot(a);
                    }
                }
                if (m == 9 && level == 5) {
                    $("innermaincontainer").className = "inner_back inner_back9_5";
                }
                else {
                    if (m == 7) {
                        $("innermaincontainer").className = "inner_back inner_back7";
                    }
                    else {
                        $("innermaincontainer").className = "inner_back inner_back" + m;
                    }
                }
            }
        }
    }
} }
function setCompleteProductionAdvanced(a) { if ($("productionbar7_" + farm + "_" + a)) {
    $("productionbar7_" + farm + "_" + a).style.top = "8px";
} if ($("productionbar8_" + farm + "_" + a)) {
    $("productionimg8_" + farm + "_" + a).src = imgpath + "cheese_8.gif";
} if ($("productionbar9_" + farm + "_" + a)) {
    $("productionbar9_" + farm + "_" + a).style.height = "118px";
} if ($("productionbar10_" + farm + "_" + a)) {
    $("productionbar10_" + farm + "_" + a).style.height = "73px";
} if ($("productionyogurt" + farm + "_" + a)) {
    $("productionyogurt_inner" + farm + "_" + a).style.top = "0px";
} if ($("productionketchup" + farm + "_" + a)) {
    $("productionketchup_inner" + farm + "_" + a).style.height = "181px";
} if ($("productionwool" + farm + "_" + a)) {
    $("productionwool_inner" + farm + "_" + a).style.height = "181px";
} if ($("productionangora" + farm + "_" + a)) {
    $("productionangora_inner" + farm + "_" + a).style.height = "160px";
} if ($("advancedproduction" + farm + "_" + a)) {
    $("advancedproduction" + farm + "_" + a).innerHTML = statusProductionComplete;
}
else {
    if ($("productioninfotime2_" + farm + "_" + a)) {
        $("productioninfotime2" + farm + "_" + a).innerHTML = statusProductionComplete;
    }
} var c = advancedproductioncropcommit; var b = "getAdvancedCrop(" + a + ");"; var d = "closeLocationwait(" + a + ");"; commitboxcrop(advancedproductioncropcommit, c, b, d); }
function createAdvancedProductionCommit(a, e, c) { var d = advancedproduction_commit; if (c) {
    d = t_select_product_guild_info;
} var b = "createAdvancedProduction(" + a + "," + e + ", " + c + ")"; commitboxinner(advancedproduction_headline, d, b); }
function createAdvancedProduction(a, c, b) { farmAction("setadvancedproduction", farm, a, c, b); }
function createAdvancedProductResponse(b, a, d) { var c = b; var e = c[1]; hideDiv("transp2"); hideDiv("commitboxinner"); hideDiv("globalbox"); hideDiv("globaltransp"); initLocation(a); }
function setCurrentAdvancedProduction() { var a = info[6]; if (stopanimation == 0) {
    showDiv("productionani" + a);
}
else {
    showDiv("productionani" + a + "_static");
} setInfoBlock(position, info); }
function showFeedDropZone(a) { $("foodcontainer" + a).style.border = "2px solid #f00"; }
function hideFeedDropZone(a) { $("foodcontainer" + a).style.border = "0px solid #f00"; }
function closeLocationwait(a) { hideDiv("transp2"); hideDiv("feedcommit"); hideDiv("locationwait"); if ($("commitboxcrop")) {
    hideDiv("commitboxcrop");
} hideDiv("globalbox"); hideDiv("globaltransp"); hideDiv("transp"); hideDiv("innermaincontainer"); }
function closeAfterCrop(a) { setNoneProduction(a, locationinfo); }
function setCurrentProduction(a, d) { var e = d[6]; if (e == 5) {
    showDiv("beeaniinner");
} showDiv("feed" + e); setInfoBlock(a, d); var b = 0; if (d[2]) {
    for (var c = 1; c < 5; c++) {
        if (d[2][c]) {
            if (checkRackItem(d[2][c][1], farm)) {
                if (b == 0) {
                    b = d[2][c][3];
                }
                else {
                    if (d[2][c][3] < b) {
                        b = d[2][c][3];
                    }
                }
            }
        }
    }
} b = Math.floor(b / d[1][2]); if (d[10] >= (time[a] - b)) {
    if ($("infobubble" + e)) {
        $("infobubble" + e).innerHTML = infotext[e][4];
    }
}
else {
    if ($("infobubble" + e)) {
        $("infobubble" + e).innerHTML = str_replace("%TIME%", '<span style="color:red;">' + formatTime(d[10]) + "</span>", infotext[e][2]);
    }
} }
function setNoneProduction(a, h) { var l = h[6]; hideDiv("transp2"); if ($("commitboxcrop")) {
    hideDiv("commitboxcrop");
} hideDiv("globalbox"); hideDiv("globaltransp"); hideDiv("locationwait"); hideDiv("infoblock" + l); if ($("feed" + l)) {
    hideDiv("feed" + l);
} hideDiv("commitboxinner"); if ($("beeaniinner")) {
    hideDiv("beeaniinner");
} var e = h[4][2]; var d = ""; if (h[7]) {
    e = parseInt(h[4][2]) - (parseInt(h[4][2]) / 100 * parseInt(h[7]));
    if (setarab == 1) {
        d = '<span style="color:red; direction: ltr; unicode-bidi: embed">&nbsp;(-' + h[7] + "%)</span>";
    }
    else {
        d = '<span style="color:red;">&nbsp;(-' + h[7] + "%)</span>";
    }
} if (!h[2]) {
    var b = '<div class="kp' + h.need[0] + ' buildinginner_feedproductsimg"></div>';
    var c = str_replace("%PRODUCT1%", b + '<div class="buildinginner_feedproductstxt">' + produkt_name[h.need[0]] + '</div><div style="clear:both;"></div>', infotext_nonefood);
    var b = '<div class="kp' + h.need[1] + ' buildinginner_feedproductsimg"></div>';
    c = str_replace("%PRODUCT2%", b + '<div class="buildinginner_feedproductstxt">' + produkt_name[h.need[1]] + '</div><div style="clear:both;"></div>', c);
    $("infobubble" + h[6]).innerHTML = c;
}
else {
    $("infobubble" + h[6]).innerHTML = str_replace("%TIME%", '<span style="color:red;">' + formatTime(e) + "</span>" + d, infotext[l][1]);
} }
function setCompleteProduction(a, h) { if (h) {
    var b = h[6];
    var c = h[1][1];
    setInfoBlock(a, h);
}
else {
    var b = locationinfo[6];
    if (locationinfo[1]) {
        var c = locationinfo[1][1];
    }
    setInfoBlock(a, locationinfo);
} if ($("infobubble" + b)) {
    $("infobubble" + b).innerHTML = infotext[b][3];
} if ($("productionbar" + farm + "_" + a)) {
    $("productioninfotime" + farm + "_" + a).innerHTML = statusProductionComplete;
} if ($("productionbar" + farm + "_" + a)) {
    $("productionbar" + farm + "_" + a).style.top = "0px";
} if ($("productionbar2_" + farm + "_" + a)) {
    $("productionbar2_" + farm + "_" + a).style.top = "-6px";
    $("productionbar2_" + farm + "_" + a).style.left = "-24px";
} if ($("productionbar3_" + farm + "_" + a)) {
    $("productionbar3_" + farm + "_" + a).style.top = "0px";
    $("productionbar3_" + farm + "_" + a).style.height = "102px";
} if ($("productionbar4_" + farm + "_" + a)) {
    $("productionbar4_" + farm + "_" + a).style.top = "0px";
} if ($("productionbar7_" + farm + "_" + a)) {
    $("productionbar7_" + farm + "_" + a).style.top = "8px";
} if ($("productionbar15_" + farm + "_" + a)) {
    $("productionbar15_" + farm + "_" + a).style.height = "144px";
} if (locationinfo[1]) {
    var d = (parseInt(locationinfo[1][2]) * parseInt(locationinfo[4][3])) + parseInt(locationinfo[8]);
} if (infotext[b]) {
    var e = infotext[b][3];
}
else {
    var e = "";
} }
function setInfoBlock(b, e) { if (e) {
    buildingid = e[6];
    showDiv("infoblock" + buildingid);
    var h = 0;
    if (e[8] > 0) {
        h = (parseInt(e[8]) * parseInt(e[1][2]));
    }
    var d = "";
    var c = ((parseInt(e[4][3]) * parseInt(e[1][2])) + parseInt(h));
    var a = "";
    if (produkt_ernte_bonus[e[4][1]]) {
        a = '&nbsp;<span class="rack_cropbonus">+' + (produkt_ernte_bonus[e[4][1]] * parseInt(e[1][2])) + "</span>";
    }
    d += '<span class="productnamewhite">' + e[4][5] + "</span><br>" + croptext + " " + c + a;
    if (e[8] > 0) {
        d += '<span id="bonusinfo"> (+' + h + ")</span>";
    }
    d += '<div id="cancelproduction" onclick="killProduction(' + b + ')" class="important" onmouseover="showDiv(\'cancelproductioninfo\');" onmouseout="hideDiv(\'cancelproductioninfo\');">';
    d += '<img id="cancel" src="' + imgpath + 'cancel_off.png" onmouseover="changeButton(\'cancel\',1,1);" onmouseout="changeButton(\'cancel\',0,1);">';
    d += '<div id="cancelproductioninfo" class="blackbox" onmouseover="showDiv(\'cancelproductioninfo\');" onmouseout="hideDiv(\'cancelproductioninfo\');">' + terminateproduction + "</div>";
    d += "</div>";
    document.getElementById("productioninfo" + b).innerHTML = d;
} }
function killProduction(a) { var c = ""; c += productionfinish; var b = "deleteProduction(" + a + ")"; commitboxinner(productionfinishheadline, c, b); }
function deleteProduction(a) { farmAction("deleteproduction", farm, a); }
function deleteProductionResponse(b, a) { window.clearInterval(run[a]); temp_reachlimit[a] = 0; run[a] = 0; if (locationinfo[6] > 6) {
    hideDiv("transp2");
    hideDiv("commitboxinner");
    hideDiv("globalbox");
    hideDiv("globaltransp");
    initLocation(a);
}
else {
    setNoneProduction(a, locationinfo);
} }
function getAdvancedCrop(a) { farmAction("getadvancedcrop", farm, a); }
function getAdvancedCropResponse(b, a) { var d = b; var b = d[0]; window.clearInterval(run[a]); temp_reachlimit[a] = 0; run[a] = 0; if (d[3] && d[3].level) {
    levelupAlert(d[3].level, d[3].leveltitle);
} if (d[2]) {
    var c = "hideDiv('globalbox'); hideDiv('globaltransp'); initLocation(" + a + ");";
    globalerrorbox(d[2], c);
}
else {
    initLocation(a);
} }
function setEndproductImage(c, b, e, d) { var b = b; var n = e; var d = d; var a = a; var h = parseInt(n) * ((parseInt(c) % parseInt(d)) - parseInt(1)); var m = parseInt(n) * ((Math.ceil(parseInt(c) / parseInt(d))) - parseInt(1)); var l = new Array(); l[1] = h; l[2] = m; return l; }
function setCustomerStats() { if (customerstats) {
    var b = "";
    b += "<b>" + str_replace("%DAYS%", farmichronikdays, farmistatsheadline) + "</b><br><i>" + farmistatsinfo + "</i><br><br>";
    for (var a in customerstats) {
        if (customerstats[a] && a != "adstart" && customerstats[a]["count"] > 0) {
            if (setarab == 1) {
                b += str_replace("%FARMI%", "<b>" + customerstats[a]["count"] + "</b>", customerarecalled) + "&nbsp;" + a + "<br>";
            }
            else {
                b += a + "&nbsp;" + str_replace("%FARMI%", "<b>" + customerstats[a]["count"] + "</b>", customerarecalled) + "<br>";
            }
            if (customerstats[a]["serve"]) {
                b += farmistatsserve + ":&nbsp;" + customerstats[a]["serve"] + "<br>";
            }
            if (customerstats[a]["fired"]) {
                b += farmistatsfired + ":&nbsp;" + customerstats[a]["fired"] + "<br>";
            }
        }
    }
    if (currentad.startad) {
        b += "<br>" + adbegin + "<br><b>" + currentad.startad + "</b><br>";
        b += adend + "<br><b>" + currentad.endad + "</b><br>";
    }
    $("customerstatsinfo").innerHTML = b;
    showDiv("customerstatsinfo");
} }
function setFarmis() { var n = ""; var s = 0; var b = 0; var c = farmisinfo[0]; var q = farmisinfo[1]; farmilist = new Array; for (var e = 0; e < c.length; e++) {
    var a = c[e].id;
    var m = c[e].pic;
    farmilist[e] = 1;
    var r = '<div style="position:absolute; top:8px; left:16px;">';
    for (var d = 1; d <= 7; d++) {
        var l = farmisinfo[0][e]["p" + d];
        var h = farmisinfo[0][e]["a" + d];
        if (l > 0 && h > 0) {
            r += '<div class="kp' + l + '" style="overflow:hidden; margin-right:2px; marign-bottom:2px; float:left; width:15px; height:15px;"></div>';
            if (d % 4 == 0) {
                r += '<div style="clear:both;"></div>';
            }
        }
    }
    r += "</div>";
    var t = new Array;
    t[1] = new Array(40, 60, -1, -5);
    t[2] = new Array(30, 40, 0, 0);
    t[3] = new Array(30, 40, 2, 0);
    t[4] = new Array(33, 45, 2, 0);
    t[5] = new Array(33, 45, 4, 2);
    t[6] = new Array(40, 65, 2, -11);
    t[7] = new Array(40, 65, -2, -20);
    t[8] = new Array(45, 60, -2, -14);
    width = t[m][0];
    height = t[m][1];
    picleft = t[m][2];
    pictop = t[m][3];
    n += '<div alt="' + a + '" class="link" id="kunde_' + e + '" style="position:absolute; top:' + s + "px; left:" + b + 'px; width:40px; height:50px;" ';
    n += "onmouseover=\"$('kundeimg_" + e + "').src='" + imgpath + "verkauf/kunde_" + m + "_wink.gif'; showDiv('blase" + e + "');\" ";
    n += "onmouseout=\"$('kundeimg_" + e + "').src='" + imgpath + "verkauf/kunde_" + m + "_still.gif'; hideDiv('blase" + e + "');\" ";
    n += 'onclick="showCart(' + e + ');">';
    n += '<img style="position:absolute; left:' + picleft + "px; top:" + pictop + 'px; transform:rotate(0deg); -webkit-transform:rotate(0deg);" id="kundeimg_' + e + '" src="' + imgpath + "verkauf/kunde_" + m + '_still.gif" width="' + width + '" height="' + height + '">';
    n += '<div id="farmiline_special_add' + e + '" class="farmiline_special_add"></div>';
    n += '<div id="blase' + e + '" style="width:102px; height:50px; background:url(' + imgpath + 'verkauf/blase.gif) top left no-repeat; display:none; position:absolute; top:-50px; left:-75px;">' + r + "</div>";
    n += '<div id="sonne' + e + '" style="display:none; position:absolute; top:-35px; left:-5px; background:url(' + imgpath + 'verkauf/sonne.gif) top left no-repeat; width:56px; height:44px;">&nbsp;</div>';
    n += '<div id="wolke' + e + '" style="display:none; position:absolute; top:-35px; left:-5px; background:url(' + imgpath + 'verkauf/wolke.gif) top left no-repeat; width:56px; height:44px;">&nbsp;</div>';
    n += "</div>";
    b = b + 35;
} $("customerline").innerHTML = n; if (farmisinfo[2]) {
    customerstats = farmisinfo[2];
    $("customerstats").onmouseover = function (u) { setCustomerStats(); };
    $("customerstats").onmouseout = function (u) { hideDiv("customerstatsinfo"); };
}
else {
    $("customerstats").onmouseover = function (u) { };
    $("customerstats").onmouseout = function (u) { };
} for (var e = 0; e < c.length; e++) {
    $("farmiline_special_add" + e).style.left = "0px";
} }
function showCart(b, c) { var A = {}; if (c == 1) {
    var d = {};
    for (var y = 0; y < farmersmarket_data.farmis.length; y++) {
        if (farmersmarket_data.farmis[y].id == b) {
            var z = farmersmarket_data.farmis[y];
        }
        d[y] = farmersmarket_data.farmis[y].id;
    }
}
else {
    var z = farmisinfo[0][b];
    var d = farmisinfo[0];
    z.cart = [];
    for (var y = 1; y <= 7; y++) {
        if (z["p" + y] > 0) {
            var C = { pid: z["p" + y], amount: parseInt(z["a" + y]) };
            z.cart.push(C);
        }
    }
} clearCart(); var t = ""; var D = 0; var B = ""; var u = z.price; var v = z.cart; for (var y = 0; y < v.length; y++) {
    var l = v[y].pid;
    var a = parseInt(v[y].amount);
    var h = "";
    if (l > 0 && a > 0) {
        if (checkRackItem(l) >= a) {
            B = "color:#333366; font-weight:bold; font-size:16px;";
        }
        else {
            B = "color:#f00; font-weight:bold; font-size:16px;";
            D = 1;
        }
        t += '<div style="margin-bottom:5px; font-size:16px;">';
        t += '<div class="cartinner_productimg kp' + l + '"></div>';
        t += '<div class="cartinner_productinfo" style="' + B + '">' + a + "x " + produkt_name[l] + " " + h + "</div>";
        t += '<div style="clear:both;"></div>';
        t += "</div>";
    }
} var E = "handleFarmi(" + b; if (c == 1) {
    E = "handleFlowerFarmi(" + b;
} var e = ""; if (z.points) {
    e += '<div style="font-size:20px;"><div class="farmcartsumtext">' + t_pony_points + '</div><div class="farmcartsumamount">&nbsp;' + formatNumber(z.points) + '</div><div style="clear:both;"></div></div>';
} e += '<div style="font-size:20px;"><div class="farmcartsumtext">' + farmcartsum + '</div><div class="farmcartsumamount">&nbsp;' + formatPrice(u) + '</div><div style="clear:both;"></div></div>'; e += '<div style="margin-bottom:5px;">' + farmcartsubmitintro + "</div>"; e += '<div class="farmicartbutton1">'; if (D == 0) {
    e += '<button class="link button_big" type="button" onclick="' + E + ', 1)">' + farmcartyes + "</button>&nbsp;&nbsp;&nbsp;";
} e += '<button class="link button_big" type="button" onclick="clearCart();">' + farmcartlater + "</button>"; e += "</div>"; e += '<div class="farmicartbutton2">'; e += '<button class="link button_big" type="button" onclick="' + E + ', 2)" style="font-weight:bold; color:#f00;">' + farmcartno + "</button>"; e += "</div>"; var w = '<span style="font-size:20px;">' + farmcartintro + "</span>"; if (c == 1) {
    var m = 0;
    var q = 0;
    var r = 0;
    for (var s in d) {
        s = parseInt(s);
        if (d[s] == b) {
            if (d[(s - 1)]) {
                m = d[(s - 1)];
            }
            if (d[(s + 1)]) {
                q = d[(s + 1)];
            }
            r = d[s];
        }
    }
    if (m > 0) {
        w += '<div id="ell" class="link farmicartnaviposleft" onclick="showCart(' + m + ', 1)"></div>';
    }
    if (q > 0) {
        w += '<div id="elr" class="link farmicartnaviposright" onclick="showCart(' + q + ', 1)"></div>';
    }
}
else {
    if (b >= 1) {
        for (var n = parseInt(b - 1); n >= 0; n--) {
            if (farmilist[n] == 1 && d[n]) {
                w += '<div id="ell" class="link farmicartnaviposleft" onclick="showCart(' + n + ", " + c + ')"></div>';
                break;
            }
        }
    }
    if (parseInt(b + 1) < 16) {
        for (var n = parseInt(b + 1); n < 16; n++) {
            if (farmilist[n] == 1 && d[n]) {
                w += '<div id="elr" class="link farmicartnaviposright" onclick="showCart(' + n + ", " + c + ')"></div>';
                break;
            }
        }
    }
} $("cartheader").innerHTML = w; $("cartcontent").innerHTML = t; $("cartsubmit").innerHTML = e; $("carttrend").className = ""; if (z.trend && z.trend == 1 && !c) {
    $("carttrend").addClassName("carttrend" + z.trend);
} if (z.points) {
    $("cartsubmit").removeClassName("cartsubmit");
    $("cartsubmit").addClassName("cartsubmit_flower");
}
else {
    $("cartsubmit").removeClassName("cartsubmit_flower");
    $("cartsubmit").addClassName("cartsubmit");
} showDiv("transp"); showDiv("cart"); }
function clearCart() { $("cartcontent").innerHTML = ""; $("cartsubmit").innerHTML = ""; hideDiv("transp"); hideDiv("cart"); }
function handleFarmi(c, a) { var b = farmisinfo[0][c].id; farmAction("sellfarmi", farm, 1, b, a, c); }
function goFarmi(e, b) { clearCart(); $("kunde_" + e).style.zIndex = 5; $("kundeimg_" + e).style.transform = "rotate(0deg)"; $("kundeimg_" + e).style.webkitTransform = "rotate(0deg)"; new Effect.Move($("kunde_" + e), { x: 35, y: 25, mode: "relative", duration: 2, beforeStart: function () { goAwayFarmi(e, b); }, queue: { scope: "test" + e } }); if (b == 2 && is_halloween == 1) {
    $("farmiline_special_add" + e).style.left = "-35px";
    new Effect.Fade($("farmiline_special_add" + e), { duration: 2, from: 0, to: 0.6, afterFinish: function () { $("farmiline_special_add" + e).style.opacity = 0.6; $("farmiline_special_add" + e).addClassName("farmiline_special_add2"); }, queue: { scope: "test" + e } });
    new Effect.Shake($("farmiline_special_add" + e), { duration: 5, distance: 4, afterFinish: function () { }, queue: { scope: "test" + e } });
    new Effect.Move($("kunde_" + e), { x: 640, y: 25, mode: "absolute", duration: 5, afterFinish: function () { }, queue: { position: "end", scope: "test" + e } });
}
else {
    new Effect.Move($("kunde_" + e), { x: 650, y: 25, mode: "absolute", duration: 8, afterFinish: function () { $("kundeimg_" + e).style.transform = "rotate(90deg)"; $("kundeimg_" + e).style.webkitTransform = "rotate(90deg)"; }, queue: { position: "end", scope: "test" + e } });
} new Effect.Move($("kunde_" + e), { x: 650, y: 1500, mode: "absolute", duration: 12, afterFinish: function () { $("kundeimg_" + e).style.transform = "rotate(0deg)"; $("kundeimg_" + e).style.webkitTransform = "rotate(0deg)"; }, queue: { position: "end", scope: "test" + e } }); farmisaway[e] = 1; for (var d = 0; d < maxfarmisinline; d++) {
    if (d > e && $("kunde_" + d) && !farmisaway[d]) {
        var c = d;
        var a = Effect.Queues.get("test" + c);
        a.each(function (h) { h.cancel(); });
        new Effect.Move($("kunde_" + c), { x: -35, y: 0, duration: 2, beforeStart: function () { moveFarmiLeft(c); }, afterFinish: function () { standStillFarmi(); }, queue: { position: "end", scope: "test" + c } });
    }
} }
function goAwayFarmi(c, a) { var b = farmisinfo[0][c]["pic"]; if (a == 1) {
    $("sonne" + c).style.display = "block";
    $("kundeimg_" + c).src = imgpath + "verkauf/kunde_" + b + "_gehkorb.gif";
}
else {
    if (a == 2) {
        $("wolke" + c).style.display = "block";
        $("kundeimg_" + c).src = imgpath + "verkauf/kunde_" + b + "_geh.gif";
    }
} $("kunde_" + c).onmouseover = function (d) { }; $("kunde_" + c).onmouseout = function (d) { }; $("kunde_" + c).onclick = function (d) { }; }
function moveNewFarmi() { var a = 15; new Effect.Move($("kunde_" + a), { x: -35, y: 0, duration: 8, beforeStart: function () { moveFarmiLeft(a); }, afterFinish: function () { setFarmiStatus(a); }, queue: { position: "end", scope: "test" + a } }); }
function standStillFarmi() { for (var a = 0; a < maxfarmisinline; a++) {
    if (!farmisaway[a]) {
        setFarmiStatus(a);
    }
} }
function moveFarmiLeft(b) { if (farmisinfo[0][b]) {
    var a = farmisinfo[0][b]["pic"];
    if ($("kunde_" + b)) {
        $("kundeimg_" + b).src = imgpath + "verkauf/kunde_" + a + "_komm.gif";
    }
    $("kunde_" + b).onmouseover = function (c) { };
    $("kunde_" + b).onmouseout = function (c) { };
    $("kunde_" + b).onclick = function (c) { };
} }
function setFarmiStatus(b) { if (farmisinfo[0][b]) {
    var a = farmisinfo[0][b]["pic"];
    $("kundeimg_" + b).src = imgpath + "verkauf/kunde_" + a + "_still.gif";
    $("kunde_" + b).onmouseover = function (c) { $("kundeimg_" + b).src = imgpath + "verkauf/kunde_" + a + "_wink.gif"; showDiv("blase" + b); };
    $("kunde_" + b).onmouseout = function (c) { $("kundeimg_" + b).src = imgpath + "verkauf/kunde_" + a + "_still.gif"; hideDiv("blase" + b); };
    $("kunde_" + b).onclick = function (c) { showCart(b); };
} }
function initGarten(a) { if (tutorial != 3) {
    clearWachseTimeouts();
} hideDiv("guildmaincontainer"); hideDiv("innermaincontainer"); for (var b = 1; b <= maxfieldfields; b++) {
    $("field" + b).innerHTML = "";
} water = new Array(); to = new Array(); garten_prod = new Array(); garten_x = new Array(); garten_y = new Array(); garten_max_x = new Array(); garten_max_y = new Array(); garten_name = new Array(); garten_gttpic = new Array(); garten_zeit = new Array(); garten_ernte = new Array(); garten_wasser = new Array(); garten_kategorie = new Array(); garten_entf = new Array(); if (tutorial == 2) {
    showTutorial(4, 2);
} setGartenPremiumFeatures(a); if (tutorial > 0 && tutorial <= 3) {
    hideDiv("gardencancel");
}
else {
    showDiv("gardencancel");
} getGartenInfo(a); }
function setGartenPremiumFeatures(a) { if (premium == 1 || (currentuserlevel >= teasergardenfeaturecropmin && currentuserlevel < teasergardenfeaturecropmax)) {
    $("cropall").onclick = new Function("cropGarden(" + a + ")");
    $("cropall").className = "cropall";
    $("cropall").onmouseover = new Function("showDiv('tooltipcropall')");
    $("cropall").onmouseout = new Function("hideDiv('tooltipcropall')");
}
else {
    $("cropall").onclick = new Function();
    $("cropall").className = "cropall_inactive";
    $("cropall").onmouseover = new Function("");
    $("cropall").onmouseout = new Function("");
} if (premium == 1 || (currentuserlevel >= teasergardenfeaturewatermin && currentuserlevel < teasergardenfeaturewatermax)) {
    $("waterall").onclick = new Function("waterGarden(" + a + ")");
    $("waterall").className = "waterall";
    $("waterall").onmouseover = new Function("showDiv('tooltipwaterall')");
    $("waterall").onmouseout = new Function("hideDiv('tooltipwaterall')");
}
else {
    $("waterall").onclick = new Function();
    $("waterall").className = "waterall_inactive";
    $("waterall").onmouseover = new Function("");
    $("waterall").onmouseout = new Function("");
} }
function setWaterBonusInfo(a, c) { var b = ""; if (c) {
    if (c.waterbonus > 0) {
        b += "<br><br>" + str_replace("%BONUS%", c.waterbonus, garden_waterbonus);
    }
    if (c.specialwaterbonus) {
        if (c.specialwaterbonus[0] > 0) {
            b += '<br><div style="width:130px; margin-top:2px;"><div style="float:left; width:15px; height:15px;" class="kp' + c.specialwaterbonus[0] + '"></div>';
            b += '<div style="float:left; margin-top:1px;">&nbsp;' + str_replace("%BONUS%", "+" + c.specialwaterbonus[1], garden_waterbonus) + "</div>";
            b += '<div style="clear:both;"></div></div>';
        }
    }
    if ($("currentwaterbonus")) {
        $("currentwaterbonus").innerHTML = b;
    }
    if ($("currentwaterallbonus")) {
        $("currentwaterallbonus").innerHTML = b;
    }
} }
function getGartenInfo(a) { farmAction("gardeninit", farm, a); }
function getGardenInfoResponse(s, D) { if (farm <= 4) {
    f = 1;
}
else {
    f = farm;
} var h = farm_garden_products[f]; var u = ""; if (in_array("ex", h)) {
    u = "_tropical";
} if (in_array("alpin", h)) {
    u = "_alpin";
} $("gardenmaincontainer").className = "garden_back" + u; $("anpflanzen").className = "anpflanzen" + u; $("giessen").className = "giessen" + u; $("ernten").className = "ernten" + u; $("waterall").className = "waterall" + u; $("cropall").className = "cropall" + u; var v = s[1]; if (!v) {
    return false;
} setBuildingInnerInfo(farm, D, v); if (v.plantinfo) {
    gartenshortinfo = v.plantinfo;
} var d = 0; for (_obj in v) {
    d++;
} var e = new Array(); for (var A = 1; A <= d; A++) {
    if (v[A]) {
        infos = v[A];
        if (infos.teil_nr) {
            var q = "";
            var m = "";
            if (!e[infos.teil_nr]) {
                var c = "";
                if (infos.x == 1 && infos.y == 1) {
                    e[infos.teil_nr] = infos.inhalt;
                    showField(D, infos.teil_nr, infos, c);
                }
                else {
                    var b = 1;
                    var a = 1;
                    for (var r = 0; r < infos.x; r++) {
                        q = parseInt(infos.teil_nr) + r;
                        e[q] = infos.inhalt;
                        c = "." + a + "." + b;
                        showField(D, q, infos, c);
                        for (var n = 1; n < infos.y; n++) {
                            a++;
                            m = parseInt(q) + (n * parseInt(maxfieldsx));
                            e[m] = infos.inhalt;
                            c = "." + a + "." + b;
                            showField(D, m, infos, c);
                            if (a == infos.y) {
                                a = 1;
                            }
                        }
                        b++;
                    }
                }
            }
        }
    }
} for (var l = 1; l <= fieldsamount; l++) {
    if (!e[l]) {
        infos = "";
        showField(D, l, infos, "", 1);
    }
} if (v.water) {
    var w = v.water;
    setWaterBonusInfo(D, w);
} $("gardenclearer").innerHTML = '<div id="gardenclearercontent" onclick="clearGardenCommit(' + D + ');"></div>'; hideDiv("gardenclearer"); for (var A = 0; A <= fieldsamount; A++) {
    if (garten_prod[A] && garten_kategorie[A] == "u") {
        showDiv("gardenclearer");
        break;
    }
} hideDiv("autoplantbuttoninner"); if ((premium == 1 || !premium && autoplant_allow_loads == 1) && currentuserlevel >= autoplantlevel) {
    showDiv("autoplantbuttoninner");
    $("autoplantbuttoninner").onclick = new Function("autoPlantCommit(" + D + ",1)");
} hideDiv("speedupbuttoninner"); if (currentuserlevel >= speedupgardenlevel && speedupgardenactive == 1) {
    if (freegardenspeedup || freegardenspeedup2 || freegardenspeeduptelekom) {
        $("speedupbuttoninner").className = "speedupgardenbutton_free link";
    }
    else {
        $("speedupbuttoninner").className = "speedupgardenbutton link";
    }
    showDiv("speedupbuttoninner");
    $("speedupbuttoninner").onclick = new Function("initGardenSpeedup(" + D + ")");
} var B = v.process; var t = ""; for (var A = 1; A <= fieldsamount; A++) {
    if (to[A]) {
        window.clearTimeout(to[A]);
    }
    if (B[A]) {
        var C = parseInt(B[A]["zeit"]) - parseInt(B[A]["gepflanzt"]);
        to[A] = window.setTimeout("wachse(" + A + ", " + B[A]["id"] + ", " + C + ", " + B[A]["gepflanzt"] + ")", 1);
        t = B[A]["currenttime"];
    }
    else {
        continue;
    }
} setGartenPremiumFeatures(D); }
function showField(l, b, r, c, m) { var n = "field" + b; var q = ""; var e = ""; if (document.getElementById(n)) {
    var a = 0;
    var d = 0;
    var s = 0;
    if (m == 1) {
        garten_prod[b] = 0;
        garten_x[b] = 1;
        garten_y[b] = 1;
        garten_max_x[b] = 1;
        garten_max_y[b] = 1;
        garten_gttpic[b] = "";
        garten_zeit[b] = 0;
        garten_ernte[b] = 0;
        garten_wasser[b] = 0;
    }
    else {
        garten_prod[b] = r.inhalt;
        garten_x[b] = 1;
        garten_y[b] = 1;
        garten_max_x[b] = produkt_x[r.inhalt];
        garten_max_y[b] = produkt_y[r.inhalt];
        garten_name[b] = produkt_name[r.inhalt];
        garten_gttpic[b] = produkt_gttpic[r.inhalt];
        garten_zeit[b] = r.zeit;
        garten_ernte[b] = produkt_ernte[r.inhalt];
        garten_wasser[b] = r.wasser;
        garten_kategorie[b] = produkt_category[r.inhalt];
        garten_entf[b] = produkt_destructcost[r.inhalt];
    }
    if (c != "") {
        var h = c.split(".");
        garten_x[b] = h[2];
        garten_y[b] = h[1];
    }
    if (m) {
        a = 0;
        d = 0;
    }
    else {
        if (produkt_category[r.inhalt] == "z") {
            r.phase = 4;
        }
        if (r.phase == 0) {
            if (c) {
                if (r.x == 1 && r.y == 2) {
                    a = "buddler3";
                }
                else {
                    a = "buddler2";
                }
            }
            else {
                a = "buddler";
            }
        }
        else {
            if (r.phase == 1) {
                a = produkt_picgrow1[r.inhalt];
            }
            else {
                if (r.phase == 2) {
                    a = produkt_picgrow2[r.inhalt];
                }
                else {
                    if (r.phase == 3) {
                        a = produkt_picgrow3[r.inhalt];
                    }
                    else {
                        if (r.phase == 4) {
                            a = produkt_picgrow4[r.inhalt];
                            d = produkt_ernte[r.inhalt];
                        }
                    }
                }
            }
        }
        if (r.iswater && r.phase < 4) {
            if (stopanimation == 1) {
                s = "garten/gegossen_static";
            }
            else {
                s = "garten/gegossen";
            }
            water[b] = r.wasser;
        }
    }
    q += '<div class="feld" id="f' + b + '" ';
    q += "style=\"background:url('" + imgpath + "produkte/" + a + c + ".gif');\"";
    q += 'onclick="parent.cache_me(' + l + "," + b + ",garten_prod[" + b + "],garten_kategorie[" + b + ']);" ';
    q += 'onmouseover="';
    q += "parent.show_built(" + b + ",'over'); displayMenuTooltip(" + b + ');" ';
    q += 'onmouseout="';
    q += "parent.show_built(" + b + ",'out');\">";
    if (r.guild == 1 && c == ".1.1") {
        q += '<div class="guildjob_orderpoints" style="position:absolute; width:20px; height:20px; background-size:100%; opacity:0.7; margin-top:12px;"></div>';
    }
    q += '<img src="' + imgpath + s + '.gif" class="wasser" id="w' + b + '" alt="">';
    q += '<img src="' + imgpath + '0.gif" class="cursor" id="b' + b + '" alt="' + d + '">';
    q += "</div>";
    $(n).innerHTML = q;
} }
function gardenShowPlantInfo(e) { window.clearInterval(prodtitle_interval); prodtitle_interval = 0; if (garten_name[e] && garten_prod[e]) {
    var a = Math.floor(parseInt(e / 12));
    var b = parseInt(e % 12);
    if (b == 0) {
        var d = parseInt(12 * 40) + 48;
        var c = parseInt((a - 1) * 40) + 110;
    }
    else {
        var d = parseInt(b * 40) + 48;
        var c = parseInt(a * 40) + 110;
    }
    gardenRemainTimeTitle(e, c, d);
    window.clearInterval(prodtitle_interval);
    prodtitle_interval = 0;
    prodtitle_interval = window.setInterval("gardenRemainTimeTitle(" + e + "," + c + "," + d + ")", 1000);
}
else {
    hideDiv("remaintimeinfo");
} }
function hideGardenRemainTimeTitle() { window.clearInterval(prodtitle_interval); prodtitle_interval = 0; $("remaintimeinfo").innerHTML = ""; hideDiv("remaintimeinfo"); }
function gardenRemainTimeTitle(h, d, e) { if (h <= maxfieldfields) {
    var b = "";
    kategorie = garten_kategorie[h];
    if (Zeit.Server == 0) {
        b += "lng_t_tt_berechne";
    }
    else {
        var c = (parseInt(garten_zeit[h]) + parseInt(Zeit.Verschiebung)) - parseInt(Zeit.Client);
        var a;
        if (c <= 0) {
            c = 0;
            window.clearInterval(prodtitle_interval);
            prodtitle_interval = 0;
            if (kategorie != "z" && kategorie != "u") {
                b += lng_t_fertig;
            }
        }
        else {
            a = 0;
            if (kategorie != "z") {
                b = formatTime(c);
            }
        }
    }
    $("remaintimeinfo").innerHTML = "<b>" + garten_name[h] + "</b><br>" + b;
    $("remaintimeinfo").style.top = d + "px";
    $("remaintimeinfo").style.left = e + "px";
    showDiv("remaintimeinfo");
} }
function cropGarden(a) { farmAction("cropgarden", farm, a); }
function cropGardenResponse(b, a) { if (b[1]) {
    var e = '<div style="width:160px; height:80px; overflow:auto;">';
    for (var d = 0; d < b[1].length; d++) {
        e += '<div class="cropall_dialog_img kp' + b[1][d]["i"] + '"></div>';
        e += '<div class="cropall_dialog_product">' + b[1][d]["a"] + "x " + b[1][d]["n"] + "</div>";
        e += '<div style="clear:both;"></div>';
    }
    e += "</div>";
    var h = "";
    if (b.olympia_finder > 0) {
        h = "olympia.finder(" + b.olympia_finder + ");";
    }
    if (b.battle_finder > 0) {
        h = "battle.finder(" + b.battle_finder + ");";
    }
    if (b[4]) {
        h = "cropActionCropDialog(" + b[4][0] + "," + b[4][1] + "," + b[4][2] + ");";
    }
    var c = "hideDiv('globalbox'); hideDiv('globaltransp'); " + h;
    errorboxgarden(e, c);
}
else {
    if (b.olympia_finder > 0) {
        olympia.finder(b.olympia_finder);
    }
    if (b.battle_finder > 0) {
        battle.finder(b.battle_finder);
    }
    if (b[4]) {
        cropActionCropDialog(b[4][0], b[4][1], b[4][2]);
    }
} if (b[2]) {
    if (currentuserlevel == 1 && b[3] == 1) {
        startTutorialPart2();
    }
    currentuserlevel++;
    levelupAlert(b[2].level, b[2].leveltitle);
    if (b[2].level == 2) {
        startTutorialPart2();
    }
} if (b[6]) {
    tutorial = 4;
    showDiv("transp8");
    showTutorial(6, 1);
} }
function refreshGarden(a) { setGartenPremiumFeatures(a); getGartenInfo(a); }
function waterGarden(a) { farmAction("watergarden", farm, a); }
function clearGardenCommit(a) { var d = 0; for (var c = 0; c <= fieldsamount; c++) {
    if (garten_prod[c] && garten_kategorie[c] == "u") {
        d = parseInt(d) + parseInt(garten_entf[c]);
    }
} d = d + cleargardencost; var h = "<div>" + cityadcost + '<img src="' + imgpath + 'money.gif" width="12" height="12">&nbsp;' + formatPrice(d) + '&nbsp;&nbsp;<img src="' + imgpath + 'menu/coins.gif" width="10" height="10">&nbsp;' + cleargardencoins + "</div>"; h += '<div class="blackbox" id="cleargardeninfomoney" style="display:none; z-index:100; position:absolute; top:-2px; left:0px;">' + t_money + "</div>"; h += '<div class="blackbox" id="cleargardeninfocoins" style="display:none; z-index:100; position:absolute; top:-2px; left:105px;">' + t_coins + "</div>"; var e = h + "<br><br>" + cleargardenintro; var b = "clearGarden(" + a + ")"; globalcommitbox(cleargardenheadline, e, b); }
function clearGarden(a) { farmAction("cleargarden", farm, a); }
function clearGardenResponse(b, a) { if (b[2] > 0) {
    document.getElementById("fundpopupbetrag").innerHTML = formatPrice(b[2]);
    document.getElementById("glock").style.display = "block";
    document.getElementById("fundpopup").style.display = "block";
} hideDiv("globaltransp"); hideDiv("globalbox"); specialZoneFieldHandler(a); }
function displayMenuTooltip(c) { if (garten_prod[c]) {
    prod = garten_prod[c];
}
else {
    prod = 0;
} if (prod != 0) {
    var a = garten_name[c];
    var b = garten_ernte[c];
    parent.ginfo(c, prod, a, b, garten_kategorie[c], garten_entf[c]);
} }
function showDiv(a) { if ($(a)) {
    $(a).style.display = "block";
} }
function hideDiv(a) { if ($(a)) {
    $(a).style.display = "none";
} }
function toogleDiv(a) { if ($(a)) {
    if ($(a).style.display == "block") {
        $(a).style.display = "none";
        if ($(a + "_plus")) {
            $(a + "_plus").src = imgpath + "guild/plus.gif";
        }
    }
    else {
        $(a).style.display = "block";
        if ($(a + "_plus")) {
            $(a + "_plus").src = imgpath + "guild/minus.gif";
        }
    }
} }
function changeImg(b, a) { document.getElementById(b).src = a; }
function changeButton(d, c, a) { var b = str_replace(a, "", d); if (c == 1) {
    document.getElementById(d).src = imgpath + b + "_on.png";
} if (c == 0) {
    document.getElementById(d).src = imgpath + b + "_off.png";
} }
function str_replace(c, b, a) { if (a) {
    return a.split(c).join(b);
} }
function isNumeric(c) { var d = "0123456789."; var b = true; var a; for (i = 0; i < c.length && b == true; i++) {
    a = c.charAt(i);
    if (d.indexOf(a) == -1) {
        b = false;
    }
} return b; }
function number_format(h, c, q, e) { var b = h, a = c; b = !isFinite(+b) ? 0 : +b; a = !isFinite(+a) ? 0 : Math.abs(a); var u = (typeof e == "undefined") ? "," : e; var d = (typeof q == "undefined") ? "." : q; var t = (a > 0) ? b.toFixed(a) : Math.round(b).toFixed(a); var r = Math.abs(b).toFixed(a); var m, l; if (r >= 1000) {
    m = r.split(/\D/);
    l = m[0].length % 3 || 3;
    m[0] = t.slice(0, l + (b < 0)) + m[0].slice(l).replace(/(\d{3})/g, u + "$1");
    t = m.join(d);
}
else {
    t = t.replace(".", d);
} return t; }
function errorboxguild(a) { globalBox(0, a, 0, 0, 1); }
function errorboxgarden(d, a, c) { var b = errorheadline; if (a) {
    b = cropalllistheadline;
} globalBox(b, d, a, 0, 1, 0, c); }
function commitbox(l, c, b, h) { var e = "<div>" + l + "</div>"; $("commitboxcontent").innerHTML = e; var a = "hideDiv('transp');"; if (h == 1) {
    a = "";
} if ($("farmhousetransp")) {
    a += " hideDiv('farmhousetransp');";
} var d = ""; d += '<div class="button_ok_commitbox" onclick="' + c + '" class="link">'; d += '<img src="' + imgpath + 'button_ok.png" onmouseover="this.src=\'' + imgpath + "button_ok_over.png'; showDiv('info_ok');\" onmouseout=\"this.src='" + imgpath + "button_ok.png'; hideDiv('info_ok');\">"; d += '<div class="button_ok_commitbox_info" id="info_ok" onmouseover="showDiv(\'info_ok\');" onmouseout="hideDiv(\'info_ok\');">' + commitbox_text_yes + "</div>"; d += "</div>"; d += '<div class="button_no_commitbox" onclick="' + a + ' hideDiv(\'commitbox\');" class="link">'; d += '<img src="' + imgpath + 'button_no.png" onmouseover="this.src=\'' + imgpath + "button_no_over.png'; showDiv('info_no');\" onmouseout=\"this.src='" + imgpath + "button_no.png'; hideDiv('info_no');\">"; d += '<div class="button_no_commitbox_info" id="info_no" onmouseover="showDiv(\'info_no\');" onmouseout="hideDiv(\'info_no\');">' + commitbox_text_no + "</div>"; d += "</div>"; $("commitboxfooter").innerHTML = d; $("commitpigani").style.backgroundImage = "url(" + imgpath + "pig_ani" + b + ".gif)"; if (b == 1) {
    $("commitpigani").style.backgroundPosition = "3px -2px";
}
else {
    if (b == 2) {
        $("commitpigani").style.backgroundPosition = "10px 8px";
    }
} showDiv("transp"); showDiv("commitbox"); }
function commitboxinner(b, c, a) { globalBox(b, c, a); }
function commitboxgarden(c, d, b, a) { globalBox(c, d, b); }
function commitboxcrop(b, d, a, c) { globalBox(b, d, a, c); }
function commitboxguild(c, a, d, b, e) { globalBox(c, a, d); }
function globalcommitbox(b, c, a, d, e) { globalBox(b, c, a, d, 0, e); }
function globalerrorbox(a, b, d) { var c = errorheadline; globalBox(c, a, b, 0, 1, 0, d); }
function globalBox(l, e, n, m, h, b, c) { if (n == "0") {
    n = 0;
} if (!(typeof e === "string")) {
    return 1;
} var q = "hideDiv('globalbox'); hideDiv('globaltransp');"; if (n == "maintenance") {
    n = "session_failed()";
    q = n;
} if (h) {
    if (!n) {
        n = q;
    }
    if (e && e.indexOf("%FORCEHARVEST%") >= 0 && c) {
        m = n;
        n = "farmAction('cancelguildproduction', " + c.farm + ", " + c.position + ", " + c.id + ")";
        if (c.mode == "cropgarden") {
            n = "farmAction('cropgarden', " + c.farm + ", " + c.position + ", 1)";
        }
        if (c.mode == "garden_harvest") {
            n = "farmAction('garden_harvest', " + c.farm + ", " + c.position + ", '" + c.id + "&ignoreguild=1')";
        }
        e += '<br><div style="margin:10px 0px;">' + t_guildjob_stock_full + "</div>";
    }
    if (e && e.indexOf("%PREMIUMLINK%") >= 0) {
        e += "<br><br>!PREMIUMLINK!";
    }
    if (e && e.indexOf("%HELPMETOEARNMONEY%") >= 0 && PAYMENTLINK) {
        e += '<br><br><a href="' + PAYMENTLINK + '" target="_blank"><button class="link coinsbutton_small" type="button">' + t_coins_buy_menu + "</button></a>";
    }
    if (e && e.indexOf("%LICENSEBUTTON%") >= 0) {
        e += '<br><br><button class="link coinsbutton_small" type="button" onclick="dialogMegafield(\'buy_license_confirm\')">' + t_megafield_license_plus + "</button>";
    }
} if (n == "off") {
    n = q;
    h = 1;
} var d = ""; if (b == 1) {
    d = "";
}
else {
    if (n) {
        d += '<button type="button" id="globalbox_button1" class="button_yes link" onclick="' + n + '"></button>';
    }
    if (n && !h && !m) {
        m = q;
    }
    if (m) {
        d += '<button type="button" id="globalbox_button2" class="button_no link" onclick="' + m + '"></button>';
    }
} $("globalbox_footer_buttons").innerHTML = d; $("globalbox_add").innerHTML = ""; if (!m) {
    m = q;
} $("globalbox_close").onclick = new Function(m); if (!l) {
    l = "";
} $("globalbox_headline").innerHTML = l; e = str_replace("%PREMIUMLINK%", "", e); e = str_replace("%HELPMETOEARNMONEY%", "", e); e = str_replace("%LICENSEBUTTON%", "", e); e = str_replace("%FORCEHARVEST%", "", e); $("globalbox_content").innerHTML = e; $("globalbox_char").className = "globalbox_sheep"; $("globalbox_charani").className = "globalbox_sheepani"; if (em2016 == 1) {
    $("globalbox_char").className = "globalbox_sheep_em";
    $("globalbox_charani").className = "globalbox_sheepani_em";
} showDiv("globalbox_charani"); showDiv("globalbox_char"); showDiv("globaltransp"); showDiv("globalbox"); showDiv("globalbox_footer"); $("globalbox_content").className = "globalbox_content"; var a = $("globalbox").getWidth(); $("globalbox").style.marginLeft = "-" + ((a + 80) / 2) + "px"; $("globalbox").style.top = null; $("globalbox").className = "globalbox"; $("globalbox_footer").className = ""; showDiv("globalbox_close"); }
function globalBoxFlex(c, a, e, b, h) { globalcommitbox(c, a, e, b, h); $("globalbox_content").removeClassName("globalbox_content"); $("globalbox_content").addClassName("globalbox_content_flex"); hideDiv("globalbox_char"); hideDiv("globalbox_footer"); var d = $("globalbox").getWidth(); $("globalbox").style.marginLeft = "-" + (d / 2) + "px"; $("globalbox").style.top = "100px"; $("globalbox_headline").style.paddingTop = "10px"; }
function showTutorial(c, a) { if (tutorialarray) {
    if (c) {
        for (var b in tutorialarray) {
            hideDiv("tutorial" + b);
        }
        showDiv("tutorial");
        showDiv("tutorial" + c);
    }
    if (tutorial) {
        if (tutorialarray[tutorial]) {
            $("tutoriallinecontent").innerHTML = tutoriallinepre + tutorialarray[tutorial];
            if (a && $("t_step" + a)) {
                $("t_step" + a).className = "highlight_tutorial_step";
            }
        }
        else {
            hideDiv("tutorialline");
        }
    }
    else {
        hideDiv("tutorialline");
    }
} }
function closeTutorial() { generalAction("closetutorial"); }
function increaseTutorialStep() { if (tutorial == 11) {
    return false;
}
else {
    generalAction("increasetutorialstep");
} }
function formatTime(e) { var a = Math.floor(e / 3600); var b = Math.floor((e % 3600) / 60); var d = Math.floor((e % 3600) % 60); if (a.toString().length == 1) {
    a = "0" + a.toString();
} if (b.toString().length == 1) {
    b = "0" + b.toString();
} if (d.toString().length == 1) {
    d = "0" + d.toString();
} var c = a + ":" + b + ":" + d + "&nbsp;h"; return c; }
function setServerTime() { servertimetime = servertimetime + 1; var e = new Date(servertimetime * 1000); var h = e.getFullYear(); var d = e.getMonth() + 1; if (String(d).length == 1) {
    d = "0" + d;
} var b = e.getDate(); if (String(b).length == 1) {
    b = "0" + b;
} var a = e.getHours(); if (String(a).length == 1) {
    a = "0" + a;
} var m = e.getMinutes(); if (String(m).length == 1) {
    m = "0" + m;
} var c = e.getSeconds(); if (String(c).length == 1) {
    c = "0" + c;
} var l = str_replace("d", b, date_format); l = str_replace("m", d, l); l = str_replace("Y", h, l); l = str_replace("H", a, l); l = str_replace("i", m, l); l = str_replace("s", c, l); $("serverzeit").innerHTML = servertime + " " + l; }
function formatPrice(b) { if (priceformat) {
    var c = priceformat.split(":");
    var a = number_format(b, c[0], c[1], c[3]) + " " + c[2];
    return a;
} }
function formatPoints(b) { if (pointsformat) {
    var c = priceformat.split(":");
    var a = number_format(price, c[0], c[1], c[3]) + " " + c[2];
    return a;
} }
function formatNumber(a) { return number_format(a, 0, set_komma, set_tausender); }
function formatDate(e) { var c = new Date(parseInt(e) * parseInt(1000)); var d = c.getFullYear(); var b = c.getMonth() + 1; var a = c.getDate(); return a + "." + b + "." + d; }
function getRandom(b, a) { if (b > a) {
    return (-1);
} if (b == a) {
    return (b);
} return (b + parseInt(Math.random() * (a - b + 1))); }
function in_array(b, a) { for (p = 0; p < a.length; p++) {
    if (b == a[p]) {
        return true;
    }
} return false; }
function initNotepad() { generalAction("initnotepad"); }
function calcNotepadLetters() { var a = $("notepadentry").value; if (a.length > notepadletters) {
    a = a.substring(0, notepadletters);
    $("notepadentry").value = a;
    $("notepadentry").scrollTop = $("notepadentry").scrollHeight;
} var b = str_replace("%LETTERS%", (parseInt(notepadletters) - parseInt(a.length)), marktschreierletters); $("restlettersnotepad").innerHTML = b; }
function saveNotepad() { var b = $("notepadentry").value; b = b.substring(0, notepadletters); var a = { text: encodeURIComponent(b) }; generalAction("savenotepad", a); }
function autoPlantBuyLoads(b) { var a = ""; for (coins in autoplant_loads) {
    var d = str_replace("%COINS%", coins, t_autoplant_buy_loads_item);
    a += '<div class="link coinsbutton_flex" style="font-size:12px; margin-bottom:5px;" onclick="farmAction(\'autoplant_buy_load\', ' + farm + ", " + b + ", " + coins + ')">' + str_replace("%LOADS%", autoplant_loads[coins], d) + "</div>";
} var c = ""; globalcommitbox(t_autoplant_buy_loads, a, c); }
var autoplantposition = 0;
var autoplantselected = 0;
function autoPlantCommit(d, r) { autoplantposition = d; var l = '<div id="autoplantselectbox" style="display:none; height:120px; width:204px; overflow:auto; margin:0 auto; position:absolute; left:83px;">'; var q = 0; var b = 0; if (farm <= 4) {
    var h = 1;
}
else {
    var h = farm;
} valid = farm_garden_products[h]; for (var c in produkt_name) {
    var m = checkRackItem(c, farm);
    if (m > 0) {
        if (in_array(produkt_category[c], valid) && m > 0) {
            if (autoplantselected == c) {
                b = 1;
            }
            var e = "autoplantselected=" + c + "; autoPlantCommit(" + d + ", " + c + ")";
            if (c == selected) {
                q = selected;
            }
            if (!q) {
                q = c;
            }
            l += '<div class="link" onclick="' + e + '" style="background-color:#fff; color:#000; padding:2px; text-align:left;" onmouseover="this.style.backgroundColor=\'#B39056\'" onmouseout="this.style.backgroundColor=\'#fff\'">';
            l += '<div class="kp' + c + '" style="float:left; margin-right:5px; width:15px;"></div>';
            l += '<div style="float:left;">' + produkt_name[c] + "</div>";
            l += '<div class="clear"></div>';
            l += "</div>";
        }
    }
    l += '<div class="clear"></div>';
} l += "</div>"; if (autoplantselected > 0 && b == 1) {
    q = autoplantselected;
}
else {
    autoplantselected = q;
} if (!autoplantselected) {
    autoplantselected = q;
} var n = '<div style="position:relative; width:350px;">'; if (autoplant_allow_loads == 1) {
    var u = 0;
    if (farms_data.autoplant_loads) {
        u = farms_data.autoplant_loads;
    }
    if (!premium || u > 0) {
        n += '<div style="margin-bottom:15px;">';
        n += '  <div style="margin-top:-10px;">' + t_autoplant_loads + u + "</div>";
        if (!premium) {
            n += '<div class="link coinsbutton_flex" style="margin-bottom:-10px;" onclick="autoPlantBuyLoads(' + d + ')">' + t_autoplant_buy_loads + "</div>";
        }
        var s = str_replace("%[PREMIUMACCOUNTLINK%", '<span class="link" style="text-decoration:underline;"; onclick=\'hideDiv("globalbox"); show_page("coins",0);\'>', t_autoplant_loads_info);
        n += '  <div class="bonusinfo">' + str_replace("%]%", "</span>", s) + "</div>";
        n += "</div>";
    }
} n += autoplant_select + "<br><br>"; n += '<div style="position:relative; width:204px; margin:0 auto;" class="link" onclick="autoPlantControl()">'; n += '  <div class="link" style="float:left; padding:2px; height:15px; text-align:left; width:185px; border-bottom:1px solid #000; background-color:#fff; color:#000;">'; if (q) {
    n += '    <div class="kp' + q + '" style="float:left; margin-right:5px; width:15px;"></div>';
    n += '    <div style="float:left;">' + produkt_name[q] + "</div>";
    n += '    <div class="clear"></div>';
}
else {
    n += t_stats_produkte;
} n += "   </div>"; n += '  <div class="link" id="autoplantselector" style="float:left; width:15px; height:20px; background:url(' + imgpath + 'market/sel_open.gif); background-color:#000;"></div>'; n += '  <div class="clear"></div>'; n += "</div>"; n += "</div>"; var t = "autoPlant(" + d + ")"; var a = "autoplantposition=0; hideDiv('globaltransp'); hideDiv('globalbox')"; globalcommitbox(autoplant_headline, n + l, t, a); }
function autoPlantControl() { if ($("autoplantselectbox").style.display == "block") {
    hideDiv("autoplantselectbox");
    $("autoplantselector").style.backgroundImage = "url(" + imgpath + "market/sel_open.gif)";
}
else {
    showDiv("autoplantselectbox");
    $("autoplantselector").style.backgroundImage = "url(" + imgpath + "market/sel_close.gif)";
} }
function autoPlant(a) { if (!autoplantselected) {
    return false;
} var b = autoplantselected; farmAction("autoplant", farm, a, b); }
function showPan(a) { if (a) {
    pan_site = 1;
} if ($("pancontainer").style.display == "block") {
    $("pancontainer").style.display = "none";
}
else {
    farmAction("showpan", farm, 0);
} }
var soccersheeps = new Array;
var xmassheeps = new Array;
var xmassheeps2 = new Array;
var xmassheeps3 = new Array;
var xmassheeps4 = new Array;
var xmassheeps5 = new Array;
var birthdaysheeps = new Array;
var sportsheeps = new Array;
var sportsheeps2 = new Array;
var xmassheeps6 = new Array;
function showPanResponse(a) { if (a[1]) {
    pan_items = a[1];
} if (a[2]) {
    soccersheeps = a[2];
} if (a[3]) {
    xmassheeps = a[3];
} if (a[4]) {
    birthdaysheeps = a[4];
} if (a[5]) {
    xmassheeps2 = a[5];
} if (a[6]) {
    xmassheeps3 = a[6];
} if (a[7]) {
    xmassheeps4 = a[7];
} if (a[8]) {
    sportsheeps = a[8];
} if (a[9]) {
    xmassheeps5 = a[9];
} if (a[10]) {
    sportsheeps2 = a[10];
} if (a[11] && paymentitemcollection) {
    paymentitemcollection.data = a[11];
} if (a[12]) {
    xmassheeps6 = a[12];
} if (pan_site == 10) {
    buildSoccerField();
} if (pan_site == 11) {
    buildSheeps("xmas");
} if (pan_site == 12) {
    buildSheeps("birthday");
} if (pan_site == 13) {
    buildSheeps("roof");
} if (pan_site == 14) {
    buildSheeps("alpin");
} if (pan_site == 15) {
    buildSheeps("choir");
} if (pan_site == 16) {
    buildSheeps("sport");
} if (pan_site == 17) {
    buildSheeps("snow");
} if (pan_site == 18) {
    buildSheeps("apresski");
} if (pan_site == 19) {
    buildSheeps("iceskating");
}
else {
    buildPanContent();
} showDiv("farmhousetransp"); showDiv("pancontainer"); }
function buildPanContent(C) { if (!C) {
    C = 0;
} $("pancontainer").style.backgroundImage = "url(" + imgpath + "schaufenster/pan2.jpg)"; var t = ["soccersheep_navi", "santaeyes", "santaeyes2", "fallingstar", "snowcastle", "paymentitem_collection"]; for (var B = 0; B < t.length; B++) {
    if ($(t[B])) {
        hideDiv(t[B]);
    }
} var b = ["soccersheep", "xmassheep", "birthdaysheep", "xmassheep2_", "xmassheep3_", "xmassheep4_", "sportsheep", "xmassheep5_", "sportsheep2_", "xmassheep6_"]; for (var A = 0; A < b.length; A++) {
    for (var B = 1; B <= 50; B++) {
        hideDiv(b[A] + B);
    }
} var q = ""; var y = 1; if (pan_site > 1) {
    y = ((pan_site - 1) * 80) + 1;
} var a = (pan_site * 80); var h = 1; var u = 9; var d = 9; if (pan_items.order) {
    for (var z = 0; z < pan_items.order.length; z++) {
        for (var B = 0; B < pan_items.categories[pan_items.order[z]].length; B++) {
            var w = pan_items.categories[pan_items.order[z]][B];
            if (pan_items.gifts[w] && h >= y && h <= a) {
                var c = ".gif";
                if (pan_items.gifts[w].png) {
                    c = ".png";
                }
                var r = "";
                if (h % 10 == 0 || h % 10 > 5) {
                    r += " right:50px; left:auto;";
                }
                else {
                    r += " left:50px; right:auto;";
                }
                var n = (h, Math.ceil((h - (((pan_site - 1) * 80))) / 10));
                if (n > 4) {
                    r += " bottom:0px; top:auto;";
                }
                else {
                    r += " top:0px; bottom:auto;";
                }
                var D = w;
                if (presents_hack[w]) {
                    D = presents_hack[w];
                }
                var e = "";
                var l = "";
                if (pan_items.gifts[w].giver) {
                    e = "link";
                    l = "cityAction('giverpresent', " + w + ")";
                }
                if (C) {
                    l = "";
                }
                var s = (h - ((Math.ceil(h / 80) - 1) * 80));
                d = 9 + (((s - 1) % 10) * 58);
                if (s % 10 == 0) {
                    s -= 1;
                }
                u = 9 + (Math.floor(s / 10) * 58);
                q += '<div id="pan_item' + h + '" class="' + e + '" style="position:absolute; top:' + u + "px; left:" + d + 'px;" onclick="' + l + '" onmouseover="showDiv(\'gift_tt' + w + "');\" onmouseout=\"hideDiv('gift_tt" + w + "');\">";
                q += '  <div style="width:50px; height:50px; background:url(' + imgpath + "gifts/" + D + c + '); background-size:50px 50px;"></div>';
                if (pan_items.gifts[w].counter) {
                    q += '  <div class="pan_navi_line_item_count">' + pan_items.gifts[w].counter + "</div>";
                }
                if (pan_items.gifts[w].giver) {
                    q += '<div class="giverblingbling"></div>';
                }
                q += '  <div id="panflyer' + w + '" class="panflyer"></div>';
                q += '  <div id="gift_tt' + w + '" class="ttbox" style="width:200px; text-align:center; ' + r + '">';
                q += '    <div style="width:100px; height:100px; margin:0 auto; background:url(' + imgpath + "gifts/" + D + c + ');"></div>';
                q += '    <div style="font-weight:bold; margin:5px 0;">' + pan_items.gifts[w].giftname + "</div>";
                if (pan_items.gifts[w].points && pan_items.gifts[w].giver) {
                    q += '<div style="margin:5px 0; font-style:italic;">' + str_replace("%POINTS%", pan_items.gifts[w].points, t_giverinfo) + "</div>";
                }
                if (pan_items.gifts[w].name) {
                    q += '<div style="overflow:auto; height:100px; width:100%;">';
                    for (var A = 0; A < pan_items.gifts[w].name.length; A++) {
                        q += '<div style="float:left;">' + pan_items.gifts[w].date[A] + "</div>";
                        if (pan_items.gifts[w].from[A] > 0 && !C) {
                            q += '<div class="link pan_delete_gift" onclick="delPresentCommit(' + pan_items.gifts[w].id[A] + ');"></div>';
                        }
                        q += '<div style="float:right;">' + pan_items.gifts[w].name[A] + "</div>";
                        q += '<div class="clear"></div>';
                    }
                    q += "</div>";
                }
                q += "  </div>";
                q += "</div>";
            }
            h++;
        }
        if (h % 10 > 0) {
            h += ((Math.ceil(h / 10) * 10) - h) + 1;
        }
    }
} q += '<div id="paymentitem_collection" class="collection"></div>'; q += '<div class="pan_navi_line">'; var m = Math.ceil(h / 80); for (var B = 1; B <= m; B++) {
    q += '<div id="pan_navi_line_item' + B + '" class="link pan_navi_line_item number" onclick="pan_site=' + B + "; buildPanContent(" + C + ');"><div style="margin-top:3px;">' + B + "</div></div>";
} q += '  <div id="pan_navi_line_item10" class="link pan_navi_line_item" onclick="pan_site=10; buildSoccerField();"><img style="width:20px;" src="' + imgpath + 'em/emball.png" border="0"></div>'; q += '  <div id="pan_navi_line_item11" class="link pan_navi_line_item" onclick="pan_site=11; buildSheeps(\'xmas\');"><img style="width:20px;" src="' + imgpath + 'pan_fifth_icon.png" border="0"></div>'; q += '  <div id="pan_navi_line_item12" class="link pan_navi_line_item" onclick="pan_site=12; buildSheeps(\'birthday\');"><img style="width:20px;" src="' + imgpath + 'pan_page7.png" border="0"></div>'; if ($("xmassheep2_1")) {
    q += '<div id="pan_navi_line_item13" class="link pan_navi_line_item" onclick="pan_site=13; buildSheeps(\'roof\');"><img style="width:20px;" src="' + imgpath + 'pan_page8.png" border="0"></div>';
} if ($("xmassheep3_1")) {
    q += '<div id="pan_navi_line_item14" class="link pan_navi_line_item" onclick="pan_site=14; buildSheeps(\'alpin\');"><img style="width:20px;" src="' + imgpath + 'pan_page9.png" border="0"></div>';
} if ($("xmassheep4_1")) {
    q += '<div id="pan_navi_line_item15" class="link pan_navi_line_item" onclick="pan_site=15; buildSheeps(\'choir\');"><img style="width:20px;" src="' + imgpath + 'pan_page10.png" border="0"></div>';
} if ($("sportsheep1")) {
    q += '<div id="pan_navi_line_item16" class="link pan_navi_line_item" onclick="pan_site=16; buildSheeps(\'sport\');"><img style="position:absolute; left:1px; top:2px;" src="' + imgpath + 'pan_sportsheeps.png" border="0"></div>';
} if ($("xmassheep5_1")) {
    q += '<div id="pan_navi_line_item17" class="link pan_navi_line_item" onclick="pan_site=17; buildSheeps(\'snow\');"><img style="position:absolute; left:2px; top:1px; width:24px;" src="' + imgpath + 'xmas/pan_xmassheeps4.png" border="0"></div>';
} if ($("sportsheep2_1")) {
    q += '<div id="pan_navi_line_item18" class="link pan_navi_line_item" onclick="pan_site=18; buildSheeps(\'apresski\');"><img style="position:absolute; left:2px; top:2px; width:23px;" src="' + imgpath + 'apresski_symbol.png" border="0"></div>';
} if ($("xmassheep6_1")) {
    q += '<div id="pan_navi_line_item19" class="link pan_navi_line_item" onclick="pan_site=19; buildSheeps(\'iceskating\');"><img style="width:20px;" src="' + imgpath + 'IceSkatingSheep_TabSymbol_00.png" border="0"></div>';
} q += '  <div class="clear"><div>'; if (!C) {
    if (paymentitemcollection && paymentitemcollection.data) {
        var v = paymentitemcollection.data.valid;
        q += '  <div class="collections">';
        for (var B = 0; B < v.length; B++) {
            q += '<div id="pan_navi_line_item' + v[B] + '" class="navi ' + v[B] + ' link" onclick="pan_site=\'' + v[B] + "'; panBuildCollection('" + v[B] + "')\" onmouseover=\"showDiv('pan_navi_line_item" + v[B] + "_tt')\" onmouseout=\"hideDiv('pan_navi_line_item" + v[B] + "_tt')\">";
            q += '  <div id="pan_navi_line_item' + v[B] + '_tt" class="ttbox">' + t_paymentitemcollection_names[v[B]] + "</div>";
            q += "</div>";
        }
        q += "  </div>";
        q += "<div>";
    }
} $("pancontainercontent").innerHTML = q; $("pan_navi_line_item" + pan_site).addClassName("pan_navi_item_active"); }
function panFlyer(b, a) { if ($("panflyer" + b)) {
    $("panflyer" + b).innerHTML = "+" + a;
    $("panflyer" + b).addClassName("panflyer_ani");
} }
function buildSoccerField(c) { if (!c) {
    c = 1;
} buildPanContent(); var a = "em/pan_back.jpg"; hideDiv("soccersheep_navi_up"); hideDiv("soccersheep_navi_down"); hideDiv("soccersheep_navi_right"); hideDiv("soccersheep_navi_left"); if (c == 3) {
    a = "em/fanblock_back.jpg";
    showDiv("soccersheep_navi_right");
} if (c == 2) {
    a = "wm/pan_back.jpg";
    showDiv("soccersheep_navi_up");
} if (c == 1) {
    showDiv("soccersheep_navi_down");
    showDiv("soccersheep_navi_left");
} $("pancontainer").style.backgroundImage = "url(" + imgpath + a + ")"; if (soccersheeps) {
    for (var b in soccersheeps) {
        if (c == 1 && b < 13) {
            showDiv("soccersheep" + b);
        }
        if (c == 2 && b >= 13 && b <= 23) {
            showDiv("soccersheep" + b);
        }
        if (c == 3 && b >= 24) {
            showDiv("soccersheep" + b);
        }
    }
} showDiv("soccersheep_navi"); }
function buildSheeps(c) { var a = {}; a.iceskating = { data: xmassheeps6, id: "xmassheep6_", back: "IceSkatingSheeps_01_BG.jpg" }; a.apresski = { data: sportsheeps2, id: "sportsheep2_", back: "olympia/apresski_back.jpg" }; a.snow = { data: xmassheeps5, id: "xmassheep5_", back: "xmas/pan_xmas5_back.jpg", anis: ["snowcastle"], anis_need: [5] }; a.sport = { data: sportsheeps, id: "sportsheep", back: "olympia/pan_back.jpg" }; a.birthday = { data: birthdaysheeps, id: "birthdaysheep", back: "birthday/birthday_back.jpg", array: 1 }; a.choir = { data: xmassheeps4, id: "xmassheep4_", back: "xmas/pan_xmas4_back.jpg" }; a.alpin = { data: xmassheeps3, id: "xmassheep3_", back: "xmas/pan_xmas3_back.jpg" }; a.roof = { data: xmassheeps2, id: "xmassheep2_", back: "xmas/pan_xmas2_back.jpg", anis: ["santaeyes2", "fallingstar"] }; a.xmas = { data: xmassheeps, id: "xmassheep", back: "pan_xmas_back.jpg", anis: ["santaeyes"] }; buildPanContent(); if (a[c]) {
    $("pancontainer").style.backgroundImage = "url(" + imgpath + a[c].back + ")";
    if (a[c].anis) {
        for (var b = 0; b < a[c].anis.length; b++) {
            var d = 1;
            if (a[c].anis_need) {
                if (!a[c].data[a[c].anis_need[b]]) {
                    d = 0;
                }
            }
            if (d == 1) {
                showDiv(a[c].anis[b]);
            }
        }
    }
    if (a[c].array) {
        for (var b = 0; b < a[c].data.length; b++) {
            showDiv(a[c].id + a[c].data[b]);
        }
    }
    else {
        for (var b in a[c].data) {
            showDiv(a[c].id + b);
        }
    }
} }
function panBuildCollection(a) { buildPanContent(); setTimer("paymentitemcollection"); paymentitemcollection.update(a); }
function delPresentCommit(c) { var a = "delPresent(" + c + ");"; var b = "<div>" + gift_delgift_content + "</div>"; globalcommitbox(gift_delgift_head, b, a); }
function delPresent(a) { cityAction("delpresent", a); }
var achievements = new Array;
function initFarmhouse() { farmAction("inithq", farm, 1); }
var farmhouse_rack_data = {};
function initFarmhouseResponse(a) { currentuserquest = a[3]; farmhouseitems = a[2]; usertrophies = a[4]; achievements = a[5]; setFarmhouseInner(); setFarmhouseItemSelector(1); farmhouseSelected(1, 0, 1); showDiv("transp"); showDiv("farmhousecontainer"); }
function setFarmhouseItemSelector(l) { var h = ""; if (farmhouseitems[l]) {
    var r = "";
    var u = "";
    var a = 0;
    for (var c = 1; c <= 20; c++) {
        if (farmhouseitems[c]) {
            var b = 0;
            for (var n = 0; n < farmhouseitems[c].length; n++) {
                if (farmhouseitems[c][n]) {
                    if (farmhouseitems[c][n]["rack"] == 1) {
                        var b = 1;
                        break;
                    }
                }
            }
            if (b == 1) {
                if (c == l) {
                    var e = "border-top:3px solid #f00; top:-3px;";
                }
                else {
                    var e = "";
                }
                r += '<div class="link" style="position:absolute; top:0px; left:' + a + "px; width:20px; height:20px; background:url(" + imgpath + "farmhouse/transp.png) top left; " + e + '" ';
                r += 'onclick="setFarmhouseItemSelector(' + c + "); farmhouseSelected(" + c + ',0,1);" onmouseover="showDiv(\'fhselnavi' + c + "');\" onmouseout=\"hideDiv('fhselnavi" + c + "');\">";
                r += '<img src="' + imgpath + "farmhouse/caticon" + c + '.gif" border="0" width="20" height="20">';
                r += "</div>";
                u += '<div id="fhselnavi' + c + '" class="blackbox" style="display:none; position:absolute; top:-32px; left:' + a + 'px;">' + fh_minfo[c] + "</div>";
                a = a + 23;
            }
        }
    }
    r += '<div style="clear:both;"></div>';
    $("farmhouseitemselectornavi").innerHTML = r + u;
    var m = 0;
    var a = 0;
    var d = 0;
    for (var n = 0; n < farmhouseitems[l].length; n++) {
        if (farmhouseitems[l][n]) {
            if (farmhouseitems[l][n]["rack"] == 1) {
                var q = farmhouseitems[l][n];
                h += '<div style="position:absolute; top:' + m + "px; left:" + a + "px; background:url(" + imgpath + "farmhouse/thumbs/" + q.itemid + '.jpg) 12px 11px no-repeat;">';
                var t = "";
                var s = "";
                if (l == 11) {
                    t = 'onclick="petnameChange(' + l + "," + n + ')"';
                    if (farmhouseitems[l][n]["name"] != "") {
                        t += " onmouseover=\"$('pn_" + l + "_" + n + "').style.fontSize='11px';$('pn_" + l + "_" + n + "').style.fontWeight='bold'\" onmouseout=\"$('pn_" + l + "_" + n + "').style.fontSize='9px';$('pn_" + l + "_" + n + "').style.fontWeight='normal'\"";
                    }
                    s = "link";
                }
                h += '<img class="' + s + '" src="' + imgpath + 'farmhouse/itemborder.png" border="0" ' + t + ">";
                h += '<div style="position:absolute; top:-3px; left:37px; width:31px; height:31px; background:url(' + imgpath + "farmhouse/color" + q.color + '.png) top left no-repeat;"></div>';
                h += '<div style="position:absolute; bottom:0px; left:43px;"><input class="link" type="checkbox" id="fhcheckbox' + n + '" onclick="farmhouseSelected(' + l + "," + n + ',0);" style="background:transparent; border:0;"></div>';
                if (farmhouseitems[l][n]["name"] != "") {
                    h += '<div id="pn_' + l + "_" + n + '" class="link" ' + t + ' style="position:absolute; top:-2px; font-weight:normal; color:#fff; left:0px; font-size:9px;">' + farmhouseitems[l][n]["name"] + "</div>";
                }
                h += "</div>";
                a = a + 75;
                if ((d + 1) % 6 == 0) {
                    a = 0;
                    m = m + 75;
                }
                d++;
            }
        }
    }
} $("farmhouseitemselectorcontent").innerHTML = h; }
function farmhouseSelected(c, h, e) { if (farmhouseitems[c][h]["active"] == 1 && (c == 1 || c == 5)) {
    if ($("fhcheckbox" + h)) {
        $("fhcheckbox" + h).checked = true;
    }
}
else {
    if (e == 1) {
        for (var b = 0; b < 120; b++) {
            if ($("fhcheckbox" + b)) {
                if (farmhouseitems[c][b]["active"] == 1) {
                    $("fhcheckbox" + b).checked = true;
                }
                else {
                    $("fhcheckbox" + b).checked = false;
                }
            }
        }
    }
    else {
        var d = farmhouseitems[c][h]["itemid"];
        var a = farmhouseitems[c][h]["color"];
        farmAction("setfarmhouseitem", farm, 0, d, a, c);
    }
} }
function farmhouseSelectedResponse(a, c) { farmhouseitems = a[1]; setFarmhouseInner(); for (var b = 0; b < 120; b++) {
    if ($("fhcheckbox" + b)) {
        if (farmhouseitems[c][b]["active"] == 1 && a[2] == 0) {
            $("fhcheckbox" + b).checked = true;
        }
        else {
            $("fhcheckbox" + b).checked = false;
        }
    }
} }
function initCatalogue() { showDiv("farmhousetransp"); showDiv("catalogueinner"); setCatalogueCategory(1); }
function setCatalogueCategory(a) { if (a) {
    clearCatalogueRight();
    for (var l = 1; l < 20; l++) {
        if ($("fh_m" + l)) {
            if (l == a) {
                $("fh_m" + l).style.background = "url(" + imgpath + "farmhouse/m" + l + "_over.gif)";
            }
            else {
                $("fh_m" + l).style.background = "url(" + imgpath + "leer.gif)";
            }
        }
    }
    $("catalogueleftheadline").innerHTML = fh_minfo[a];
    var n = "";
    var h = "";
    if (farmhouseitems[a]) {
        var c = 0;
        var r = 0;
        var d = 0;
        var m = 0;
        for (var l = 0; l < farmhouseitems[a].length; l++) {
            if (farmhouseitems[a][l]) {
                var q = "";
                var t = "showCatalogueItem(" + a + "," + l + ");";
                var b = 0;
                var s = farmhouseitems[a][l];
                if (d == 0) {
                    d = s.itemid;
                    var e = 1;
                }
                else {
                    if (s.itemid == d) {
                        var e = 0;
                    }
                    else {
                        e = 1;
                        d = s.itemid;
                    }
                }
                if (e == 1) {
                    if (s.buy == 1) {
                        if (s.lvl > currentuserlevel || s.quest > currentuserquest) {
                            b = 1;
                            if (s.lvl > currentuserlevel) {
                                q = str_replace("%LEVEL%", s.lvl, fh_categorylistminlvl);
                            }
                            if (s.quest > currentuserquest) {
                                q = str_replace("%QUEST%", s.quest, fh_categorylistminquest);
                            }
                            t = "clearCatalogueRight(); $('cataloguerightheader').innerHTML = '" + q + "'";
                        }
                        n += '<div class="link" onclick="' + t + '" style="position:absolute; top:' + r + "px; left:" + c + "px; background:url(" + imgpath + "farmhouse/thumbs/" + s.itemid + '.jpg) 12px 11px no-repeat;">';
                        n += '<img src="' + imgpath + 'farmhouse/itemborder.png" border="0">';
                        if (b == 1) {
                            n += '<div style="position:absolute; top:6px; left:7px; width:49px; height:50px; background:url(' + imgpath + 'farmhouse/notallowed.png) top left no-repeat;"></div>';
                        }
                        if (s.aktion > 0) {
                            n += '<div style="position:absolute; top:10px; left:10px; background:url(' + imgpath + 'topaktion_klein.gif) top left no-repeat; height:15px; width:15px;" ';
                            n += ">";
                            n += "</div>";
                        }
                        n += "</div>";
                        c = c + 70;
                        if ((m + 1) % 3 == 0) {
                            c = 0;
                            r = r + 70;
                        }
                        m++;
                    }
                }
            }
        }
    }
    $("catalogueleftcontent").innerHTML = n;
} }
function showCatalogueItem(l, n) { var a = ""; $("cataloguerightheader").innerHTML = ""; if (farmhouseitems[l][n]) {
    var c = 0;
    var d = farmhouseitems[l][n]["itemid"];
    var a = farmhouseitems[l][n]["colors"];
    var e = "";
    for (var b = 1; b <= 10; b++) {
        if (in_array(b, a)) {
            e += '<div style="float:left; margin-right:10px;"><img class="link" onclick="setCatalougeItemColor(' + d + "," + b + ')" src="' + imgpath + "farmhouse/color" + b + '.png" border="0"></div>';
            if (c == 0) {
                c = b;
            }
        }
    }
} var q = ""; var m = ""; var h = farmhouseitems[l][n]["aktion"]; if (h > 0) {
    q += '<div style="position:relative; background:url(' + imgpath + 'topaktion.gif) top left no-repeat; width:120px; height:122px; color:#fff; font-weight:bold; font-size:16px;">';
    q += '<div style="position:absolute; top:40px; left:20px; width:80px; text-align:center;">';
    q += '<div style="font-size:12px; margin-bottom:10px;">' + aktion_price + "</div>";
    q += farmhouseitems[l][n]["aktion"];
    if (farmhouseitems[l][n]["bar"] > 0) {
        q += "&nbsp;" + gamecurrency;
    }
    if (farmhouseitems[l][n]["coins"] > 0) {
        q += "&nbsp;" + t_coins;
    }
    q += "</div>";
    q += "</div>";
    m = "text-decoration:line-through;";
} if (farmhouseitems[l][n]["buy"] == 1) {
    if (farmhouseitems[l][n]["bar"] > 0) {
        q += '<div style="text-align:center; ' + m + '">' + cityadcost + "<b>" + farmhouseitems[l][n]["bar"] + "&nbsp;" + gamecurrency + "</b></div>";
    }
    if (farmhouseitems[l][n]["coins"] > 0) {
        q += '<div style="text-align:center; ' + m + '">' + cityadcost + "<b>" + farmhouseitems[l][n]["coins"] + "&nbsp;" + t_coins + "</b></div>";
    }
    q += '<div style="text-align:center;"><button type="button" class="link" onclick="buyFarmhouseItemCommit(' + l + "," + n + ');">' + fh_buyitem + "</button></div>";
} $("cataloguerightcolor").innerHTML = e; $("cataloguerightfooter").innerHTML = q; showDiv("cataloguerightcolor"); showDiv("cataloguerightcontent"); showDiv("cataloguerightfooter"); setCatalougeItemColor(d, c); }
function buyFarmhouseItemCommit(e, m) { var l = farmhouseitems[e][m]; var h = ""; h += "<div>"; var a = l.aktion; if (l.bar > 0) {
    var d = l.bar;
    if (a > 0) {
        d = a;
    }
    h += '<img src="' + imgpath + 'money.gif" border="0" width="12" height="12">&nbsp;' + d + "&nbsp;" + gamecurrency;
} if (l.coins > 0) {
    var b = l.coins;
    if (a > 0) {
        b = a;
    }
    h += '<img src="' + imgpath + 'menu/coins.gif" border="0" width="12" height="12">&nbsp;' + b + "&nbsp;" + t_coins;
} h += "</div>"; h += "<br>" + fh_commitbuyitem; var c = "buyFarmhouseItem(" + l.itemid + "," + e + "," + m + ")"; globalcommitbox(fh_buyitem, h, c); }
function buyFarmhouseItem(c, b, d) { if ($("selectedcolor").value > 0) {
    var a = $("selectedcolor").value;
    farmAction("buyfarmhouseitem", farm, 0, c, a, b, d);
}
else {
    return false;
} }
function buyFarmhouseItemResponse(a, c, d, b) { clearCatalogueRight(); $("cataloguerightheader").innerHTML = fh_buycommittext; farmhouseitems = a[1]; setFarmhouseInner(); setFarmhouseItemSelector(c); farmhouseSelected(c, 0, 1); }
function setFarmhouseInner() { if (farmhouseitems) {
    var q = { "1": "farmhousecontainer", "2": "fhpicture", "3": "fhclock", "4": "fhcurtain", "5": "fhfloor", "6": "fhcarpet", "7": ["fhtable", "fhtableani"], "8": "fhchair", "9": "fhplant", "10": ["fhlights", "fhlightsani"], "11": ["fhpets", "fhpetsani", "fhpetsinfo"] };
    for (e in q) {
        if ($(q[e])) {
            var d = [];
            if (!is_array(q[e])) {
                d.push(q[e]);
            }
            else {
                d = q[e];
            }
            for (var c = 0; c < d.length; c++) {
                hideDiv(d[c]);
                if (d[c] == "fhpetsani") {
                    $("fhpetsani").onmouseover = new Function();
                    $("fhpetsani").onmouseout = new Function();
                    $("fhpetsani").onclick = new Function();
                }
            }
        }
    }
    $("farmhousecontainer").style.background = "url(" + imgpath + "farmhouse/basicback.jpg) top left no-repeat";
    showDiv(q[1]);
    for (var e = 1; e <= 20; e++) {
        if (farmhouseitems[e]) {
            for (var c = 0; c < farmhouseitems[e].length; c++) {
                var h = "";
                if (farmhouseitems[e][c]["rack"] == 1) {
                    if (farmhouseitems[e][c]["active"] == 1) {
                        var l = farmhouseitems[e][c]["itemid"];
                        if (e == 1) {
                            var s = ".jpg";
                        }
                        else {
                            if (e == 5) {
                                var s = ".gif";
                            }
                            else {
                                var s = ".png";
                            }
                        }
                        var a = "";
                        var n = "";
                        if (e == 11) {
                            h = "farmhouse/items/" + farmhouseitems[e][c]["itemid"] + "_" + farmhouseitems[e][c]["color"] + s;
                            no_ani = [97, 99, 101, 102, 103];
                            if (!in_array(farmhouseitems[e][c]["itemid"], no_ani)) {
                                a = "farmhouse/items/" + farmhouseitems[e][c]["itemid"] + "_" + farmhouseitems[e][c]["color"] + ".gif";
                            }
                            if (farmhouseitems[e][c]["name"] != "") {
                                $("fhpetsinfo").innerHTML = farmhouseitems[e][c]["name"];
                                $("fhpetsani").onmouseover = new Function("showDiv('fhpetsinfo')");
                                $("fhpetsani").onmouseout = new Function("hideDiv('fhpetsinfo')");
                            }
                            $("fhpetsani").onclick = new Function("petnameChange(" + e + "," + c + ")");
                        }
                        else {
                            var r = [129, 161];
                            if (in_array(farmhouseitems[e][c]["itemid"], r)) {
                                a = "farmhouse/items/" + farmhouseitems[e][c]["itemid"] + "_" + farmhouseitems[e][c]["color"] + ".gif";
                            }
                            if (farmhouseitems[e][c]["itemid"] == 161) {
                                h = "transparent.gif";
                            }
                            else {
                                h = "farmhouse/items/" + farmhouseitems[e][c]["itemid"] + "_" + farmhouseitems[e][c]["color"] + s;
                            }
                            if (farmhouseitems[e][c]["itemid"] == 164) {
                                for (var b = 1; b <= 4; b++) {
                                    if (b <= advent_count) {
                                        n += '<div id="farmhouse_candle' + b + '" class="farmhouse_candle"></div>';
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
            }
        }
        else {
            h = "";
        }
        if (h != "undefined" && h != "") {
            if (is_array(q[e])) {
                id = q[e][0];
            }
            else {
                id = q[e];
            }
            $(id).style.background = "url(" + imgpath + h + ") top left no-repeat";
            showDiv(id);
            if (n != "" && e == 7) {
                $("fhtableani").innerHTML = n;
                showDiv("fhtableani");
            }
            if (a != "" && e == 10) {
                $("fhlightsani").style.background = "url(" + imgpath + a + ") no-repeat";
                showDiv("fhlightsani");
            }
            if (e == 11) {
                if (a != "") {
                    $("fhpetsani").style.background = "url(" + imgpath + a + ") no-repeat";
                }
                showDiv("fhpetsani");
            }
        }
    }
} }
function openFarmhouseSelectorCategory(a) { showFarmhouseItemSelector(); setFarmhouseItemSelector(a); farmhouseSelected(a, 0, 1); }
function showFarmhouseItemSelector() { if ($("farmhouseitemselector").style.display == "block") {
    $("farmhouseitemselector").style.display = "none";
    $("farmhouseitemselectoractiveatezone").style.background = "url(" + imgpath + "farmhouse/itemselectorbar_on.gif)";
}
else {
    $("farmhouseitemselector").style.display = "block";
    $("farmhouseitemselectoractiveatezone").style.background = "url(" + imgpath + "farmhouse/itemselectorbar_off.gif)";
} }
function clearCatalogueRight() { $("cataloguerightheader").innerHTML = ""; hideDiv("cataloguerightcolor"); hideDiv("cataloguerightcontent"); hideDiv("cataloguerightfooter"); }
function setCatalougeItemColor(b, a) { $("cataloguerightcontent").style.background = "url(" + imgpath + "farmhouse/previews/" + b + "_" + a + ".jpg) no-repeat 18px 18px"; $("cataloguerightcontent").innerHTML = '<img src="' + imgpath + 'farmhouse/previewborder.png" border="0">'; $("selectedcolor").value = a; }
function closeCatalogue() { hideDiv("farmhousetransp"); hideDiv("catalogueinner"); }
var achievementpage = 1;
function showTrophies() { hideDiv("trophies_headline"); if (usertrophies) {
    var d = "";
    if (usertrophies.gold > 0) {
        d += '<div class="trophy1"><div class="trophytxt1">' + usertrophies.gold + "</div></div>";
    }
    if (usertrophies.silber > 0) {
        d += '<div class="trophy2"><div class="trophytxt2">' + usertrophies.silber + "</div></div>";
    }
    if (usertrophies.bronze > 0) {
        d += '<div class="trophy3"><div class="trophytxt3">' + usertrophies.bronze + "</div></div>";
    }
    d += '<div style="clear:both;"></div>';
    $("trophycontainercontent").innerHTML = d;
} if (achievements) {
    var a = "";
    var b = 1;
    var e = 38;
    if (achievementpage > 1) {
        b = 39;
        e = 75;
    }
    for (var c = b; c <= e; c++) {
        if (achievements[c] && achievements[c]["title"]) {
            a += '<div id="ach' + c + '" class="ach' + c + '" onmouseover="showDiv(\'ach_tt' + c + "')\" onmouseout=\"hideDiv('ach_tt" + c + "')\">";
            a += '<div class="ach_tt' + c + ' blackbox" id="ach_tt' + c + '" class="blackbox">';
            a += "<b>" + achievements[c]["title"] + "</b><br><br>";
            if (achievements[c]["date2"]) {
                a += "<i>" + achievements[c]["date2"] + "</i><br><br>";
            }
            a += achievements[c]["desc"];
            if (achievements[c]["info"]) {
                a += "<br><br>" + achievements[c]["info"];
            }
            a += "</div>";
            a += "</div>";
        }
    }
    $("achievementcontainercontent").innerHTML = a;
    for (var c = b; c <= e; c++) {
        if (achievements[c] && achievements[c]["title"]) {
            if (!achievements[c]["date"] && $("ach" + c)) {
                $("ach" + c).style.backgroundPosition = "-1000px -1000px";
            }
        }
    }
    achievementNavi();
} showDiv("farmhousetransp"); showDiv("trophycontainer"); }
function achievementNavi() { if (achievementpage == 1) {
    $("trophycontainer").style.backgroundImage = "url(" + imgpath + "new_trophyrack_new.gif)";
    hideDiv("trophynavileft");
    showDiv("trophynaviright");
}
else {
    $("trophycontainer").style.backgroundImage = "url(" + imgpath + "new_trophyrack2_2.gif)";
    showDiv("trophynavileft");
    hideDiv("trophynaviright");
} }
function petnameChange(b, d) { if (farmhouseitems) {
    if (b == 11) {
        var c = "";
        if (petnamecostbar > 0 || petnamecostcoins > 0) {
            c += reallocatanimals_cost + "&nbsp;";
        }
        if (petnamecostbar > 0) {
            c += '<img src="' + imgpath + 'money.gif" width="12" height="12" border="0">&nbsp;' + formatPrice(petnamecostbar);
        }
        if (petnamecostcoins > 0) {
            c += '<img src="' + imgpath + 'menu/coins.gif" width="12" height="12" border="0">&nbsp;' + petnamecostcoins;
        }
        c += "<br><br>" + fh_petnamechange_content + "<br>";
        c += '<input type="text" maxlength="10" size="20" id="petnameinsert" title="' + str_replace("%LETTERS%", petnamemaxletters, fh_maxpetnameletters) + '">';
        var a = "setPetname(" + b + "," + d + ")";
        globalcommitbox(fh_petnamechangeheadline, c, a);
        if (farmhouseitems[b][d]["name"]) {
            $("petnameinsert").value = farmhouseitems[b][d]["name"];
        }
        $("petnameinsert").focus();
    }
    else {
        return false;
    }
} }
function setPetname(c, e) { if ($("petnameinsert").value != "") {
    var b = $("petnameinsert").value;
    var d = farmhouseitems[c][e]["itemid"];
    var a = farmhouseitems[c][e]["color"];
    farmAction("setpetname", farm, 0, d, a, b, c);
}
else {
    return false;
} }
function setPetnameResponse(a, b) { farmhouseitems = a[1]; setFarmhouseInner(); setFarmhouseItemSelector(b); farmhouseSelected(b, 0, 1); }
function showFeedback2(c, b, a) { $(c).innerHTML = b; window.setTimeout("showFeedbackOff('" + c + "','" + a + "')", 2000); }
function showFeedbackOff(b, a) { if (a != "0") {
    $(b).innerHTML = a;
} }
function coinsBonusItems(a) { if (!a) {
    a = 1;
} farmAction("coinsbonusitems", farm, 0, a); }
function coinsBonusItemsResponse(a) { var d = ""; if (a[1].length > 0) {
    for (var c = 0; c < a[1].length; c++) {
        var h = a[1][c]["action"];
        d += '<div id="coinsbonuspuppycontainer">';
        if (h == 1) {
            for (var b = 0; b < a[1][c]["items"].length; b++) {
                var e = a[1][c]["items"][b];
                d += '<div id="coinsbonuspuppy' + parseInt(b + 1) + '" class="link" onclick="getCoinsBonusCommit(' + e + ');" ';
                d += "onmouseover=\"this.style.backgroundImage='url(" + imgpath + "puppy_over" + parseInt(b + 1) + ".jpg)';\" ";
                d += "onmouseout=\"this.style.backgroundImage='url(" + imgpath + "leer.gif)';\">";
                d += "</div>";
            }
        }
        if (h == 2) {
            for (var b = 0; b < a[1][c]["items"].length; b++) {
                var e = a[1][c]["items"][b];
                d += '<div id="coinsbonuscat' + parseInt(b + 1) + '" class="link" onclick="getCoinsBonusCommit(' + e + ');" ';
                d += "onmouseover=\"this.style.backgroundImage='url(" + imgpath + "cat_over" + parseInt(b + 1) + ".jpg)';\" ";
                d += "onmouseout=\"this.style.backgroundImage='url(" + imgpath + "leer.gif)';\">";
                d += "</div>";
            }
        }
        if (h == 3 || h == 999) {
            for (var b = 1; b <= 5; b++) {
                var e = a[1][c]["items"][0];
                d += '<div id="coinsbonussunflower' + b + '" class="link" onclick="getCoinsBonusCommit(' + b + ');" ';
                d += "onmouseover=\"this.style.backgroundImage='url(" + imgpath + "sunflower_over" + b + ".jpg)';\" ";
                d += "onmouseout=\"this.style.backgroundImage='url(" + imgpath + "leer.gif)';\">";
                d += "</div>";
            }
        }
        if (h == 4 || h == 998) {
            for (var b = 1; b <= 5; b++) {
                var e = a[1][c]["items"][0];
                d += '<div id="coinsbonuspumpkin' + b + '" class="link" onclick="getCoinsBonusCommit(' + b + ');" ';
                d += "onmouseover=\"this.style.backgroundImage='url(" + imgpath + "pumpkin_over" + b + ".jpg)';\" ";
                d += "onmouseout=\"this.style.backgroundImage='url(" + imgpath + "leer.gif)';\">";
                d += "</div>";
            }
        }
        if (h == 5 || h == 997) {
            for (var b = 1; b <= 5; b++) {
                var e = a[1][c]["items"][0];
                var l = [4, 2, 1, 3, 5];
                d += '<div id="coinsbonushedgehog' + b + '" class="link" onclick="getCoinsBonusCommit(' + l[(b - 1)] + ');" ';
                d += "onmouseover=\"this.style.backgroundImage='url(" + imgpath + "hedgehog_over" + b + ".jpg)';\" ";
                d += "onmouseout=\"this.style.backgroundImage='url(" + imgpath + "leer.gif)';\">";
                d += "</div>";
            }
        }
        d += "</div>";
        if (c == 0) {
            break;
        }
    }
    $("coinsbonusheadline").innerHTML = coinsbonus_selectheadline;
    $("coinsbonuscontent").innerHTML = d;
    showDiv("transp");
    if ($("coinsbonuspuppycontainer")) {
        if (h == 1) {
            $("coinsbonuspuppycontainer").style.backgroundImage = "url(" + imgpath + "puppy_sel_inner.jpg)";
        }
        if (h == 2) {
            $("coinsbonuspuppycontainer").style.backgroundImage = "url(" + imgpath + "cat_sel_inner.jpg)";
        }
        if (h == 3 || h == 999) {
            $("coinsbonuspuppycontainer").style.backgroundImage = "url(" + imgpath + "sunflower_sel_inner.jpg)";
        }
        if (h == 4 || h == 998) {
            $("coinsbonuspuppycontainer").style.backgroundImage = "url(" + imgpath + "pumpkin_sel_inner.jpg)";
        }
        if (h == 5 || h == 997) {
            $("coinsbonuspuppycontainer").style.backgroundImage = "url(" + imgpath + "hedgehog_sel_inner.jpg)";
        }
    }
    $("coinsbonuscontainer").style.backgroundImage = "url(" + imgpath + "coinsbonusborder.gif)";
    showDiv("coinsbonuscontainer");
} }
function getCoinsBonusCommit(c) { var a = "getCoinsBonus(" + c + ");"; var b = coinsbonus_commitcontent; globalcommitbox(coinsbonus_commitheadline, b, a); }
function getCoinsBonus(a) { farmAction("getcoinsbonus", farm, position, a); }
function getCoinsBonusResponse() { hideDiv("transp"); hideDiv("coinsbonuscontainer"); initFarmhouse(); }
function mainOpenPan() { initZones(1); showMain(); initFarmhouse(); showPan(); }
function showTravelAd() { if (tutorial == 0) {
    var a = getRandom(1, 3);
    if (a == 1) {
        showDiv("travelpremiuminfo");
        hideDiv("travelad");
    }
    else {
        hideDiv("travelpremiuminfo");
        showDiv("travelad");
    }
}
else {
    hideDiv("travelpremiuminfo");
    hideDiv("travelad");
} }
function initFriends() { farmAction("initfriends", farm, 0); }
function initFriendsResponse(a) { checkedfriends = a[1]; uncheckedfriends = a[2]; showfriendslist(1); showDiv("transp"); if (setarab == 1) {
    $("friendscontainer").style.background = "url(" + imgpath + "friendlist_inner_arab.jpg)";
}
else {
    $("friendscontainer").style.background = "url(" + imgpath + "friendlist_inner.jpg)";
} showDiv("friendscontainer"); if (stopanimation == 0 && setarab != 1) {
    $("friendslistsheepani").style.background = "url(" + imgpath + "friendlist_sheepani.gif)";
} }
function showfriendslist(b) { friendslistheadernavi(b); var e = ""; if (b == 1) {
    var h = checkedfriends;
}
else {
    if (b == 2) {
        var h = uncheckedfriends;
    }
} friendslistsel = b; if (b == 2) {
    $("friendsinfo").innerHTML = "";
} e += '<ul id="friendslistcon">'; var l = 0; for (var d = 0; d < h.length; d++) {
    if (h[d]) {
        if (b == 1) {
            var c = 'onclick="setFriendInfo(' + h[d]["id"] + ')";';
        }
        else {
            var c = "";
        }
        e += '<li id="friendsline' + h[d]["id"] + '" class="friendsline" onmouseover="$(\'friendsline' + h[d]["id"] + "').style.backgroundColor='#E4B55D';\" onmouseout=\"$('friendsline" + h[d]["id"] + "').style.backgroundColor='transparent';\">";
        e += '<div class="friendslinename link" ' + c + ">";
        e += '<div id="friendsline_name">' + h[d]["name"];
        if (h[d]["gshort"]) {
            e += "&nbsp;[" + h[d]["gshort"] + "]";
        }
        e += "</div>";
        e += '<div id="friendslist_symbols">';
        if (h[d]["gstatus"] == 1 || h[d]["gstatus"] == 2) {
            e += '&nbsp;<img src="' + imgpath + "guild/" + h[d]["gstatus"] + '.gif" border="0">';
        }
        if (h[d]["premium"]) {
            e += '&nbsp;<img src="' + imgpath + 'star.png" border="0">';
        }
        e += "</div>";
        e += '<div style="clear:both;"></div>';
        e += "</div>";
        e += '<div class="friendslineoptions">';
        if (b == 1) {
            var a = "messagesOpen('" + h[d]["name"] + "');";
            e += "<span class=\"link\" onclick=\"showPage('contracts', '" + h[d]["name"] + '\');"><img src="' + imgpath + 'guild/contract.gif" border="0" onmouseover="showDiv(\'flcontractinfo' + d + "');\" onmouseout=\"hideDiv('flcontractinfo" + d + "');\"></span>&nbsp;";
            e += '<span class="link" onclick="' + a + '"><img src="' + imgpath + 'guild/mail.gif" border="0" onmouseover="showDiv(\'flmsginfo' + d + "');\" onmouseout=\"hideDiv('flmsginfo" + d + "');\"></span>&nbsp;";
            click = "giftshop.friendGift('" + h[d]["id"] + "')";
            e += '<span class="link" onclick="' + click + '"><img src="' + imgpath + 'friendlist_gift.png" border="0" onmouseover="showDiv(\'flgiftinfo' + d + "');\" onmouseout=\"hideDiv('flgiftinfo" + d + "');\"></span>&nbsp;";
        }
        e += '<span class="link" onclick="delFriendSubmit(' + h[d]["id"] + ",'" + h[d]["name"] + '\');"><img src="' + imgpath + 'friendlist_del.png" border="0" onmouseover="showDiv(\'fldelinfo' + d + "');\" onmouseout=\"hideDiv('fldelinfo" + d + "');\"></span>";
        e += '<div class="blackbox flmsginfo" id="flcontractinfo' + d + '" style="display:none; position:absolute; top:' + l + 'px;">' + str_replace("%USER%", h[d]["name"], marktschreierwritecontract) + "</div>";
        e += '<div class="blackbox flmsginfo" id="flmsginfo' + d + '" style="display:none; position:absolute; top:' + l + 'px;">' + str_replace("%USER%", h[d]["name"], marktschreierwriteuser) + "</div>";
        e += '<div class="blackbox flmsginfo" id="flgiftinfo' + d + '" style="display:none; position:absolute; top:' + l + 'px;">' + friendslist_gift + "</div>";
        e += '<div class="blackbox flmsginfo" id="fldelinfo' + d + '" style="display:none; position:absolute; top:' + l + 'px;">' + friendslist_del + "</div>";
        e += "</div>";
        e += '<div style="clear:both;"></div>';
        e += "</li>";
        l = l + 23;
    }
} e += "</ul>"; $("friendslistbody").innerHTML = e; }
function setActivateFriend(a) { if (activatefriend > 0) {
    showfriendslist(friendslistsel);
} $("friendsline" + a).onmouseover = function (b) { }; $("friendsline" + a).onmouseout = function (b) { }; $("friendsline" + a).style.backgroundColor = "#E4B55D"; activatefriend = a; }
function setFriendInfo(b) { var a = { friend: b }; generalAction("friendinfo", a, b); }
var friendlistinfo_maxletters = 500;
function setFriendInfoContent(m, c) { var d = friendinfo; if (!(c > 0)) {
    c = 1;
} var t = ""; t += '<div id="friendinfonavi" style="position:absolute; top:-15px; left:-7px; width:281px; height:78px;">'; t += '<div style="position:absolute; top:15px; left:10px;">'; t += '<div id="friendinfonavi_name">' + d.name; if (d.gshort) {
    t += "&nbsp;[" + d.gshort + "]";
} t += "</div>"; t += '<div id="friendinfonavi_showcase">'; t += '&nbsp;<img class="link" src="' + imgpath + 'stadt/stats_sf_black.gif" border="0" onclick="window.open(\'schaugarten/index.php?mode=view&user=' + d.id + "');\">"; if (d.gstatus == 1 || d.gstatus == 2) {
    t += '&nbsp;<img width="15" height="15" src="' + imgpath + "guild/" + d.gstatus + '.gif" border="0">';
} if (d.premium == 1) {
    t += '&nbsp;<img width="15" height="15" src="' + imgpath + 'star.png" border="0">';
}
else {
    t += '&nbsp;<img width="15" height="15" src="' + imgpath + 'leer.gif" border="0">';
} t += "</div>"; t += '<div style="clear:both;"></div>'; t += "</div>"; if (setarab == 1) {
    t += '<div class="link" style="position:absolute; top:40px; right:16px; width:50px; height:35px;" onclick="setFriendInfoContent(1);" onmouseover="showDiv(\'friendlistnavi1\');" onmouseout="hideDiv(\'friendlistnavi1\');"></div>';
    t += '<div class="link" style="position:absolute; top:40px; right:72px; width:50px; height:35px;" onclick="setFriendInfoContent(2);" onmouseover="showDiv(\'friendlistnavi2\');" onmouseout="hideDiv(\'friendlistnavi2\');"></div>';
}
else {
    t += '<div class="link" style="position:absolute; top:40px; left:16px; width:50px; height:35px;" onclick="setFriendInfoContent(1);" onmouseover="showDiv(\'friendlistnavi1\');" onmouseout="hideDiv(\'friendlistnavi1\');"></div>';
    t += '<div class="link" style="position:absolute; top:40px; left:72px; width:50px; height:35px;" onclick="setFriendInfoContent(2);" onmouseover="showDiv(\'friendlistnavi2\');" onmouseout="hideDiv(\'friendlistnavi2\');"></div>';
} t += '<div class="blackbox" id="friendlistnavi1">' + friendlistnavi1 + "</div>"; t += '<div class="blackbox" id="friendlistnavi2">' + friendlistnavi2 + "</div>"; t += "</div>"; t += '<div id="friendlistinfoblock" style="position:absolute; top:75px; height:340px; overflow:auto; width:100%;">'; if (m == 1) {
    var q = parseInt(d.pktdiff);
    var r = parseInt(q - d.pktremain);
    var u = Math.floor(parseInt(r * 100) / q);
    if (u == 0) {
        u = 1;
    }
    var h = "";
    h += '<div style="position:relative; background:url(' + imgpath + 'levelbar.jpg) top left no-repeat; width:244px; height:20px; overflow:hidden;">';
    h += '<div style="position:absolute; background:url(' + imgpath + "levelbar_inner.png) top left no-repeat; width:244px; height:20px; top:0px; left:-" + (parseInt((244 / 100 * (100 - u)))) + 'px;"></div>';
    h += '<div style="position:absolute; width:250px; color:#000; margin-top:3px; text-align:center;">' + u + "%</div>";
    h += "</div>";
    t += '<ul style="margin:0px; padding:0px; list-style-type:none;">';
    t += '<li><div class="friendsinfoleft">' + friendslist_table_id + '</div><div class="friendsinforight">' + d.id + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_lvl + '</div><div class="friendsinforight">' + d.lvl + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_pkt + '</div><div class="friendsinforight">' + d.pkt + "</div><br></li>";
    t += "<li>" + h + '<div style="font-size:10px;">' + str_replace("%POINTS%", d.pktremainf, friendslist_table_pktremain) + "</div></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_bar + '</div><div class="friendsinforight">' + d.bar + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_quest + '</div><div class="friendsinforight">' + d.quest + "</div><br></li>";
    if (d.gname) {
        t += '<li><div class="friendsinfoleft">' + friendslist_table_guild + '</div><div class="friendsinforight">' + d.gname + "</div><br></li>";
    }
    t += '<li><div class="friendsinfoleft">' + friendslist_table_sales + '</div><div class="friendsinforight">' + d.salesnpc + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_money + '</div><div class="friendsinforight">' + formatPrice(d.incomenpc) + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_rating + '</div><div class="friendsinforight">' + d.rating + "</div><br></li>";
    t += '<li><div class="friendsinfoleft">' + friendslist_table_ratingall + '</div><div class="friendsinforight">' + d.ratingall + "</div><br></li>";
    t += "</ul>";
    t += "<div>";
    t += '<textarea id="friendlistinfo" style="width:250px; height:60px;" onchange="calcFriendlistInfo()" onkeyup="calcFriendlistInfo()">';
    if (typeof friendinfo.info != "undefined") {
        t += d.info;
    }
    t += "</textarea>";
    t += '<div id="friendlistinfocount" style="font-size:9px;">' + str_replace("%LETTERS%", friendlistinfo_maxletters, guildcreatedialogcountletters) + "</div>";
    t += '<button type="button" id="friendlist_infofield" onclick="fireFriendlistInfo(' + d.id + ')">' + t_save + "</button>";
    t += "</div>";
} if (m == 2) {
    t += '<div style="width:100%;">';
    var v = 0;
    var e = 0;
    t += '<div style="float:left;">' + farmname + "</div>";
    for (var n in d.farm) {
        t += '<div class="link" style="float:left; margin-left:4px; border:1px solid #794D0C; text-align:center; width:15px; height:15px; ';
        if (c == n) {
            t += "background-color:#C7A661;";
        }
        t += '" onclick="setFriendInfoContent(2,' + n + ')">' + n + "</div>";
    }
    t += '<div style="clear:both;"></div>';
    t += '<div style="position:relative; margin-top:20px;">';
    n = c;
    if (d.farm[n]) {
        if (c == 4) {
            var a = 6;
        }
        else {
            a = 6;
        }
        for (var l = 1; l <= a; l++) {
            if (d.farm[n][l]["bid"] > 0) {
                var b = "";
                for (var z = 1; z <= d.farm[n][l]["level"]; z++) {
                    b += '<img src="' + imgpath + 'star.png" height="10" width="10">';
                }
                t += '<div style="width:64px; height:64px; position:absolute; top:' + v + "px; left:" + e + 'px;" ';
                t += 'onmouseover="setFriendInfoBuildingStats(' + d.farm[n][l]["bid"] + ');" onmouseout="setFriendInfoBuildingStats(0);">';
                t += '<img src="' + imgpath + "building" + d.farm[n][l]["bid"] + '.gif" border="0">';
                t += '<div style="position:absolute; top:4px; left:4px;">' + b + "</div>";
                t += "</div>";
            }
            else {
                if (d.farm[n][l]["status"] > 0) {
                    var y = "block" + d.farm[n][l]["status"];
                }
                else {
                    var y = "building0";
                }
                t += '<div style="width:64px; height:64px; position:absolute; top:' + v + "px; left:" + e + 'px;">';
                t += '<img src="' + imgpath + y + '.gif" border="0">';
                t += "</div>";
            }
            e = e + 70;
            if (l % 3 == 0) {
                v = v + 70;
                e = 0;
            }
        }
    }
    t += "</div>";
    t += '<div style="position:relative; top:150px;" id="friendslistbuildinginfo"></div>';
} t += "</div>"; $("friendsinfo").innerHTML = t; if (m == 1) {
    calcFriendlistInfo();
} var w = ""; if (setarab == 1) {
    var w = "_arab";
} if (m == 1) {
    $("friendinfonavi").style.background = "url(" + imgpath + "friendinfo_general" + w + ".jpg)";
}
else {
    if (m == 2) {
        $("friendinfonavi").style.background = "url(" + imgpath + "friendinfo_farm" + w + ".jpg)";
    }
} }
function calcFriendlistInfo() { var a = $("friendlistinfo").value; if (typeof friendinfo.info == "undefined") {
    friendinfo.info = "";
} if (a != friendinfo.info || a.length > 0 && !friendinfo.info) {
    showDiv("friendlist_infofield");
}
else {
    hideDiv("friendlist_infofield");
} if (a.length > friendlistinfo_maxletters) {
    $("friendlistinfo").value = a.substring(0, (friendlistinfo_maxletters));
    $("friendlistinfo").scrollTop = $("friendlistinfo").scrollHeight;
} $("friendlistinfocount").innerHTML = str_replace("%LETTERS%", (friendlistinfo_maxletters - $("friendlistinfo").value.length), guildcreatedialogcountletters); }
function fireFriendlistInfo(c) { var a = $("friendlistinfo").value; var b = { id: c, text: encodeURIComponent(a) }; generalAction("savefriendinfo", b, c); }
function setFriendInfoBuildingStats(a) { if (a > 0) {
    $("friendslistbuildinginfo").innerHTML = "<b>" + buildinginfos[0][a][10] + "</b>";
}
else {
    $("friendslistbuildinginfo").innerHTML = "";
} }
function addFriendSubmit(d) { if ($("friendsearchinput").value != "") {
    showDiv("friendscontainertransp");
    var a = "addFriend();";
    var b = str_replace("%FRIEND%", "<b>" + $("friendsearchinput").value + "</b>", friendslist_invite_body);
    var c = "hideDiv('friendscontainertransp'); hideDiv('globalbox');";
    globalcommitbox(friendslist_invite_head, b, a, c);
}
else {
    return false;
} }
function addFriend() { if ($("friendsearchinput").value != "") {
    var a = { friend: encodeURIComponent($("friendsearchinput").value) };
    generalAction("addfriend", a);
} }
function showFriendlistFeedback(b, a) { $(b).innerHTML = a; showDiv(b); window.setTimeout("showFriendlistFeedbackOff('" + b + "')", 1000); }
function showFriendlistFeedbackOff(a) { Effect.Fade($(a), { duration: 1, from: 0.7, to: 0 }); }
function delFriendSubmit(e, b) { showDiv("friendscontainertransp"); var a = "delFriend(" + e + ",'" + b + "');"; var c = str_replace("%FRIEND%", "<b>" + b + "</b>", friendslist_del_body); var d = "hideDiv('friendscontainertransp'); hideDiv('globalbox');"; globalcommitbox(friendslist_del_head, c, a, d); }
function delFriend(c, a) { var b = { friend: c }; generalAction("delfriend", b, c, a); }
function acceptFriend(b) { var a = { friend: b }; generalAction("acceptfriend", a); }
function denyFriend(b) { var a = { friend: b }; generalAction("denyfriend", a); }
function friendslistheadernavi(a) { var b = ""; if (setarab == 1) {
    var b = "_arab";
} if (a == 1) {
    $("friendslistheader").style.background = "url(" + imgpath + "locked" + b + ".jpg)";
}
else {
    if (a == 2) {
        $("friendslistheader").style.background = "url(" + imgpath + "unlocked" + b + ".jpg)";
    }
} }
function buyPresentFriend() { var a = $("giftid").value; var d = $("presenteeid1").value; var b = $("presenteename1").value; var c = $("presenteemsg1_fl").value; if (a == "" || d == "") {
    return false;
}
else {
    $("presenteeid1").value = "";
    $("presenteemsg1_fl").value = "";
    cityAction("buypresentfriend", a, d, c, b);
} }
function runEE(a) { if (a == 1) {
    showDiv("ee1a");
    new Effect.Move("ee1a", { y: -1000, duration: 10, transition: Effect.Transitions.linear, mode: "relative", afterFinish: function () { $("ee1a").style.top = "700px"; hideDiv("ee1a"); } });
    $("ee1a_1").innerHTML = "&#9834; Always look of the bright side of life... &#9835;";
} }
function startMoo() { var c = ""; c += '<div id="ee_moo_title"><span style="font-size:14px;">YOU\'VE FOUND</span><br>THE SECRET COW-LEVEL!</div>'; for (var b = 1; b <= 50; b++) {
    var e = getRandom(0, 500);
    c += '<div id="ee_moo' + b + '" class="ee_moo ee_moo_start" style="top:' + e + 'px">';
    c += '  <div id="ee_moo' + b + '_tt" class="ee_moo_tt">MOO</div>';
    c += "</div>";
} $("ee_moos").innerHTML = c; for (var b = 1; b <= 50; b++) {
    var d = getRandom(5, 15);
    setTimeout(function () { $("ee_moo_title").addClassName("ee_moo_out"); }, 200);
    new Effect.Move("ee_moo" + b, { x: 1500, duration: d, transition: Effect.Transitions.linear, mode: "relative", afterFinish: function () { hideDiv("ee_moo" + b); } });
    var a = getRandom(200, 1000);
    setTimeout(function () { showDiv("ee_moo" + b + "_tt"); }, a);
} setTimeout(function () { $("ee_moo_title").addClassName("ee_moo_out"); }, 100); setTimeout(function () { hideDiv("ee_moos"); }, 8000); }
var reallocateBuildingFarmSelect1 = 1;
var reallocateBuildingPosSelect1 = 0;
var reallocateBuildingFarmSelect2 = 1;
var reallocateBuildingPosSelect2 = 0;
var reallocateAnimalsCart = {};
function openReallocateBuilding(a) { openReallocate("buildings", a); }
function openReallocateAnimals(a) { openReallocate("animals", a); }
function controlReallocate(a, c, b) { if (a == 1) {
    if (reallocateBuildingFarmSelect1 == reallocateBuildingFarmSelect2 && c == reallocateBuildingPosSelect2) {
        return false;
    }
    if (reallocateBuildingFarmSelect1 != $("selectFarmReallocateBuilding1").value) {
        reallocateBuildingPosSelect1 = 0;
    }
    if (reallocateBuildingFarmSelect1 == $("selectFarmReallocateBuilding1").value && c == reallocateBuildingPosSelect1) {
        reallocateBuildingPosSelect1 = 0;
    }
    else {
        if (c > 0) {
            reallocateBuildingPosSelect1 = c;
        }
    }
    reallocateBuildingFarmSelect1 = $("selectFarmReallocateBuilding1").value;
} if (a == 2) {
    if (reallocateBuildingFarmSelect1 == reallocateBuildingFarmSelect2 && c == reallocateBuildingPosSelect1) {
        return false;
    }
    if (reallocateBuildingFarmSelect2 != $("selectFarmReallocateBuilding2").value) {
        reallocateBuildingPosSelect2 = 0;
    }
    if (reallocateBuildingFarmSelect2 == $("selectFarmReallocateBuilding2").value && c == reallocateBuildingPosSelect2) {
        reallocateBuildingPosSelect2 = 0;
    }
    else {
        if (c > 0) {
            reallocateBuildingPosSelect2 = c;
        }
    }
    reallocateBuildingFarmSelect2 = $("selectFarmReallocateBuilding2").value;
} openReallocate(b); }
function buildFarmReallocate(d, h) { if (d == 1) {
    f = reallocateBuildingFarmSelect1;
    p = reallocateBuildingPosSelect1;
} if (d == 2) {
    f = reallocateBuildingFarmSelect2;
    p = reallocateBuildingPosSelect2;
} var e = 0; if (reallocateBuildingFarmSelect1 > 0 && reallocateBuildingPosSelect1 > 0) {
    e = farms_data.farms[reallocateBuildingFarmSelect1][reallocateBuildingPosSelect1].buildingid;
} if (reallocateBuildingFarmSelect2 > 0 && reallocateBuildingPosSelect2 > 0) {
    e = farms_data.farms[reallocateBuildingFarmSelect2][reallocateBuildingPosSelect2].buildingid;
} var c = ""; for (var m in farms_data.farms[f]) {
    var l = "";
    var a = "";
    var b = 0;
    if (farms_data.farms[f][m].buildingid) {
        b = farms_data.farms[f][m].buildingid;
    }
    if (farms_data.farms[f][m].status > 0) {
        l = "controlReallocate(" + d + ", " + m + ", '" + h + "')";
    }
    else {
        b = "Block";
    }
    if (farms_data.farms[f][m].premium == 1 && !premium) {
        l = "";
    }
    if (reallocateBuildingFarmSelect1 == reallocateBuildingFarmSelect2) {
        if ((d == 1 && reallocateBuildingPosSelect2 == m) || (d == 2 && reallocateBuildingPosSelect1 == m)) {
            a = "transp";
            l = "";
        }
    }
    if (h == "animals") {
        if (farms_data.farms[f][m].animals > -1) {
            if ((e > 0 && farms_data.farms[f][m].buildingid != e) || farms_data.farms[f][m].production) {
                a = "transp";
                l = "";
            }
        }
        else {
            a = "transp";
            l = "";
        }
    }
    c += '<div style="position:relative; float:left; margin:0 5px 10px 5px;" class="link buildingMiddle' + b + " " + a + '" onclick="' + l + '">';
    if (farms_data.farms[f][m].premium == 1) {
        c += '<div class="icon_premium" style="position:absolute; right:0;"></div>';
    }
    if (farms_data.farms[f][m].production) {
        c += '<div style="background:url(' + imgpath + 'reallocatebuildingproductionani.gif); width:25px; height:24px; position:absolute; top:0px; left:0px;"></div>';
    }
    if (m == p) {
        c += '<div class="buildingMiddleSelect"></div>';
    }
    c += "</div>";
    if (m % 3 == 0) {
        c += '<div class="clear"></div>';
    }
} return c; }
function buildAnimalReallocate(l) { if (l == 1) {
    f = reallocateBuildingFarmSelect1;
    p = reallocateBuildingPosSelect1;
} if (l == 2) {
    f = reallocateBuildingFarmSelect2;
    p = reallocateBuildingPosSelect2;
} var c = ""; if (f > 0 && p > 0 && farms_data.farms[f][p]) {
    var a = farms_data.farms[f][p];
    var d = a.animals;
    if (a.animalsmax > 0) {
        var n = a.buildingid;
        for (var b = 1; b <= a.animalsmax; b++) {
            var q = "selectReallocateAnimal(" + l + "," + f + "," + p + "," + b + ")";
            var m = "animalsheadsempty";
            if (farms_data.animals[f] && farms_data.animals[f][p] && farms_data.animals[f][p][b]) {
                var h = farms_data.animals[f][p][b].data.special;
                m = "animalheads" + n + "_" + h;
                d--;
            }
            else {
                if (d > 0) {
                    m = "animalheads" + n;
                    d--;
                }
            }
            var e = "margin:2px 2px;";
            if (reallocateAnimalsCart[l] && reallocateAnimalsCart[l][f] && reallocateAnimalsCart[l][f][p] && reallocateAnimalsCart[l][f][p] == b) {
                e = "margin:1px 1px; border:1px dashed yellow;";
            }
            c += '<div style="float:left; width:20px; height:20px; ' + e + '" class="' + m + ' link" onclick="' + q + '">&nbsp;</div>';
        }
        c += '<div class="clear"></div>';
    }
} return c; }
function selectReallocateAnimal(b, c, d, a) { if (reallocateAnimalsCart[b] && reallocateAnimalsCart[b][c] && reallocateAnimalsCart[b][c][d]) {
    if (reallocateAnimalsCart[b][c][d] == a) {
        delete reallocateAnimalsCart[b];
    }
    else {
        reallocateAnimalsCart[b][c][d] = a;
    }
}
else {
    if (!reallocateAnimalsCart[b]) {
        reallocateAnimalsCart[b] = {};
    }
    if (!reallocateAnimalsCart[b][c]) {
        delete reallocateAnimalsCart[b];
        reallocateAnimalsCart[b] = {};
        reallocateAnimalsCart[b][c] = {};
    }
    if (!reallocateAnimalsCart[b][c][d]) {
        reallocateAnimalsCart[b][c][d] = a;
    }
} openReallocateAnimals(); }
function openReallocate(m, h) { if (h == 1) {
    reallocateBuildingFarmSelect1 = 1;
    reallocateBuildingPosSelect1 = 0;
    reallocateBuildingFarmSelect2 = 1;
    reallocateBuildingPosSelect2 = 0;
    reallocateAnimalsCart = {};
} var t = ""; var s = ""; if (m == "buildings") {
    var q = reallocatebuildinghead;
    var c = '<div style="margin-bottom:10px; width:470px;">' + str_replace("%COST%", reallocatebuildingcoin + "&nbsp;" + t_coins, t_reallocate_newinfo) + "</div>";
} if (m == "animals") {
    var q = reallocatanimals_info;
    var c = '<div style="margin-bottom:10px; width:470px;">' + reallocatanimals_intro + "</div>";
} for (var e in farms_data.farms) {
    if (e <= 4) {
        var v = "";
        if (reallocateBuildingFarmSelect1 == e) {
            v = "selected";
        }
        t += "<option " + v + ' value="' + e + '">' + farmname + e + "</option>";
        v = "";
        if (reallocateBuildingFarmSelect2 == e) {
            v = "selected";
        }
        s += "<option " + v + ' value="' + e + '">' + farmname + e + "</option>";
    }
} c += '<div style="float:left; width:225px; padding-right:10px; border-right:1px dashed #C3A75E;">'; c += '  <div style="background-color:#C3A75E; border-radius:4px; padding:2px;"><select id="selectFarmReallocateBuilding1" onchange="controlReallocate(1, -1, \'' + m + '\')" style="border:0; padding:1px; border-radius:4px;">' + t + "</select></div>"; c += '  <div style="margin-top:10px;">' + buildFarmReallocate(1, m) + "</div>"; if (m == "animals") {
    c += '<div id="buildAnimalsReallocate1">' + buildAnimalReallocate(1) + "</div>";
} c += "</div>"; c += '<div style="float:left; width:225px; margin-left:10px;">'; c += '  <div style="background-color:#C3A75E; border-radius:4px; padding:2px;"><select id="selectFarmReallocateBuilding2" onchange="controlReallocate(2, -1, \'' + m + '\')" style="border:0; padding:1px; border-radius:4px;">' + s + "</select></div>"; c += '  <div style="margin-top:10px;">' + buildFarmReallocate(2, m) + "</div>"; if (m == "animals") {
    c += '<div id="buildAnimalsReallocate2">' + buildAnimalReallocate(2) + "</div>";
} c += "</div>"; c += '<div class="clear"></div></div>'; globalBoxFlex(q, c, 0, 0, 1); if (m == "buildings" && reallocateBuildingFarmSelect1 > 0 && reallocateBuildingPosSelect1 > 0 && reallocateBuildingFarmSelect2 > 0 && reallocateBuildingPosSelect2 > 0) {
    if (farms_data.farms[reallocateBuildingFarmSelect1][reallocateBuildingPosSelect1].buildingid == 6 && farms_data.farms[reallocateBuildingFarmSelect2][reallocateBuildingPosSelect2].premium || farms_data.farms[reallocateBuildingFarmSelect2][reallocateBuildingPosSelect2].buildingid == 6 && farms_data.farms[reallocateBuildingFarmSelect1][reallocateBuildingPosSelect1].premium) {
        globalerrorbox(t_error1053);
        return false;
    }
    var q = reallocatebuildinghead;
    var d = '<div style="float:left; margin:1px 4px 0 70px;">' + reallocatanimals_cost + "</div>";
    d += '<div class="icon_coins" style="float:left; margin-right:4px;"></div>';
    d += '<div style="float:left; margin-top:1px; font-weight:bold;">' + reallocatebuildingcoin + "&nbsp;" + t_coins + "</div>";
    d += '<div class="clear"></div>';
    d += '<div style="margin-top:10px;">' + reallocatebuildingcommit1 + "</div>";
    var r = reallocateBuildingFarmSelect1 + "," + reallocateBuildingPosSelect1 + "," + reallocateBuildingFarmSelect2 + "," + reallocateBuildingPosSelect2;
    var u = "farmAction('reallocatebuilding', " + farm + ", 0, '" + r + "')";
    var n = "hideDiv('globaltransp'); hideDiv('globalbox'); openReallocateBuilding(1)";
    globalcommitbox(q, d, u, n);
} if (m == "animals") {
    if (reallocateAnimalsCart[1] && reallocateAnimalsCart[2]) {
        var q = reallocatanimals_info;
        var d = "";
        var b = "";
        for (var l in reallocateAnimalsCart) {
            for (var e in reallocateAnimalsCart[l]) {
                for (var a in reallocateAnimalsCart[l][e]) {
                    if (l == 1) {
                        d += str_replace("%COST%", formatPrice(farms_data.farms[e][a].allocate_cost), reallocatanimals_commit);
                    }
                    b += "|" + e + "_" + a + "_" + reallocateAnimalsCart[l][e][a];
                }
            }
        }
        var u = "farmAction('reallocate_animals', " + farm + ", 0, '" + b + "')";
        var n = "hideDiv('globaltransp'); hideDiv('globalbox'); reallocateAnimalsCart = {}; openReallocate('animals')";
        globalcommitbox(q, d, u, n);
    }
} }
var powerup_block = 0;
var powerup_rackpage = 1;
function handlePowerups(m) { if (powerupactive) {
    for (var c in powerupactive) {
        if (powerupactive[c] && powerupactive[c].remain > 0) {
            if (!gametimer.powerups) {
                gametimer.powerups = new Object;
            }
            gametimer.powerups[c] = 1;
        }
    }
} hideDiv("powerupcontainer"); if (farm == 1) {
    showDiv("powerupcontainer");
} hideDiv("powerupbar"); if (poweruprack) {
    showDiv("powerupbar");
} hideDiv("powerupselector"); if (m) {
    powerup_rackpage = m;
    var l = 0;
    if (poweruprack) {
        html = "";
        for (var c in poweruprack) {
            if (poweruprack[c]) {
                l++;
                var q = (((powerup_rackpage - 1) * 12) + 1);
                if (powerup_rackpage == 1) {
                    q = 1;
                }
                var r = (powerup_rackpage * 12);
                if (l >= q && l <= r) {
                    if (poweruprack[c][5] && poweruprack[c][5][0]) {
                        var d = "powerup_rackitem_back1";
                        var h = poweruprack[c][5][0][0];
                        var e = poweruprack[c][5][0][1];
                        var b = str_replace("%AMOUNT%", poweruprack[c][5][0][1], powerup_bonustext1);
                    }
                    if (poweruprack[c][5] && poweruprack[c][5][1]) {
                        var d = "powerup_rackitem_back2";
                        var h = poweruprack[c][5][1][0];
                        var e = "+" + poweruprack[c][5][1][1];
                        var b = str_replace("%TIME%", formatTime(poweruprack[c][5][1][2]), powerup_bonustext2);
                        b = str_replace("%CROP%", "+" + poweruprack[c][5][1][1], b);
                    }
                    if (poweruprack[c][5] && poweruprack[c][5][2]) {
                        var d = "powerup_rackitem_back3";
                        var h = poweruprack[c][5][2][0];
                        var e = "+" + poweruprack[c][5][2][1];
                        var b = str_replace("%TIME%", formatTime(poweruprack[c][5][2][2]), powerup_bonustext3);
                        b = str_replace("%POINTS%", "+" + poweruprack[c][5][2][1], b);
                    }
                    if (poweruprack[c][5] && poweruprack[c][5][3]) {
                        var d = "powerup_rackitem_back4";
                        var h = 0;
                        var e = '<div style="width:47px; text-align:center;">' + poweruprack[c][5][3] + "%</div>";
                        var b = str_replace("%PERCENT%", poweruprack[c][5][3], t_pointsboost);
                    }
                    if (poweruprack[c][11]) {
                        var d = "powerup_rackitem_backtree";
                        b = str_replace("%PRODUCT%", forestry_product[h], b);
                    }
                    else {
                        b = str_replace("%PRODUCT%", produkt_name[h], b);
                    }
                    var n = "link";
                    var s = "activatePowerupCommit(" + poweruprack[c][0] + ",'" + poweruprack[c][2] + "')";
                    if (powerupactive && powerupactive[c] && powerupactive[c].remain > 0) {
                        s = "";
                        n = "";
                        b += '<div class="bonusinfo">' + t_powerupstillactive + "</div>";
                    }
                    html += '<div class="powerup_rackitem ' + d + " " + n + '" onclick="' + s + '" onmouseover="showDiv(\'powerup_rackitem' + c + "_tt')\" onmouseout=\"hideDiv('powerup_rackitem" + c + "_tt')\">";
                    html += '  <div class="powerup_rackitem_productline">';
                    if (h) {
                        html += '<div class="powerup_rackitem_img kp' + h + '"></div>';
                    }
                    html += '    <div class="powerup_rackitem_txt">' + e + "</div>";
                    html += '    <div class="clear;"></div>';
                    html += "  </div>";
                    html += '  <div class="powerup_rackitem_amount">' + poweruprack[c].rack + "</div>";
                    html += '  <div id="powerup_rackitem' + c + '_tt" class="powerup_rackitem_tt ttbox"><div class="bold">' + poweruprack[c][2] + "</div>" + b + "</div>";
                    html += "</div>";
                }
            }
        }
        hideDiv("powerselectornaviup");
        hideDiv("powerselectornavidown");
        var a = Math.ceil(l / 12);
        if (powerup_rackpage < a) {
            showDiv("powerselectornavidown");
        }
        if (powerup_rackpage > 1) {
            showDiv("powerselectornaviup");
        }
        $("powerselectorcontent").innerHTML = html;
        $("powerupselector").style.display = "block";
        $("powerupbar").style.background = "url(" + imgpath + "powerupbar_on.gif)";
        $("powerupbar").onclick = new Function("handlePowerups()");
    }
}
else {
    closePowerups();
} }
function closePowerups() { hideDiv("powerupselector"); $("powerupbar").style.background = "url(" + imgpath + "powerupbar_off.gif)"; $("powerupbar").onclick = new Function("handlePowerups(1)"); }
function activatePowerupCommit(e, b) { var d = str_replace("%NAME%", "<b>" + b + "</b>", powerup_activate_content); var a = "activatePowerup(" + e + ");"; var c = "hideDiv('globaltransp'); hideDiv('globalbox'); showDiv('transp3');"; globalcommitbox(powerup_activate_headline, d, a, c); }
function activatePowerup(a) { if (farm == 1 && !powerup_block) {
    powerup_block = 1;
    farmAction("activatepowerup", farm, 1, a);
} }
function powerupTimer() { if (gametimer.powerups) {
    var b = "";
    for (var e in gametimer.powerups) {
        if (powerupactive[e]) {
            var d = powerupactive[e].remain--;
            if (d > 0) {
                if (powerupactive[e][5][0]) {
                    var a = powerupactive[e][5][0][0];
                    var c = str_replace("%AMOUNT%", powerupactive[e][5][0][1], powerup_bonustext1);
                }
                if (powerupactive[e][5][1]) {
                    var a = powerupactive[e][5][1][0];
                    var c = str_replace("%TIME%", formatTime(powerupactive[e][5][1][2]), powerup_bonustext2);
                    c = str_replace("%CROP%", "+" + powerupactive[e][5][1][1], c);
                }
                if (powerupactive[e][5][2]) {
                    var a = powerupactive[e][5][2][0];
                    var c = str_replace("%TIME%", formatTime(powerupactive[e][5][2][2]), powerup_bonustext3);
                    c = str_replace("%POINTS%", "+" + powerupactive[e][5][2][1], c);
                }
                if (powerupactive[e][11]) {
                    c = str_replace("%PRODUCT%", forestry_product[a], c);
                }
                else {
                    c = str_replace("%PRODUCT%", produkt_name[a], c);
                }
                b += '<div style="margin-bottom:10px;">';
                b += '  <div class="bold">' + powerupactive[e][2] + "</div>";
                b += "  <div>" + formatTime(d) + "&nbsp;</div>";
                b += '  <div class="bonusinfo">' + c + "</div>";
                b += "</div>";
            }
            else {
                delete gametimer.powerups[e];
            }
        }
    }
    if (b != "") {
        $("poweruptimes_content").innerHTML = b;
        showDiv("poweruptimes");
    }
    else {
        clearTimer("powerups");
        hideDiv("poweruptimes");
    }
} }
function initGardenSpeedup(a) { if (speedupgardenactive == 1) {
    globalSpeedupBox("garden", a, 1);
} }
var blockgardenspeedup = 0;
function useGardenSpeedup(b, a) { if (speedupgardenactive == 1 && !blockgardenspeedup) {
    blockgardenspeedup = 1;
    farmAction("gardenspeedup", farm, b, a);
}
else {
    return false;
} }
function useGardenSpeedupResponse(b, e, a) { if (b[1].wasforfree) {
    if (b[1].wasforfree == 1) {
        freegardenspeedup = 0;
    }
    if (b[1].wasforfree == 2) {
        freegardenspeedup2 = 0;
    }
    if (b[1].wasforfree == 2) {
        freegardenspeeduptelekom = 0;
    }
    if (!freegardenspeedup && !freegardenspeedup2 && !freegardenspeeduptelekom) {
        for (var c = 1; c <= 4; c++) {
            for (var d = 1; d <= 6; d++) {
                if ($("farm_button_gardenspeedup" + c + "_" + d)) {
                    $("farm_button_gardenspeedup" + c + "_" + d).className = "farm_button_gardenspeedup speedupgardenbutton link";
                }
            }
        }
    }
} specialZoneFieldHandler(a); }
var questbarstatus = 0;
function initQuestbarControl() { farmAction("questbar", farm, 0); }
function setQuestbarControl() { if (tutorial > 0 || currentuserlevel < 3) {
    hideDiv("quests_status_bar");
}
else {
    showDiv("questbarcontrol");
    if (questbarstatus == 1) {
        hideDiv("quests_status_bar");
        $("questbarcontrol").style.backgroundPosition = "0px -20px";
    }
    else {
        showDiv("quests_status_bar");
        $("questbarcontrol").style.backgroundPosition = "0px 0px";
    }
} }
function openForestryQuestBox() { if (premium > 0) {
    mapGo2Location("city", 2);
    showDiv("transp3");
    initCampaigns();
} }
function openFoodworldQuestBox() { if (premium > 0) {
    if (foodworld_quicknavi == 1) {
        setFoodworldDialog("quest");
    }
    else {
        foodworldAction("foodworld_init", "questbox");
    }
} }
function touchpad(a, b) { farmAction("touchpad", farm, 0, a, b); }
function setTouchControl(a, b) { if (a == 1) {
    $("game_control").style.backgroundImage = "url(" + imgpath + "button_pad.png)";
    $("game_control").onclick = new Function("touchpad(0,1)");
    $("game_control_tt").innerHTML = settouch_off;
    if ($("touchinfobox") && b == 1) {
        showDiv("globaltransp");
        showDiv("touchinfobox");
        showDiv("touchinfobox_inner1");
        hideDiv("touchinfobox_inner2");
    }
}
else {
    $("game_control").style.backgroundImage = "url(" + imgpath + "button_mouse.png)";
    $("game_control").onclick = new Function("touchpad(1,1)");
    $("game_control_tt").innerHTML = settouch_on;
    if ($("touchinfobox") && b == 1) {
        showDiv("globaltransp");
        showDiv("touchinfobox");
        hideDiv("touchinfobox_inner1");
        showDiv("touchinfobox_inner2");
    }
} }
var cropbonus_remain = 0;
var cropbonus_data = new Object;
function setCropBonusCommit(a) { var c = "<div>" + str_replace("%COINS%", a, t_coinsfeatureactivate) + "</div>"; var b = "farmAction('setcropbonus',1,1)"; globalcommitbox(t_cropbonusbox_headline, c, b); }
function showCropBonus(a) { if (a) {
    cropbonus_remain = a;
    showDiv("cropbonus_symbol");
    if (gametimer.cropbonus) {
        clearTimer("cropbonus");
    }
    gametimer.cropbonus = 1;
} }
function cropBonusTimer() { cropbonus_remain--; if (cropbonus_remain > 0) {
    $("cropbonus_symbol_tt_time").innerHTML = formatTime(cropbonus_remain);
}
else {
    hideDiv("cropbonus_symbol");
    clearTimer("cropbonus");
    updateRack(_currRack, 1);
} }
function showCropBonusBox() { if (cropbonus_remain > 0) {
    globalerrorbox(error1062);
}
else {
    farmAction("initcropbonus", 1, 1);
} }
function cropBonusCoolDownTimer() { cropbonus_data.remain2--; if (cropbonus_data.remain2 > 0) {
    showDiv("cropboxbonusbutton_sw");
    $("cropboxbonusbutton_sw").innerHTML = '<span style="font-size:11px; font-weight:normal;">' + str_replace("%TIME%", formatTime(cropbonus_data.remain2), t_cropbonusavailable) + "</span><br>" + str_replace("%COINS%", cropbonus_data.coins, t_forcoins);
    $("cropboxbonusbutton_sw").onclick = new Function("");
    $("cropboxbonusbutton").innerHTML = '<span style="font-size:11px; font-weight:normal;">' + t_cropbonusbookitnow + "</span><br>" + str_replace("%COINS%", cropbonus_data.coins2, t_forcoins);
    $("cropboxbonusbutton").onclick = new Function("setCropBonusCommit(" + cropbonus_data.coins2 + ")");
}
else {
    hideDiv("cropboxbonusbutton_sw");
    $("cropboxbonusbutton_sw").onclick = new Function("");
    $("cropboxbonusbutton").innerHTML = str_replace("%COINS%", cropbonus_data.coins, t_forcoins);
    $("cropboxbonusbutton").onclick = new Function("setCropBonusCommit(" + cropbonus_data.coins + ")");
    clearTimer("cropbonus_cooldown");
} if (blackfriday_action == 1) {
    showDiv("cropbonus_blackfriday_in");
}
else {
    hideDiv("cropbonus_blackfriday_in");
} }
function closeCropBonusBox() { hideDiv("cropbonusbox"); hideDiv("box_donkeydialogtransp"); }
function setDonkeyCommit() { var b = "<div>" + str_replace("%COINS%", donkey_coins, t_coinsfeatureactivate) + "</div>"; var a = "farmAction('setdonkey',1,1)"; globalcommitbox(t_donkeybox_buyheadline, b, a); }
function showDonkey(a) { if (a) {
    if ($("box_donkey")) {
        $("box_donkey").removeClassName("box_donkey_inactive");
        $("box_donkey").addClassName("box_donkey");
    }
    if ($("farm_inner_waltraud")) {
        $("farm_inner_waltraud").removeClassName("farm_inner_waltraud");
        $("farm_inner_waltraud").addClassName("farm_inner_waltraud_active");
    }
}
else {
    if ($("box_donkey")) {
        $("box_donkey").removeClassName("box_donkey");
        $("box_donkey").addClassName("box_donkey_inactive");
    }
    if ($("farm_inner_waltraud")) {
        $("farm_inner_waltraud").removeClassName("farm_inner_waltraud_active");
        $("farm_inner_waltraud").addClassName("farm_inner_waltraud");
    }
} }
function dailyDonkeyResult(m) { if (m[0] == 2) {
    if (m[1].box) {
        initBoxFeatures();
    }
    else {
        showDiv("buybox_donkey");
        showDiv("box_donkeydialogtransp");
    }
}
else {
    var n = m[2];
    var l = m[3];
    var d = m[4];
    var a = m[5];
    var c = m[6];
    var b = m[7];
    var e = m[8];
    if (e && e.msg) {
        globalerrorbox(e.msg);
    }
    var h = "";
    h += '<div style="margin:0 0 10px 0;"><img src="' + imgpath + 'points.gif" border="0" height="10" width="10"><span>&nbsp;' + m[1] + "&nbsp;" + t_points + "</span></div>";
    if (b > 0) {
        h += '<div><img src="' + imgpath + 'adbonus.gif" border="0" height="10" width="10"><span>&nbsp;' + t_donkey_farmiadd + "</span></div>";
    }
    else {
        if (n > 0) {
            h += '<div><img src="' + imgpath + 'menu/coins.gif" border="0" height="10" width="10"><span>&nbsp;1x ' + t_coins + "</span></div>";
        }
        else {
            if (d > 0) {
                h += '<div><img src="' + imgpath + "gifts/" + d + '.gif" border="0" height="50" width="50"></div>';
            }
            else {
                if (c > 0) {
                    h += '<div><img src="' + imgpath + "farmhouse/thumbs/" + c + '.jpg" border="0" height="20" width="20"><span>&nbsp;1x ' + quest_reward_6 + "</span></div>";
                }
                else {
                    if (a > 0) {
                        h += '<div class="main_float_left kp' + a + '"></div>';
                        h += '<div class="main_float_left">&nbsp;1x&nbsp;' + produkt_name[a] + "</div>";
                        h += '<div style="clear:both;"></div>';
                    }
                    else {
                        if (l) {
                            for (pid in l) {
                                if (isNumeric(pid)) {
                                    h += '<div class="main_float_left kp' + pid + '"></div>';
                                    h += '<div class="main_float_left">&nbsp;' + l[pid] + "x " + produkt_name[pid] + "</div>";
                                    h += '<div style="clear:both;"></div>';
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    $("box_donkeydialogcontent").innerHTML = h;
    showDiv("box_donkeydialogtransp");
    showDiv("box_donkeydialog");
} }
function closeDonkeyDialog() { hideDiv("box_donkeydialogtransp"); hideDiv("box_donkeydialog"); }
function closeDonkeyBuy() { hideDiv("buybox_donkey"); hideDiv("box_donkeydialogtransp"); }
var cropactionbuyitems = 0;
var cropactionrunner = 0;
var cropactioninfo = {};
function cropActionAction(c, a) { if (c == "cropactioncoins" && cropactionbuyitems) {
    return false;
} if (c == "cropactioncoins") {
    cropactionbuyitems = 1;
} var b = ""; if (a) {
    b += "&coins=" + a;
} var d = createAjaxRequestObj(); d.open("GET", "ajax/city.php?rid=" + rid + "&mode=" + c + b, true); d.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); d.onreadystatechange = function () { initCropActionResponse(d, c); }; d.send(null); }
function initCropActionResponse(a, m) { var t = _chkRequest(a); if (t != 0) {
    cropactionbuyitems = 0;
    if (t[0] == 0) {
        globalerrorbox(t[1]);
    }
    else {
        cropactioninfo = t[1];
        var b = t[2];
        if (m == "cropactioncoins") {
            hideDiv("globalbox");
            hideDiv("globaltransp");
            updateMenu();
            showFeedback("cropaction_feedback", str_replace("%PRODUCT%", t_cropaction_product[cropactioninfo.action], t_cropaction_buy_feedback));
        }
        if (!b.sum) {
            sum = 0;
        }
        else {
            sum = b.sum;
        }
        var h = "";
        var q = cropactioninfo.name;
        if (sum >= cropactioninfo.sum) {
            q = t_cropaction_successhead;
        }
        h += '<div class="headline" style="font-size:14px;">' + q + "</div>";
        var c = "";
        c += '<div style="margin-bottom:5px;">' + t_cropaction_txt[cropactioninfo.action] + "</div>";
        if (!cropactioninfo.close) {
            c += '<div style="margin-bottom:5px; margin-bottom:5px; padding:5px; background-color:#B5A166; border-radius:5px; width:300px; margin:0 auto; margin-bottom:10px;">' + t_cropaction_resttime + '<span id="cropactiontimer" style="font-size:14px; font-weight:bold;">' + formatTime(cropactioninfo.remain) + "</span></div>";
        }
        if (sum >= cropactioninfo.sum) {
            c = t_cropaction_successtxt[cropactioninfo.action];
        }
        h += '<div style="padding:0px 50px; margin-bottom:10px;">' + c + "</div>";
        h += '<div class="city_animal_special' + cropactioninfo.reward.animalid + "_" + cropactioninfo.reward.special + '"></div>';
        var n = ((sum * 100) / cropactioninfo.sum);
        if (n > 100) {
            n = 100;
        }
        var e = (200 / 100);
        if (sum < cropactioninfo.sum && !cropactioninfo.close) {
            if (setarab == 1) {
                var r = "right";
            }
            else {
                var r = "left";
            }
            h += '<div style="margin-bottom:10px; margin-' + r + ':140px; width:300px;">' + str_replace("%PRODUCT%", t_cropaction_product[cropactioninfo.action], t_cropaction_dropline) + "</div>";
            h += '<div style="position:relative; background-color:#B5A166; margin:0 auto; width:130px; border-radius:5px; padding:10px">';
            for (var d in cropactioninfo.products) {
                h += '<div style="margin-bottom:4px;">';
                h += '  <div style="float:left; margin-right:5px;" class="kp' + d + '"></div>';
                h += '  <div style="float:left;">' + produkt_name[d] + "</div>";
                h += '  <div class="clear"></div>';
                h += "</div>";
            }
            h += "</div>";
        }
        if (sum < cropactioninfo.sum) {
            h += '<div style="position:absolute; bottom:105px; left:35px;" onmouseover="showDiv(\'cropaction_fill_tt\')" onmouseout="hideDiv(\'cropaction_fill_tt\')">';
            h += '  <div style="position:relative; width:75px; height:278px;">';
            h += '    <div style="position:absolute; bottom:70px; left:28px; background:url(' + imgpath + "city/cropaction" + cropactioninfo.action + "_inner.jpg); width:41px; height:" + (n * e) + 'px"></div>';
            h += '    <div style="position:absolute; bottom:0px; left:10px; background:url(' + imgpath + "city/cropaction" + cropactioninfo.action + '_front.png) 50% 0 no-repeat; width:100%; height:100%"></div>';
            h += '    <div id="cropaction_fill_tt" class="blackbox" style="display:none; position:absolute; top:110px; left:50px;">' + sum + "/" + cropactioninfo.sum + "</div>";
            h += "  </div>";
            h += '<button id="cropaction_buyitem_button" type="button" class="button_new link">' + str_replace("%PRODUCT%", t_cropaction_product[cropactioninfo.action], t_cropaction_buybutton) + "</button>";
            h += "</div>";
        }
        $("cropactionbox_content").innerHTML = h;
        var q = str_replace("%PRODUCT%", t_cropaction_product[cropactioninfo.action], t_cropaction_buybutton);
        var l = "";
        for (var s in cropactioninfo.change) {
            l += "<div class='coinsbutton_flex link' style='margin-bottom:5px; font-size:12px;' onclick=cropActionCoinsDialog(" + s + "," + cropactioninfo.change[s] + ");>" + s + "&nbsp;" + t_coins + " = " + cropactioninfo.change[s] + "&nbsp;" + t_cropaction_product[cropactioninfo.action] + "</div>";
        }
        if ($("cropaction_buyitem_button")) {
            $("cropaction_buyitem_button").onclick = new Function('globalcommitbox("' + q + '","' + l + '")');
        }
        showDiv("transp3");
        showDiv("cropactionbox");
        if (parseInt(sum) < parseInt(cropactioninfo.sum)) {
            setTimer("cropaction");
        }
        else {
            clearTimer("cropaction");
        }
    }
} }
function cropActionCoinsDialog(b, d) { var c = str_replace("%PRODUCT%", t_cropaction_product[cropactioninfo.action], t_cropaction_buybutton); var a = "<div>" + cityadcost + "<img src='" + imgpath + "menu/coins.gif' border=0>&nbsp;" + b + "&nbsp;" + t_coins; var e = "cropActionAction('cropactioncoins'," + b + ")"; globalcommitbox(c, a, e); }
function cropActionTimer() { var a = 1; if (cropactioninfo.remain) {
    cropactioninfo.remain--;
    if (cropactioninfo.remain > 0 && $("cropactiontimer")) {
        $("cropactiontimer").innerHTML = formatTime(cropactioninfo.remain);
        a = 0;
    }
    else {
        a = 1;
    }
} if (a == 1) {
    hideDiv("globalbox");
    hideDiv("globaltransp");
    clearTimer("cropaction");
} }
function closeCropAction() { hideDiv("transp3"); hideDiv("cropactionbox"); clearTimer("cropaction"); }
function cropActionCropDialog(d, e, b) { var a = ""; a += "<div style='margin-bottom:10px;'>" + t_cropaction_found + "</div>"; a += "<div style='margin-bottom:10px;'>" + b + "x&nbsp;" + t_cropaction_product[d] + "</div>"; a += "<div class='cropaction_product" + d + "'></div>"; var c = "off"; globalcommitbox(t_cropaction_found_head, a, c); }
var carpentry_entryblock = 0;
function carpentryBuild(h) { var c = '<div style="padding:10px; width:620px; height:180px; background:url(' + imgpath + 'capentry_inner_back.jpg);">'; c += '<div style="position:relative; margin:0 auto; margin-top:15px; width:500px; text-align:center;">'; c += "  <div>" + t_carpentry_currentlevel + "</div>"; c += '  <div style="font-weight:bold; font-size:24px;"><span id="carpentry_currentbonus">' + carpentry_data.currentbonus + "</span>%</div>"; c += '  <div id="carpentry_nextbonus_div" style="margin-top:10px;">' + t_carpentry_nextbonus + '<b><span id="carpentry_nextbonus">' + carpentry_data.nextbonus + "</span>%</b></div>"; c += '  <div id="carpentry_timebar" style="position:relative; width:250px; margin:0 auto; height:15px; background:#000;">'; c += '    <div style="position:absolute; top:15px;">' + t_carpentry_time + '<span id="carpentry_time"></span></div>'; c += '    <div id="carpentry_timebar_inner" style="position:absolute; top:-3px; left:0px; width:0px; height:18px; background:url(' + imgpath + 'guild/innerbar.png);"></div>'; c += "  </div>"; if (carpentry_data.levelblock > 0) {
    c += '<div style="margin-top:20px;">' + str_replace("%LEVEL%", carpentry_data.levelblock, t_carpentry_levelrequired) + "</div>";
} if (carpentry_data.config && !carpentry_data.levelblock) {
    c += '  <div id="carpentry_entries" style="width:250px; position:relative; margin:0 auto">';
    for (var e in carpentry_data.config.needs) {
        var a = 0;
        var l = 0;
        var b = carpentry_data.config.needs[e];
        if (carpentry_data.data.have && carpentry_data.data.have[e]) {
            var d = (150 / 100);
            var n = (carpentry_data.data.have[e] * 100 / carpentry_data.config.needs[e]);
            a = (n * d);
            l = carpentry_data.data.have[e];
            b = (carpentry_data.config.needs[e] - carpentry_data.data.have[e]);
        }
        var q = "";
        var m = "important";
        if (checkRackItem(e, farm)) {
            if (b == carpentry_data.config.needs[e] || (carpentry_data.data.have && carpentry_data.data.have[e] && carpentry_data.data.have[e] < carpentry_data.config.needs[e])) {
                q = "carpentryEntry(" + h + "," + e + "," + b + ")";
            }
            m = "";
        }
        c += '<div style="margin-bottom:5px;">';
        c += '  <div style="float:left; margin-right:5px;" class="kp' + e + '"></div>';
        c += '  <div class="link" style="float:left; margin-right:5px; position:relative; width:150px; height:15px; background:#000;" onclick="' + q + '" onmouseover="showDiv(\'carpentry_bar_tt' + e + "')\" onmouseout=\"hideDiv('carpentry_bar_tt" + e + "')\">";
        c += '    <div id="carpentry_bar_inner' + e + '" style="position:absolute; top:-3px; left:0px; width:' + a + "px; height:18px; background:url(" + imgpath + 'guild/innerbar.png);"></div>';
        c += '    <div id="carpentry_bar_tt' + e + '" class="blackbox" style="display:none; position:absolute; top:-25px; left:0px;">' + produkt_name[e] + "</div>";
        c += "  </div>";
        c += '  <div style="float:left;" class="' + m + '">' + l + "</span>/" + carpentry_data.config.needs[e] + "</div>";
        c += '  <div style="clear:both;"></div>';
        c += "</div>";
    }
    c += "  <div>" + t_carpentry_nextdelay + formatTime(carpentry_data.config.duration) + "</div>";
    c += "  </div>";
} c += "  </div>"; c += '  <div style="width:25px; height:25px; position:absolute; top:5px; left:5px; background:url(' + imgpath + 'kaeserei_info.png);" onmouseover="showDiv(\'carpentry_info\')" onmouseout="hideDiv(\'carpentry_info\')">'; c += '    <div id="carpentry_info" class="blackbox" style="display:none; width:350px; margin-left:30px;">' + t_carpentry_info + "</div>"; c += "  </div>"; c += "</div>"; c += '<div class="link big_close" onclick="carpentryClose()"></div>'; $("innercontent").innerHTML = c; showDiv("carpentry_entries"); hideDiv("carpentry_timebar"); $("innermaincontainer").className = "inner_back inner_back17"; hideDiv("carpentryproductionrunning"); if (carpentry_data.data.remain) {
    if (carpentry_data.data.remain > 0) {
        hideDiv("carpentry_entries");
        showDiv("carpentry_timebar");
        gametimer.carpentrytimer = 1;
    }
} if (!carpentry_data.nextbonus) {
    hideDiv("carpentry_nextbonus_div");
} }
function carpentryEntry(a, b, e) { var d = ""; d += '<input type="hidden" id="carpentrybox_entry_pid" value="' + b + '"></div>'; d += '<div style="margin:0 0 5px 0;">' + str_replace("%AMOUNT%", e, questbox_entry_rest) + "</div>"; d += '<div class="main_float_left kp' + b + '"></div>'; d += '<input onkeyup="chkCarpentryEntry(' + b + "," + e + ')" onchange="chkCarpentryEntry(' + b + "," + e + ')" id="carpentrybox_entry" style="margin:0 0 0 5px;" class="main_float_left" type="text" size="10" maxlength="6" value="1">&nbsp;' + t_stk; d += '<div class="clear"></div>'; var h = "farmAction('carpentryentry'," + farm + "," + a + ")"; var c = "hideDiv('globaltransp'); hideDiv('globalbox');"; globalcommitbox(forestry_questentry_dialog_head, d, h, c); $("carpentrybox_entry").select(); }
function chkCarpentryEntry(a, b) { var c = parseInt($("carpentrybox_entry").value, 10); if (isNaN(c)) {
    return;
} var d = checkRackItem(a, farm); if (d) {
    if (d < c) {
        c = d;
    }
    if (parseInt(b) < parseInt(c)) {
        c = b;
    }
} $("carpentrybox_entry").value = c; }
function carpentryClose() { hideDiv("transp"); hideDiv("innermaincontainer"); }
function carpentryTimer() { var d = carpentry_data.data.remain--; if (d > 0) {
    var a = (250 / 100);
    var c = (100 - (d * 100 / carpentry_data.data.duration));
    var b = (a * c);
    if ($("carpentry_timebar_inner")) {
        $("carpentry_timebar_inner").style.width = b + "px";
    }
    if ($("carpentry_time")) {
        $("carpentry_time").innerHTML = formatTime(d);
    }
    showDiv("carpentryproductionrunning");
}
else {
    showDiv("carpentry_entries");
    hideDiv("carpentry_timebar");
    clearTimer("carpentrytimer");
    if ($("carpentry_currentbonus")) {
        $("carpentry_currentbonus").innerHTML = carpentry_data.nextbonus;
    }
    if ($("carpentry_nextbonus")) {
        if (carpentry_data.config) {
            $("carpentry_nextbonus").innerHTML = carpentry_data.config.bonus;
        }
        else {
            hideDiv("carpentry_nextbonus");
        }
    }
    showCarpentryBonus(carpentry_data.nextbonus);
    hideDiv("carpentryproductionrunning");
} if (!carpentry_data.nextbonus) {
    hideDiv("carpentry_nextbonus_div");
} }
function showCarpentryBonus(a) { showDiv("carpentrybonus_symbol"); if ($("carpentry_icon_currentbonus")) {
    $("carpentry_icon_currentbonus").innerHTML = a;
} carpentry_bonus = a; }
var architect_config = new Array;
var architect_current_item = 1;
var architect_navi_move = 0;
var farmhouse_design = 0;
var architect_page = 1;
function initArchitect() { var m = ((architect_page - 1) * 6) + 1; var l = (architect_page * 6); var h = 0; var c = '<div id="architect">'; c += '<div class="intro">' + t_architect_info + "</div>"; c += '<div class="list">'; for (var b = 30; b > 0; b--) {
    if (architect_config[0][b]) {
        h++;
        if (h >= m && h <= l) {
            var e = "";
            if (architect_config[0][b].bought) {
                e = "architect_current_item=" + b + "; farmAction('activatearchitect',1,1);";
            }
            else {
                e = "detailArchitect(" + b + ")";
            }
            var d = "";
            if (architect_config[0][b].halloween) {
                d = t_architect_halloween;
            }
            if (architect_config[0][b].xmas) {
                d = t_architect_xmas;
            }
            if (architect_config[0][b].soccer) {
                d = t_architect_soccer;
            }
            if (architect_config[0][b].easter) {
                d = t_architect_easter_info;
            }
            if (architect_config[0][b].specialoffer) {
                d = t_architect_specialoffer_info;
            }
            if (architect_config[0][b].summer) {
                d = t_architect_summer;
            }
            var a = "";
            if (!architect_config[0][b].buyable && !architect_config[0][b].bought) {
                a = "off";
            }
            c += '<div id="architect_item' + b + '" class="item headquarter_design' + b + "_preview link " + a + '" onclick="' + e + '">';
            if (architect_config[1] == b) {
                c += '<div class="select"></div>';
            }
            if (architect_config[0][b]["new"] && architect_config[0][b].buyable) {
                c += '<div class="new bonus_star"><div class="inner">' + t_new.toUpperCase() + "</div></div>";
            }
            if (architect_config[0][b].bought) {
                c += '<div class="ready"></div>';
            }
            if (!architect_config[0][b].bought && !architect_config[0][b].buyable) {
                c += '<div class="block locked_big"></div>';
            }
            c += '  <div class="info">';
            c += '    <div id="architect_item' + b + '_timer" class="timer"></div>';
            c += '    <div class="event">' + d + "</div>";
            c += "  </div>";
            c += "</div>";
        }
    }
} c += '  <div class="clear"></div>'; c += "</div>"; c += '<div id="architect_navi_up" class="link" onclick="naviArchitect(-1, ' + h + ')"></div>'; c += '<div id="architect_navi_down" class="link" onclick="naviArchitect(1, ' + h + ')"></div>'; globalBoxFlex(t_architect_name, c, 0, 0, 1); $("globalbox").style.top = "35px"; naviArchitect(0, h); setTimer("architect"); }
function naviArchitect(b, c) { var a = Math.ceil(c / 6); architect_page += b; if (architect_page < 1) {
    architect_page = 1;
} if (architect_page >= a) {
    architect_page = a;
} if (b != 0) {
    initArchitect();
} showDiv("architect_navi_up"); showDiv("architect_navi_down"); if (architect_page == 1) {
    hideDiv("architect_navi_up");
} if (architect_page == a) {
    hideDiv("architect_navi_down");
} }
function timerArchitect() { for (var a in architect_config[0]) {
    if (architect_config[0][a] && architect_config[0][a].remain && architect_config[0][a].remain > 0) {
        architect_config[0][a].remain--;
        if (architect_config[0][a].remain > 1) {
            var b = t_architect_resttime + "&nbsp;" + formatTime(architect_config[0][a].remain);
            if ($("architect_item" + a + "_timer")) {
                $("architect_item" + a + "_timer").innerHTML = b;
            }
            if ($("architect_detail" + a + "_timer")) {
                $("architect_detail" + a + "_timer").innerHTML = b;
            }
        }
        else {
            architect_config[0][a].buyable = 0;
            initArchitect();
        }
    }
} }
function detailArchitect(m) { architect_current_item = m; var l = {}; for (var d = 0; d < architect_config[2].length; d++) {
    if (architect_config[2][d].productid < 10) {
        architect_config[2][d].amount -= 5;
    }
    if (architect_config[2][d].amount > 0) {
        l[architect_config[2][d].productid] = architect_config[2][d].amount;
    }
} var c = ""; c += '<div id="architect_detail">'; c += '  <div class="img headquarter_design' + m + '_preview"></div>'; c += '  <div class="products">'; var h = 0; var b = 0; if (architect_config[0][m].products) {
    for (var d in architect_config[0][m].products) {
        if (d < 10) {
            b = 1;
        }
        var a = "";
        if (!l[d] || l[d] < architect_config[0][m].products[d]) {
            h = 1;
            a = "important";
        }
        c += '<div class="f_m_symbol' + d + '" style="float:left; margin-right:5px;"></div>';
        c += '<div class="' + a + '" style="float:left; margin-bottom:5px;">' + architect_config[0][m].products[d] + "x&nbsp;" + produkt_name_forestry[d] + "</div>";
        c += '<div class="clear"></div>';
    }
} if (architect_config[0][m].coins) {
    var a = "";
    if (parseInt($("coins").innerHTML) < architect_config[0][m].coins) {
        h = 1;
        a = "important";
    }
    c += '<img src="' + imgpath + 'menu/coins.gif" style="float:left; margin-right:5px; width:15px;">';
    c += '<div style="float:left;" class="' + a + '">' + architect_config[0][m].coins + "&nbsp;" + t_coins + "</div>";
    c += '<div class="clear"></div>';
} if (architect_config[0][m].buyable && !h) {
    c += '<div id="architect_detail' + m + '_timer" class="timer"></div>';
    c += '<button class="buy button_new link" onclick="buyCommitArchitect(' + m + ')">' + market_buy + "</button>";
} c += "  </div>"; c += '  <div class="clear"></div>'; if (architect_config[0][m].specialoffer && (specialoffer && specialoffer.data && specialoffer.data.remain > 0)) {
    c += '<div class="bonusinfo">' + t_farmhousedesign_specialoffer + "</div>";
    c += '<button class="specialoffer button_new link" onclick="specialoffer.init()">' + t_goto_specialoffer + "</button>";
} var e = ""; if (architect_config[0][m].halloween) {
    e = t_architect_halloween;
} if (architect_config[0][m].xmas) {
    e = t_architect_xmas;
} if (architect_config[0][m].soccer) {
    e = t_architect_soccer;
} if (architect_config[0][m].easter) {
    e = t_architect_easter_info;
} if (architect_config[0][m].specialoffer) {
    e = t_architect_specialoffer_info;
} c += '<div class="bonusinfo">' + e + "</div>"; if (b) {
    c += '<div class="bonusinfo">' + t_forestry_settling_min + "</div>";
} c += "</div>"; globalBoxFlex(t_architect_name, c, 0, "initArchitect()", 1); }
function buyCommitArchitect(a) { if (architect_config[0][a].coins) {
    globalcommitbox(t_architect_name, str_replace("%COINS%", architect_config[0][a].coins, t_coinsfeatureactivate), "farmAction('buyarchitect',1,1)");
}
else {
    farmAction("buyarchitect", 1, 1);
} }
function setFarmhouse(c) { for (var b = 1; b < 30; b++) {
    if ($("hq_upgrade" + b + "_ani")) {
        hideDiv("hq_upgrade" + b + "_ani");
    }
    for (var a = 1; a < 5; a++) {
        if ($("hq_upgrade" + b + "_ani" + a)) {
            hideDiv("hq_upgrade" + b + "_ani" + a);
        }
    }
} $("farm_inner_headquarter").className = "link headquarter_design" + c; if ($("hq_upgrade" + c + "_ani")) {
    showDiv("hq_upgrade" + c + "_ani");
} if ($("hq_upgrade" + c + "_ani1")) {
    showDiv("hq_upgrade" + c + "_ani1");
} if ($("hq_upgrade" + c + "_ani2")) {
    showDiv("hq_upgrade" + c + "_ani2");
} if ($("hq_upgrade" + c + "_ani3")) {
    showDiv("hq_upgrade" + c + "_ani3");
} $("hq_upgrade1").className = "hq_upgrade1_" + c; $("hq_upgrade2").className = "hq_upgrade2_" + c; $("hq_upgrade3").className = "hq_upgrade3_" + c; if ((quests_status && quests_status.main && quests_status.main[1]) || highestquest1 > 0) {
    if ((quests_status.main && quests_status.main[1] && quests_status.main[1].questid > 4) || highestquest1 > 4) {
        showDiv("hq_upgrade1");
    }
    if ((quests_status.main && quests_status.main[1] && quests_status.main[1].questid > 23) || highestquest1 > 23) {
        showDiv("hq_upgrade2");
    }
    if ((quests_status.main && quests_status.main[1] && quests_status.main[1].questid > 34) || highestquest1 > 34) {
        showDiv("hq_upgrade3");
    }
} showDiv("hq_upgrade2"); showDiv("hq_upgrade3"); if (c == 21) {
    hideDiv("hq_upgrade2");
    hideDiv("hq_upgrade3");
} if (c == 22) {
    hideDiv("hq_upgrade3");
} farmhouse_design = c; }
function initBoxFeatures() { generalAction("boxinit"); }
function initBoxFeaturesResponse(a) { if (a[1] != 0) {
    hideDiv("box_premium_activate");
    hideDiv("box_48hbonus_activate");
    hideDiv("box_ad_activate");
    hideDiv("box_premium_activatedate");
    hideDiv("box_48hbonus_activatedate");
    hideDiv("box_ad_activatedate");
    hideDiv("box_farmhouse_activate");
    hideDiv("box_farmhouse_activatedate");
    hideDiv("box_zieracker_activate");
    hideDiv("box_zieracker_activatedate");
    hideDiv("box_present_activate");
    hideDiv("box_present_activatedate");
    if (a[1]["premium"] > 0) {
        $("box_premium_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_premium"], box_activated_date);
        showDiv("box_premium_activatedate");
    }
    else {
        showDiv("box_premium_activate");
    }
    if (a[1]["48hbonus"] > 0) {
        $("box_48hbonus_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_48hbonus"], box_activated_date);
        showDiv("box_48hbonus_activatedate");
    }
    else {
        showDiv("box_48hbonus_activate");
    }
    if (a[1]["ad"] > 0) {
        $("box_ad_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_ad"], box_activated_date);
        showDiv("box_ad_activatedate");
    }
    else {
        showDiv("box_ad_activate");
    }
    if (a[1]["farmhouse"] > 0) {
        $("box_farmhouse_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_farmhouse"], box_activateditem_date);
        showDiv("box_farmhouse_activatedate");
    }
    else {
        showDiv("box_farmhouse_activate");
    }
    if (a[1]["zieracker"] > 0) {
        $("box_zieracker_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_zieracker"], box_activateditem_date);
        showDiv("box_zieracker_activatedate");
    }
    else {
        showDiv("box_zieracker_activate");
    }
    if (a[1]["gift"] > 0) {
        $("box_present_activatedate").innerHTML = str_replace("[%DATE%]", a[1]["date_present"], box_activateditem_date);
        showDiv("box_present_activatedate");
    }
    else {
        showDiv("box_present_activate");
    }
    showDiv("box_containercontent1");
}
else {
    $("box_boxerror").innerHTML = "";
    showDiv("box_containercontent2");
} $("box_boxerror").innerHTML = ""; showDiv("box_containertransp"); showDiv("box_container"); }
function sendBoxCode() { var a = $("box_inputcode").value; if (a != "") {
    var b = { code: encodeURIComponent(a) };
    generalAction("boxsendcode", b);
} return false; }
function activateBoxPremium() { generalAction("boxpremium"); }
function activateBox48hBonus() { generalAction("box48hbonus"); }
function activateBoxAd() { generalAction("boxad"); }
function activateBoxItem(a) { if (a > 0) {
    var b = { type: a };
    generalAction("boxitem", b);
} return false; }
function closeBoxFeatures() { hideDiv("box_containercontent1"); hideDiv("box_containercontent2"); hideDiv("box_containertransp"); hideDiv("box_container"); }
function chgDVDBoxImg(b) { if (b == 1) {
    var a = "dvdbox";
} if (b == 2) {
    var a = "dvdbox_ani";
} $("box_button").style.backgroundImage = "url(" + imgpath + a + ".gif)"; }
function globalAlert(a) { if (!("transition" in $("globalalert").style) && !("webkitTransition" in $("globalalert").style)) {
    return false;
} $("globalalert").innerHTML = a; $("globalalert").addClassName("globalalert"); setTimeout(closeGlobalAlert, 3000); }
function closeGlobalAlert() { $("globalalert").innerHTML = ""; $("globalalert").removeClassName("globalalert"); }
function levelupAlert(c, b) { var a = ""; a += '<div style="font-size:16px; font-weight:bold;">' + str_replace(":", "", guildinfo_level) + " " + c + "</div>"; a += "<div>" + b + "</div>"; globalAlert(a); }
var gametimer = new Object;
var gametimer_runtime = 0;
function setTimer(a) { if (!gametimer[a]) {
    gametimer[a] = 1;
} }
function clearTimer(a) { if (gametimer[a]) {
    delete gametimer[a];
} }
function runningTimer() { gametimer_runtime++; for (var a in gametimer) {
    if (a == "coinsbox") {
        coinsBoxTimer();
    }
    if (a == "cropbonus") {
        cropBonusTimer();
    }
    if (a == "cropbonus_cooldown") {
        cropBonusCoolDownTimer();
    }
    if (a == "powerups") {
        powerupTimer();
    }
    if (a == "logout") {
        logoutTimer();
    }
    if (a == "clothingdonation_gambletimer") {
        gambleTimerClothingDonation();
    }
    if (a == "carpentrytimer") {
        carpentryTimer();
    }
    if (a == "windmilltimer") {
        windmillTimer();
    }
    if (a == "foodworld") {
        foodworldTimer();
    }
    if (a == "foodworldquest") {
        foodworldQuestTimer();
    }
    if (a == "farm_productions") {
        farmProductions();
    }
    if (a == "farm_water") {
        farmWater();
    }
    if (a == "quests_status") {
        questsStatusTimer();
    }
    if (a == "guild_quest") {
        countdownGuildQuest();
    }
    if (a == "flowerarea") {
        timerFlowerArea();
    }
    if (a == "flowergardener") {
        timerFlowerGardener();
    }
    if (a == "flowerslots") {
        timerFlowerSlots();
    }
    if (a == "nursery") {
        timerNursery();
    }
    if (a == "megafruit") {
        timerMegaFruit();
    }
    if (a == "foodcontest") {
        timerFoodcontest();
    }
    if (a == "mastermind") {
        mastermindTimer();
    }
    if (a == "forestry_inner") {
        timerForestryInner();
    }
    if (a == "megafield") {
        timerMegafield();
    }
    if (a == "vet") {
        timerVet();
    }
    if (a == "map") {
        mapTimer();
    }
    if (a == "fuelstation") {
        fuelstationTimer();
    }
    if (a == "cropaction") {
        cropActionTimer();
    }
    if (a == "job") {
        jobTimer();
    }
    if (a == "guildjob") {
        guildJobTimer();
    }
    if (a == "guildjob_quickview") {
        guildJobQuickViewTimer();
    }
    if (a == "kniffel" && kniffel) {
        kniffel.timer();
    }
    if (a == "animaldealer") {
        timerAnimalDealer();
    }
    if (a == "travelbox") {
        if ((travel_box_timer_start + 5) <= gametimer_runtime) {
            mapTravelEnd();
        }
        else {
            $("travel_box_timer").innerHTML = formatTime(5 - (gametimer_runtime - travel_box_timer_start));
        }
    }
    if (a == "olympia") {
        olympia.timer();
    }
    if (a == "specialoffer") {
        specialoffer.timer();
    }
    if (a == "specialbonus") {
        specialbonus.timer();
    }
    if (a == "architect") {
        timerArchitect();
    }
    if (a == "pets") {
        pets.timer();
    }
    if (a == "collectevent") {
        collectevent.timer();
    }
    if (a == "cinema") {
        cinema.timer();
    }
    if (a == "merchant") {
        merchant.timer();
    }
    if (a == "hillwalk") {
        hillwalk.timer();
    }
    if (a == "giftevent") {
        giftevent.timer();
    }
    if (a == "giftshop") {
        giftshop.timer();
    }
    if (a == "calendar") {
        calendar.timer();
    }
    if (a == "loginevent") {
        loginevent.timer();
    }
    if (a == "deliveryevent") {
        deliveryevent.timer();
    }
    if (a == "battle") {
        battle.timer();
    }
    if (a == "paymentitemcollection") {
        paymentitemcollection.timer();
    }
    if (a == "butterfly") {
        butterfly.timer();
    }
} ponyTimer(); if (gametimer_runtime % 600 == 0 && !city) {
    farmAction("updater", farm, 0);
} if ($("farmersmarket_teaser") && farmersmarket_firstvisit == 1 && gametimer_runtime % 10 == 0) {
    showDiv("farmersmarket_teaser_tt");
    window.setTimeout("hideDiv('farmersmarket_teaser_tt')", 3000);
} if ($("flowers_gardener_hello") && flowerslots_need_water > 0 && gametimer_runtime % 10 == 0) {
    showDiv("flowers_gardener_hello");
    window.setTimeout("hideDiv('flowers_gardener_hello')", 3000);
} megafruit_stats_delay--; megafield_stats_delay--; }
function closeNewsboyStart() { hideDiv("transp"); hideDiv("newsbox"); if ($("globalerrorbox").style.display != "block") {
    hideDiv("globaltransp");
} }
function setNewsUnread(a) { if (currentnews > 0 && news[(currentnews - 1)]["nnr"] > 0) {
    var b = news[(currentnews - 1)]["nnr"];
    var c = { nnr: b };
    generalAction("setnewsunread", c, a);
} }
function showNews() { if (!$("newsbox") || !news.length) {
    return true;
} var b = ""; var c = 0; for (var a = 0; a < news.length; a++) {
    b += '<div class="news" id="news' + (a + 1) + '">';
    b += '	<div class="newsbox_subject">' + news[a]["subject"] + "</div>";
    b += '	<div class="newsbox_body">' + news[a]["body"] + "</div>";
    b += "</div>";
    c++;
} $("newsbox_inner").innerHTML = b; showDiv("newsbox"); showDiv("globaltransp"); hideDiv("newsbox_navi_count"); if (c > 0) {
    $("allnewscount").innerHTML = c;
    showDiv("newsbox_navi_count");
} naviNews(); }
function naviNews() { var b = parseInt(news.length); if (currentnews > b) {
    currentnews = b;
} for (var a = 1; a <= b; a++) {
    hideDiv("news" + a);
    hideDiv("newsbox_navi_left");
    hideDiv("newsbox_navi_right");
    $("newsbox_navi_left").onclick = new Function("");
    $("newsbox_navi_right").onclick = new Function("");
} showDiv("news" + currentnews); $("currentnewscount").innerHTML = currentnews; if (currentnews != b) {
    if (currentnews > 1) {
        showDiv("newsbox_navi_left");
        $("newsbox_navi_left").onclick = new Function("backNews()");
    }
    if (b > 1 && currentnews < b) {
        showDiv("newsbox_navi_right");
        $("newsbox_navi_right").onclick = new Function("setNewsUnread(2)");
    }
}
else {
    if (b > 1) {
        showDiv("newsbox_navi_left");
        $("newsbox_navi_left").onclick = new Function("backNews()");
    }
} }
function backNews() { currentnews--; naviNews(); }
function nextNews() { currentnews++; naviNews(); }
function showWeather() { if (farms_data.weather) {
    $("weatherlink").className = "link weatherlink_back" + farms_data.weather.today.weather;
    showDiv("weatherlink");
}
else {
    hideDiv("weatherlink");
} }
function openWeather() { var c = t_weather_link; var b = '<div style="position:relative; width:350px;">'; b += "<div>" + str_replace("%PERCENT%", farms_data.weather.constants.reduction, t_weather_info) + "</div>"; b += '<div class="headline" style="margin-top:10px;">' + t_weather_body1 + "</div>"; b += '<div class="weather_block">'; b += '  <div style="float:left; margin:0px 15px 0px 10px;" class="weather_free' + farms_data.weather.today.weather + '"></div>'; b += '  <div style="float:left; margin-top:15px;">'; for (var a = 0; a < farms_data.weather.today.set.length; a++) {
    b += '<div style="margin-top:5px;">' + htmlProductBody(farms_data.weather.today.set[a]) + "</div>";
} b += "  </div>"; b += '  <div class="clear"></div>'; b += "</div>"; if (farms_data.weather.tomorrow) {
    b += '<div class="headline" style="margin-top:10px;">' + t_weather_body2 + "</div>";
    b += '<div class="weather_block">';
    b += '  <div style="float:left; margin:0px 15px 0px 10px;" class="weather_free' + farms_data.weather.tomorrow.weather + '"></div>';
    b += '  <div style="float:left; margin-top:15px;">';
    for (var a = 0; a < farms_data.weather.tomorrow.set.length; a++) {
        b += '<div style="margin-top:5px;">' + htmlProductBody(farms_data.weather.tomorrow.set[a]) + "</div>";
    }
    b += "  </div>";
    b += '  <div class="clear"></div>';
    b += "</div>";
} b += "</div>"; globalBoxFlex(c, b, 0, 0, 1); $("globalbox_char").className = "globalbox_frog"; $("globalbox_charani").className = "globalbox_frogani"; showDiv("globalbox_char"); showDiv("globalbox_charani"); showDiv("globalbox_footer"); $("globalbox").style.top = "50px"; if (!farms_data.weather.tomorrow && farms_data.weather.forecast == 1) {
    b = '<div class="weather_forecast link" onclick="forecastWeatherCommit()">' + t_weather_forecast + "</div>";
    $("globalbox_add").innerHTML = b;
} }
function forecastWeatherCommit() { var b = t_weather_forecast_head; var a = str_replace("%AMOUNT%", farms_data.weather.constants.coins, t_weather_forecast_desc); var c = "forecastWeather()"; globalcommitbox(b, a, c); $("globalbox_char").className = "globalbox_frog"; $("globalbox_charani").className = "globalbox_frogani"; }
function forecastWeather() { farmAction("weather_forecast", farm, 0); }
function openCoinsBox() { showDiv("globaltransp"); showDiv("coins_box"); setTimer("coinsbox"); $("coins_premium_exchange_amount").value = ""; $("coins_premium_months").value = 0; coinsCheckPremiumMonth(); coinsCheckExchange(); if (premium) {
    $("coins_premium_months_premiuminfo").innerHTML = str_replace("[*date*]", user_premium_bis, t_coins_use_premium_until);
    showDiv("coins_premium_months_premiuminfo");
}
else {
    hideDiv("coins_premium_months_premiuminfo");
} }
function coinsCheckPremiumMonth() { var b = $("coins_premium_months").value; if (b > 0) {
    var a = (b * premiummonth[b][0]);
} if (b > 0 && a > 0) {
    showDiv("coins_premium_months_button");
}
else {
    hideDiv("coins_premium_months_button");
} }
function coinsCheckExchange() { var a = $("coins_premium_exchange_amount").value; if (isNumeric(a) && a != "" && a > 0) {
    var b = str_replace("%COINS%", a, t_payment_exchange_coins);
    $("coins_premium_exchange_button").innerHTML = str_replace("%AMOUNT%", formatPrice(coinsexchange * a), b);
    showDiv("coins_premium_exchange_button");
}
else {
    hideDiv("coins_premium_exchange_button");
} }
function coinsBoxDialog(l) { hideDiv("coins_box"); if (l == "exchange") {
    var b = $("coins_premium_exchange_amount").value;
    var d = str_replace("%CURRENCY%", gamecurrency, t_payment_exchange_head);
    var a = str_replace("%COINS%", b, t_payment_exchange_coins);
    a = str_replace("%AMOUNT%", formatPrice(coinsexchange * b), a);
    var e = "cityAction('exchangecoins', " + b + ")";
    var c = "closeCoinsBox(); openCoinsBox(); hideDiv('globalbox');";
} if (l == "premium") {
    var h = $("coins_premium_months").value;
    var d = t_coins_buy_premium_button;
    var a = str_replace("%MONTH%", h, t_payment_premium_buy);
    a = str_replace("%COINS%", (h * premiummonth[h]), a);
    var e = "cityAction('buycoinspremium', " + h + ")";
    var c = "closeCoinsBox(); openCoinsBox(); hideDiv('globalbox');";
} globalcommitbox(d, a, e, c); }
function coinsBoxTimer() { paymentitem_remain--; if ($("coins_box_paymentitem_available")) {
    hideDiv("coins_box_paymentitem_available");
    if (paymentitem_remain > 0) {
        $("coins_box_paymentitem_available").innerHTML = str_replace("%TIME%", formatTime(paymentitem_remain), t_paymentitem_available);
        if (paymentitem_remain <= 259200) {
            showDiv("coins_box_paymentitem_available");
        }
    }
} }
function closeCoinsBox() { hideDiv("globaltransp"); hideDiv("coins_box"); $("coins_premium_months").value = 0; $("coins_premium_exchange_amount").value = ""; }
function starter() { gametimer.start = window.setInterval(runningTimer, 1000); gametimer.logout = 1; wasserinterval = setInterval(checkWasser, 5000); updateInterval = setInterval(updateMenu, 900000); farmAction("getfarms", 1, 0); checkAd(); if (currentuserlevel >= 40) {
    showDiv("map_stock_overview_link");
}
else {
    hideDiv("map_stock_overview_link");
} }
function logoutTimer() { if (disable_autologout == 1) {
    hideDiv("logout_timer");
}
else {
    showDiv("logout_timer");
    logout_remain--;
    if ($("logout_timer")) {
        $("logout_timer").innerHTML = "(" + formatTime(logout_remain) + ")";
    }
    if (logout_remain <= 0) {
        location.href = "main.php?page=logout&autologout=1";
    }
} servertimetime++; if ($("servertime")) {
    $("servertime").innerHTML = formatDateString(servertimetime);
} }
function checkPartnerPortal() { for (var a = 0; a < partnerportal.length; a++) {
    if (userref == partnerportal[a]) {
        return 1;
    }
} return 0; }
function isPresentAction() { if (setcurrenttime >= presentaktionstart && setcurrenttime <= presentaktionend) {
    return 1;
}
else {
    return 0;
} }
function formatDateString(c) { var a = new Date(); var b = (a.getTimezoneOffset() * 60); if (b > 0) {
    b -= 3600;
}
else {
    b += 3600;
} c = (c + b); var e = new Date(c * 1000); var r = e.getDate(); var l = (e.getMonth() + 1); var u = e.getFullYear(); var q = String(e.getHours()); if (q.length == 1) {
    q = "0" + q;
} var n = String(e.getMinutes()); if (n.length == 1) {
    n = "0" + n;
} var w = String(e.getSeconds()); if (w.length == 1) {
    w = "0" + w;
} var v = str_replace("d", r, t_datetimeformat); v = str_replace("m", l, v); v = str_replace("y", u, v); v = str_replace("H", q, v); v = str_replace("i", n, v); v = str_replace("s", w, v); v = str_replace("\\", "", v); return v; }
function is_array(a) { return typeof (a) == "object" && (a instanceof Array); }
function questsStatusTimer() { if (gametimer.quests_status) {
    for (var c in gametimer.quests_status) {
        for (var b in gametimer.quests_status[c]) {
            if (gametimer.quests_status[c][b] && $("quests_status_bar_" + c + b)) {
                gametimer.quests_status[c][b].remain--;
                if (gametimer.quests_status[c][b].remain <= 0) {
                    hideDiv("quests_status_bar_" + c + b + "_cooldown");
                    delete gametimer.quests_status[c][b];
                    $("quests_status_bar_" + c + b + "_tt_time").innerHTML = "";
                    if (c == "main") {
                        $("quests_status_bar_" + c + b).onclick = new Function("questAction('init',0,0,1," + b + ")");
                    }
                    if (c == "forestry") {
                        $("quests_status_bar_" + c + b).onclick = new Function("openForestryQuestBox()");
                    }
                    if (c == "foodworld") {
                        $("quests_status_bar_" + c + b).onclick = new Function("openFoodworldQuestBox()");
                    }
                }
                else {
                    showDiv("quests_status_bar_" + c + b + "_cooldown");
                    $("quests_status_bar_" + c + b).onclick = new Function();
                    $("quests_status_bar_" + c + b + "_tt_time").innerHTML = formatTime(gametimer.quests_status[c][b].remain);
                    var d = ((gametimer.quests_status[c][b].remain * 100) / gametimer.quests_status[c][b].cooldown);
                    var a = ((14 / 100) * d);
                    $("quests_status_bar_" + c + b + "_cooldown_top").style.height = a + "px";
                    $("quests_status_bar_" + c + b + "_cooldown_bottom").style.height = (14 - a) + "px";
                }
            }
        }
    }
} }
var highestquest1 = 0;
function _chkRequest(request, mode) { if (request.readyState == 4 && request.status == 200) {
    response = request.responseText;
    if (response == "failed" || response.session_tot == 1) {
        session_failed();
    }
    else {
        if (response == "maintenance") {
            globalerrorbox(t_maintenance, "maintenance");
        }
        else {
            var result = eval("(" + response + ")");
            if (response == 0) { }
            else {
                if (result.updateblock) {
                    if (result.updateblock.stock) {
                        rackHandler(result.updateblock.stock, mode);
                    }
                    if (result.updateblock.menue) {
                        menueHandler(result.updateblock.menue);
                    }
                    if (result.updateblock.quests) {
                        questInitGo(result.updateblock.quests, "init", 0, 0, 1);
                    }
                    if (result.updateblock.queststatus) {
                        questsHandler(result.updateblock.queststatus);
                    }
                    if (result.updateblock.farmis) {
                        farmisHandler(result.updateblock.farmis);
                    }
                    if (result.updateblock.farmersmarket) {
                        farmersMarketHandler(result.updateblock.farmersmarket);
                    }
                    if (result.updateblock.megafield) {
                        megafieldHandler(result.updateblock.megafield);
                    }
                    if (result.updateblock.farms && result.updateblock.farms.farms) {
                        farmsHandler(result.updateblock.farms, mode);
                    }
                    if (result.updateblock.map) {
                        farms_data.map = result.updateblock.map;
                    }
                    if (result.updateblock.weather) {
                        weatherHandler(result.updateblock.weather);
                    }
                    if (result.updateblock.guild_job && guild_job) {
                        guild_job = result.updateblock.guild_job;
                    }
                    if (result.updateblock.job) {
                        jobHandler(result.updateblock.job);
                    }
                    if (result.updateblock.forestry_stock) {
                        forestryHandler(result.updateblock.forestry_stock);
                    }
                    if (result.updateblock.actionsheep) {
                        actionsheep = result.updateblock.actionsheep;
                        initActionSheep();
                    }
                    if (result.updateblock.merchant) {
                        merchant.data = result.updateblock.merchant;
                        setTimer("merchant");
                    }
                    if (result.updateblock.hillwalk) {
                        hillwalk.data = result.updateblock.hillwalk;
                        setTimer("hillwalk");
                    }
                }
                if (result.datablock) {
                    return result.datablock;
                }
                else {
                    return result;
                }
            }
        }
    }
} return 0; }
function farmsHandler(a, d) { for (var b in a.farms) {
    for (var c in a.farms[b]) {
        if (farms_data.farms && farms_data.farms[b] && farms_data.farms[b][c]) {
            delete farms_data.farms[b][c];
        }
        if (!farms_data.farms[b]) {
            farms_data.farms[b] = {};
        }
        farms_data.farms[b][c] = a.farms[b][c];
    }
} if (a.count) {
    farms_data.count = a.count;
} if (a.blocked) {
    farms_data.blocked = a.blocked;
} if (a.newarea) {
    farms_data.newarea = a.newarea;
} if (a.autoplant_loads) {
    farms_data.autoplant_loads = a.autoplant_loads;
} if (a.freegardenspeedup) {
    farms_data.freegardenspeedup = a.freegardenspeedup;
    freegardenspeedup = farms_data.freegardenspeedup;
} if (a.freegardenspeedup2) {
    farms_data.freegardenspeedup2 = a.freegardenspeedup2;
    freegardenspeedup2 = farms_data.freegardenspeedup2;
} if (a.highestquest1) {
    highestquest1 = a.highestquest1;
} if (a.guildquest) {
    guildquestrun = 1;
} if (d == "getfarms" || d == "initcity" || d == "map_buyfarm") {
    farmBuild();
}
else {
    farmBuildPositions();
} if (a.animals) {
    farms_data.animals = a.animals;
} if (a.config) {
    farms_data.config = a.config;
} if (a.farmhouse) {
    current_farmhouse = a.farmhouse;
} if (current_farmhouse) {
    setFarmhouse(current_farmhouse);
} if (a.powerups) {
    poweruprack = a.powerups.rack;
    powerupactive = a.powerups.active;
    handlePowerups();
} if (a.megafield_teaser == 1 && $("megafield_teaser")) {
    showDiv("globaltransp");
    showDiv("megafield_teaser");
}
else {
    hideDiv("megafield_teaser");
} setTimer("fuelstation"); }
function farmersMarketHandler(b) { if (b.pets) {
    pets.data = b.pets;
    if (pets.data.first) {
        pets.teaser();
    }
} if (b.butterfly) {
    butterfly.data = b.butterfly;
} if (b.pos) {
    farmersmarket_data = b;
    if (farmersmarket_data.vet) {
        vet_data = farmersmarket_data.vet;
    }
    farmersmarket_firstvisit = b.firstvisit;
    if (farmersmarket_data.gifts) {
        for (var a = 0; a < farmersmarket_data.gifts.length; a++) {
            if ($("farmersmarket_achievement_check" + farmersmarket_data.gifts[a])) {
                showDiv("farmersmarket_achievement_check" + farmersmarket_data.gifts[a]);
            }
        }
    }
} }
function megafieldHandler(a) { megafield_data = a; megafield_tutorial_step = a.tutorial_step; if ($("megafield_tile1")) {
    showTutorialMegafield();
} setTimer("megafield"); }
var quests_status = {};
function questsHandler(b) { quests_status = b; gametimer.quests_status = {}; hideDiv("quests_status_bar_main1"); hideDiv("quests_status_bar_main2"); hideDiv("quests_status_bar_main3"); hideDiv("quests_status_bar_main4"); if (b.main) {
    for (var a in b.main) {
        if (b.main[a]) {
            showDiv("quests_status_bar_main" + a);
            if (b.main[a].remain && b.main[a].remain > 0) {
                $("quests_status_bar_main" + a).onclick = new Function();
                if (!gametimer.quests_status["main"]) {
                    gametimer.quests_status["main"] = {};
                }
                gametimer.quests_status["main"][a] = { remain: b.main[a].remain, cooldown: b.main[a].cooldown };
            }
            else {
                $("quests_status_bar_main" + a).onclick = new Function("questAction('init',0,0,1," + a + ")");
            }
        }
        else {
            hideDiv("quests_status_bar_main" + a);
        }
    }
} if (b.forestry) {
    for (var a = 1; a <= 2; a++) {
        if (b.forestry[a] && premium) {
            showDiv("quests_status_bar_forestry" + a);
            if (b.forestry[a].remain && b.forestry[a].remain > 0) {
                if (!gametimer.quests_status["forestry"]) {
                    gametimer.quests_status["forestry"] = {};
                }
                gametimer.quests_status["forestry"][a] = { remain: b.forestry[a].remain, cooldown: b.forestry[a].cooldown };
            }
            else {
                $("quests_status_bar_forestry" + a).onclick = new Function("openForestryQuestBox()");
            }
        }
        else {
            hideDiv("quests_status_bar_forestry" + a);
        }
    }
}
else {
    hideDiv("quests_status_bar_forestry1");
    hideDiv("quests_status_bar_forestry2");
} if (b.foodworld && b.foodworld[1] && premium) {
    showDiv("quests_status_bar_foodworld1");
    if (b.foodworld[1].remain && b.foodworld[1].remain > 0) {
        if (!gametimer.quests_status["foodworld"]) {
            gametimer.quests_status["foodworld"] = {};
        }
        gametimer.quests_status["foodworld"][1] = { remain: b.foodworld[1].remain, cooldown: b.foodworld[1].cooldown };
    }
    else {
        $("quests_status_bar_foodworld1").onclick = new Function("openFoodworldQuestBox()");
    }
}
else {
    hideDiv("quests_status_bar_foodworld1");
} }
function farmisHandler(a) { farmisinfo = a; }
function rackHandler(c, b) { rackobj = c.stock; racklocks = c.racklock; rackbonis = c.harvestbonus; racktemp = c.$tempStock; rackfarm = c.rackfarm; for (var a in rackobj) {
    if ((a > 0 && a < 5) || a == 99 || a == 100) {
        rackCache[1] = rackobj[a];
        rackCache[2] = rackobj[a];
        rackCache[3] = rackobj[a];
        rackCache[4] = rackobj[a];
        rackCache[99] = rackobj[a];
        rackCache[100] = rackobj[a];
    }
    else {
        rackCache[a] = rackobj[a];
    }
} if (b == "getfarms") {
    updateRackGo(1);
}
else {
    updateRackGo();
} }
function menueHandler(a) { updatemenue_data = a; updateMenuGo(); }
function weatherHandler(a) { farms_data.weather = a; showWeather(); }
var job_data = {};
function jobHandler(a) { job_data = a; setTimer("job"); if (job_data.teaser) {
    window.setTimeout(jobTeaser, 1200);
} }
var rackForestry = {};
function forestryHandler(a) { rackForestry = a; }
function htmlEntryLine(d) { var c = "kp" + d.pid; if (produkt_name[d.pid]) {
    var a = produkt_name[d.pid];
} if (d.type && d.type == "forestry") {
    var a = produkt_name_forestry[d.pid];
    c = "f_m_symbol" + d.pid;
} if (d.type && d.type == "coins") {
    var a = t_coins;
    c = "icon_coins";
} var b = ""; b += '<div style="margin:5px 0px;">' + str_replace("%AMOUNT%", '<span id="dialog_entryline_rest"></span>', t_forestry_questentry_dialog_info) + "</div>"; b += '<div class="dialog_input_line">'; b += '  <div id="dialog_entryline_img" class="dialog_entryline_img ' + c + '" onmouseover="showDiv(\'dialog_entryline_tt\')" onmouseout="hideDiv(\'dialog_entryline_tt\')">'; b += '    <div id="dialog_entryline_tt" class="ttbox">' + a + "</div>"; b += "  </div>"; b += '  <input id="dialog_entryline_number" class="dialog_input" type="number">'; b += '  <button id="dialog_entryline_button" class="button_new link">' + t_inner_feedsubmit + "</button>"; b += '  <div class="clear"></div>'; b += "</div>"; b += "<div>" + t_inner_stock + '&nbsp;<span id="dialog_entryline_stockamount"></span></div>'; if (d.type == "forestry" && d.pid < 21) {
    b += '<div class="bonusinfo">' + t_forestry_settling_min + "</div>";
} return b; }
function checkEntryLine(b) { $("dialog_entryline_stockamount").innerHTML = formatNumber(b.stockamount); $("dialog_entryline_rest").innerHTML = formatNumber(b.rest); $("dialog_entryline_button").onclick = new Function(b.click); var a = $("dialog_entryline_number").value; a = parseInt(a); if (a > b.stockamount) {
    a = b.stockamount;
} if (a > b.rest) {
    a = b.rest;
} if (isNaN(a)) {
    a = "";
} $("dialog_entryline_number").value = a; }
function htmlLevelBar(b, c, e) { var h = ["pets", "vet", "megafruit", "fuelstation", "guild_job", "hillwalk", "butterfly"]; if (in_array(b, h)) {
    var d = "";
    if (c > 0) {
        d = "_" + c;
    }
    var a = "";
    a += '<div id="' + b + d + '_levelbar" class="main_levelbar" onmouseover="showDiv(\'' + b + d + "_levelbar_tt')\" onmouseout=\"hideDiv('" + b + d + "_levelbar_tt')\">";
    a += '  <div id="' + b + d + '_levelbar_tt" class="main_levelbar_tt ttbox"></div>';
    a += '  <div id="' + b + d + '_levelbar_number" class="main_levelbar_number"></div>';
    a += '  <div class="main_levelbar_bar">';
    a += '    <div id="' + b + d + '_levelbar_inner" class="main_levelbar_inner"></div>';
    a += "  </div>";
    a += '  <div class="main_levelbar_front"></div>';
    if (!e) {
        a += '<div id="' + b + d + '_levelbar_plus" class="main_levelbar_plus plus link" onmouseover="showDiv(\'' + b + d + "_levelbar_plus_tt')\" onmouseout=\"hideDiv('" + b + d + "_levelbar_plus_tt')\">";
        a += '  <div id="' + b + d + '_levelbar_plus_tt" class="main_levelbar_plus_tt ttbox"></div>';
        a += "</div>";
    }
    a += "</div>";
    return a;
} }
function htmlCountBar(b) { var c = ["pets", "vet", "megafruit", "fuelstation", "vehicleshop", "guild_job", "hillwalk", "butterfly"]; if (in_array(b, c)) {
    var a = "";
    a += '<div id="' + b + '_countbar" class="main_countbar">';
    a += '  <div id="' + b + '_countbar_inner" class="main_countbar_inner"></div>';
    a += '  <div id="' + b + '_countbar_plus" class="main_levelbar_plus plus link" onmouseover="showDiv(\'' + b + "_countbar_plus_tt')\" onmouseout=\"hideDiv('" + b + "_countbar_plus_tt')\">";
    a += '    <div id="' + b + '_countbar_plus_tt" class="main_countbar_plus_tt ttbox"></div>';
    a += "  </div>";
    a += "</div>";
    return a;
} }
function htmlLevelAddDialog(d, a, l) { var h = {}; if (guild_job && guild_job.job && guild_job.job.next_level_points) {
    h.guild_job = { intro: t_guildjob_dialog_leveladd_body, info: t_guildjob_dialog_leveladd_info, item: "guild_job_leveladd_item", left: (guild_job.job.next_level_points - guild_job.job.points), click: "guildAction('job_leveladd')" };
} if (vet_data && vet_data.info && vet_data.info.next_level_points) {
    h.vet = { intro: t_vet_dialog_leveladd_body, info: t_vet_dialog_leveladd_info, item: "vet_leveladd_item", left: (vet_data.info.next_level_points - vet_data.info.points), click: "farmAction('vet_leveladd', 1, 1)" };
} if (pets.data && pets.data.data && pets.data.data.level_rest) {
    h.pets = { intro: t_pets_dialog_leveladd_body, info: t_pets_dialog_leveladd_info, item: "pets_leveladd_item", left: pets.data.data.level_rest, click: "pets.addLevel()" };
} if (farmersmarket_data.megafruit && farmersmarket_data.megafruit.pointsleft) {
    h.megafruit = { intro: t_megafruit_level_body, info: t_megafruit_level_line, item: "megafruit_seed", left: farmersmarket_data.megafruit.pointsleft, click: "farmAction('megafruit_level', 1, 1)" };
} h.megafield = { intro: t_megafield_level_plus_body, info: t_megafield_level_plus_body2, item: "megafield_license_icon megafield_license_icon_leveladd", left: megafield_data.level_rest, click: "farmAction('megafield_level', 1, 1)" }; if (a && l) {
    h.fuelstation = { intro: t_fuelstation_level_plus_body, info: t_fuelstation_level_plus_body2, item: "biofuelcoin fuelstation_icon_leveladd", left: farms_data.farms[farm][a].data.data.slots[l].points_left, click: "farmAction('fuelstation_level', " + farm + ", " + a + ", " + l + ")" };
} if (hillwalk && hillwalk.data && hillwalk.data.data && hillwalk.data.data.level_rest) {
    h.hillwalk = { intro: t_hillwalk_dialog_leveladd_body, info: t_hillwalk_dialog_leveladd_info, item: "hillwalk_symbol_hillpoints", left: hillwalk.data.data.level_rest, click: "hillwalk.addLevel()" };
} if (butterfly && butterfly.data && butterfly.data.data && butterfly.data.data.level_rest) {
    h.butterfly = { intro: t_butterfly_dialog_leveladd_body, info: t_butterfly_dialog_leveladd_info, item: "butterfly_leveladd_item", left: butterfly.data.data.level_rest, click: "butterfly.addLevel()" };
} if (h[d]) {
    var e = str_replace("%AMOUNT%", formatNumber(h[d].left), h[d].info);
    e = str_replace("%COUNT%", formatNumber(h[d].left), e);
    var b = d + "CheckLevelAdd(" + a + ", " + l + ")";
    if (d == "pets") {
        b = "pets.addLevelCheck()";
    }
    if (d == "hillwalk") {
        b = "hillwalk.addLevelCheck()";
    }
    if (d == "butterfly") {
        b = "butterfly.addLevelCheck()";
    }
    var c = h[d].intro;
    c += '<div class="dialog_leveladd">';
    c += '  <div class="' + h[d].item + ' dialog_leveladd_item"></div>';
    c += '  <input id="' + d + '_dialog_leveladd_insert" class="dialog_leveladd_insert" type="text" maxlength="6" onchange="' + b + '" onkeyup="' + b + '">';
    c += '  <button type="button" class="button_new link dialog_leveladd_button" onclick="' + h[d].click + '">' + t_megafruit_level_button + "</button>";
    c += '  <div class="clear"></div>';
    c += "</div>";
    c += '<div id="' + d + '_dialog_leveladd_info" class="dialog_leveladd_info">' + e + "</div>";
    return c;
} }
function htmlStatsContent(e) { var c = ""; var d = -1; var h = 1; for (var b = 0; b < e.length; b++) {
    var l = "&nbsp;";
    if (e[b].count != d) {
        var l = h + ".";
    }
    var a = "";
    if (e[b].self == 1) {
        a = "important";
    }
    c += '<div class="dialog_stats_line">';
    c += '  <div class="dialog_stats_field1">' + l + "</div>";
    c += '  <div class="dialog_stats_field2 ' + a + '">' + e[b].name + "</div>";
    c += '  <div class="dialog_stats_field3">' + e[b].count + "</div>";
    c += '  <div class="clear"></div>';
    c += "</div>";
    if (d != e[b].count) {
        h++;
    }
    d = e[b].count;
} c += "  </div>"; return c; }
function htmlProductBody(a, c) { var b = ""; b += '<div class="kp' + a + ' product_body_image"></div>'; if (c > 0) {
    b += '<div class="product_body_amount">' + formatNumber(c) + "x</div>";
} b += '<div class="product_body_name">' + produkt_name[a] + "</div>"; b += '<div class="clear"></div>'; return b; }
function htmlProductSymbol(c, h, e, b, a) { var d = ""; d += '<div id="' + h + c + '" class="' + e + c + " " + b + '" onmouseover="showDiv(\'product_symbol_tt' + c + "')\" onmouseout=\"hideDiv('product_symbol_tt" + c + "')\">"; d += '  <div id="product_symbol_tt' + c + '" class="ttbox ' + a + '">' + produkt_name[c] + "</div>"; d += "</div>"; return d; }
function htmlProductionSlot(c, a, d) { var b = ""; b += '<div id="production_slot' + c + "_" + a + "_" + d + '" class="link production_slot">'; b += '  <div class="production_slot_plank">'; b += '    <div id="production_slot_img_oil_inner' + c + "_" + a + "_" + d + '" class="production_slot_img_oil_inner"></div>'; b += '    <div id="production_slot_img_oil' + c + "_" + a + "_" + d + '" class="production_slot_img_oil"></div>'; b += '    <div id="production_slot_img' + c + "_" + a + "_" + d + '" class="production_slot_img"></div>'; b += '    <div id="production_slot_block' + c + "_" + a + "_" + d + '" class="production_slot_block"></div>'; b += "  </div>"; b += '  <div id="production_slot_info' + c + "_" + a + "_" + d + '" class="production_slot_info"></div>'; b += '  <div id="production_slot_info2' + c + "_" + a + "_" + d + '" class="production_slot_info2"></div>'; b += '  <div id="production_slot_timer' + c + "_" + a + "_" + d + '" class="production_slot_timer"></div>'; b += '  <div id="production_slot_cancel' + c + "_" + a + "_" + d + '" class="link production_slot_cancel"></div>'; b += '  <div id="production_slot_speedup' + c + "_" + a + "_" + d + '" class="link production_slot_speedup"></div>'; b += '  <div id="production_slot_guild' + c + "_" + a + "_" + d + '" class="link production_slot_guild guildjob_orderpoints"></div>'; b += "</div>"; return b; }
function updateProductionSlot(d, e) { for (var l = 1; l <= 3; l++) {
    var h = { farm: d, position: e, slot: l };
    if (farms_data.farms[d][e]) {
        if (farms_data.farms[d][e].buildingid) {
            h.buildingid = farms_data.farms[d][e].buildingid;
        }
        var c = 0;
        if (farms_data.farms[d][e].production) {
            for (var a = 0; a < farms_data.farms[d][e].production.length; a++) {
                var b = farms_data.farms[d][e].production[a];
                if (l == b.slot) {
                    c = 1;
                    h.pid = b.pid;
                    h.img_class = "production_slot_img" + b.pid;
                    h.guild = b.guild;
                    if (b.time) {
                        h.duration = b.time;
                    }
                    if (b.remain) {
                        h.remain = b.remain;
                    }
                    if (b.remain <= 0) {
                        h.harvest = 1;
                        h.click = "farmAction('harvestproduction', " + d + ", " + e + ", " + l + ")";
                    }
                    else {
                        h.cancel = 1;
                        if (!in_array(farms_data.farms[d][e].buildingid, [7, 8, 9, 10])) {
                            if (in_array(h.buildingid, [13, 14, 16, 21])) {
                                h.speedup = "factory.speedupCommit(" + e + ", " + l + ")";
                            }
                        }
                    }
                    break;
                }
            }
        }
        if (!c) {
            if (in_array(h.buildingid, [13, 14, 16, 21])) {
                h.click = "factory.selection(" + l + ")";
            }
        }
        if (locationinfo.slots && locationinfo.slots[l] && parseInt(locationinfo.farm) == parseInt(d) && parseInt(locationinfo.position) == parseInt(e)) {
            if (locationinfo.slots[l].cost && locationinfo.slots[l].cost[2]) {
                if (locationinfo.slots[l].slotremain) {
                    locationinfo.slots[l].slotremain--;
                    h.slotremain = locationinfo.slots[l].slotremain;
                }
                else {
                    locationinfo.slots[l].block = 1;
                }
            }
            if (locationinfo.slots[l].block == 1) {
                h.block = 1;
                if (locationinfo.slots[l].cost) {
                    if (locationinfo.slots[l].cost[1]) {
                        h.buy = { money: locationinfo.slots[l].cost[1] };
                    }
                    if (locationinfo.slots[l].cost[2]) {
                        h.rent = { coins: locationinfo.slots[l].cost[2][0], duration: locationinfo.slots[l].cost[2][1] };
                    }
                    if (in_array(h.buildingid, [13, 14, 16, 21])) {
                        h.click = "factory.buyCommit(" + l + ")";
                    }
                }
            }
        }
    }
    fillProductionSlot(h);
} }
function fillProductionSlot(l) { var h = l.farm + "_" + l.position + "_" + l.slot; if ($("production_slot" + h)) {
    hideDiv("production_slot_img_oil_inner" + h);
    hideDiv("production_slot_img_oil" + h);
    hideDiv("production_slot_block" + h);
    hideDiv("production_slot_timer" + h);
    hideDiv("production_slot_cancel" + h);
    hideDiv("production_slot_speedup" + h);
    if (l.img_class) {
        $("production_slot_img" + h).addClassName(l.img_class);
        if (l.pid && produkt_category[l.pid] == "tea") {
            $("production_slot_img" + h).addClassName("expand");
        }
    }
    else {
        $("production_slot_img" + h).className = "production_slot_img";
    }
    if (l.block) {
        showDiv("production_slot_block" + h);
    }
    if (l.click) {
        $("production_slot" + h).onclick = new Function(l.click);
    }
    else {
        $("production_slot" + h).onclick = new Function();
    }
    if (l.renttime) {
        showDiv("production_slot_timer" + h);
    }
    if (l.cancel && !l.block) {
        showDiv("production_slot_cancel" + h);
        $("production_slot_cancel" + h).onclick = new Function("cancelProduction(" + l.position + ", " + l.slot + ")");
    }
    var b = "";
    if (l.pid) {
        if (in_array(l.buildingid, [13, 14])) {
            var a = 100;
            if (l.remain > 0 && l.duration) {
                a = (100 - ((l.remain * 100) / l.duration));
            }
            showDiv("production_slot_img_oil_inner" + h);
            $("production_slot_img_oil_inner" + h).style.height = a + "px";
            showDiv("production_slot_img_oil" + h);
            $("production_slot_img" + h).addClassName("production_slot_img_oil_fix oil" + l.pid);
        }
        var c = produkt_ernte[l.pid];
        var e = getRackItemInfo(l.pid);
        if (e.cropbonus) {
            c += '&nbsp;<span class="rack_cropbonus">+' + e.cropbonus + "</span>";
        }
        else {
            if (rackbonis[l.pid]) {
                c += '&nbsp;<span class="rack_cropbonus">+' + rackbonis[l.pid].cropbonus + "</span>";
            }
        }
        b += '<div style="font-weight:bold;">' + produkt_name[l.pid] + "</div>";
        b += "<div>" + croptext + c + "</div>";
        var d = "&nbsp;";
        if (l.remain > 0) {
            var d = formatTime(l.remain);
            if (l.speedup && !l.block) {
                showDiv("production_slot_speedup" + h);
                $("production_slot_speedup" + h).onclick = new Function(l.speedup);
            }
        }
        else {
            if (l.remain <= 0) {
                var d = statusProductionComplete;
            }
        }
        if (l.guild && parseInt(l.guild) == 1) {
            showDiv("production_slot_guild" + h);
        }
        else {
            hideDiv("production_slot_guild" + h);
        }
        b += '<div id="production_slot_info_time' + h + '">' + d + "</div>";
    }
    $("production_slot_info" + h).innerHTML = b;
    var b = "";
    if (l.harvest) {
        b = click4products;
    }
    if (l.block) {
        if (l.buy) {
            b = t_buy_slot.replace("%MONEY%", l.buy.money + "&nbsp;" + gamecurrency);
        }
        if (l.rent) {
            b = t_rent_slot.replace("%COINS%", l.rent.coins + "&nbsp;" + t_coins);
            b = b.replace("%TIME%", formatTime(l.rent.duration));
        }
    }
    else {
        if (!l.pid) {
            b = advancedproduction_headline;
        }
    }
    if (l.slotremain) {
        showDiv("production_slot_timer" + h);
        if (l.slotremain > 0) {
            $("production_slot_timer" + h).innerHTML = formatTime(l.slotremain);
        }
    }
    $("production_slot_info2" + h).innerHTML = b;
} }
function htmlProductionSlotOption(e, d, a, m, b, q) { var s = "createAdvancedProductionCommit(" + e + ", " + a + ", " + q + ")"; var n = ""; if (q) { }
else {
    var h = checkRackItem(a, farm);
    if (h < m) {
        n = "important";
        s = "";
    }
} var l = '<div style="font-weight:bold; margin-bottom:2px;">' + produkt_name[d] + "</div>"; l += '<div style="margin-bottom:2px;">' + t_rack_need_products + "</div>"; l += '<div class="' + n + '">'; l += "  <div>" + htmlProductBody(a, m) + "</div>"; l += "  <div>" + formatTime(b) + "</div>"; l += "</div>"; var r = ""; if (q) {
    l += '<div class="bonusinfo">' + t_guildjob_stock_info + "</div>";
    r = "_guildjob";
} var c = ""; c += '<div class="market_pframe link" style="position:relative; float:left; margin:0 10px 10px 10px;" onclick="' + s + '" onmouseover="showDiv(\'production_option' + d + "_tt" + r + "')\" onmouseout=\"hideDiv('production_option" + d + "_tt" + r + "')\">"; c += '  <div class="tt' + d + '" style="position:absolute; top:7px; left:8px;" onclick="' + s + '"></div>'; c += '  <div id="production_option' + d + "_tt" + r + '" class="ttbox" style="top:65px; left:0px; width:150px; text-align:left;">' + l + "</div>"; if (q) {
    c += '<div class="guildjob_orderpoints" style="position:absolute; right:-5px;"></div>';
} c += "</div>"; return c; }
function htmlProductSlotSelection(m, c, b, u, e, s, l) { var w = ""; var v = ""; if (u) {
    v = "_guild";
} var h = '<div style="font-weight:bold; margin-bottom:5px;">' + produkt_name[b[2][0]] + "</div>"; if (b.block) {
    if (Array.isArray(b[0])) {
        var t = str_replace("%QUEST%", b[0][1], t_needs_quest);
        h += '<div class="important">' + str_replace("%CAMPAIGN%", b[0][0], t) + "</div>";
    }
    else {
        if (b[5] > 0) {
            h += '<div class="important">' + str_replace("%LEVEL%", b[5], minlevel_feature) + "</div>";
        }
    }
}
else {
    var r = 1;
    var n = "";
    if (l) {
        n = '<span class="rack_cropbonus">&nbsp;+' + ((b[2][1] * l) - b[2][1]) + "</span>";
    }
    h += "<div>" + productionduration + formatTime(b[4]) + "</div>";
    h += "<div>" + croptext + b[2][1] + n + "</div>";
    h += '<div style="margin:5px 0px;">' + t_rack_need_products + "</div>";
    for (var a = 0; a < b[1].length; a++) {
        var q = "";
        if (u) {
            if (!job_data.guild_job_data.stock[b[1][a][0]] || job_data.guild_job_data.stock[b[1][a][0]] < b[1][a][1]) {
                r = 0;
                q = "important";
            }
        }
        else {
            if (checkRackItem(b[1][a][0], farm) < b[1][a][1]) {
                r = 0;
                q = "important";
            }
        }
        h += '<div class="' + q + '">' + htmlProductBody(b[1][a][0], b[1][a][1]) + "</div>";
    }
    if (u) {
        h += '<div class="bonusinfo">' + t_guildjob_stock_info + "</div>";
    }
    if (r == 1) {
        if (u) {
            w = "factory.start('start'," + e + "," + c + "," + s + ", 1)";
        }
        else {
            w = "factory.start('start'," + e + "," + c + "," + s + ")";
        }
    }
} var d = ""; d += '<div id="select' + m + c + v + '" class="market_pframe link" style="position:relative; float:left;" onclick="' + w + '" onmouseover="showDiv(\'select' + m + "_tt" + c + v + "')\" onmouseout=\"hideDiv('select" + m + "_tt" + c + v + "')\">"; d += '  <div class="tt' + b[2][0] + '" style="top:5px; left:7px;">'; d += '    <div id="select' + m + "_tt" + c + v + '" class="ttbox" style="top:65px; left:-5px; width:160px;">' + h + "</div>"; d += "  </div>"; if (u) {
    d += '<div class="guildjob_orderpoints" style="position:absolute; right:-5px; top:0px;"></div>';
} d += "</div>"; return d; }
function htmlQuestBox(m) { var a = {}; if (pets && pets.data.quest) {
    a.pets = { head: t_pets_quest_head, intro: t_pets_quest_body, data: pets.data.quest };
} if (butterfly && butterfly.data.quest) {
    a.butterfly = { head: t_pets_quest_head, intro: t_butterfly_quest_body, data: butterfly.data.quest };
} if (!a[m]) {
    return 1;
} var n = a[m].head.replace("%QUEST%", a[m].data.questid); var e = '<div id="farmersmarket_quest">'; e += '  <div class="intro">' + a[m].intro + "</div>"; e += '  <div id="' + m + '_quest_data">'; e += '    <div class="need">'; for (var d in a[m].data.products) {
    var h = 0;
    if (a[m].data.data && a[m].data.data[d]) {
        h = a[m].data.data[d];
    }
    var l = ((h * 100) / a[m].data.products[d]);
    var r = "";
    var q = "important";
    if (checkRackItem(d) > 0) {
        var r = m + ".questEntryCommit(" + d + ")";
        var q = "";
    }
    if (h >= a[m].data.products[d]) {
        r = "";
    }
    e += '<div class="item">';
    e += '  <div class="kp' + d + '"></div>';
    e += '  <div class="bar link" onclick="' + r + '" onmouseover="showDiv(\'farmersmarket_quest_need_item' + d + "')\" onmouseout=\"hideDiv('farmersmarket_quest_need_item" + d + "')\">";
    e += '    <div class="inner" style="width:' + l + '%"></div>';
    e += '    <div id="farmersmarket_quest_need_item' + d + '" class="ttbox">' + produkt_name[d] + "</div>";
    e += "  </div>";
    e += '  <div class="amount ' + q + '">' + formatNumber(h) + "/" + formatNumber(a[m].data.products[d]) + "</div>";
    e += "  <br>";
    e += "</div>";
} e += "    </div>"; e += "    <div>" + t_megafield_reward_basic + "</div>"; e += '    <div class="reward">'; for (var b in a[m].data.reward) {
    if (b == "points") {
        var q = "megafield_points_icon";
        var c = formatNumber(a[m].data.reward[b]) + "&nbsp;" + t_points;
    }
    if (b == "package") {
        var q = "package pets_package" + a[m].data.reward[b];
        var c = "1x";
    }
    if (b == "deco" && m == "butterfly") {
        var q = "deco" + a[m].data.reward[b];
        var c = t_butterfly_unlock_deco.replace("%NAME%", "<b>" + butterfly.data.config.deco[a[m].data.reward[b]].name + "</b>");
    }
    if (b == "slot" && m == "butterfly") {
        var q = "";
        var c = a[m].data.reward[b] + ".&nbsp;" + t_butterfly_slot;
    }
    e += '<div class="img ' + q + '"></div>';
    e += '<div class="amount">' + c + "</div>";
    e += "<br>";
} e += "    </div>"; e += "  </div>"; e += '  <div id="' + m + '_quest_timer" class="timer"></div>'; e += "</div>"; if (a[m].data.end) {
    n = str_replace("%QUEST%.", "", a[m].data.head);
    e = t_pets_out_of_quests;
} globalcommitbox(n, e, 0, 0, 1); }
function showGlobalWait(c) { var a = ["getfarms", "insert", "marketbuyoffer", "marketcreateoffer", "animaldealerbuy", "buyformula", "windmillbuyslot", "startproduction", "buyslot", "megafield_gamblejob", "megafield_buylicense", "nursery_startproduction", "nursery_buyslot", "megafruit_buy", "foodcontest_rent_block", "foodcontest_buy_block", "vet_buyleveladd", "vet_buyproductionslot", "vet_speedupproduction", "vet_startproduction", "vet_endtreatment", "shopfire", "animaldealerbuy", "map_buyfarm", "map_sendvehicle", "fuelstation_entry", "fuelstation_harvest", "fuelstation_speedup", "fuelstation_level", "reallocatebuilding", "initcity", "initforestry", "foodworld_init", "contracts_send", "contracts_savetemplate", "contracts_deltemplate", "contracts_cancel", "contracts_accept", "contracts_deny", "contracts_send", "job_leveladd", "stock_slot_entry", "job_entry", "kniffel_roll", "kniffel_end", "kniffel_buy", "autoplant_buy_load", "pets_start_production", "busad_watched", "hillwalk_start_tour", "hillwalk_finish_tour"]; if (!in_array(c, a)) {
    return false;
} var b = getRandom(0, (t_waiting_text.length - 1)); $("superglobal_wait_text").innerHTML = t_waiting_text[b] + "&nbsp;..."; showDiv("superglobal_transp"); showDiv("superglobal_wait"); showDiv("superglobal_wait_text"); }
function hideGlobalWait() { hideDiv("superglobal_transp"); hideDiv("superglobal_wait"); hideDiv("superglobal_wait_text"); }
function checkRackItem(a, c) { if (!c) {
    c = 1;
} for (var d in rackCache[c]) {
    for (var b in rackCache[c][d]) {
        if (rackCache[c][d][b].pid == a) {
            return parseInt(rackCache[c][d][b].amount);
        }
    }
} return 0; }
function setRackItem(a, b, c) { if (!c) {
    c = 1;
} if (!rackElement[a]) {
    rackElement[a] = {};
} if (b > 0) {
    rackElement[a].number = b;
} return rackElement[a]; }
function getRackItemInfo(b) { for (var d in rackCache) {
    for (var c in rackCache[d]) {
        for (var a in rackCache[d][c]) {
            if (rackCache[d][c][a].pid == b) {
                return rackCache[d][c][a];
            }
        }
    }
} return 0; }
function checkForestryRackItem(a) { var c = 0; if (rackForestry && rackForestry[a]) {
    c = rackForestry[a];
} if (!c) {
    for (var b = 1; b < 5; b++) {
        if (forestry_stock[b] && forestry_stock[b][a]) {
            c = forestry_stock[b][a]["amount"];
        }
    }
} return c; }
function showPage(e, c) { var b = ["messages_transp", "messages_main", "profil_main_transp", "profil_main", "contracts_transp", "contracts_main", "globaltransp", "newhelp"]; for (var d = 0; d < b.length; d++) {
    hideDiv(b[d]);
} if (e == "messages") {
    messagesAction("open");
} if (e == "profil") {
    profilAction("init");
} if (e == "contracts") {
    generalAction("contracts_init", {}, c);
    if (farm > 4) {
        mapGo2Location("farm", 1, 1);
    }
} if (e == "help") {
    helpAction();
} }
var building_inner_data = {};
function setBuildingInnerInfo(d, a, c) { hideDiv("building_inner_jobbox"); hideDiv("building_inner_jobbox_garden"); hideDiv("building_inner_jobbox_special"); var e = farms_data.farms[d][a].buildingid; if (!in_array(e, [1, 13, 14, 16]) && !farms_data.config.advancedbuilding[e] && !farms_data.config.building2product[e]) {
    return 0;
} building_inner_data = { farm: d, position: a, buildingid: e, data: c }; if (checkIsValidJob()) {
    var b = htmlJobProductionInfo(d, a);
    if (e == 1) {
        showDiv("building_inner_jobbox_garden");
        $("building_inner_jobbox_garden").innerHTML = b;
    }
    else {
        if (farms_data.config.building2product[e]) {
            showDiv("building_inner_jobbox");
            $("building_inner_jobbox").innerHTML = b;
        }
        else {
            if (farms_data.config.advancedbuilding[e] || in_array(e, [13, 14, 16])) {
                showDiv("building_inner_jobbox_special");
                $("building_inner_jobbox_special").innerHTML = b;
            }
        }
    }
    jobProductionInfoResetFlyer(d, a);
} }
function htmlJobProductionInfo(e, a) { var m = farms_data.farms[e][a].buildingid; var l = ""; var h = ""; var b = "right"; if (farms_data.config.building2product[m]) {
    l = "margin-top:-50px; margin-left:50px; width:150px;";
    h = "float:left; margin-top:-5px; margin-left:5px;";
    b = "top";
} var d = getJobLevel(job_data.currentjob); var c = ""; c += '<div style="position:absolute; top:0px; left:0px;" >'; c += '  <div class="job_jobsymbol' + job_data.currentjob + '_mini job_jobsymbol_mini link" onclick="showJobOverview()" onmouseover="showDiv(\'job_productioninfo_tt' + e + "_" + a + "')\" onmouseout=\"hideDiv('job_productioninfo_tt" + e + "_" + a + "')\">"; c += '    <div id="job_productioninfo_tt' + e + "_" + a + '" class="ttbox job_item_tt_' + b + '">'; c += '      <div style="font-weight:bold">' + job_data.config.jobs[job_data.currentjob].name + "</div>"; c += "      <div>" + htmlJobLevelBoni(job_data.currentjob, d.level) + "</div>"; c += "    </div>"; c += "  </div>"; c += '  <div id="job_productioninfo_flyer' + e + "_" + a + '" class="job_productioninfo_flyer_basic job_productioninfo_flyer"></div>'; c += '  <div style="' + l + '">'; if (job_data.boost && job_data.boost.remain > 0) {
    c += '<div style="' + h + '">' + htmlJobItem("boost", job_data.boost.pid, b) + "</div>";
} if (job_data.tool && job_data.tool.remain > 0) {
    c += '<div style="' + h + '">' + htmlJobItem("tool", job_data.tool.pid, b) + "</div>";
} c += "  </div>"; c += '  <div class="clear"></div>'; c += "</div>"; return c; }
function jobProductionInfoFlyer(l, a, h) { if ($("job_productioninfo_flyer" + l + "_" + a)) {
    var e = "";
    for (var d = 0; d < h.length; d++) {
        if (h[d].pid) {
            var c = h[d].amount;
            var b = "kp" + h[d].pid;
            var m = "";
        }
        else {
            if (h[d].job_points) {
                var c = h[d].job_points;
                var b = "guildjob_jobpoints";
                var m = "margin-top:-10px;";
            }
        }
        e += '<div style="margin-bottom:4px; width:120px;">';
        e += '  <div style="float:left; color:#fff;">' + c + "x&nbsp;</div>";
        e += '  <div style="float:left; ' + m + '" class="' + b + '"></div>';
        e += '  <div class="clear"></div>';
        e += "</div>";
    }
    $("job_productioninfo_flyer" + l + "_" + a).innerHTML = e;
    setTimeout(function () { $("job_productioninfo_flyer" + l + "_" + a).addClassName("job_productioninfo_flyer_go"); }, 1000);
    setTimeout(function () { jobProductionInfoResetFlyer(l, a); }, 3000);
} }
function jobProductionInfoResetFlyer(b, a) { if ($("job_productioninfo_flyer" + b + "_" + a)) {
    $("job_productioninfo_flyer" + b + "_" + a).removeClassName("job_productioninfo_flyer_go").addClassName("job_productioninfo_flyer");
    $("job_productioninfo_flyer" + b + "_" + a).innerHTML = "";
} }
function checkIsValidJob() { if (job_data && job_data.currentjob > 0) {
    if (building_inner_data.buildingid == 1) {
        var c = ["v", "hr"];
        if (farm == 5) {
            c.push("ex");
        }
        if (farm == 6) {
            c.push("alpin");
        }
        for (var b = 0; b < job_data.config.jobs[job_data.currentjob].product_category.length; b++) {
            if (in_array(job_data.config.jobs[job_data.currentjob].product_category[b], c)) {
                return 1;
            }
        }
    }
    else {
        if (in_array(building_inner_data.buildingid, [13, 14])) {
            if (job_data.config.jobs[job_data.currentjob].product_category == "o") {
                return 1;
            }
        }
        else {
            if (building_inner_data.buildingid == 16) {
                for (var b in building_inner_data.data[1]["products"]) {
                    var a = building_inner_data.data[1]["products"][b][2][0];
                    if (in_array(a, job_data.config.jobs[job_data.currentjob].products) && job_data.config.jobs[job_data.currentjob].product_category == "e") {
                        return 1;
                    }
                }
            }
            else {
                if (farms_data.config.advancedbuilding[building_inner_data.buildingid]) {
                    var d = [];
                    if (farms_data.config.advancedbuilding[building_inner_data.buildingid][0] instanceof Array) {
                        for (var b = 0; b < farms_data.config.advancedbuilding[building_inner_data.buildingid].length; b++) {
                            d.push(farms_data.config.advancedbuilding[building_inner_data.buildingid][b][2]);
                        }
                    }
                    else {
                        d.push(farms_data.config.advancedbuilding[building_inner_data.buildingid][2]);
                    }
                    for (var b = 0; b < d.length; b++) {
                        if (in_array(d[b], job_data.config.jobs[job_data.currentjob].products) && job_data.config.jobs[job_data.currentjob].product_category == "e") {
                            return 1;
                        }
                    }
                }
                else {
                    if (farms_data.config.building2product[building_inner_data.buildingid]) {
                        if (in_array(building_inner_data.data.pid, job_data.config.jobs[job_data.currentjob].products) && job_data.config.jobs[job_data.currentjob].product_category == "e") {
                            return 1;
                        }
                    }
                }
            }
        }
    }
} return 0; }
function checkIsValidGuildJobProduct() { if (checkIsValidJob()) {
    if (!job_data || !job_data.guild_job_data || !job_data.guild_job_data.data) {
        return 0;
    }
    if (building_inner_data.buildingid == 1) {
        var c = ["v", "hr"];
        if (farm == 5) {
            c.push("ex");
        }
        if (farm == 6) {
            c.push("alpin");
        }
        for (var a in job_data.guild_job_data.data.products) {
            if (in_array(produkt_category[a], c)) {
                return 1;
            }
        }
    }
    else {
        var d = [];
        if (in_array(building_inner_data.buildingid, [13, 14])) {
            for (var b in building_inner_data.data[1].oil) {
                d.push(building_inner_data.data[1].oil[b][2][0]);
            }
        }
        else {
            if (building_inner_data.buildingid == 16) {
                for (var b in building_inner_data.data[1]["products"]) {
                    d.push(building_inner_data.data[1]["products"][b][2][0]);
                }
            }
            else {
                if (farms_data.config.advancedbuilding[building_inner_data.buildingid]) {
                    if (farms_data.config.advancedbuilding[building_inner_data.buildingid][0] instanceof Array) {
                        for (var b = 0; b < farms_data.config.advancedbuilding[building_inner_data.buildingid].length; b++) {
                            d.push(farms_data.config.advancedbuilding[building_inner_data.buildingid][b][2]);
                        }
                    }
                    else {
                        d.push(farms_data.config.advancedbuilding[building_inner_data.buildingid][2]);
                    }
                }
                else {
                    if (farms_data.config.building2product[building_inner_data.buildingid]) {
                        d.push(building_inner_data.data.pid);
                    }
                }
            }
        }
        for (var a in job_data.guild_job_data.data.products) {
            if (in_array(a, d)) {
                return 1;
            }
        }
    }
} return 0; }
function teaserHandler(b) { for (var a in b) {
    if (a == "farm6") { }
} }
function ajaxAction(a, c, e, l) { var d = "?rid=" + rid; if (e) {
    for (i in e) {
        if (e[i]) {
            d += "&" + i + "=" + encodeURIComponent(e[i]);
        }
    }
} var b = "action"; if (a == "farm") {
    b = "mode";
} d += "&" + b + "=" + c; showGlobalWait(c); var h = createAjaxRequestObj(); if (in_array(c, ["savefriendinfo", "savenotepad"])) {
    h.open("POST", "ajax/" + a + ".php", true);
    h.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    h.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    h.setRequestHeader("Content-length", d.length);
    h.setRequestHeader("Connection", "close");
    h.onreadystatechange = function () { ajaxActionResponse(h, c, e, l); };
    h.send(d);
}
else {
    h.open("GET", "ajax/" + a + ".php" + d, true);
    h.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    h.onreadystatechange = function () { ajaxActionResponse(h, c, e, l); };
    h.send(null);
} }
function ajaxActionResponse(b, c, d, e) { var a = _chkRequest(b); if (a != 0) {
    hideGlobalWait();
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        hideDiv("globaltransp");
        hideDiv("globalbox");
        e(a, c, d);
    }
} }
var giftevent = function () { this.data = {}; this.bunny_click = 0; this.bunny_status = 0; this.bunny_interval = 30; };
giftevent.prototype.init = function (a) { giftevent.action("giftevent_init"); };
giftevent.prototype.action = function (a, b) { ajaxAction("farm", a, b, giftevent.response); };
giftevent.prototype.response = function (b, a, c) { giftevent.data = b; if (giftevent.data["new"]) {
    giftevent.log(1);
}
else {
    giftevent.open();
} };
giftevent.prototype.open = function () { var d = '<div id="giftevent">'; d += '  <div class="back"></div>'; d += '  <div class="intro"></div>'; d += '  <div class="help helpbutton_blue link" onclick="giftevent.help()"></div>'; d += '  <div class="log link" onclick="giftevent.log()">' + t_giftevent_log + "</div>"; d += '  <div class="send link" onclick="giftshop.eventGift()">' + giftshopsubmit + "</div>"; d += '  <div class="bar">'; d += '    <div class="front">'; var e = 0; if (this.data.data.points) {
    e = this.data.data.points;
} d += '      <div class="amount">' + formatNumber(e) + "/" + formatNumber(this.data.config.max_fillage) + "</div>"; d += '      <div class="inner">'; d += '        <div id="giftevent_bar_inner"></div>'; for (var c in this.data.config.stages) {
    var b = "uneven";
    if (c % 2 == 0) {
        b = "even";
    }
    var a = Math.min(((this.data.config.stages[c].points * 100) / this.data.config.max_fillage), 100);
    d += '<div class="stage ' + b + '" style="bottom:' + a + '%">';
    d += '  <div class="prize ' + b + '">';
    if (this.data.config.stages[c].farmhouse) {
        d += '<div class="farmhouse ' + b + '" onmouseover="showDiv(\'giftevent_stage' + c + "_farmhouse')\" onmouseout=\"hideDiv('giftevent_stage" + c + "_farmhouse')\">";
        d += '  <img src="' + imgpath + "farmhouse/previews/" + this.data.config.stages[c].farmhouse + '_1.jpg">';
        d += '  <div id="giftevent_stage' + c + '_farmhouse" class="ttbox">' + quest_reward_6 + "</div>";
        d += "</div>";
    }
    if (this.data.config.stages[c].powerup) {
        d += '<div class="powerup ' + b + '" onmouseover="showDiv(\'giftevent_stage' + c + "_powerup')\" onmouseout=\"hideDiv('giftevent_stage" + c + "_powerup')\">";
        d += '  <div id="giftevent_stage' + c + '_powerup" class="ttbox"><b>' + t_pointsboost_unit + "</b><br>" + str_replace("%PERCENT%", this.data.config.stages[c].percent, t_pointsboost) + "</div>";
        d += "</div>";
    }
    d += '    <div class="clear"></div>';
    d += "  </div>";
    d += '  <div class="need ' + b + '">';
    d += "    <div>" + formatNumber(this.data.config.stages[c].points) + "</div>";
    if (this.data.data.stages && this.data.data.stages[c]) {
        d += '<div class="ready"></div>';
    }
    d += "  </div>";
    d += "</div>";
} d += "      </div>"; d += "    </div>"; d += "  </div>"; d += '  <div id="bunny_box" class="bunny_box"></div>'; d += '  <div class="grass"></div>'; d += '  <div class="timer">' + t_event_resttime + ':&nbsp;<span id="giftevent_timer"></span></div>'; d += "</div>"; globalBoxFlex(t_giftevent_link, d, 0, 0, 1); $("globalbox").style.top = "40px"; $("globalbox_headline").style.paddingTop = "0px"; var h = Math.min(((e * 100) / this.data.config.max_fillage), 100); $("giftevent_bar_inner").style.height = h + "%"; };
giftevent.prototype.help = function () { var d = '<div id="giftevent_help">'; d += '  <div class="line">' + t_giftevent_help1 + "</div>"; d += '  <div class="line">' + t_giftevent_help2 + "</div>"; d += '  <div class="line" style="margin-bottom:30px;">'; for (var c in this.data.config.gifts) {
    var a = c;
    if (presents_hack[c]) {
        a = presents_hack[c];
    }
    d += '<div class="float gift">';
    d += '  <img src="' + imgpath + "gifts/" + a + '.gif">';
    d += '  <div class="points">' + this.data.config.gifts[c].points + "</div>";
    d += "</div>";
} d += '    <div class="clear"></div>'; d += "  </div>"; d += '  <div class="line">' + t_giftevent_help3 + "</div>"; d += '  <div class="line">' + t_giftevent_help4 + "</div>"; d += '  <div class="line border">' + t_giftevent_help5 + "</div>"; d += "</div>"; var b = "giftevent.open()"; globalBoxFlex(t_giftevent_link, d, 0, b, 1); };
giftevent.prototype.log = function (e, m) { var l = this.data.data.log; var h = t_giftevent_log_intro; if (e) {
    l = this.data["new"];
    h = t_giftevent_lastupdates;
} if (m) {
    l = this.data.data.send;
    h = t_giftevent_log_send_intro;
} var d = ""; if (!e && this.data.data.send) {
    d += '<div id="giftevent_navi">';
    var a = "";
    if (!e && !m) {
        a = "active";
    }
    d += '  <div class="link item ' + a + '" onclick="giftevent.log()"><div class="in"></div></div>';
    a = "";
    if (m) {
        a = "active";
    }
    d += '  <div class="link item ' + a + '" onclick="giftevent.log(0, 1)"><div class="out"></div></div>';
    d += '  <div class="clear"></div>';
    d += "</div>";
} d += '<div id="giftevent_lastupdates">'; d += '  <div class="intro">' + h + "</div>"; d += '  <div class="list">'; if (l) {
    for (var c = l.length; c > 0; c--) {
        d += this.logLine(l[(c - 1)]);
    }
} d += "  </div>"; d += "</div>"; var b = "giftevent.open()"; globalcommitbox(t_giftevent_log, d, 0, b, 1); };
giftevent.prototype.logLine = function (d) { var c = '<div class="line">'; var a = d.id; if (presents_hack[d.id]) {
    a = presents_hack[d.id];
} c += '  <img class="float" src="' + imgpath + "gifts/" + a + '.gif">'; var b = t_giftevent_anonym; if (d.name != "") {
    b = d.name;
} c += '  <div class="float name">' + b + "</div>"; c += '  <div class="float date">' + d.date + "</div>"; c += '  <div class="float points">' + this.data.config.gifts[d.id].points + "</div>"; c += '  <div class="clear"></div>'; c += "</div>"; return c; };
giftevent.prototype.timer = function () { this.data.data.remain--; if (this.data.data.remain <= 0) {
    hideDiv("giftevent_link");
}
else {
    showDiv("giftevent_link");
    if (this.data.data["new"] && this.data.data["new"].length > 0) {
        showDiv("giftevent_link_alert");
    }
    else {
        hideDiv("giftevent_link_alert");
    }
    if ($("giftevent_timer")) {
        $("giftevent_timer").innerHTML = formatTime(this.data.data.remain);
    }
} if (this.data.data.remain % this.bunny_interval == 0 && $("bunny_box")) {
    this.bunny();
} };
giftevent.prototype.bunny = function () { if (this.bunny_status > 0) {
    var b = "";
    if (this.bunny_status == 1) {
        for (var a = 1; a <= 2; a++) {
            b += '<div id="valentine_bunny' + a + '" class="valentine_bunny valentine_bunny_ani start" onclick="giftevent.bunnyClick()"></div>';
        }
        $("bunny_box").innerHTML = b;
        setTimeout(function () { if ($("valentine_bunny1")) {
            $("valentine_bunny1").removeClassName("start").addClassName("end");
        } }, 500);
        setTimeout(function () { if ($("valentine_bunny2")) {
            $("valentine_bunny2").style.animationDelay = "0.2s";
            $("valentine_bunny2").removeClassName("start").addClassName("end");
        } }, 777);
        setTimeout(function () { giftevent.bunny_status = 2; }, 2000);
    }
    if (this.bunny_status == 2) {
        for (var a = 1; a <= 12; a++) {
            var c = "rewind";
            if (a <= 10) {
                c = "child";
            }
            b += '<div id="valentine_bunny' + a + '" class="valentine_bunny valentine_bunny_ani end ' + c + '" onclick="giftevent.bunnyClick()"></div>';
        }
        $("bunny_box").innerHTML = b;
        setTimeout(function () { if ($("valentine_bunny1")) {
            $("valentine_bunny1").removeClassName("end").addClassName("start");
        } }, 500);
        setTimeout(function () { if ($("valentine_bunny2")) {
            $("valentine_bunny2").style.animationDelay = "0.2s";
            $("valentine_bunny2").removeClassName("end").addClassName("start");
        } }, 700);
        setTimeout(function () { if ($("valentine_bunny3")) {
            $("valentine_bunny3").style.animationDelay = "0.4s";
            $("valentine_bunny3").removeClassName("end").addClassName("start");
        } }, 900);
        setTimeout(function () { if ($("valentine_bunny4")) {
            $("valentine_bunny4").style.animationDelay = "0.6s";
            $("valentine_bunny4").removeClassName("end").addClassName("start");
        } }, 1100);
        setTimeout(function () { if ($("valentine_bunny5")) {
            $("valentine_bunny5").style.animationDelay = "0.5s";
            $("valentine_bunny5").removeClassName("end").addClassName("start");
        } }, 1300);
        setTimeout(function () { if ($("valentine_bunny6")) {
            $("valentine_bunny6").style.animationDelay = "0.2s";
            $("valentine_bunny6").removeClassName("end").addClassName("start");
        } }, 1500);
        setTimeout(function () { if ($("valentine_bunny7")) {
            $("valentine_bunny7").style.animationDelay = "0.7s";
            $("valentine_bunny7").removeClassName("end").addClassName("start");
        } }, 1700);
        setTimeout(function () { if ($("valentine_bunny8")) {
            $("valentine_bunny8").style.animationDelay = "0.9s";
            $("valentine_bunny8").removeClassName("end").addClassName("start");
        } }, 1900);
        setTimeout(function () { if ($("valentine_bunny9")) {
            $("valentine_bunny9").style.animationDelay = "0.3s";
            $("valentine_bunny9").removeClassName("end").addClassName("start");
        } }, 2100);
        setTimeout(function () { if ($("valentine_bunny10")) {
            $("valentine_bunny10").style.animationDelay = "0.4s";
            $("valentine_bunny10").removeClassName("end").addClassName("start");
        } }, 2300);
        setTimeout(function () { if ($("valentine_bunny11")) {
            $("valentine_bunny11").style.animationDelay = "1s";
            $("valentine_bunny11").removeClassName("end").addClassName("start");
        } }, 1500);
        setTimeout(function () { if ($("valentine_bunny12")) {
            $("valentine_bunny12").style.animationDelay = "0.4s";
            $("valentine_bunny12").removeClassName("end").addClassName("start");
        } }, 2000);
        setTimeout(function () { giftevent.bunny_status = 0; giftevent.bunny_click = 0; giftevent.bunny_interval = 30; }, 3000);
    }
}
else {
    var b = '<div id="valentine_bunny1" class="valentine_bunny valentine_bunny_ani start" onclick="giftevent.bunnyClick()"></div>';
    $("bunny_box").innerHTML = b;
    setTimeout(function () { $("valentine_bunny1").removeClassName("start").addClassName("end"); }, 500);
} };
giftevent.prototype.bunnyClick = function () { this.bunny_click++; if (this.bunny_click >= 2) {
    this.bunny_status = 1;
    this.bunny_interval = 5;
} };
var giftshop = function () { this.data = {}; this.category = "default"; this.currentList = ""; this.is_anonym = 0; this.friendId = 0; this.fromEvent = 0; };
giftshop.prototype.send = function (c) { if ($("giftshop_detail_name").value == "") {
    $("giftshop_detail_name").focus();
    return false;
} var a = servernumber; var b = ""; if ($("giftshop_detail_msg")) {
    b = $("giftshop_detail_msg").value;
} if ($("giftshop_detail_server")) {
    a = $("giftshop_detail_server").value;
} giftshop.action("giftshop_send", { giftid: c, name: $("giftshop_detail_name").value, msg: b, anonym: this.is_anonym, server: a }); };
giftshop.prototype.init = function (b, a) { giftshop.action("giftshop_init", { friend: b, event: a }); };
giftshop.prototype.action = function (a, b) { ajaxAction("city", a, b, giftshop.response); };
giftshop.prototype.response = function (b, a, c) { giftshop.data = b; if (c.event && giftshop.data.event) {
    giftshop.fromEvent = 1;
}
else {
    giftshop.fromEvent = 0;
} giftshop.open(); if (c.friend) {
    giftshop.navi("friends");
} if (c.event && giftshop.data.event) {
    giftshop.navi(giftshop.data.event.category);
} if (a == "giftshop_send") {
    giftshop.feedback();
} setTimer("giftshop"); };
giftshop.prototype.timer = function () { for (var a in this.data.remains) {
    if (this.data.remains[a] > 0) {
        this.data.remains[a]--;
        if (!this.data.remains[a]) {
            if ($("giftshop_box_menue_" + a)) {
                hideDiv("giftshop_box_menue_" + a);
            }
            if (this.category == a) {
                giftshop.navi("default");
            }
        }
        else {
            if ($("giftshop_" + a + "_remain")) {
                $("giftshop_" + a + "_remain").innerHTML = str_replace("%TIME%", formatTime(this.data.remains[a]), t_giftshop_remain);
            }
        }
    }
} };
giftshop.prototype.open = function () { hideDiv("transp3"); var a = {}; for (var d in this.data.gifts) {
    if (this.data.gifts[d].event) {
        a[this.data.gifts[d].event] = 1;
    }
    if (this.data.gifts[d][14]) {
        a.friends = 1;
    }
    else {
        a["default"] = 1;
    }
} var c = '<div id="giftshop_box">'; c += '  <div class="intro">' + giftshopintro + "</div>"; c += '  <div class="menue">'; for (var d in a) {
    c += '<div id="giftshop_box_menue_' + d + '" class="item link ' + d + '" onclick="giftshop.navi(\'' + d + "')\">";
    c += '  <div class="img symbol symbol_' + d + '"></div>';
    c += "</div>";
} c += '    <div class="clear"></div>'; c += "  </div>"; c += '  <div id="giftshop_box_gifts" class="gifts"></div>'; c += '  <div id="giftshop_box_feedback" class="feedback" style="display:none;">' + giftshopsuccess + "</div>"; c += "</div>"; var b = 0; if (this.fromEvent == 1 && giftevent) {
    b = "giftevent.init()";
} globalBoxFlex(t_giftshop_name, c, 0, b, 1); $("globalbox").style.top = "35px"; this.navi(); };
giftshop.prototype.navi = function (a) { if (a) {
    this.category = a;
} this.showGifts(); $$("#giftshop_box .menue .item").each(function (b) { $(b.id).removeClassName("active"); }); $("giftshop_box_menue_" + this.category).addClassName("active"); if (this.category == "friends") {
    this.is_anonym = 0;
} };
giftshop.prototype.showGifts = function () { var b = ""; for (var a in this.data.gifts) {
    var c = 0;
    if (this.category == "friends") {
        if (this.data.gifts[a][14]) {
            c = 1;
        }
    }
    else {
        if (this.category == "default") {
            if (!this.data.gifts[a].event && !this.data.gifts[a][14]) {
                c = 1;
            }
        }
        else {
            if (this.data.gifts[a].event && this.category == this.data.gifts[a].event) {
                c = 1;
            }
        }
    }
    if (c == 1) {
        b += this.showGift(a);
    }
} if (this.category == "friends") {
    b += '<div class="info">' + t_giftshop_category_friends + "</div>";
} if (this.data.event && this.category == this.data.event.category) {
    b += '<div class="info">' + t_giftshop_giftevent_info + "</div>";
} if (!in_array(this.category, ["default", "friends"])) {
    b += '<div id="giftshop_' + this.category + '_remain" class="remain"></div>';
} $("giftshop_box_gifts").innerHTML = b; };
giftshop.prototype.showGift = function (d) { var b = ""; b += '<div class="item link" onclick="giftshop.detail(' + d + ')" onmouseover="showDiv(\'giftshop_item' + d + "_tt')\" onmouseout=\"hideDiv('giftshop_item" + d + "_tt')\">"; var a = d; if (presents_hack[d]) {
    a = presents_hack[d];
} b += '  <img src="' + imgpath + "gifts/" + a + '.gif">'; b += '  <div id="giftshop_item' + d + '_tt" class="ttbox">'; b += '    <div class="name">' + this.data.gifts[d][9] + "</div>"; if (this.data.gifts[d][1]) {
    var c = formatPrice(this.data.gifts[d][1]);
} if (this.data.gifts[d][2]) {
    var c = this.data.gifts[d][2] + "&nbsp;" + t_coins;
} b += '    <div class="cost">' + c + "</div>"; b += "  </div>"; b += "</div>"; return b; };
giftshop.prototype.detail = function (a) { var l = this.data.gifts[a][9]; var e = '<div id="giftshop_detail">'; var d = a; if (presents_hack[a]) {
    d = presents_hack[a];
} e += '  <img src="' + imgpath + "gifts/" + d + '.gif">'; if (this.data.gifts[a][1]) {
    var b = formatPrice(this.data.gifts[a][1]);
} if (this.data.gifts[a][2]) {
    var b = this.data.gifts[a][2] + "&nbsp;" + t_coins;
} e += '  <div class="cost">' + cityadcost + b + "</div>"; e += '  <div id="giftshop_detail_servercost" class="cost">' + t_giftshop_server_cost + "&nbsp;" + this.data.config.foreign_cost + "&nbsp;" + t_coins + "</div>"; if (this.data.event && this.category == this.data.event.category) {
    e += '<div class="points" onmouseover="showDiv(\'giftshop_event_points_tt\')" onmouseout="hideDiv(\'giftshop_event_points_tt\')">';
    e += "  <div>" + this.data.event.gifts[a].points + "</div>";
    e += '  <div id="giftshop_event_points_tt" class="ttbox">' + t_giftevent_points_info.replace("%AMOUNT%", this.data.event.gifts[a].points) + "</div>";
    e += "</div>";
} e += '  <div class="form">'; e += '    <div class="line"><span class="head">' + giftshoppresentee + "</span><br>"; var m = ""; var n = ""; if (this.category == "friends") {
    m = "readonly";
    n = "toogleDiv('giftshop_contacts')";
} e += '      <div id="giftshop_detail_name_line" class="float">'; e += '        <input id="giftshop_detail_name" type="text" ' + m + ' onclick="' + n + '" onchange="giftshop.insertName()" onkeyup="giftshop.insertName()">'; e += '		 <div class="contacts" id="giftshop_contacts"></div>'; e += "      </div>"; if (this.category != "friends" && this.data.contacts) {
    e += '<div id="giftshop_detail_contactbook" class="book contactbook link" onclick="giftshop.getList(\'contact\');"></div>';
} if (this.data.friends) {
    e += '<div id="giftshop_detail_friendsbook" class="book friendsbook link" onclick="giftshop.getList(\'friends\');"></div>';
} e += '      <div class="clear"></div>'; e += "    </div>"; if ((this.category != "friends" && this.data.config.option_anonym) || (this.data.event && this.category == this.data.event.category)) {
    e += '<div id="giftshop_detail_anonym_line" class="line">';
    e += '  <div id="giftshop_detail_anonym" class="link" onclick="giftshop.anonym(1)">';
    e += '    <div id="giftshop_detail_anonym_checked" class="checked"></div>';
    e += "  </div>";
    e += '  <div class="anonym float">' + t_giftshop_anonym + "</div>";
    e += '  <div class="clear"></div>';
    e += "</div>";
} if (!(this.data.event && this.category == this.data.event.category)) {
    e += '<div class="line">';
    e += '  <span class="head">' + giftshopmessage + "</span><br>";
    e += '  <textarea id="giftshop_detail_msg" onkeyup="giftshop.checkMessage()" onchange="giftshop.checkMessage()"></textarea>';
    e += "</div>";
} if (this.category != "friends") {
    e += '<div class="line"><span class="head">' + t_server + "</span><br>";
    e += '  <select id="giftshop_detail_server" onchange="giftshop.setServer()">';
    for (var c = 1; c <= this.data.config.server; c++) {
        var m = "";
        if (servernumber == c) {
            m = "selected";
        }
        e += "<option " + m + ' value="' + c + '">' + t_server + "&nbsp;" + c + "</option>";
    }
    e += "  </select>";
    e += "</div>";
} e += '    <div class="button_new link" onclick="giftshop.send(' + a + ')">' + giftshopsubmit + "</div>"; e += "  </div>"; e += "</div>"; var h = "giftshop.open()"; globalBoxFlex(l, e, 0, h, 1); giftshop.anonym(); if (this.friendId > 0) {
    for (var c = 0; c < this.data.friends.length; c++) {
        if (this.data.friends[c].unr == this.friendId) {
            $("giftshop_detail_name").value = this.data.friends[c].uname;
        }
    }
} if (this.category == "friends" && $("giftshop_detail_name").value == "") {
    this.currentList = "friends";
    this.getList("friends");
} };
giftshop.prototype.getList = function (b) { this.currentList = b; if (b == "contact") {
    var c = this.data.contacts;
} if (b == "friends") {
    var c = this.data.friends;
} var a = ""; for (i = 0; i < c.length; i++) {
    a += '<div class="line link" onclick="giftshop.setContact(' + i + ')">' + c[i].uname + "</div>";
} $("giftshop_contacts").innerHTML = a; toogleDiv("giftshop_contacts"); };
giftshop.prototype.insertName = function () { this.is_anonym = 0; hideDiv("giftshop_detail_anonym_checked"); };
giftshop.prototype.setContact = function (b) { if (this.currentList == "friends") {
    var a = this.data.friends[b].uname;
}
else {
    var a = this.data.contacts[b].uname;
} $("giftshop_detail_name").value = a; this.is_anonym = 0; hideDiv("giftshop_detail_anonym_checked"); toogleDiv("giftshop_contacts"); };
giftshop.prototype.setServer = function () { if (parseInt($("giftshop_detail_server").value) == parseInt(servernumber)) {
    hideDiv("giftshop_detail_servercost");
    showDiv("giftshop_detail_anonym_line");
    if ($("giftshop_detail_contactbook")) {
        showDiv("giftshop_detail_contactbook");
    }
    if ($("giftshop_detail_friendsbook")) {
        showDiv("giftshop_detail_friendsbook");
    }
}
else {
    showDiv("giftshop_detail_servercost");
    hideDiv("giftshop_detail_anonym_line");
    if ($("giftshop_detail_contactbook")) {
        hideDiv("giftshop_detail_contactbook");
    }
    if ($("giftshop_detail_friendsbook")) {
        hideDiv("giftshop_detail_friendsbook");
    }
    if (this.is_anonym == 1) {
        this.anonym(1);
    }
} };
giftshop.prototype.anonym = function (a) { if (a) {
    if (this.is_anonym) {
        this.is_anonym = 0;
    }
    else {
        this.is_anonym = 1;
    }
} if (this.is_anonym) {
    $("giftshop_detail_name").value = t_giftshop_option_anonym;
    showDiv("giftshop_detail_anonym_checked");
    $("giftshop_detail_server").value = servernumber;
    hideDiv("giftshop_detail_servercost");
}
else {
    $("giftshop_detail_name").value = "";
    hideDiv("giftshop_detail_anonym_checked");
} };
giftshop.prototype.checkMessage = function () { var a = $("giftshop_detail_msg").value; if (a.length > 100) {
    a = a.substring(0, 100);
} $("giftshop_detail_msg").value = a; };
giftshop.prototype.friendGift = function (a) { this.friendId = a; this.init(1); };
giftshop.prototype.eventGift = function (a) { this.init(0, 1); };
giftshop.prototype.feedback = function () { $("giftshop_box_feedback").show(); setTimeout(function () { $("giftshop_box_feedback").fade(); }, 1500); };
function guildAction(d, c, a) { var b = ""; if (d == "job_leveladd") {
    c = { amount: $("guild_job_dialog_leveladd_insert").value };
} if (c) {
    for (i in c) {
        b += "&" + i + "=" + encodeURIComponent(c[i]);
    }
} showGlobalWait(d); var e = createAjaxRequestObj(); e.open("GET", "ajax/guild.php?rid=" + rid + "&mode=" + d + b, true); e.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); e.onreadystatechange = function () { guildActionResponse(e, d, c, a); }; e.send(null); }
function guildActionResponse(d, l, h, c) { var a = _chkRequest(d); if (a != 0) {
    hideGlobalWait();
    guild_questentry_block = 0;
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        hideDiv("globaltransp");
        hideDiv("globalbox");
        if ($("farm_inner_guildlink")) {
            $("farm_inner_guildlink").removeClassName("farm_inner_guildlink_running");
            $("farm_inner_guildlink").addClassName("farm_inner_guildlink");
        }
        var b = ["create", "close", "leave", "joinmessage"];
        if (in_array(l, b)) {
            if (!(a[0] && a[0][2])) {
                clearTimer("guild_quest");
                guildquestrun = 0;
            }
        }
        if (l == "init" || l == "edit" || l == "setquest" || l == "questentry" || l == "commitproxy" || l == "denyproxy" || l == "proxycallback" || l == "proxyreject") {
            initGuildResponse(a);
        }
        if (l == "create") {
            hideDiv("transp");
            hideDiv("createguildbox");
            userfarminfos[farm][c.position]["buildingid"] = 6;
            userfarminfos[farm][c.position]["level"] = 1;
            userfarminfos[farm][c.position]["animals"] = 0;
            userfarminfos[farm]["guild"] = 1;
        }
        if (l == "close" || l == "leave") {
            player_guild = 0;
            showMain();
            initZones(1);
        }
        if (l == "openticker") {
            openNewstickerResponse(a, h.type);
        }
        if (l == "deletenews" || l == "writenews" || l == "writemail") {
            openNewstickerResponse(a, 1);
        }
        if (l == "getmembers" || l == "admitcandidate" || l == "refusecandidate" || l == "suggestproxy" || l == "degradesuggestproxy" || l == "degradeproxy" || l == "promoteproxy" || l == "promoteproxyask" || l == "kickmember") {
            getGuildMembersResponse(a);
        }
        if (l == "buyitem") {
            hideDiv("transp9");
            hideDiv("guildshop");
        }
        if (l == "initguildpark" || l == "sendguildpark") {
            sculpturedata = a[1];
            guildpark_stock = a[2];
            guildpark_userstatus = a[3];
            guildpark_entries = a[4];
            guildparkstats = a[5];
            setGuildParkView();
        }
        if (l == "joinmessage") {
            closeGuildPublic();
        }
        if (l == "searchguild") {
            searchGuildResponse(a);
        }
        if (l == "initshop") {
            initGuildShopResponse(a);
        }
        if (l == "initquests") {
            initGuildQuestsResponse(a, h.only);
        }
        if (l == "initranking") {
            buildStatsResponse(a, h.type);
        }
        if (l == "queststats") {
            showGuildQuestStatsResponse(a, h.type, h.page, h.self);
        }
        if (l == "initwbw" || l == "wbwsenditems" || l == "cleartruck" || l == "callbacktruck" || l == "starttruck" || l == "startalltrucks") {
            initGuildWBWResponse(a);
        }
        if (l == "proxycallback" || l == "proxyreject" || l == "commitproxy" || l == "denyproxy") {
            hideDiv("multiframe");
            hideDiv("transp9");
        }
        if (l == "initwbwshop") {
            shopdata = a[1];
            setGuildWBWContent(3, a[2]);
        }
        if (l == "wbwshopdonate") {
            guildWBWDonateResponse(a);
        }
        if (l == "wbwtrophies") {
            buildGuildWBWtrophies(a);
            showDiv("transp9");
            showDiv("guildwbwtrophies");
        }
        if (l == "halloffame") {
            guildWBWHallOfFameResponse(a, c.ispublic);
        }
        if (l == "wbwranking") {
            guildWBWRankingResponse(a, h["public"]);
        }
        if (l == "wbwmemberranking") {
            guildwbwuserranking = a[1];
            setGuildWBWContent(4);
        }
        var e = ["job_init", "memberjob_change", "stock_delete_product", "job_gamble", "stock_slot_entry", "stock_slot_unlock", "job_set_tool", "job_set_boost", "job_join", "job_leveladd", "job_start", "job_entry", "add_jobmember", "job_buy_points", "job_finish", "job_stats"];
        if (in_array(l, e)) {
            if (l == "job_stats") {
                guild_job_stats_cache_delay[h.type] = 60;
                guild_job_stats_cache[h.type] = a[1].stats;
                showGuildJobStats(h.type);
            }
            else {
                if (l == "job_set_tool" || l == "job_set_boost" || l == "memberjob_change") {
                    showJobOverview();
                }
                else {
                    initGuildJobBox();
                    if (l == "job_join") {
                        naviGuildJob(2);
                    }
                    if (in_array(l, ["stock_slot_entry", "stock_slot_unlock", "stock_delete_product"])) {
                        naviGuildJob(3);
                        if (in_array(l, ["stock_slot_entry", "stock_slot_unlock"])) {
                            showGuildJobStockInfo(h.slot);
                        }
                    }
                }
            }
            if (a[1] && a[1].levelup && a[1].levelup.level) {
                levelupAlert(a[1].levelup.level, a[1].levelup.leveltitle);
            }
            if (a[1] && a[1].reward) {
                guildJobRewardDialog(a[1].reward);
            }
            if (l == "job_init" && h.page) {
                naviGuildJob(h.page);
            }
        }
        if (l == "achievementsinit") {
            buildGuildAchievements(a[1]);
            showDiv("transp9");
            showDiv("guildachievements");
        }
    }
} }
var guilddata = {};
var guildquestrun = 0;
var guildmemberstatus = 0;
var inguild = 0;
var guild_questentry_block = 0;
var guildquesttime = 0;
var sculptureid = 1;
var guildpark_data = new Object;
var guildpark_stock = new Object;
var guildpark_entries = new Object;
var guildpark_userstatus = 1;
function initGuild() { showMain(); inguild = 1; guildAction("init"); }
function initGuildResponse(b) { guilddata = b[0]; hideDiv("guildpark"); hideDiv("transp9"); hideDiv("guildmultibox"); hideDiv("createguildbox"); hideDiv("guildquestbox"); if (b[1] == 1) {
    showDiv("guildwbwlink");
}
else {
    hideDiv("guildwbwlink");
} if (b[0][0]["tag"] == "") {
    var e = "---";
}
else {
    var e = b[0][0]["tag"];
} $("guildname").innerHTML = b[0][0][1] + '&nbsp;[<span id="editguildtag">' + e + "</span>]"; if (b[0][1][2] == 1 || b[0][1][2] == 2) {
    if (!a) {
        var a = 1;
    }
    $("guildedit").innerHTML = '<img width="15" height="15" src="' + imgpath + 'guild/edit.gif" border="0" onclick="showDiv(\'transp9\'); createGuildCommit(' + a + ',0,1);">';
}
else {
    $("guildedit").innerHTML = "";
} if (b[0][0][2]) {
    var c = str_replace("\r", "\n", b[0][0][2]);
    c = str_replace("\n", "<br>", c);
}
else {
    c = " ";
} $("guildinfodesc").innerHTML = c; $("guildinfopoints").innerHTML = b[0][0][6]; $("guildinfobirthday").innerHTML = formatDate(b[0][0][9]); $("guildinfomembers").innerHTML = b[0][0][10]; $("guildinfojointax").innerHTML = formatPrice(b[0][0][13]); if ($("farm_inner_guildlink")) {
    $("farm_inner_guildlink").removeClassName("farm_inner_guildlink_running");
    $("farm_inner_guildlink").addClassName("farm_inner_guildlink");
} if (b[0][2] != 0) {
    if (b[0][1][2] <= 5 && b[0][1][2] > 0) {
        setGuildQuestRun(b[0][2]);
    }
    else {
        guildquestrun = 0;
        clearTimer("guild_quest");
    }
}
else {
    guildquestrun = 0;
    clearTimer("guild_quest");
} if (b[0][0][4]) {
    var d = b[0][0][4].split("_");
    $("guildbanner_back").style.backgroundImage = "url(" + imgpath + "guildbanner/backgrounds/back_" + d[0] + ".jpg)";
    $("guildbanner_border").style.backgroundImage = "url(" + imgpath + "guildbanner/borders/GeneriertesBild_" + d[1] + "_" + d[2] + ".png)";
    $("guildbanner_head").style.backgroundImage = "url(" + imgpath + "guildbanner/heads/GeneriertesBild_" + d[3] + "_" + d[4] + ".png)";
} guildmemberstatus = b[2]; setBeauties(); showDiv("guildbanner_back"); showDiv("transp"); showDiv("guildmaincontainer"); }
function createGuild(m, r) { var a = $("gildentax").value; if (!isNumeric(a)) {
    $("gildentax").value = guildjoincost;
    return false;
} var n = $("guildbanner_headcount").value; var d = $("guildbanner_headcolorcount").value; var c = $("guildbanner_bordercount").value; var l = $("guildbanner_bordercolorcount").value; var h = $("guildbanner_backcount").value; var e = h + "_" + c + "_" + l + "_" + n + "_" + d; if ($("gildenname").value == "") {
    globalerrorbox(t_guild_insert_guildname);
}
else {
    if ($("gildentag").value == "") {
        globalerrorbox(t_guild_insert_guildtag);
    }
    else {
        var b = { farm: farm, position: m, name: $("gildenname").value, desc: $("gildendesc").value, tax: $("gildentax").value, tag: $("gildentag").value, img: e };
        var q = { position: m, edit: r };
        if (r == 1) {
            guildAction("edit", b, q);
        }
        else {
            guildAction("create", b, q);
        }
    }
} }
function countLetters(c, b) { var a = $(c).value; if (a.length > guilddescmaxlength) {
    $(c).value = a.substring(0, (guilddescmaxlength - 1));
    $(c).scrollTop = $(c).scrollHeight;
} $(b).innerHTML = str_replace("%LETTERS%", (guilddescmaxlength - a.length), guildcreatedialogcountletters); }
function createGuildCommit(w, c, q) { if (c == 1) {
    globalerrorbox(error1001);
}
else {
    var t = "";
    if (q == 1) {
        t += '<div class="headline">' + guildeditdialogheadline + "</div>";
    }
    else {
        t += '<div class="headline">' + guildcreateguild + "</div>";
    }
    t += "<div>";
    t += '<div style="float:left; width:220px;">' + guildinsertname + '<br><input type="text" name="name" size="30" maxlength="25" id="gildenname" title="' + inputinfo_guildname + '"></div>';
    t += '<div style="float:left; width:110px;">' + guildinnertagcommit + '<br>[<input type="text" maxlength="' + guildtagmaxlength + '" name="gildentag" size="10" id="gildentag" value="" title="' + inputinfo_taginfo + '">]</div>';
    t += '<div style="float:left;">' + guildinnerjointaxcommit + '<br><input type="text" maxlength="5" name="gildentax" size="10" id="gildentax" value="' + guildjoincost + '">&nbsp;' + gamecurrency + "</div>";
    t += '<div style="clear:both;"></div>';
    t += "</div>";
    t += '<div style="margin-top:5px;">' + guildinsertdesc + '<br><textarea style="border:1px solid #6C441E;" name="desc" cols="65" rows="1" id="gildendesc" onkeyup="countLetters(\'gildendesc\',\'guilddesccountletters\');" onchange="countLetters(\'gildendesc\',\'guilddesccountletters\');"></textarea></div>';
    t += '<div style="font-size:9px;" id="guilddesccountletters">' + str_replace("%LETTERS%", guilddescmaxlength, guildcreatedialogcountletters) + "</div>";
    if (q == 1) {
        var y = "createGuild(" + w + ",1)";
    }
    else {
        var y = "createGuild(" + w + ",0)";
    }
    if (q == 1) {
        var v = "hideDiv('transp9'); hideDiv('createguildbox')";
    }
    else {
        var v = "hideDiv('transp'); hideDiv('createguildbox')";
    }
    if (q == 1) {
        var m = '<button type="button" class="link" onclick="' + y + '">' + guildeditguildsubmit + "</button>";
    }
    else {
        var m = '<button type="button" class="link" onclick="' + y + '">' + guildcreateguild + "</button>";
    }
    var d = '<img class="link" src="' + imgpath + 'button_cancel_off.png" onclick="' + v + '" onmouseover="this.src=\'' + imgpath + "button_cancel_on.png';\" onmouseout=\"this.src='" + imgpath + "button_cancel_off.png';\"></div>";
    t += '<div id="createguildbannerdiv">';
    t += '<div id="createguildbannerdiv_banner">';
    t += '<div id="bannerback"></div>';
    t += '<div id="bannerborder"></div>';
    t += '<div id="bannerhead"></div>';
    t += "</div>";
    t += '<div id="createguildbannerdiv_settings">';
    for (var u = 1; u <= 5; u++) {
        if (u == 1) {
            var l = banner_head;
            var b = "guildbanner_headcount";
        }
        else {
            if (u == 2) {
                var l = banner_headcolor;
                var b = "guildbanner_headcolorcount";
            }
            else {
                if (u == 3) {
                    var l = banner_border;
                    var b = "guildbanner_bordercount";
                }
                else {
                    if (u == 4) {
                        var l = banner_bordercolor;
                        var b = "guildbanner_bordercolorcount";
                    }
                    else {
                        if (u == 5) {
                            var l = banner_backcolor;
                            var b = "guildbanner_backcount";
                        }
                    }
                }
            }
        }
        t += '<div class="guildbanneroption">';
        t += '<div class="guildbanner_headline">' + l + "</div>";
        t += '<div class="guildbanner_navipre link" onclick="setBanner(' + u + ',1);"></div>';
        t += '<div class="guildbanner_count link">';
        t += '<input type="text" id="' + b + '" maxlength="1" size="2" value="0" readonly onChange="setBanner(' + u + ',3);">';
        t += "</div>";
        t += '<div class="guildbanner_navinext link" onclick="setBanner(' + u + ',2);"></div>';
        t += "</div>";
    }
    t += "</div>";
    t += "</div>";
    $("createguildboxheader").innerHTML = d;
    $("createguildboxcontent").innerHTML = t;
    $("createguildboxfooter").innerHTML = m;
    if (q == 1) {
        $("gildenname").value = guilddata[0][1];
        $("gildentax").value = guilddata[0][13];
        $("gildentag").value = guilddata[0]["tag"];
        $("gildendesc").value = guilddata[0][2];
        var z = guilddata[0][4];
        var r = z.split("_");
        $("guildbanner_headcount").value = r[3];
        $("guildbanner_headcolorcount").value = r[4];
        $("guildbanner_bordercount").value = r[1];
        $("guildbanner_bordercolorcount").value = r[2];
        $("guildbanner_backcount").value = r[0];
        var a = r[3];
        var s = r[4];
        var e = r[1];
        var h = r[2];
        var n = r[0];
        $("bannerhead").style.backgroundImage = "url(" + guildbannerpath + "heads/GeneriertesBild_" + r[3] + "_" + r[4] + ".png)";
        $("bannerborder").style.backgroundImage = "url(" + guildbannerpath + "borders/GeneriertesBild_" + r[1] + "_" + r[2] + ".png)";
        $("bannerback").style.backgroundImage = "url(" + guildbannerpath + "backgrounds/back_" + r[0] + ".jpg)";
    }
    hideDiv("buildbox");
    showDiv("createguildbox");
} }
function setBanner(d, a) { var c = {}; c[1] = { inputid: "guildbanner_headcount", imgid: "bannerhead", imgpath: "heads/GeneriertesBild_", max: 23 }; c[2] = { inputid: "guildbanner_headcolorcount", imgid: "bannerhead", imgpath: "heads/GeneriertesBild_", max: 4 }; c[3] = { inputid: "guildbanner_bordercount", imgid: "bannerborder", imgpath: "borders/GeneriertesBild_", max: 4 }; c[4] = { inputid: "guildbanner_bordercolorcount", imgid: "bannerborder", imgpath: "borders/GeneriertesBild_", max: 2 }; c[5] = { inputid: "guildbanner_backcount", imgid: "bannerback", imgpath: "backgrounds/back_", max: 4 }; if (c[d]) {
    var e = parseInt($(c[d].inputid).value);
    if (a == 1) {
        if (e > 0) {
            e--;
        }
        else {
            e = c[d].max;
        }
    }
    else {
        if (a == 2) {
            if (e < c[d].max) {
                e++;
            }
            else {
                e = 0;
            }
        }
        else {
            if (a == 3) {
                if (e > c[d].max || e < 0) {
                    e = c[d].max;
                }
            }
        }
    }
    $(c[d].inputid).value = e;
    if (d == 1 || d == 2) {
        var b = $("guildbanner_headcount").value + "_" + $("guildbanner_headcolorcount").value + ".png";
    }
    if (d == 3 || d == 4) {
        var b = $("guildbanner_bordercount").value + "_" + $("guildbanner_bordercolorcount").value + ".png";
    }
    if (d == 5) {
        var b = $("guildbanner_backcount").value + ".jpg";
    }
    $(c[d].imgid).style.backgroundImage = "url(" + guildbannerpath + c[d].imgpath + b + ")";
} }
function setBeauties() { var d = ""; var c = ""; if (xmastime == 1) {
    var b = "xmas_inner_background6.jpg";
}
else {
    var b = "inner_background6.jpg";
} if (guilddata[4]) {
    if (guilddata[4].length > 15) {
        var e = 15;
    }
    else {
        if (guilddata[4].length > 6) {
            var e = 6;
        }
        else {
            var e = 0;
        }
    }
    for (var a = e; a < guilddata[4].length; a++) {
        if (guilddata[4][a]) {
            d += '<div id="guildbeauty' + guilddata[4][a] + '"></div>';
        }
        if ((guilddata[4][a] == 4 || guilddata[4][a] == 11 || guilddata[4][a] == 12 || guilddata[4][a] == 13 || guilddata[4][a] == 15 || guilddata[4][a] == 18) && stopanimation == 0) {
            d += '<div id="guildbeauty' + guilddata[4][a] + 'ani"></div>';
        }
        if (guilddata[4][a] == 6) {
            if (xmastime == 1) {
                b = "guild/xmas_gh_update_1_complete.jpg";
            }
            else {
                b = "guild/gh_update_1_complete.jpg";
            }
            c = guilddata[4][a];
        }
        if (guilddata[4][a] == 7) {
            if (xmastime == 1) {
                var b = "xmas_inner_background6_2.jpg";
            }
            else {
                var b = "inner_background6_2.jpg";
            }
            c = guilddata[4][a];
        }
        if (guilddata[4][a] == 16) {
            if (xmastime == 1) {
                var b = "xmas_inner_background6_3.jpg";
            }
            else {
                var b = "inner_background6_3.jpg";
            }
            c = guilddata[4][a];
        }
        if (guilddata[4][a] > 6) {
            if (xmastime == 1) {
                $("guildquestbox").style.backgroundImage = "url(" + imgpath + "xmas_guildquest_plate_2.jpg)";
            }
            else {
                $("guildquestbox").style.backgroundImage = "url(" + imgpath + "guildquest_plate_2.jpg)";
            }
            $("guildquestslink").onmouseover = function (h) { $("guildquestslink").style.backgroundImage = "url(" + imgpath + "guild/3_outline_2.gif)"; showDiv("guildquestslink_tt"); };
            $("guildquestslink").style.left = "362px";
            $("guildquestslink").style.top = "340px";
            $("guildstatslink").style.left = "165px";
            $("guildstatslink").style.top = "238px";
            $("guildstatslink_tt").style.left = "238px";
            $("guildstatslink_tt").style.top = "250px";
            $("guildmessageslink").style.left = "184px";
            $("guildmessageslink").style.top = "184px";
            $("guildmessageslink").style.height = "50px";
            $("guildmessageslink_tt").style.left = "220px";
            $("guildmessageslink_tt").style.top = "180px";
        }
        if (guilddata[4][a] >= 16) {
            if (xmastime == 1) {
                $("guildquestbox").style.backgroundImage = "url(" + imgpath + "xmas_guildquest_plate_3.jpg)";
            }
            else {
                $("guildquestbox").style.backgroundImage = "url(" + imgpath + "guildquest_plate_3.jpg)";
            }
            $("guildquestslink").onmouseover = function (h) { $("guildquestslink").style.backgroundImage = "url(" + imgpath + "guild/3_outline_3.gif)"; showDiv("guildquestslink_tt"); };
            $("guildquestslink").style.left = "370px";
            $("guildquestslink").style.top = "328px";
            $("guildquestslink").style.height = "200px";
            $("guildmessageslink").style.left = "165px";
            $("guildmessageslink").style.top = "190px";
            $("guildstatslink").style.left = "176px";
            $("guildstatslink").style.top = "257px";
        }
    }
    if (c == 6) {
        d = "";
        if (stopanimation == 0) {
            d += '<div id="guildbeauty4ani"></div>';
        }
    }
    if (c >= 16) {
        if (!guildquestrun) {
            if (stopanimation == 0) {
                d += '<div id="guildquestimgani"></div>';
            }
            else {
                d += '<div id="guildquestimg"></div>';
            }
        }
    }
    $("guildbeauties").innerHTML = d;
} if (guilddata[4].length >= 12 && guilddata[4].length <= 15) {
    if (xmastime == 1) {
        b = "guild/xmas_gh_update_2_complete.jpg";
    }
    else {
        b = "guild/gh_update_2_complete.jpg";
    }
} $("guildmaincontainer").style.backgroundImage = "url(" + imgpath + b + ")"; }
function closeGuildCommit() { globalcommitbox(0, guildmemberlist_closeguild_commit, "closeGuild()"); }
function closeGuild() { guildAction("close"); }
function getGuildMembers() { guildAction("getmembers"); }
function getGuildMembersResponse(m) { var w = ""; var h = ""; var B = 0; var n = 0; var b = 20; for (var A = 0; A < m.length; A++) {
    var C = m[A]["memberid"];
    var z = m[A]["unr"];
    var v = m[A]["status"];
    if (m[A]["acker"] == 1) {
        var y = '&nbsp;<span class="link" onclick="window.open(\'schaugarten/index.php?mode=view&user=' + z + '\')"><img src="' + imgpath + 'stadt/stats_sf_black.gif" border="0"></span>';
    }
    else {
        var y = "";
    }
    var e = showAwards(A, z, m[A]["gold"], m[A]["silber"], m[A]["bronze"]);
    var d = "leer.gif";
    if (v == 1) {
        d = "guild/1.gif";
    }
    if (v == 2) {
        d = "guild/2.gif";
    }
    if (v == 4) {
        d = "guild/no.gif";
    }
    if (setarab == 1) {
        var s = "position:absolute; left:5px; top:2px;";
        var c = "position:absolute; right:100px; top:2px; width:200px;";
        var a = "position:absolute; top:2px; left:5px;";
        var D = "position:absolute; left:85px; display:none;";
        var u = "position:absolute; top:0px; width:15px; left:30px;";
        var r = "position:absolute; top:0px; width:15px; left:15px;";
        var q = "position:absolute; width:15px; top:0px; left:45px;";
    }
    else {
        var s = "position:absolute; right:5px; top:2px;";
        var c = "position:absolute; left:195px; top:2px; width:200px;";
        var a = "position:absolute; top:2px; right:5px;";
        var D = "position:absolute; right:85px; display:none;";
        var u = "position:absolute; top:0px; width:15px; right:30px;";
        var r = "position:absolute; top:0px; width:15px; right:15px;";
        var q = "position:absolute; width:15px; top:0px; right:45px;";
    }
    if (B != v) {
        w += '<div class="guildmemberlist_title" style="position:absolute; top:' + n + 'px;" class="memberstatus">';
        w += '<span id="guildmemberlisttitle_left" style="' + s + '">' + guildrank[v] + "</span>";
        w += '<span id="guildmemberlisttitle_right" style="' + c + '">' + guildmemberlist_jointime + "</span>";
        w += "</div>";
        n = n + b;
    }
    var l = "guildmemberlist_even";
    if (A % 2 > 0) {
        l = "guildmemberlist_uneven";
    }
    w += '<div class="' + l + '" id="line' + A + '" style="position:absolute; width:400px; top:' + n + 'px" ';
    w += "onmouseover=\"$('line" + A + "').style.backgroundColor='#B5AA96';\" onmouseout=\"$('line" + A + "').style.backgroundColor='transparent';\">";
    w += '<div class="main_float_left" style="width:15px;"><img src="' + imgpath + d + '" width="15" height="15"></div>';
    w += '<div class="main_float_left" style="width:180px; top:2px;">';
    w += '<div class="main_float_left">' + m[A]["name"] + y + "</div>";
    w += '<div class="main_float_left">' + e + "</div>";
    w += '<div style="clear:both;"></div>';
    w += "</div>";
    w += '<div class="main_float_left" style="width:100px; top:2px;">' + formatDate(m[A]["joindate"]) + "</div>";
    w += '<div class="main_float_left" style="positon:relative; width:100px; height:15px;">';
    if (guilddata[1][0] != C) {
        w += '<div class="guildmemberlisticon1 link" style="' + u + '" ';
        w += 'onclick="writeMessage2GuildMember(' + C + ",'" + m[A]["name"] + "');\" onmouseover=\"showDiv('guildmailinfo" + C + "');\" onmouseout=\"hideDiv('guildmailinfo" + C + "');\">";
        w += '<img src="' + imgpath + 'guild/mail.gif">';
        w += "</div>";
        h += '<div class="blackbox guildmemberlisticoninfo" id="guildmailinfo' + C + '" style="' + D + " top:" + n + 'px;">';
        h += str_replace("%MEMBER%", m[A]["name"], guildmemberlist_sendmail);
        h += "</div>";
    }
    if (guilddata[1][0] == C) {
        if (guilddata[1][2] == 1 || guilddata[1][2] == 4) {
            w += '<div style="' + r + '" class="guildmemberlisticon2 link" ';
            w += 'onclick="closeGuildCommit();" onmouseover="showDiv(\'closeguild' + C + "');\" onmouseout=\"hideDiv('closeguild" + C + "');\">";
            w += '<img src="' + imgpath + 'guild/kick.gif">';
            w += "</div>";
            h += '<div class="blackbox guildmemberlisticoninfo" id="closeguild' + C + '" style="' + D + " top:" + n + 'px;">';
            h += guildmemberlist_closeguild;
            h += "</div>";
            if (guilddata[1][2] == 4) {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="promoteProxyCallBack();" onmouseover="showDiv(\'promoteproxycallbackinfo' + C + "');\" onmouseout=\"hideDiv('promoteproxycallbackinfo" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/leave.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="promoteproxycallbackinfo' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_promoteproxy_callback;
                h += "</div>";
            }
            else {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="promoteProxyCommit();" onmouseover="showDiv(\'promoteproxyinfo' + C + "');\" onmouseout=\"hideDiv('promoteproxyinfo" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/leave.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="promoteproxyinfo' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_promoteproxy;
                h += "</div>";
            }
        }
        else {
            w += '<div style="' + r + '" class="guildmemberlisticon2 link" ';
            w += 'onclick="leaveGuildCommit();" onmouseover="showDiv(\'guildleaveinfo' + C + "');\" onmouseout=\"hideDiv('guildleaveinfo" + C + "');\">";
            w += '<img src="' + imgpath + 'guild/leave.gif">';
            w += "</div>";
            h += '<div class="blackbox guildmemberlisticoninfo" id="guildleaveinfo' + C + '" style="' + D + " top:" + n + 'px;">';
            h += guildmemberlist_leave;
            h += "</div>";
        }
    }
    if (guilddata[1][2] == 1 || guilddata[1][2] == 2 || guilddata[1][2] == 4) {
        if (v != 1 && v != 4) {
            if (v == 2 && guilddata[1][2] == 1) {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="degradeProxyCommit(' + C + ",'" + m[A]["name"] + "')\" onmouseover=\"showDiv('guilddegradeproxy" + C + "');\" onmouseout=\"hideDiv('guilddegradeproxy" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/degrade.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="guilddegradeproxy' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_degradeproxy;
                h += "</div>";
            }
            if (v == 3 && guilddata[1][2] == 1) {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="degradeSuggestProxyCommit(' + C + ",'" + m[A]["name"] + "')\" onmouseover=\"showDiv('guilddegradesuggestproxy" + C + "');\" onmouseout=\"hideDiv('guilddegradesuggestproxy" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/degrade.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="guilddegradesuggestproxy' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_degradesuggestproxy;
                h += "</div>";
            }
            if (v == 5 && guilddata[1][2] == 1) {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="suggestProxyCommit(' + C + ",'" + m[A]["name"] + "')\" onmouseover=\"showDiv('guildsetproxy" + C + "');\" onmouseout=\"hideDiv('guildsetproxy" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/suggest.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="guildsetproxy' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_suggestproxy;
                h += "</div>";
            }
            if (v == 6) {
                w += '<div style="' + q + '" class="guildmemberlisticon3 link" ';
                w += 'onclick="admitCandidateCommit(' + C + ",'" + m[A]["name"] + "');\" onmouseover=\"showDiv('guildadmitcandidate" + C + "');\" onmouseout=\"hideDiv('guildadmitcandidate" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/suggest.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="guildadmitcandidate' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_allowmembership;
                h += "</div>";
            }
            if (v == 6) {
                w += '<div style="' + r + '" class="guildmemberlisticon2 link" ';
                w += 'onclick="refuseCandidateCommit(' + C + ",'" + m[A]["name"] + "');\" onmouseover=\"showDiv('guildrefusecandidate" + C + "');\" onmouseout=\"hideDiv('guildrefusecandidate" + C + "');\">";
                w += '<img src="' + imgpath + 'guild/kick.gif">';
                w += "</div>";
                h += '<div class="blackbox guildmemberlisticoninfo" id="guildrefusecandidate' + C + '" style="' + D + " top:" + n + 'px;">';
                h += guildmemberlist_refusemembership;
                h += "</div>";
            }
            else {
                var t = 1;
                if (guilddata[1][2] == 4 && v == 2) {
                    t = 0;
                }
                if (guilddata[1][0] != C && t == 1) {
                    w += '<div style="' + r + '" class="guildmemberlisticon2 link" ';
                    w += 'onclick="kickMemberCommit(' + C + ",'" + m[A]["name"] + "');\" onmouseover=\"showDiv('guildkickmember" + C + "');\" onmouseout=\"hideDiv('guildkickmember" + C + "');\">";
                    w += '<img src="' + imgpath + 'guild/kick.gif">';
                    w += "</div>";
                    h += '<div class="blackbox guildmemberlisticoninfo" id="guildkickmember' + C + '" style="' + D + " top:" + n + 'px;">';
                    h += guildmemberlist_kickmember;
                    h += "</div>";
                }
            }
        }
    }
    w += "</div>";
    w += '<div style="clear:both;"></div>';
    w += "</div>";
    B = v;
    n = n + b;
} $("guildmultiboxcontent").innerHTML = w + h; }
function writeMessage2GuildMember(b, a) { messagesOpen(a); }
function promoteProxyCommit() { var b = guildmemberlist_promoteproxy_commit; var a = "promoteProxyAsk()"; commitboxguild(0, b, a, 1, 1); }
function promoteProxyAsk() { guildAction("promoteproxyask"); }
function promoteProxy() { guildAction("promoteproxy"); }
function promoteProxyReject() { guildAction("proxyreject"); }
function promoteProxyCallBack() { guildAction("proxycallback"); }
function admitCandidateCommit(c, b) { var d = str_replace("%MEMBER%", b, guildinneradmitcandidatecommit); var a = "handleGuildMember('admitcandidate', " + c + ")"; commitboxguild(0, d, a, 1, 1); }
function refuseCandidateCommit(c, b) { var d = str_replace("%MEMBER%", b, guildinnerrefusecandidatecommit); var a = "handleGuildMember('refusecandidate', " + c + ")"; commitboxguild(0, d, a, 1, 1); }
function kickMemberCommit(c, b) { var d = str_replace("%MEMBER%", b, guildinnerkickmembercommit); var a = "handleGuildMember('kickmember', " + c + ")"; commitboxguild(0, d, a, 1, 1); }
function suggestProxyCommit(c, b) { var d = str_replace("%MEMBER%", b, guildinnersuggestproxycommit); var a = "handleGuildMember('suggestproxy', " + c + ")"; commitboxguild(0, d, a, 1, 1); }
function degradeSuggestProxyCommit(b) { var c = str_replace("%MEMBER%", name, guildinnerdegradesuggestproxycommit); var a = "handleGuildMember('degradesuggestproxy', " + b + ")"; commitboxguild(0, c, a, 1, 1); }
function degradeProxyCommit(c, b) { var d = str_replace("%MEMBER%", b, guildinnerdegradeproxycommit); var a = "handleGuildMember('degradeproxy', " + c + ")"; globalcommitbox(0, d, a); }
function leaveGuildCommit() { globalcommitbox(0, guildinnerleaveguildcommit, "leaveGuild()"); }
function leaveGuild() { guildAction("leave"); }
function committedProxyGuildMember(a) { handleGuildMember("commitproxy", a); }
function committedProxyGuildMemberDeny(a) { handleGuildMember("denyproxy", a); }
function handleGuildMember(a, b) { guildAction(a, { memberid: b }); }
function sendJoinMessage(a) { guildAction("joinmessage", { guildid: a }); }
function openMultiBox(h) { if (!h) {
    h = 1;
} var a = ""; a = '<img class="link" src="' + imgpath + "button_cancel_off.png\" onclick=\"hideDiv('transp9'); hideDiv('guildmultibox');\" onmouseover=\"this.src='" + imgpath + "button_cancel_on.png';\" onmouseout=\"this.src='" + imgpath + "button_cancel_off.png';\"></div>"; $("guildmultiboxheader").innerHTML = a; $("guildmultiboxcontent").innerHTML = ""; var e = ""; if (h == 1) {
    var d = guildmultibox_headline1;
    getGuildMembers();
}
else {
    if (h == 2) {
        var d = guildmultibox_headline2;
        initGuildStats(1, 2, 0);
    }
    else {
        if (h == 3) {
            var d = '<div style="float:left;">' + guildmultibox_headline3 + "&nbsp;</div>";
            if (guildmemberstatus != "6") {
                d += '<div style="float:right; margin-bottom:2px;" class="button" onclick="showGuildMedalcase();">' + guildmedalbox + "</div>";
            }
            d += '<div style="clear:both;"></div>';
            initGuildQuests(0);
        }
        else {
            if (h == 4) {
                var d = guildmultibox_headline4;
                showGuildQuestStats(1, 1, 0);
            }
        }
    }
} for (var c = 1; c <= 4; c++) {
    var b = "leer.gif";
    if (c == h) {
        b = "multiscreen_reiter" + h + ".jpg";
    }
    $("guildmultiboxmenue" + c).style.backgroundImage = "url(" + imgpath + b + ")";
} $("guildmultiboxheadline").innerHTML = d; hideDiv("guildnewsticker"); showDiv("transp9"); showDiv("guildmultibox"); }
function showGuildQuestStats(b, c, a) { var d = { type: b, page: c, self: a }; guildAction("queststats", d); }
function initGuildStats(c, b, a) { if (b == 0) {
    $("guildstatsrankingcontent").innerHTML = "";
}
else {
    var d = { page: c, type: b, self: a, pagemax: guildstatspagemax };
    guildAction("initranking", d);
} }
function buildStatsResponse(v, d) { var h = v[1]; var n = v[2]; var z = ""; var e = ""; var w = 20; z += '<div style="position:absolute; top:0px; left:0px; width:400px; height:20px;" '; z += "onmouseover=\"showDiv('guildsearchoptions');\" onmouseout=\"hideDiv('guildsearchoptions');\">"; z += guildstats_search + ' <input type="text" id="guildsearchterm" maxlength="15" style="border:1px solid #ddd;">&nbsp;'; z += '<input type="button" onclick="searchGuild($(\'guildsearchterm\').value,0);" value="' + guildstats_searchbutton + '">'; z += "</div>"; z += '<div class="blackbox" style="display:none; position:absolute; top:-25px; left:75px;" id="guildsearchoptions">' + guildstats_searchoptions + "</div>"; z += '<div style="position:absolute; top:30px; left:0px; width:400px; height:20px;">'; z += guildstats_sort + ' <select id="guildstatsselectsort" onchange="initGuildStats(1,$(\'guildstatsselectsort\').value,0);">'; z += '<option value="0">' + guildstats_sortnone + "</option>"; z += '<option value="2">' + guildstats_sortpoints + "</option>"; z += '<option value="3">' + guildstats_sortjointax + "</option>"; z += '<option value="4">' + guildstats_sortdate + "</option>"; z += "</select>"; z += '&nbsp;<span class="link" onclick="initGuildStats(1,' + d + ',1);">' + guildstats_sortmyguild + "</span>"; z += "</div>"; z += '<div id="guildstatsrankingcontent" style="position:absolute; top:65px; left:0px; width:400px;">'; z += '<div style="position:absolute; top:0px; left:0px; width:400px; height:20px;" class="subheadline">'; if (setarab == 1) {
    var y = "position:absolute; top:2px; right:0px;";
    var c = "position:absolute; top:2px; right:50px;";
    var b = "position:absolute; top:2px; left:5px;";
    var F = "position:absolute; right:0px; width:400px; height:20px;";
    var E = "display:none; position:absolute; width:250px; right:140px;";
    var u = "position:absolute; right:25px;";
    var s = "position:absolute; right:100px;";
    var q = "position:absolute; left:100px;";
    var m = "position:absolute; left:25px;";
}
else {
    var y = "position:absolute; top:2px; left:0px;";
    var c = "position:absolute; top:2px; left:50px;";
    var b = "position:absolute; top:2px; right:5px;";
    var F = "position:absolute; left:0px; width:400px; height:20px;";
    var E = "display:none; position:absolute; width:250px; left:140px;";
    var u = "position:absolute; left:25px;";
    var s = "position:absolute; left:100px;";
    var q = "position:absolute; right:100px;";
    var m = "position:absolute; right:25px;";
} z += '<span class="guildstatsheadline_left" style="' + y + '">&nbsp;' + guildstats_rank + "</span>"; z += '<span class="guildstatsheadline_right" style="' + c + '">' + guildstats_name + "</span>"; if (d == 1) {
    z += '<span class="guildstatsheadline_right2" style="' + b + '">' + guildstats_bar + "</span>";
} if (d == 2) {
    z += '<span class="guildstatsheadline_right2" style="' + b + '">' + guildstats_pts + "</span>";
} if (d == 3) {
    z += '<span class="guildstatsheadline_right2" style="' + b + '">' + guildstats_jointax + "</span>";
} if (d == 4) {
    z += '<span class="guildstatsheadline_right2" style="' + b + '">' + guildstats_date + "</span>";
} if (d == 5) {
    z += '<span class="guildstatsheadline_right2" style="' + b + '">' + guildstats_level + "</span>";
} z += "</div>"; for (var B = 0; B < v[0].length; B++) {
    var l = v[0][B];
    var t = "";
    if (l[0] == 1) {
        t = "rank_hightlight";
    }
    var D = "";
    var C = (B + 1);
    if (h > 1) {
        C = ((h - 1) * guildstatspagemax) + (B + 1);
    }
    if (l[1]["short"] == "") {
        var A = "";
    }
    else {
        var A = l[1]["short"];
    }
    var a = "";
    a += '<div><div class="guildstats_col1">' + guildstats_tt_name + '</div><div class="guildstats_col2"><b>' + l[1]["guildname"] + "</b>&nbsp;[" + A + ']</div><div style="clear:both;"></div></div>';
    a += '<div><div class="guildstats_col1">' + guildstats_tt_pts + '</div><div class="guildstats_col2">' + l[1]["guildpts"] + '</div><div style="clear:both;"></div></div>';
    a += '<div><div class="guildstats_col1">' + guildstats_tt_tax + '</div><div class="guildstats_col2">' + formatPrice(l[1]["joincost"]) + '</div><div style="clear:both;"></div></div>';
    a += '<div><div class="guildstats_col1">' + guildstats_tt_members + '</div><div class="guildstats_col2">' + l[1]["members"] + '</div><div style="clear:both;"></div></div>';
    a += '<div><div class="guildstats_col1">' + guildstats_tt_date + '</div><div class="guildstats_col2">' + formatDate(l[1]["createguild"]) + '</div><div style="clear:both;"></div></div>';
    a += "<div><div>" + guildstats_tt_desc + '</div><div style="width:250px; overflow:hidden;"><i>';
    if (l[1]["guilddescription"]) {
        a += l[1]["guilddescription"].substring(0, 100);
    }
    a += "</i></div></div>";
    z += '<div class="' + t + ' guildstats_line" id="line' + B + '" style="' + F + " top:" + w + "px; " + D + '" ';
    z += "onmouseover=\"showDiv('guildstatsinfo" + B + "'); $('line" + B + "').style.backgroundColor='#B5AA96';\" onmouseout=\"hideDiv('guildstatsinfo" + B + "'); $('line" + B + "').style.backgroundColor='transparent';\">";
    z += '<span class="guildstatsheadline_left" style="' + y + '">&nbsp;' + C + ".</span>";
    z += '<span class="guildstatsheadline_right" style="' + c + '">' + l[1]["guildname"] + "&nbsp;[" + l[1]["short"] + "]</span>";
    if (d == 1) {
        z += '<span class="guildstatsheadline_right2" style="' + b + '">' + formatPrice(l[1]["guildbar"]) + "</span>";
    }
    if (d == 2) {
        z += '<span class="guildstatsheadline_right2" style="' + b + '">' + l[1]["guildpts"] + "</span>";
    }
    if (d == 3) {
        z += '<span class="guildstatsheadline_right2" style="' + b + '">' + formatPrice(l[1]["joincost"]) + "</span>";
    }
    if (d == 4) {
        z += '<span class="guildstatsheadline_right2" style="' + b + '">' + formatDate(l[1]["createguild"]) + "</span>";
    }
    if (d == 5) {
        z += '<span class="guildstatsheadline_right2" style="' + b + '">' + l[1]["guildlevel"] + "</span>";
    }
    z += "</div>";
    e += '<div class="blackbox guildstats_guildinfotooltip" style="' + E + " top:" + (w + 10) + 'px;" id="guildstatsinfo' + B + '" ';
    e += "onmouseover=\"showDiv('guildstatsinfo" + B + "');\" onmouseout=\"hideDiv('guildstatsinfo" + B + "');\">" + a + "</div>";
    w = w + 20;
} if (h > 1) {
    z += '<div class="link guildstatsnavi1" style="' + u + " top:" + (w + 15) + 'px;" onclick="initGuildStats(' + (parseInt(1)) + "," + d + ',0)"><<<</div>';
} if (h > 1) {
    z += '<div class="link guildstatsnavi2" style="' + s + " top:" + (w + 15) + 'px;" onclick="initGuildStats(' + (parseInt(h) - parseInt(1)) + "," + d + ',0)"><<</div>';
} if ((h * guildstatspagemax) < n) {
    z += '<div class="link guildstatsnavi3" style="' + q + " top:" + (w + 15) + 'px;" onclick="initGuildStats(' + (parseInt(h) + parseInt(1)) + "," + d + ',0)">>></div>';
} var r = Math.ceil(n / guildstatspagemax); if (r > h) {
    z += '<div class="link guildstatsnavi4" style="' + m + " top:" + (w + 15) + 'px;" onclick="initGuildStats(' + (parseInt(r)) + "," + d + ',0)">>>></div>';
} z += "</div>"; $("guildmultiboxcontent").innerHTML = z + e; $("guildstatsselectsort").value = d; }
function searchGuild(b, a) { var c = { searchterm: b, type: a }; guildAction("searchguild", c); }
function searchGuildResponse(a) { var d = a[1]; var c = ""; c += "<div><hr></div>"; if (a[0] == 1) {
    c += "<div><span>" + guildstats_tt_name + "</span><span>" + d[0]["guildname"] + "</span>&nbsp;[" + d[0]["short"] + "]</div>";
    c += "<div><span>" + guildstats_tt_pts + "</span><span>" + d[0]["guildpts"] + "</span></div>";
    c += "<div><span>" + guildstats_tt_tax + "</span><span>" + formatPrice(d[0]["joincost"]) + "</span></div>";
    c += "<div><span>" + guildstats_tt_members + "</span><span>" + d[0]["members"] + "</span></div>";
    c += "<div><span>" + guildstats_tt_date + "</span><span>" + formatDate(d[0]["createguild"]) + "</span></div>";
    c += "<div><span>" + guildstats_tt_desc + "</span><div>" + d[0]["guilddescription"].substring(0, 100) + "</div></div>";
}
else {
    if (a[0] == 2) {
        c += '<div style="margin-bottom:10px;">' + guildqueststatssearchresults + "</div>";
        c += '<div style="overflow:auto; height:240px;">';
        for (var b = 0; b < d.length; b++) {
            c += '<div class="link" style="text-decoration:underline; margin-bottom:5px;" onclick="searchGuild(\'' + d[b]["guildname"] + "',1)\">" + d[b]["guildname"] + "&nbsp;[" + d[b]["short"] + "]</div>";
        }
        c += "</div>";
    }
} $("guildstatsrankingcontent").innerHTML = c; $("guildstatsselectsort").value = 0; }
function showGuildQuestStatsResponse(C, s, u, G) { var I = ""; var w = ""; I += '<div id="guildquestrankinghead">'; I += guildstats_sort + '<select id="chg_guildqueststats" onchange="showGuildQuestStats($(\'chg_guildqueststats\').value,1,0);">'; I += '<option value="1">' + guildquestrankinggetallpoints + "</option>"; I += '<option value="3">' + guildquestrankinggetlastpoints + "</option>"; I += '<option value="2">' + guildquestrankinggetcurrentpoints + "</option>"; I += '</select>&nbsp;<span class="link" style="text-decoration:underline;" onclick="showGuildQuestStats($(\'chg_guildqueststats\').value,1,1);">' + guildstats_whoiam + "</span>"; I += "</div>"; I += '<div class="subheadline" style="position:absolute; top:20px; left:0px; width:400px; height:20px;" id="guildquestrankingcontent">'; I += '<span class="prestigeranking_1">' + guildquestrankingname + "</span>"; I += '<span class="prestigeranking_2">' + guildquestrankingpoints + "</span>"; I += "</div>"; if (C[1] == 0) {
    I += '<div style="position:absolute; top:60px; left:0px;">' + guildstats_noentry + "</div>";
}
else {
    var K = C[1];
    var u = parseInt(C[3]);
    var t = parseInt(C[4]);
    var E = 40;
    var L = 14;
    var F = "";
    var v = 1;
    if (u > 1) {
        v = ((u - 1) * L) + 1;
    }
    var c = 0;
    if (setarab == 1) {
        var h = "";
        var e = "";
        var b = "";
        var a = "";
    }
    else {
        var h = "position:absolute; left:0px; top:2px; left:0px; width:25px; text-align:right;";
        var e = "position:absolute; left:0px; top:2px; left:30px; width:115px; overflow:hidden;";
        var b = "position:absolute; left:0px; top:2px; left:150px; width:150px;";
        var a = "position:absolute; left:0px; top:2px; left:300px; width:100px; text-align:right;";
    }
    for (var J = 0; J < K.length; J++) {
        var d = (K[J]["p"] / t) * 100;
        var q = (140 / 100) * d;
        if (q < 1) {
            q = 2;
        }
        var D = "";
        if (K[J]["c"] == 1) {
            D = 'class="rank_hightlight"';
        }
        if (c == 0) {
            c = K[J]["p"];
            F = v + ".";
        }
        else {
            if (K[J]["p"] < c) {
                c = K[J]["p"];
                v++;
                F = v + ".";
            }
            else {
                F = "";
                v++;
            }
        }
        if (K[J]["products"]) {
            w += '<div class="blackbox" id="bartt' + J + '" style="display:none; position:absolute; top:' + (E + 14) + 'px; left:150px;" ';
            w += "onmouseover=\"showDiv('bartt" + J + "');\" onmouseout=\"hideDiv('bartt" + J + "');\">";
            if (s == 2) {
                var H = 1;
                for (var A = 0; A <= 150; A++) {
                    if (K[J]["products"][A]) {
                        if (K[J]["products"][A] > 0) {
                            w += '<div class="main_float_left kp' + A + '"></div>';
                            w += '<div class="main_float_left" style="width:75px;">&nbsp;' + K[J]["products"][A] + "&nbsp;</div>";
                            if (H == 2) {
                                w += '<div style="clear:both;"></div>';
                                H = 1;
                            }
                            else {
                                H++;
                            }
                        }
                    }
                }
            }
            else {
                for (var B = 0; B < K[J]["products"].length; B++) {
                    if (K[J]["products"][B]["a"] > 0) {
                        w += '<div style="float:left;" class="kp' + K[J]["products"][B]["p"] + '"></div><div style="float:left;">&nbsp;' + K[J]["products"][B]["a"] + "&nbsp;</div>";
                    }
                }
            }
            w += '<div style="clear:both;"></div></div>';
        }
        I += "<div " + D + ' id="line' + J + '" style="position:absolute; left:0px; top:' + E + 'px; width:400px; height:20px;" onmouseover="$(\'line' + J + "').style.backgroundColor='#B5AA96'; showDiv('bartt" + J + "');\" onmouseout=\"$('line" + J + "').style.backgroundColor='transparent'; hideDiv('bartt" + J + "');\">";
        I += '<div style="' + h + '" class="prestigetable1">' + F + "</div>";
        I += '<div style="' + e + '" class="prestigetable2">' + K[J]["n"] + "</div>";
        I += '<div style="' + b + '" class="prestigetable3">';
        I += '<div style="background:url(' + imgpath + "stadt/percentbar.gif) top left repeat-x; height:18px; width:" + q + 'px;"></div>';
        I += "</div>";
        I += '<div style="' + a + '" class="prestigetable4">' + K[J]["p"] + "</div>";
        I += "</div>";
        E = E + 20;
    }
    I += '<div id="guildquestrankingpagenavi" style="position:absolute; top:340px; left:0px; height:20px; width:400px;">';
    var z = Math.ceil(C[2] / L);
    var r = 1;
    var n = 1;
    var m = 1;
    var l = 1;
    if (u == z) {
        m = 0;
        l = 0;
        if (z < 2) {
            r = 0;
            n = 0;
        }
    }
    else {
        if (u == 1) {
            r = 0;
            n = 0;
            if (z == 1) {
                m = 0;
                l = 0;
            }
        }
    }
    if (r == 1) {
        I += '<span class="link" style="position:absolute; left:50px;" onclick="showGuildQuestStats(' + s + ',1,0)"><<<</span>';
    }
    if (n == 1) {
        I += '<span class="link" style="position:absolute; left:100px;"  onclick="showGuildQuestStats(' + s + "," + (parseInt(u) - 1) + ',0)"><<</span>';
    }
    if (m == 1) {
        I += '<span class="link" style="position:absolute; right:100px;"  onclick="showGuildQuestStats(' + s + "," + (parseInt(u) + 1) + ',0)">>></span>';
    }
    if (l == 1) {
        I += '<span class="link" style="position:absolute; right:50px;"  onclick="showGuildQuestStats(' + s + "," + z + ',0)">>>></span>';
    }
    I += "</div>";
} $("guildmultiboxcontent").innerHTML = I + w; $("chg_guildqueststats").value = s; }
function initGuildWBW() { guildAction("initwbw"); }
function guildWBWShop() { guildAction("initwbwshop"); }
function guildWBWtrophies() { guildAction("wbwtrophies"); }
function guildWBWStartAll() { guildAction("startalltrucks"); }
function initGuildWBWResponse(a) { trucks = a[1]; wbwinfo = a[2]; if (a[4]) {
    guildwbwrankpoints = a[4];
}
else {
    guildwbwrankpoints = 0;
} var b = ""; b += '<div style="position:absolute; top:46px; left:84px;" class="v' + wbwinfo.product + '" onmouseover="showDiv(\'guildwbwproductinfo\')" onmouseout="hideDiv(\'guildwbwproductinfo\')"></div>'; b += '<div style="position:absolute; top:35px; left:120px;">' + guildwbwresttime + "</div>"; b += '<div style="position:absolute; top:54px; left:120px; font-size:12px; font-weight:bold;" id="guildwbwremaintime"></div>'; b += '<div style="position:absolute; top:35px; left:400px;">' + guildwbwentries + "</div>"; b += '<div style="position:absolute; top:54px; left:400px; font-size:12px; font-weight:bold;" id="guildwbwrankpoints">' + guildwbwrankpoints + "</div>"; b += '<div style="position:absolute; top:72px; left:400px;" id="guildwbwguildname">' + a[5] + "</div>"; b += '<div id="guildwbwnavi1" onmouseover="showDiv(\'guildwbwnavi1info\')" onmouseout="hideDiv(\'guildwbwnavi1info\')" style="height:37px; left:50px; position:absolute; top:87px; width:106px;" class="link" onclick="setGuildWBWNavi(1); initGuildWBW(1);"></div>'; b += '<div id="guildwbwnavi2" onmouseover="showDiv(\'guildwbwnavi2info\')" onmouseout="hideDiv(\'guildwbwnavi2info\')" style="height:37px; left:151px; position:absolute; top:88px; width:106px;" class="link" onclick="setGuildWBWNavi(2); guildWBWRanking();"></div>'; b += '<div id="guildwbwnavi3" onmouseover="showDiv(\'guildwbwnavi3info\')" onmouseout="hideDiv(\'guildwbwnavi3info\')" style="height:37px; left:252px; position:absolute; top:87px; width:106px;" class="link" onclick="setGuildWBWNavi(3); guildWBWShop();"></div>'; b += '<div id="guildwbwnavi1info" class="blackbox" style="display:none; position:absolute; top:60px; left:60px;">' + guildwbwnavi1 + "</div>"; b += '<div id="guildwbwnavi2info" class="blackbox" style="display:none; position:absolute; top:60px; left:160px;">' + guildwbwnavi2 + "</div>"; b += '<div id="guildwbwnavi3info" class="blackbox" style="display:none; position:absolute; top:60px; left:260px;">' + guildwbwnavi3 + "</div>"; b += '<div id="guildwbwproductinfo" class="blackbox" style="display:none; position:absolute; top:10px; left:80px;">' + str_replace("%PRODUCT%", "<b>" + produkt_name[wbwinfo.product] + "</b>", guildwbwproduct) + "</div>"; $("guildwbwheader").innerHTML = b; setGuildWBWContent(1, a[3]); setGuildWBWNavi(1); if (wbwinfo == 0) {
    $("guildwbwremaintime").innerHTML = guildwbwnocurrentwbw;
} showDiv("guildwbw"); }
function setGuildWBWNavi(a) { if (a == 1) {
    $("guildwbwnavi1").style.background = "url(" + imgpath + "guild/trucks.jpg)";
    $("guildwbwnavi2").style.background = "url(" + imgpath + "leer.gif)";
    $("guildwbwnavi3").style.background = "url(" + imgpath + "leer.gif)";
} if (a == 2) {
    $("guildwbwnavi1").style.background = "url(" + imgpath + "leer.gif)";
    $("guildwbwnavi2").style.background = "url(" + imgpath + "guild/ranking.jpg)";
    $("guildwbwnavi3").style.background = "url(" + imgpath + "leer.gif)";
} if (a == 3) {
    $("guildwbwnavi1").style.background = "url(" + imgpath + "leer.gif)";
    $("guildwbwnavi2").style.background = "url(" + imgpath + "leer.gif)";
    $("guildwbwnavi3").style.background = "url(" + imgpath + "guild/shop.jpg)";
} }
function showGuildWBWHelpTxt(a) { $("guildwbwhelpcontainercontent").innerHTML = guildwbwhelpcontent[a]; showDiv("guildwbwhelpcontainertransp"); showDiv("guildwbwhelpcontainer"); }
function stopTrucksGuildWBW() { for (var a = 0; a < trucks.length; a++) {
    var b = trucks[a]["truckid"];
    window.clearInterval(guildwbwtruckrunto[b]);
    window.clearInterval(guildwbwtruckrunback[b]);
    guildwbwtruckrunto[b] = 0;
    guildwbwtruckrunback[b] = 0;
    guildwbwtrucktimeto[b] = 0;
    guildwbwtrucktimeback[b] = 0;
} }
function setGuildWBWContent(L, h, e, P) { guildwbwcontentstatus = L; var A = ""; var C = ""; if (L == 1) {
    if (wbwinfo.remain > 0) {
        window.clearInterval(guildwbwrun);
        guildwbwrun = 0;
        guildwbwtime = 0;
        guildwbwrun = window.setInterval("setGuildWBWTime()", 1000);
        guildwbwtime = wbwinfo.remain;
    }
    A += '<div style="margin-bottom:10px; text-align:right; width:560px;">';
    if (trucks.length > 0 && (h == 1 || h == 2)) {
        A += '<button class="link" onclick="guildWBWstartAllTrucksCommit()" type="button">' + guildwbwalltrucksinfo + "</button>&nbsp;&nbsp;";
    }
    A += '<button class="link" onclick="showGuildWBWHelpTxt(1)" type="button">' + guildwbwhelp + "</button>&nbsp;&nbsp;";
    A += '<button class="link" onclick="guildWBWmemberRanking(1);" type="button">' + guildwbwmemberrankingproducts + "</button>";
    A += "</div>";
    if (trucks.length > 0) {
        stopTrucksGuildWBW();
        for (var Y = 0; Y < trucks.length; Y++) {
            var b = trucks[Y]["truckid"];
            var B = 0;
            if (trucks[Y]["to"] > 0) {
                guildwbwtruckrunto[b] = window.setInterval("setGuildWBWTruckTimer(" + b + "," + Y + ")", 1000);
                guildwbwtrucktimeto[b] = trucks[Y]["to"];
            }
            else {
                if (trucks[Y]["back"] > 0) {
                    guildwbwtruckrunback[b] = window.setInterval("setGuildWBWTruckTimerBack(" + b + "," + Y + ")", 1000);
                    guildwbwtrucktimeback[b] = trucks[Y]["back"];
                    B = 1;
                }
            }
            var a = Math.ceil(parseInt(trucks[Y]["load"] * 100) / trucks[Y]["maxload"]);
            A += '<div id="truck' + trucks[Y]["truckid"] + '" style="position:relative; margin-top:10px; width:565px;">';
            var W = '<div style="position:absolute; top:17px; left:101px;">';
            W += '<div id="guildwbwloadbar' + b + '" style="position:relative; background-Color:transparent; width:275px; height:18px; overflow:hidden; border:0px solid #000;" ';
            if (trucks[Y]["maxload"] > trucks[Y]["load"] && (trucks[Y]["product"] == 0 || trucks[Y]["product"] == wbwinfo.product) && trucks[Y]["time"] < guildwbwtime) {
                W += 'class="link" onclick="guildWBWsendItemsCommit(' + b + "," + wbwinfo.product + "," + trucks[Y]["load"] + "," + trucks[Y]["maxload"] + "," + trucks[Y]["time"] + ');"';
            }
            W += "onmouseover=\"showDiv('guildwbwbarinfo2" + b + "')\" onmouseout=\"hideDiv('guildwbwbarinfo2" + b + "')\"";
            W += ">";
            if (B == 0) {
                W += '<div style="position:absolute; background:url(' + imgpath + "guild/innerbar.png) top left; width:275px; height:20px; left:-" + (parseInt((275 / 100 * (100 - a)))) + 'px;"></div>';
                W += '<div style="position:absolute; width:275px; top:3px; color:#000; text-align:center;"><b>';
                if (trucks[Y]["load"] == 0) {
                    W += guildwbwamountbarempty;
                }
                else {
                    W += trucks[Y]["load"] + "/" + trucks[Y]["maxload"];
                }
                if (trucks[Y]["product"] > 0 && trucks[Y]["product"] != wbwinfo.product) {
                    W += '&nbsp;<span style="font-weight:bold; color:#f00;">' + guildwbwwrongproduct + "</span>";
                }
                W += "</b></div>";
            }
            W += "</div>";
            W += "</div>";
            A += '<div style="position:relative; height:65px; width:565px;">';
            A += '<div style="position:absolute; top:10px; left:75px; width:409px; height:52px; background:url(' + imgpath + 'guild/guildwbw_bar.png) top left no-repeat;">';
            if (trucks[Y]["product"] > 0) {
                A += "<div onmouseover=\"showDiv('guildwbwbarinfo" + b + "')\" onmouseout=\"hideDiv('guildwbwbarinfo" + b + '\')" class="v' + trucks[Y]["product"] + '" style="position:absolute; top:11px; left:36px; width:30px;"></div>';
            }
            else {
                A += '<div style="position:absolute; top:11px; left:36px; width:30px;">&nbsp;</div>';
            }
            A += '<div id="guildwbwbarinfo' + b + '" class="blackbox" style="display:none; position:absolute; top:-20px; left:35px;">' + str_replace("%PRODUCT%", "<b>" + produkt_name[trucks[Y]["product"]] + "</b>", guildwbwtruckbarinfo) + "</div>";
            var v = str_replace("%AMOUNT%", "<b>" + trucks[Y]["load"] + "</b>", guildwbwtruckbarinfo2);
            v = str_replace("%MAX%", "<b>" + trucks[Y]["maxload"] + "</b>", v);
            if (trucks[Y]["load"] < trucks[Y]["maxload"] && trucks[Y]["time"] < guildwbwtime) {
                if ((trucks[Y]["load"] > 0 && trucks[Y]["product"] == wbwinfo.product) || trucks[Y]["load"] == 0) {
                    v += "<br>" + guildwbwtruckbarinfo2click;
                }
            }
            A += '<div id="guildwbwbarinfo2' + b + '" class="blackbox" style="display:none; position:absolute; top:-20px; left:100px;">' + v + "</div>";
            A += W;
            A += "</div>";
            A += '<div style="position:absolute; top:0px; left:10px;"><img src="' + imgpath + "guild/truck" + trucks[Y]["type"] + '.png" border="0"></div>';
            if ((h == 1 || h == 2) && trucks[Y]["time"] < guildwbwtime) {
                if (!(trucks[Y]["back"] > 0 || trucks[Y]["to"] > 0)) {
                    if (trucks[Y]["load"] > 0 && trucks[Y]["product"] == wbwinfo.product) {
                        A += '<div id="guildwbwgotruck' + b + '" class="link" style="position:absolute; right:40px; top:20px; width:35px; height:35px; background:url(' + imgpath + 'guild/go.png) top left no-repeat;" onclick="guildWBWstartTruckCommit(' + b + "," + trucks[Y]["time"] + ');" onmouseover="showDiv(\'guildwbwgoinfo' + Y + "')\" onmouseout=\"hideDiv('guildwbwgoinfo" + Y + "')\"></div>";
                    }
                }
            }
            if (h == 1 || h == 2) {
                if (!(trucks[Y]["back"] > 0 || trucks[Y]["to"] > 0)) {
                    if (trucks[Y]["load"] > 0) {
                        A += '<div id="guildwbwcleartruck' + b + '" class="link" style="position:absolute; right:0px; top:20px; width:35px; height:35px; background:url(' + imgpath + 'guild/clear.png) top left no-repeat;" onclick="guildWBWclearTruckCommit(' + b + ')" onmouseover="showDiv(\'guildwbwclearinfo' + Y + "')\" onmouseout=\"hideDiv('guildwbwclearinfo" + Y + "')\"></div>";
                    }
                }
            }
            A += '<div id="guildwbwclearinfo' + Y + '" class="blackbox" style="display:none; position:absolute; top:-10px; right:0px;">' + guildwbwbuttonclear + "</div>";
            A += '<div id="guildwbwgoinfo' + Y + '" class="blackbox" style="display:none; position:absolute; top:-10px; right:0px;">' + guildwbwbuttongo + "</div>";
            A += '<div id="guildwbwcallbackinfo' + Y + '" class="blackbox" style="display:none; position:absolute; top:-10px; right:0px;">' + guildwbwbuttoncallback + "</div>";
            A += "</div>";
            A += '<div style="margin-left:120px; position:relative;">';
            A += '<span id="guildwbwshowtimetext' + b + '">' + guildwbwtimetxt + "</span>";
            A += '<span style="font-weight:bold" id="guildwbwshowtime' + b + '">' + formatTime(trucks[Y]["time"]) + "</span>";
            A += "<br><span>" + str_replace("%COUNT%", ((trucks[Y]["durability"] - trucks[Y]["rideid"]) + 1), guildwbwdurability) + "</span>";
            if (trucks[Y]["entries"]) {
                var Q = trucks[Y]["entries"];
                if (Q.length > 0) {
                    A += "<div onclick=\"showGuildWBWEntries('entries', " + Y + ');" class="link">';
                    A += '<div style="float:left;"><img id="entries' + Y + 'img" src="' + imgpath + 'guild/plus.gif" border="0"></div>';
                    A += '<div style="float:left; position:relative; top:1px;">&nbsp;' + guildwbwmemberlist + "</div>";
                    A += '<div style="clear:both;"></div>';
                    A += "</div>";
                }
                A += '<div id="guildwbwentries' + Y + '" style="display:none; width:410px;">';
                for (var T = 0; T < Q.length; T++) {
                    A += '<div style="float:left; width:200px;">' + Q[T]["uname"] + "</div>";
                    A += '<div style="float:left; width:200px;">' + Q[T]["sum"] + "</div>";
                    A += '<div style="clear:both;"></div>';
                }
                A += "</div>";
            }
            A += "</div>";
            A += "</div>";
        }
    }
    else {
        A += '<div style="margin-left:10px; width:570px;">' + guildwbwnovehiclesinfo + "<br><br>";
        A += '<button type="button" onclick="setGuildWBWNavi(3); guildWBWShop();">' + guildwbwnovehiclesinfo2 + "</button></div>";
    }
} if (L == 2) {
    stopTrucksGuildWBW();
    var N = 0;
    var I = 1;
    var c = 0;
    var w = new Array;
    if (guildwbwranking != "no") {
        var Z = "";
        Z += '<div style="position:relative; margin-bottom:10px;">';
        Z += '<div class="kp' + wbwinfo.product + '" style="float:left; width:15px; height:15px;"></div>';
        Z += '<div style="float:left; margin-top:1px;">&nbsp;<b>' + produkt_name[wbwinfo.product] + "</b></div>";
        Z += '<div style="clear:both;"></div>';
        Z += "</div>";
        Z += "<div>" + t_stadt_wettbewerb_beginn + "&nbsp;<b>" + wbwinfo.formatstart + "</b></div>";
        Z += '<div style="margin-bottom:10px;">' + t_stadt_wettbewerb_ende + "&nbsp;<b>" + wbwinfo.formatend + "</b></div>";
        $("globalwbwdata").innerHTML = Z;
    }
    A += '<div style="width:500px; margin-top:10px;">';
    A += '<div class="guildwbwrankingline_rank">' + guildwbwrankingrank + "</div>";
    A += '<div class="guildwbwrankingline_name">' + guildwbwrankingguildname + "</div>";
    A += '<div class="guildwbwrankingline_server">' + guildwbwrankingserver + "</div>";
    A += '<div class="guildwbwrankingline_sum">' + guildwbwrankingamount + "</div>";
    A += '<div style="clear:both;"></div>';
    A += "</div>";
    if (guildwbwranking == "no") {
        A += '<div style="margin-left:10px; text-align:center; padding-top:25px; font-weight:normal; width:500px;">' + guildwbwnocurrentwbw + "</div>";
    }
    else {
        for (var Y = 0; Y < guildwbwranking.length; Y++) {
            if (e > 0) {
                if (e == guildwbwranking[Y]["server"]) {
                    var y = 1;
                }
                else {
                    var y = 0;
                }
            }
            else {
                var y = 1;
            }
            if (N == 0) {
                N = guildwbwranking[Y]["amountsum"];
                var H = I + ".";
            }
            else {
                if (N == guildwbwranking[Y]["amountsum"]) {
                    if (e > 0) {
                        var H = I + ".";
                    }
                    else {
                        var H = "&nbsp;";
                    }
                }
                else {
                    I++;
                    var H = I + ".";
                    N = guildwbwranking[Y]["amountsum"];
                }
            }
            if (y == 1) {
                if (guildwbwranking[Y]["self"] == 1) {
                    c = 1;
                    d = "color:#f00; font-weight:bold;";
                }
                else {
                    d = "";
                }
                if (Y % 2 == 0) {
                    var E = "transparent";
                }
                else {
                    var E = "transparent";
                }
                A += '<div style="width:500px; padding-top:2px; padding-bottom:2px; background-color:' + E + '" id="guildwbwrankingline' + Y + '" ';
                A += "onmouseover=\"this.style.backgroundColor='#D8B57D'\" onmouseout=\"this.style.backgroundColor='transparent'\"";
                A += ">";
                if (guildwbwranking[Y]["self"] == 1) {
                    A += '<a name="ownguild"></a>';
                }
                A += '<div class="guildwbwrankingline_rank" style="' + d + '">' + H + "</div>";
                A += '<div class="guildwbwrankingline_name" style="' + d + '">' + guildwbwranking[Y]["guildname"] + "</div>";
                A += '<div class="guildwbwrankingline_server" style="' + d + '">' + guildwbwranking[Y]["server"] + "</div>";
                A += '<div class="guildwbwrankingline_sum" style="' + d + '">' + guildwbwranking[Y]["amountsum"] + "</div>";
                A += '<div style="clear:both;"></div>';
                A += "</div>";
            }
            w[guildwbwranking[Y]["server"]] = 1;
        }
    }
    var l = "";
    if (P == 1) {
        selectname = "guildwbwserversortpublic";
    }
    else {
        selectname = "guildwbwserversort";
    }
    l += guildwbwrankingsorthead + '<select id="' + selectname + '" onchange="showGuildWBWRankingSortByServer(\'' + selectname + "'," + h + "," + P + ')">';
    l += "<option>" + guildwbwrankingsortall + "</option>";
    for (var Y = 0; Y < 50; Y++) {
        if (w[Y]) {
            var d = "";
            if (e == Y) {
                var d = "selected";
            }
            l += '<option value="' + Y + '" ' + d + ">" + str_replace("%NUMBER%", Y, guildwbwrankingsortserver) + "</option>";
        }
    }
    l += "</select>";
    if (P != 1) {
        if (c == 1) {
            l += '&nbsp;<button type="button" onclick="showOwnGuild()">' + guildwbwrankingsortownguild + "</button>";
        }
    }
    l += '&nbsp;<button class="link" onclick="guildWBWHallOfFame(' + P + ')" type="button">' + guildwbwstatslink1 + "</button>";
    A = l + '<div style="height:350px;">' + A + "</div>";
} if (L == 3) {
    A += '<div style="margin-bottom:10px; text-align:right; width:560px;">';
    A += '<button class="link" onclick="showGuildWBWHelpTxt(4)" type="button">' + guildwbwhelp + "</button>&nbsp;&nbsp;";
    A += '<button class="link" onclick="guildWBWmemberRanking(2);" type="button">' + guildwbwmemberrankinghar + "</button>";
    A += "</div>";
    stopTrucksGuildWBW();
    for (var Y = 1; Y < 20; Y++) {
        if (shopdata[Y]) {
            A += '<div style="margin-left:10px; margin-bottom:10px; width:550px; margin-right:10px;" ';
            A += ">";
            A += '<div class="main_float_left" style="position:relative; width:335px; height:145px;">';
            A += '<img src="' + imgpath + "guild/truck" + Y + '_shop.gif" border="0">';
            A += '<div style="position:absolute; top:86px; text-align:center; width:97px; left:223px; color:#f00; font-weight:bold; font-size:10px;">' + formatPrice(shopdata[Y][4]) + "</div>";
            A += "</div>";
            A += '<div class="main_float_left" id="guildwbwshoptruckinfo">';
            A += '<div style="margin-top:0px; margin-bottom:5px;" onmouseover="showDiv(\'guildWBWdrivetimeinfo' + Y + "')\" onmouseout=\"hideDiv('guildWBWdrivetimeinfo" + Y + "')\">";
            A += '<div class="main_float_left" style="background:url(' + imgpath + 'guild/time.png) top left no-repeat; width:37px; height:34px;"></div>';
            A += '<div class="main_float_left" style="position:relative; top:10px;">&nbsp;' + formatTime(shopdata[Y][0]) + '</div><div style="clear:both;"></div>';
            A += '<div id="guildWBWdrivetimeinfo' + Y + '" class="blackbox guildshopinfo_drivetime">' + str_replace("%TIME%", formatTime(shopdata[Y][0]), guildwbwshoptruckdrivetime) + "</div>";
            A += "</div>";
            A += '<div style="margin-bottom:5px;" onmouseover="showDiv(\'guildWBWdrivesinfo' + Y + "')\" onmouseout=\"hideDiv('guildWBWdrivesinfo" + Y + "')\">";
            A += '<div class="main_float_left" style="background:url(' + imgpath + 'guild/space.png) top left no-repeat; width:37px; height:34px;"></div>';
            A += '<div class="main_float_left" style="position:relative; top:10px;">&nbsp;' + shopdata[Y][1] + '</div><div style="clear:both;"></div>';
            A += '<div id="guildWBWdrivesinfo' + Y + '" class="blackbox guildshopinfo_drives">' + str_replace("%AMOUNT%", shopdata[Y][1], guildwbwshoptruckload) + "</div>";
            A += "</div>";
            A += '<div style="margin-bottom:5px;" onmouseover="showDiv(\'guildWBWloadinfo' + Y + "')\" onmouseout=\"hideDiv('guildWBWloadinfo" + Y + "')\">";
            A += '<div class="main_float_left" style="background:url(' + imgpath + 'guild/drives.png) top left no-repeat; width:37px; height:34px;"></div>';
            A += '<div class="main_float_left" style="position:relative; top:10px;">&nbsp;' + shopdata[Y][2] + '</div><div style="clear:both;"></div>';
            A += '<div id="guildWBWloadinfo' + Y + '" class="blackbox guildshopinfo_load">' + str_replace("%AMOUNT%", shopdata[Y][2], guildwbwshoptruckdrives) + "</div>";
            A += "</div>";
            if (shopdata[Y]["active"] == 0) {
                A += '<div style="position:absolute; width:200px; top:120px; font-weight:bold; color:#f00;">' + str_replace("%QUEST%", shopdata[Y][3], guildwbwdshoptruckminquest) + "</div>";
            }
            var D = 0;
            var Q = "";
            if (shopdata[Y]["entries"]) {
                for (var X = 0; X <= shopdata[Y]["entries"]["name"].length; X++) {
                    if (shopdata[Y]["entries"]["amount"][X] > 0) {
                        Q += '<div class="main_float_left" style="width:120px;">' + shopdata[Y]["entries"]["name"][X] + "</div>";
                        Q += '<div id="" class="main_float_left guildshopinfo_entriesamount">' + shopdata[Y]["entries"]["amount"][X] + "</div>";
                        Q += '<div style="clear:both;"></div>';
                        D = (parseInt(D) + parseInt(shopdata[Y]["entries"]["amount"][X]));
                    }
                }
            }
            if (Q != "") {
                A += '<div style="margin-top:5px;">';
                A += '<div class="main_float_left"><img class="link" src="' + imgpath + 'guild/plus.gif" id="entriesshop' + Y + "img\" onclick=\"showGuildWBWEntries('shopentries', " + Y + ')"></div>';
                A += '<div class="main_float_left" style="position:relative; top:1px;">&nbsp;' + guildwbwshopdonators + "</div>";
                A += '<div style="clear:both;"></div>';
                A += '<div style="display:none;" id="guildwbwshopentries' + Y + '">' + Q + "</div>";
                A += "</div>";
            }
            A += "</div>";
            var a = Math.ceil(parseInt(D * 100) / shopdata[Y][4]);
            var n = '<div class="link" style="position:relative;" ';
            n += 'onclick="guildWBWShopDonateCommit(' + Y + "," + D + "," + shopdata[Y][4] + ')" ';
            n += "onmouseover=\"showDiv('guildwbwdonatebarinfo" + Y + "')\" onmouseout=\"hideDiv('guildwbwdonatebarinfo" + Y + "')\">";
            n += '<div style="position:absolute; left:5px; top:10px; overflow:hidden; width:20px; height:100px;">';
            n += '<div style="position:absolute; left:0px; background-color:#f00; width:20px; height:100px; top:' + (parseInt((100 / 100 * (100 - a)))) + 'px;"></div>';
            n += "</div>";
            n += '<div style="position:absolute; top:0px; left:0px; background:url(' + imgpath + 'guild/donate_bar.png) top left no-repeat; width:31px; height:142px;"></div>';
            n += "</div>";
            var v = str_replace("%COST%", "<b>" + formatPrice(shopdata[Y][4]) + "</b>", guildwbwdshopdonatebarinfo);
            v = str_replace("%PAID%", "<b>" + formatPrice(D) + "</b>", v);
            if (shopdata[Y]["active"] == 1) {
                A += '<div class="main_float_left" style="position:relative;">';
                A += n;
                A += '<div id="guildwbwdonatebarinfo' + Y + '" class="blackbox guildshopdonatebarinfo">' + v + "</div>";
                A += "</div>";
            }
            A += '<div style="clear:both;"></div>';
            A += "</div>";
        }
    }
} if (L == 4) {
    stopTrucksGuildWBW();
    A += '<div style="margin-bottom:10px; text-align:right; width:560px;">';
    if (guildwbwuserranking[0]) {
        if (guildwbwuserranking[0]["prestige"]) {
            A += '<button class="link" onclick="showGuildWBWHelpTxt(2)" type="button">' + guildwbwhelp + "</button>&nbsp;&nbsp;";
            var F = "initGuildWBW(1)";
        }
        else {
            if (guildwbwuserranking[0]["donatesum"]) {
                A += '<button class="link" onclick="showGuildWBWHelpTxt(3)" type="button">' + guildwbwhelp + "</button>&nbsp;&nbsp;";
                var F = "guildWBWShop()";
            }
        }
    }
    else {
        var F = "initGuildWBW(1)";
    }
    A += '<button class="link" onclick="' + F + '" type="button">' + guildwbwmemberrankingback + "</button>";
    A += "</div>";
    if (guildwbwuserranking[0]) {
        if (guildwbwuserranking[0]["prestige"]) {
            var G = guildwbwuserranking[0]["prestige"];
            var z = guildwbwrankingglobalprestige;
        }
        if (guildwbwuserranking[0]["donatesum"]) {
            var G = guildwbwuserranking[0]["donatesum"];
            var z = guildwbwrankingglobalbar;
        }
        var q = 0;
        var t = 45;
        var R = 250;
        var U = Math.ceil(R / G);
        var K = 0;
        var I = 1;
        var m = 0;
        A += '<div style="font-weight:bold;">';
        A += '<div class="main_float_left guildwbwmemberranking_rank">' + guildwbwrankingrank + "</div>";
        A += '<div class="main_float_left guildwbwmemberranking_name">' + guildwbwrankingmember + "</div>";
        A += '<div class="main_float_left guildwbwmemberranking_graph" style="width:150px;">&nbsp;</div>';
        A += '<div class="main_float_left guildwbwmemberranking_amount" style="width:220px;">' + z + "</div>";
        A += '<div style="clear:both;"></div>';
        A += "</div>";
        for (var Y = 0; Y < guildwbwuserranking.length; Y++) {
            if (guildwbwuserranking[0]["prestige"]) {
                m = guildwbwuserranking[Y]["prestige"];
            }
            if (guildwbwuserranking[0]["donatesum"]) {
                m = guildwbwuserranking[Y]["donatesum"];
            }
            if (Y > 0 && parseInt(K) > parseInt(m)) {
                R = Math.ceil(Math.ceil((m * 100) / G) * U);
            }
            if (Y == 0) {
                K = m;
                H = I + ".";
            }
            else {
                if (parseInt(K) > parseInt(m)) {
                    K = m;
                    H = I + ".";
                }
                else {
                    H = "&nbsp;";
                }
            }
            if (setarab == 1) {
                var s = "right";
            }
            else {
                var s = "left";
            }
            A += '<div style="position:absolute; top:' + t + "px; padding-top:2px; padding-bottom:2px; " + s + ":" + q + 'px;" onmouseover="this.style.backgroundColor=\'#D8B57D\'" onmouseout="this.style.backgroundColor=\'transparent\'">';
            A += '<div class="main_float_left guildwbwmemberranking_rank">' + H + "</div>";
            A += '<div class="main_float_left guildwbwmemberranking_name">' + guildwbwuserranking[Y]["uname"] + "</div>";
            A += '<div class="main_float_left guildwbwmemberranking_graph" ';
            if (guildwbwuserranking[0]["prestige"]) {
                A += "onmouseover=\"showDiv('guildwbwuserrankingproductinfo" + Y + "')\" onmouseout=\"hideDiv('guildwbwuserrankingproductinfo" + Y + "')\"";
            }
            A += ">";
            A += '<div style="height:18px; background:url(' + imgpath + "guild/percentbar.gif) top left repeat-x; width:" + R + 'px;"></div>';
            A += "</div>";
            A += '<div class="main_float_left guildwbwmemberranking_amount">' + m;
            if (guildwbwuserranking[0]["donatesum"]) {
                A += "&nbsp;" + gamecurrency;
            }
            A += "</div>";
            A += '<div style="clear:both;"></div>';
            A += "</div>";
            if (guildwbwuserranking[0]["prestige"]) {
                C += '<div id="guildwbwuserrankingproductinfo' + Y + '" class="blackbox" style="position:absolute; left:' + (q + 180) + "px; top:" + (t + 20) + 'px; display:none; z-index:100; width:250px;">';
                for (var T = 0; T < guildwbwuserranking[Y]["entries"].length; T++) {
                    if (T % 2 == 0 && T > 0) {
                        C += '<div style="clear:both;"></div>';
                    }
                    C += '<div class="main_float_left" style="margin-bottom:2px;">';
                    C += '<div class="kp' + guildwbwuserranking[Y]["entries"][T][0] + ' main_float_left" style="width:15px;"></div>';
                    C += '<div class="main_float_left" style="width:100px;">&nbsp;' + guildwbwuserranking[Y]["entries"][T][1] + "</div>";
                    C += '<div style="clear:both;"></div>';
                    C += "</div>";
                }
                C += '<div style="clear:both;"></div>';
                C += "</div>";
            }
            t = (t + 20);
            I++;
        }
    }
} if (L == 5) {
    stopTrucksGuildWBW();
    var J = "";
    J += '<button style="position:absolute; top:0px; right:10px;" class="link" onclick="guildWBWRanking(' + P + ')">' + guildwbwstatslink2 + "</button>";
    J += '<div style="margin-top:25px; margin-left:10px;">';
    if (guildwbw_alltime) {
        var K = 0;
        var I = 0;
        J += '<div class="main_float_left" style="width:25px; text-align:right;">&nbsp;</div>';
        J += '<div class="main_float_left" style="width:200px; margin-left:5px; font-weight:bold;">' + guildwbwrankingguildname + "</div>";
        J += '<div class="main_float_left" style="width:75px; margin-left:5px; font-weight:bold; text-align:left;">' + guildwbwrankingserver + "</div>";
        J += '<img class="main_float_left" style="margin:0px 15px;" src="' + imgpath + 'guild/gold.gif" border="0">';
        J += '<img class="main_float_left" style="margin:0px 15px;"  src="' + imgpath + 'guild/silber.gif" border="0">';
        J += '<img class="main_float_left" style="margin:0px 15px;"  src="' + imgpath + 'guild/bronze.gif" border="0">';
        J += '<img class="main_float_left" style="margin:0px 15px;"  src="' + imgpath + 'guild/serversieger.gif" border="0">';
        J += '<div style="clear:both;"></div>';
        for (var Y in guildwbw_alltime) {
            var u = "&nbsp;";
            if (K != guildwbw_alltime[Y]["i"]) {
                I++;
                u = I + ".";
            }
            J += '<div class="guild_halloffame_line">';
            J += '  <div class="main_float_left" style="width:25px; text-align:right;">' + u + "</div>";
            J += '  <div class="main_float_left" style="width:200px; margin-left:5px;">' + guildwbw_alltime[Y]["name"] + "</div>";
            J += '  <div class="main_float_left" style="width:75px; margin-left:5px; text-align:left;">' + guildwbw_alltime[Y]["server"] + "</div>";
            var S = ["g", "s", "b", "w"];
            for (var X = 0; X < S.length; X++) {
                var m = 0;
                if (guildwbw_alltime[Y][S[X]]) {
                    m = guildwbw_alltime[Y][S[X]];
                }
                J += '<div class="main_float_left" style="width:45px; text-align:center;">' + m + "</div>";
            }
            J += '  <div style="clear:both;"></div>';
            J += "</div>";
            K = guildwbw_alltime[Y]["i"];
        }
    }
    if (guildwbw_hof_global) {
        var O = [{ trophy: "gold", data: guildwbw_hof_global }, { trophy: "silber", data: guildwbw_hof_second }, { trophy: "bronze", data: guildwbw_hof_third }, { trophy: "gold", data: guildwbw_hof_server }];
        J += '<div style="margin-top:10px;">';
        for (var Y = 0; Y < guildwbw_hof_global.length; Y++) {
            var l = str_replace("%START%", "<b>" + guildwbw_hof_data[Y][0][0] + "</b>", guildwbwhalloffameheader);
            l = str_replace("%END%", "<b>" + guildwbw_hof_data[Y][0][1] + "</b>", l);
            J += '<div style="margin-bottom:20px;">';
            J += '  <div class="main_float_left kp' + guildwbw_hof_data[Y][0][2] + '" style="margin-right:5px;"></div>';
            J += '  <div class="main_float_left">' + l + "</div>";
            J += '  <div class="clear"></div>';
            J += '  <div class="main_float_left" style="width:315px; font-weight:bold;">' + guildwbwrankingguildname + "</div>";
            J += '  <div class="main_float_left" style="width:50px; font-weight:bold;">' + guildwbwrankingserver + "</div>";
            J += '  <div class="main_float_left guildwbwrankingamount" style="font-weight:bold;">' + guildwbwrankingamount + "</div>";
            J += '  <div class="clear"></div>';
            var r = "";
            for (var V = 0; V < O.length; V++) {
                var aa = O[V].data;
                for (var M = 1; M <= 30; M++) {
                    if (aa[Y][M]) {
                        for (var X = 0; X < aa[Y][M].length; X++) {
                            if (V == 3) {
                                r += htmlGuildWBWHallOfFameItem(O[V].trophy, aa[Y][M][X][0], M, aa[Y][M][X][1]);
                            }
                            else {
                                J += htmlGuildWBWHallOfFameItem(O[V].trophy, aa[Y][M][X][0], M, aa[Y][M][X][1]);
                            }
                        }
                    }
                }
            }
            J += '  <img class="main_float_left link" style="margin-right:5px;" id="serverwinnerimg' + Y + '" src="' + imgpath + 'guild/plus.gif" border="0" onclick="showGuildWBWEntries(\'serverwinner\', ' + Y + ')">';
            J += '  <div class="main_float_left">' + guildwbwhalloffameserver + "</div>";
            J += '  <div class="clear"></div>';
            J += '  <div style="display:none;" id="guildwbwhofserver' + Y + '">' + r + "</div>";
            J += "</div>";
        }
        J += "</div>";
    }
    J += "</div>";
    A = J;
} if ((L == 2 || L == 5) && P == 1) {
    $("globalwbwranking").innerHTML = A + C;
}
else {
    $("guildwbwcontent").innerHTML = A + C;
} }
function htmlGuildWBWHallOfFameItem(d, a, e, c) { var b = ""; b += '<div class="guild_halloffame_line">'; b += '  <img class="main_float_left" src="' + imgpath + "guild/" + d + '.gif">'; b += '  <div class="main_float_left" style="width:300px; margin-top:1px;">' + a + "</div>"; b += '  <div class="main_float_left" style="width:50px;">' + e + "</div>"; b += '  <div class="main_float_left" style="text-align:right; width:100px;">' + c + "</div>"; b += '  <div class="clear"></div>'; b += "</div>"; return b; }
function showGuildWBWEntries(b, c) { var a = {}; a.serverwinner = { div: "guildwbwhofserver", img: "serverwinnerimg" + c }; a.shopentries = { div: "guildwbwshopentries", img: "entriesshop" + c + "img" }; a.entries = { div: "guildwbwentries", img: "entries" + c + "img" }; if (a[b]) {
    if ($(a[b].div + c).style.display == "block") {
        $(a[b].div + c).style.display = "none";
        $(a[b].img).src = imgpath + "guild/plus.gif";
    }
    else {
        $(a[b].div + c).style.display = "block";
        $(a[b].img).src = imgpath + "guild/minus.gif";
    }
} }
function showOwnGuild() { location.hash = "#ownguild"; }
function showGuildWBWRankingSortByServer(c, a, b) { setGuildWBWContent(2, a, $(c).value, b); }
function setGuildWBWTruckTimer(a, b) { if (guildwbwtrucktimeto[a] > 0) {
    if ($("guildwbwloadbar" + a)) {
        $("guildwbwloadbar" + a).onclick = function (c) { };
    }
    $("guildwbwbarinfo2" + a).innerHTML = guildwbwenroute;
    guildwbwtrucktimeto[a] = (guildwbwtrucktimeto[a] - 1);
    if (guildwbwtrucktimeto[a] <= 0) {
        window.clearInterval(guildwbwtruckrunto[a]);
        guildwbwtruckrunto[a] = 0;
        guildwbwtrucktimeto[a] = 0;
        if (guildwbwtrucktimeto[a] == 0) {
            window.clearInterval(guildwbwtruckrunback[a]);
            guildwbwtruckrunback[a] = 0;
            guildwbwtrucktimeback[a] = 0;
            if (trucks[b]["back"] > 0) {
                $("guildwbwloadbar" + a).innerHTML = '<div style="width:275px; text-align:center; font-weight:bold;">' + guildwbwproductssend + "</div>";
                guildwbwtruckrunback[a] = window.setInterval("setGuildWBWTruckTimerBack(" + a + ")", 1000);
                guildwbwtrucktimeback[a] = trucks[b]["back"];
            }
        }
    }
    else {
        $("guildwbwshowtimetext" + a).innerHTML = guildwbwtime2target;
        $("guildwbwshowtime" + a).innerHTML = formatTime(guildwbwtrucktimeto[a]);
    }
} }
function setGuildWBWTruckTimerBack(a) { if (guildwbwtrucktimeback[a] > 0) {
    $("guildwbwloadbar" + a).innerHTML = '<div style="width:275px; text-align:center; font-weight:bold;">' + guildwbwproductssend + "</div>";
    $("guildwbwloadbar" + a).onclick = function (b) { };
    $("guildwbwbarinfo2" + a).innerHTML = guildwbwenroute;
    guildwbwtrucktimeback[a] = (guildwbwtrucktimeback[a] - 1);
    if (guildwbwtrucktimeback[a] <= 0) {
        window.clearInterval(guildwbwtruckrunback[a]);
        guildwbwtruckrunback[a] = 0;
        guildwbwtrucktimeback[a] = 0;
        initGuildWBW();
    }
    else {
        $("guildwbwshowtimetext" + a).innerHTML = guildwbwtime4back;
        $("guildwbwshowtime" + a).innerHTML = formatTime(guildwbwtrucktimeback[a]);
    }
} }
function setGuildWBWTime() { if (guildwbwtime > 0) {
    guildwbwtime = (guildwbwtime - 1);
    if (guildwbwtime <= 0) {
        window.clearInterval(guildwbwrun);
        poweruprun[a] = 0;
        poweruptime[a] = 0;
    }
    else {
        if (guildwbwcontentstatus == 1) {
            for (var a = 0; a < trucks.length; a++) {
                if (trucks[a]["time"] > guildwbwtime) {
                    $("guildwbwshowtimetext" + trucks[a]["truckid"]).innerHTML = guildwbwtruckimpossible;
                    $("guildwbwshowtime" + trucks[a]["truckid"]).innerHTML = "";
                    hideDiv("guildwbwgotruck" + trucks[a]["truckid"]);
                }
                else {
                    if (!guildwbwtruckrunto[trucks[a]["truckid"]] && !guildwbwtruckrunback[trucks[a]["truckid"]]) {
                        $("guildwbwshowtime" + trucks[a]["truckid"]).innerHTML = formatTime(trucks[a]["time"]);
                    }
                }
            }
        }
        $("guildwbwremaintime").innerHTML = formatTime(guildwbwtime);
    }
} }
function guildWBWclearTruckCommit(b) { var a = "guildWBWclearTruck(" + b + ");"; var c = guildwbwtruckclearcontent; globalcommitbox(guildwbwtruckclearhead, c, a); }
function guildWBWclearTruck(a) { var b = { truckid: a }; guildAction("cleartruck", b); }
function guildWBWCallbackTruckCommit(b) { var a = "guildWBWCallbackTruck(" + b + ");"; var c = guildwbwtruckcallbackcontent; globalcommitbox(guildwbwtruckcallbackhead, c, a); }
function guildWBWCallbackTruck(a) { var b = { truckid: a }; guildAction("callbacktruck", b); }
function guildWBWsendItemsCommit(c, e, l, b, h) { if (checkRackItem(e) > 0) {
    var a = "guildWBWsendItemsCommit2(" + c + ");";
    var d = "<div>" + guildwbwtruckentrycontent + "</div>";
    d += '<div class="kp' + e + '" style="float:left; width:15px;"></div>';
    d += '<div style="float:left; width:100px;">';
    d += '<input maxlength="6" size="15" type="text" id="guildwbwentry" value="0" onchange="calcCurrentLoad(' + e + "," + l + "," + b + ');" onkeyup="calcCurrentLoad(' + e + "," + l + "," + b + ');">';
    d += "</div>";
    d += '<div style="clear:both;"></div>';
    d += guildwbwtruckcurrent + '<span id="guildwbwcurrentload">' + l + "</span>&nbsp;/&nbsp;" + guildwbwtruckmax + b;
    globalcommitbox(guildwbwtruckentryhead, d, a);
    $("guildwbwentry").focus();
}
else {
    var d = "";
    d += '<div class="kp' + e + '" style="float:left; width:15px;"></div>';
    d += '<div style="float:left;">&nbsp;' + produkt_name[e] + "</div>";
    d += '<div style="clear:both;"></div>';
    d += "<div>" + guildquest_addproduct_none + "</div>";
    globalerrorbox(d);
} }
function calcCurrentLoad(c, h, b) { h = parseInt(h); b = parseInt(b); var a = $("guildwbwentry").value; if (a) {
    if (!isNumeric(a)) {
        a = 1;
    }
    a = parseInt(a);
    var e = checkRackItem(c);
    if (a > e) {
        a = e;
    }
    var d = parseInt(b - h);
    if (a > d) {
        a = d;
    }
    $("guildwbwcurrentload").innerHTML = (parseInt(h) + parseInt(a));
    $("guildwbwentry").value = a;
}
else {
    $("guildwbwcurrentload").innerHTML = h;
} }
function guildWBWsendItemsCommit2(c) { var b = $("guildwbwentry").value; if (b > 0) {
    var a = "guildWBWsendItems(" + c + "," + b + ");";
    var d = guildwbwtruckentrycontent2;
    globalcommitbox(guildwbwtruckentryhead2, d, a);
}
else {
    $("guildwbwentry").focus();
    return false;
} }
function guildWBWsendItems(b, a) { if (a) {
    var c = { truckid: b, amount: a };
    guildAction("wbwsenditems", c);
}
else {
    return false;
} }
function guildWBWstartTruckCommit(b, d) { var a = "guildWBWstartTruck(" + b + ");"; var c = "<div>" + str_replace("%TIME%", "<b>" + formatTime(d) + "</b>", guildwbwtruckgocontent) + "</div>"; globalcommitbox(guildwbwtruckgohead, c, a); }
function guildWBWstartTruck(a) { var b = { truckid: a }; guildAction("starttruck", b); }
function guildWBWRanking(b) { var a = { "public": b }; guildAction("wbwranking", a); }
function guildWBWRankingResponse(a, b) { guildwbwranking = a[1]; if (b == 1) {
    wbwinfo = a[4];
} setGuildWBWContent(2, a[2], 0, b); }
function guildWBWShopDonateCommit(c, e, a) { var b = "guildWBWShopDonateCommit2(" + c + "," + a + ");"; var d = "<div>" + guildwbwtruckcontent + "</div>"; d += '<div style="float:left; width:15px;"><img src="' + imgpath + 'money.gif" border="0" width="15" height="15"></div>'; d += '<div style="float:left; width:150px;">'; d += '<input maxlength="7" size="15" type="text" id="guildwbwshopdonateentry" value="0" onchange="calcCurrentShopDonate(' + e + "," + a + ');" onkeyup="calcCurrentShopDonate(' + e + "," + a + ');">' + gamecurrency; d += "</div>"; d += '<div style="clear:both;"></div>'; d += guildwbwtruckcurrent + '<span id="guildwbwcurrentdonateentry">' + formatPrice(e) + "</span><br>" + guildwbwtruckmax + formatPrice(a); globalcommitbox(guildwbwtruckhead, d, b); $("guildwbwshopdonateentry").focus(); }
function guildWBWShopDonateCommit2(d, a) { var c = $("guildwbwshopdonateentry").value; if (c > 0) {
    var b = "guildWBWDonate(" + d + "," + c + "," + a + ");";
    var e = str_replace("%AMOUNT%", "<b>" + formatPrice(c) + "</b>", guildwbwtruckcontent2);
    globalcommitbox(guildwbwtruckhead2, e, b);
}
else {
    return false;
} }
function calcCurrentShopDonate(d, a) { var b = $("guildwbwshopdonateentry").value; if (b) {
    if (!isNumeric(b)) {
        b = 1;
    }
    b = parseInt(b);
    var c = parseInt(a - d);
    if (b > c) {
        b = c;
    }
    $("guildwbwcurrentdonateentry").innerHTML = formatPrice(parseInt(d + b));
    $("guildwbwshopdonateentry").value = b;
}
else {
    $("guildwbwcurrentdonateentry").innerHTML = formatPrice(d);
} }
function guildWBWDonate(c, b, a) { if (b > 0) {
    var d = { type: c, amount: b };
    guildAction("wbwshopdonate", d);
}
else {
    return false;
} }
function guildWBWDonateResponse(a) { if (a[1] == 1) {
    globalerrorbox(guildwbwdshopboughtinfo);
    initGuildWBW();
}
else {
    globalerrorbox(str_replace("%REST%", "<b>" + formatPrice(parseInt(a[2])) + "</b>", guildwbwdshopdonatesuccess));
    guildWBWShop();
} }
function guildWBWmemberRanking(a) { guildAction("wbwmemberranking", { type: a }); }
function guildWBWHallOfFame(a) { guildAction("halloffame", 0, { ispublic: a }); }
function guildWBWHallOfFameResponse(a, b) { guildwbw_hof_global = a[1]; guildwbw_hof_server = a[2]; guildwbw_hof_data = a[3]; guildwbw_hof_second = a[4]; guildwbw_hof_third = a[5]; guildwbw_alltime = a[6]; setGuildWBWContent(5, 0, 0, b); }
function buildGuildWBWtrophies(b) { hideDiv("guildwbwtrophy5"); hideDiv("guildwbwtrophy7"); for (var a = 0; a < 4; a++) {
    hideDiv("guildwbwtrophy" + (a + 1));
    if (b[1][a] > 0) {
        $("guildwbwtrophy" + (a + 1) + "info").innerHTML = str_replace("%COUNT%", b[1][a], guildwbwtrophy[(a + 1)]);
        showDiv("guildwbwtrophy" + (a + 1));
    }
} if (b[2] == 1) {
    $("guildwbwtrophy5info").innerHTML = guildwbwtrophy[5];
    showDiv("guildwbwtrophy5");
} if ($("guildwbwtrophy6info")) {
    $("guildwbwtrophy6info").innerHTML = guildwbwtrophy[6];
} if (b[3] == 1) {
    $("guildwbwtrophy7info").innerHTML = guildwbwtrophy[7];
    showDiv("guildwbwtrophy7");
} }
function guildWBWstartAllTrucksCommit() { var a = "guildWBWStartAll();"; var b = "<div>" + guildwbwalltruckscontent + "</div>"; globalcommitbox(guildwbwalltrucksheader, b, a); }
function initGuildQuests(a) { guildAction("initquests", { only: a }); }
function setGuildQuest(a) { guildAction("setquest", { questid: a }); }
function initGuildQuestsResponse(a, c) { infoguildquests = a; if (c == 1) {
    showGuildMedalcase(1);
}
else {
    var b = 0;
    if (gametimer.guild_quest > 0) {
        b = 1;
    }
    var e = "";
    for (var d = 0; d < infoguildquests.length; d++) {
        e += '<div class="questblock link">';
        e += '  <div class="questlisttitle">';
        e += '    <div style="float:left;">' + infoguildquests[d]["id"] + ". " + infoguildquests[d][5] + "</div>";
        e += '    <img style="float:right;" id="questlistdescimg' + d + '" src="' + imgpath + 'guild/plus.gif" onclick="showquestlistdesc(' + d + ');">';
        e += '    <div class="clear"></div>';
        e += "  </div>";
        e += '  <div id="questlistdesc' + d + '" class="questlistdesc">' + infoguildquests[d][6] + "</div>";
        e += '  <div style="margin:4px 0 0 0;">';
        e += '    <div style="float:left; margin-right:20px;" title="' + t_points + '"><img width="12" height="12" src="' + imgpath + 'points.gif" border="0">&nbsp;' + infoguildquests[d]["points"] + "</div>";
        e += '    <div style="float:left; margin-right:20px;" title="' + guildquestlist_duration + '"><img src="' + imgpath + 'adtime.gif" border="0">&nbsp;' + formatTime(infoguildquests[d][3]) + "</div>";
        e += '    <div style="float:left; margin-right:20px;" title="' + str_replace("%STARTS%", infoguildquests[d]["counter"], guildquestlist_starts_tt) + '"><img src="' + imgpath + 'guild/start.gif" border="0">&nbsp;' + infoguildquests[d]["counter"] + "</div>";
        e += '    <div style="float:left; margin-right:20px;" title="' + str_replace("%SUCCESS%", infoguildquests[d]["success"], guildquestlist_success_tt) + '"><img src="' + imgpath + 'guild/success.gif" border="0">&nbsp;' + infoguildquests[d]["success"] + "</div>";
        e += '    <div style="float:left; margin-right:20px;" title="' + guildquestlist_low_tt + '"><img src="' + imgpath + 'guild/low.gif" border="0">&nbsp;' + infoguildquests[d]["low"] + "</div>";
        e += '    <div style="float:left; margin-right:20px;" title="' + guildquestlist_high_tt + '"><img src="' + imgpath + 'guild/high.gif" border="0">&nbsp;' + infoguildquests[d]["high"] + "</div>";
        e += '    <div class="clear"></div>';
        e += "  </div>";
        if (b && infoguildquests[d]["run"]) {
            e += '<div style="margin:5px 0;" class="important">' + guildquestlist_running + '<span id="questlisttime"></span></div>';
        }
        if (!b && in_array(player_guildmemberstatus, [1, 2])) {
            e += '<div class="button activateguildquest" onclick="setQuestCommit(' + infoguildquests[d]["id"] + ')">' + guildquestlist_startquest_tt + "</div>";
        }
        e += "</div>";
    }
    $("guildmultiboxcontent").innerHTML = e;
} }
function showquestlistdesc(a) { if ($("questlistdesc" + a).style.display == "block") {
    hideDiv("questlistdesc" + a);
    $("questlistdescimg" + a).src = imgpath + "guild/plus.gif";
}
else {
    showDiv("questlistdesc" + a);
    $("questlistdescimg" + a).src = imgpath + "guild/minus.gif";
} }
function setQuestCommit(a) { var b = "setGuildQuest(" + a + ")"; globalcommitbox(guildactivatequestcommit, guildactivatequestcommit, b); }
function setGuildQuestRun(a) { var d = ""; d += '<div style="position:absolute; top:0px; left:0px; padding:2px;"><img src="' + imgpath + 'adtime.gif">&nbsp;<span id="guildquesttime">' + formatTime(a.remain) + "</span></div>"; d += '<div id="questshare_info" class="link" style="position:absolute; width:50px; height:50px; left:100px; top:0px;" onclick="openMultiBox(4)" title="' + guildmap_tt_questshare + '"></div>'; d += '<div style="position:absolute; left:0px; top:22px;"><img src="' + imgpath + 'points.gif" height="15" width="15">&nbsp;<span style="margin-top:1px; position:absolute;">' + a.points + "</span></div>"; d += '<div style="position:absolute; left:0px; top:50px;">'; for (var c = 1; c <= 2; c++) {
    if (a["product" + c] > 0) {
        var l = checkRackItem(a["product" + c]);
        var b = "";
        var h = "";
        if (!l) {
            b = "important";
        }
        else {
            h = "guildQuestAddProductsCommit(" + a["product" + c] + ", " + (a["amount" + c] - a["sum" + c]) + ");";
        }
        var e = ((a["sum" + c] * 100) / a["amount" + c]);
        d += '<div style="margin-bottom:2px;">' + htmlProductBody(a["product" + c]) + "</div>";
        d += '<div class="link" style="position:relative; background-color:#000; width:140px; height:15px; margin-right:5px; border-radius:3px; overflow:hidden;" onclick="' + h + '">';
        d += '  <div style="position:absolute; top:0px; left:0px; background-color:#f00; width:' + e + '%; height:15px;"></div>';
        d += "</div>";
        d += '<div style="margin-bottom:15px;" class="' + b + '">' + a["sum" + c] + "/" + a["amount" + c] + "</div>";
    }
} d += "</div>"; $("guildquestboxcontent").innerHTML = d; hideDiv("guildquestimg"); hideDiv("guildquestimgani"); showDiv("guildquestbox"); if (!gametimer.guild_quest) {
    gametimer.guild_quest = a.remain;
} }
function guildQuestAddProductsCommit(a, b) { if (checkRackItem(a) > 0) {
    var c = { pid: a };
    globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(c), 0, 0, 1);
    $("dialog_entryline_number").focus();
    $("dialog_entryline_number").onchange = new Function("checkGuildQuestAddProducts(" + a + ", " + b + ")");
    $("dialog_entryline_number").onkeyup = new Function("checkGuildQuestAddProducts(" + a + ", " + b + ")");
    checkGuildQuestAddProducts(a, b);
}
else {
    errorboxguild(guildquest_addproduct_none);
} }
function checkGuildQuestAddProducts(a, b) { var c = { stockamount: checkRackItem(a), rest: b, click: "guildQuestAddProducts(" + a + ")" }; checkEntryLine(c); }
function guildQuestAddProducts(b) { if (guild_questentry_block == 1) {
    return false;
} var a = parseInt($("dialog_entryline_number").value); if (parseInt(a) > checkRackItem(b)) {
    errorboxguild(guildquest_addproduct_notenough);
}
else {
    guild_questentry_block = 1;
    var c = { product: b, amount: a };
    guildAction("questentry", c);
} }
function countdownGuildQuest() { if (gametimer.guild_quest) {
    gametimer.guild_quest--;
    if (gametimer.guild_quest > 0) {
        if ($("guildquesttime")) {
            $("guildquesttime").innerHTML = formatTime(gametimer.guild_quest);
        }
        if ($("questlisttime")) {
            $("questlisttime").innerHTML = formatTime(gametimer.guild_quest);
        }
        guildquestrun = 1;
        if ($("farm_inner_guildlink")) {
            $("farm_inner_guildlink").removeClassName("farm_inner_guildlink");
            $("farm_inner_guildlink").addClassName("farm_inner_guildlink_running");
        }
    }
    else {
        clearTimer("guild_quest");
        guildquestrun = 0;
        if (inguild) {
            initGuild(1);
        }
        if ($("farm_inner_guildlink")) {
            $("farm_inner_guildlink").removeClassName("farm_inner_guildlink_running");
            $("farm_inner_guildlink").addClassName("farm_inner_guildlink");
        }
    }
} }
function initGuildShop() { guildAction("initshop"); }
function buyGuildShopItem(a) { guildAction("buyitem", { product: a, amount: 1 }); }
function initGuildShopResponse(b) { var d = ""; var a = '<div style="position:relative; width:330px; height:330px; overflow:auto;">'; for (var c = 0; c < b.length; c++) {
    var h = "guildShopAmountDialog(" + b[c]["id"] + ", " + b[c]["price"] + ", " + b[c]["coins"] + ")";
    a += '<div class="market_pframe link" style="position:relative; float:left; margin:20px;" onclick="' + h + '" onmouseover="showDiv(\'guild_shop_item' + c + "_tt')\" onmouseout=\"hideDiv('guild_shop_item" + c + "_tt')\">";
    a += '  <div class="tt' + b[c]["id"] + ' link" style="position:absolute; top:7px; left:8px;"></div>';
    a += '  <div id="guild_shop_item' + c + '_tt" class="ttbox" style="top:50px; left:0px;">' + produkt_name[b[c]["id"]] + "</div>";
    if (b[c]["price"]) {
        var e = formatPrice(b[c]["price"]);
    }
    if (b[c]["coins"]) {
        var e = b[c]["coins"] + "&nbsp;" + t_coins;
    }
    a += '  <div style="position:absolute; bottom:-15px; width:100%; text-align:center; white-space:nowrap;">' + e + "</div>";
    a += "</div>";
} a += "</div>"; globalBoxFlex(d, a, 0, 0, 1); }
function guildShopAmountDialog(e, d, b) { head = str_replace("%PRODUCT%", produkt_name[e], t_cropaction_buybutton); if (d > 0) {
    var a = "<div>" + cityadcost + "&nbsp;" + formatPrice(d) + "</div>";
} if (b > 0) {
    var a = "<div>" + cityadcost + "&nbsp;" + b + "&nbsp;" + t_coins + "</div>";
} var c = "buyGuildShopItem(" + e + ")"; globalcommitbox(head, a, c); }
function openNewsticker(a) { guildAction("openticker", { type: a }); }
function deleteGuildNewsCommit(a) { globalcommitbox(guildnews_delete_headline, guildnews_delete_info, "deleteGuildNews(" + a + ")"); }
function deleteGuildNews(a) { guildAction("deletenews", { nid: a }); }
function openNewstickerResponse(a, b) { guildnews = a[1]; if (player_guildmemberstatus == 0 || player_guildmemberstatus == 6) {
    errorboxguild(error1114);
    return false;
} showDiv("guildnewsticker1"); hideDiv("guildnewsticker2"); hideDiv("writeguildmail"); hideDiv("guildnewsdurable"); if (player_guildmemberstatus == 1 || player_guildmemberstatus == 2) {
    showDiv("writeguildmail");
    showDiv("guildnewsdurable");
} showGuildNews(); $("guildnewsentry").value = ""; showDiv("transp9"); showDiv("guildnewsticker"); }
function writeGuildNews() { if ($("guildnewsentry").value == "") {
    return false;
} var a = 0; if ($("guildnewsdurable").checked == true) {
    a = 1;
} var b = { status: a, msg: $("guildnewsentry").value }; guildAction("writenews", b); }
function calcGuildNewsLength() { var a = $("guildnewsentry").value; if (a.length > 0) {
    var b = parseInt(guildnewsmaxlength) - parseInt(a.length);
    $("guildnewsentrycounter").innerHTML = str_replace("%LETTERS%", b, guildnewsletters);
}
else {
    $("guildnewsentrycounter").innerHTML = str_replace("%LETTERS%", guildnewsmaxlength, guildnewsletters);
} }
function showGuildNews() { var c = { "1": [1, 16], "2": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15], "3": [9, 10], "4": [17], "5": [20] }; var b = ""; for (var a = 0; a < 2; a++) {
    if (guildnews[a]) {
        for (j = 0; j < guildnews[a].length; j++) {
            for (var d in c) {
                if ($("guildnewsfilter" + d).checked == true && in_array(guildnews[a][j]["type"], c[d])) {
                    var h = "";
                    if (in_array(guildnews[a][j]["type"], [1, 16, 17]) && guildnews[a][j]["name"]) {
                        h = "<i>" + guildnews[a][j]["name"] + ":</i><br>";
                    }
                    b += '<div class="guild_newsticker_item guild_newsticker_item_back' + d + '">';
                    if (player_guildmemberstatus == 1 || player_guildmemberstatus == 2) {
                        b += '<img style="float:left; margin-top:2px; margin-right:5px;" width="10" height="10" border="0" src="' + imgpath + 'guild/cancel.gif" class="link" onclick="deleteGuildNewsCommit(' + guildnews[a][j]["nid"] + ');">';
                    }
                    b += '  <div style="float:left; width:75px;">' + str_replace(" ", "<br>", guildnews[a][j]["date"]) + "</div>";
                    if (in_array(guildnews[a][j]["type"], [1, 16])) {
                        var e = 1;
                        if (guildnews[a][j]["type"] == 16) {
                            e = 2;
                        }
                        b += '<img src="' + imgpath + "guild/" + e + '.gif" border="0" style="float:left; margin-right:5px; margin-top:-2px;">';
                    }
                    else {
                        b += '<div style="float:left; width:25px;">&nbsp;</div>';
                    }
                    b += '  <div style="float:left; width:230px; overflow:hidden;">' + h + guildnews[a][j]["message"] + "</div>";
                    b += '  <div class="clear"></div>';
                    b += "</div>";
                }
            }
        }
    }
} $("guildnewstickercontent").innerHTML = b; }
function calcGuildMailLetters() { var a = $("guildnewsmailmessage").value; if (a.length > 0) {
    var b = parseInt(guildnewsmailmessagelength) - parseInt(a.length);
    $("guildnewsmailentrycounter").innerHTML = str_replace("%LETTERS%", b, guildnewsletters);
}
else {
    $("guildnewsmailentrycounter").innerHTML = str_replace("%LETTERS%", guildnewsmailmessagelength, guildnewsletters);
} }
function writeGuildMailCommit() { hideDiv("guildnewsticker1"); showDiv("guildnewsticker2"); }
function writeGuildMail() { if ($("guildnewsmailsubject").value == "" || $("guildnewsmailmessage").value == "") {
    return false;
} var a = { subject: $("guildnewsmailsubject").value, message: $("guildnewsmailmessage").value }; guildAction("writemail", a); }
function initGuildPark() { guildAction("initguildpark"); }
function setGuildParkView(c) { var l = 0; hideDiv("guildparknavileft"); hideDiv("guildparknaviright"); for (var d in sculpturedata) {
    hideDiv("guildparkitem" + d);
    l++;
} if (c == 1) {
    sculptureid = (sculptureid - 1);
}
else {
    if (c == 2) {
        sculptureid = (sculptureid + 1);
    }
} if (sculptureid < 1) {
    sculptureid = 1;
} if (sculptureid > l) {
    sculptureid = l;
} if (sculptureid > 1) {
    showDiv("guildparknavileft");
} if (sculptureid < l) {
    showDiv("guildparknaviright");
} showDiv("guildparkitem" + sculptureid); if (sculpturedata[sculptureid]) {
    for (var h in sculpturedata[sculptureid]["products"]) {
        var r = "";
        var m = 0;
        var q = sculpturedata[sculptureid]["products"][h];
        if (sculpturedata[sculptureid]["sum"][h]) {
            var m = sculpturedata[sculptureid]["sum"][h];
        }
        if (m < q && guildpark_userstatus != 6 && guildpark_stock[h] && guildpark_stock[h] > 0) {
            r = "buildGuildParkEntry(" + h + ", " + (q - m) + ")";
        }
        $("guildparkitem" + sculptureid + "_entry" + h).onclick = new Function(r);
        var n = Math.floor(((q - m) * 100) / q);
        $("guildparkitem" + sculptureid + "_entry" + h + "_bar").style.left = "-" + n + "px";
        $("guildparkitem" + sculptureid + "_entry" + h + "_entry").innerHTML = m;
        if (guildpark_entries[sculptureid] && guildpark_entries[sculptureid][h]) {
            var e = '<div style="margin-bottom:2px;">';
            for (var b in guildpark_entries[sculptureid][h]) {
                if (guildpark_entries[sculptureid][h][b]["sum"] > 0) {
                    e += '<div style="float:left; width:15px; margin-right:5px;" class="f_m_symbol' + h + '"></div>';
                    e += '<div style="float:left; width:50px; margin-right:5px;">' + guildpark_entries[sculptureid][h][b]["sum"] + "</div>";
                    e += '<div style="float:left; width:100px;">' + guildpark_entries[sculptureid][h][b]["name"] + "</div>";
                    e += '<div style="clear:both;"></div>';
                }
            }
            e += "</div>";
            $("guildparkitem" + sculptureid + "_info" + h + "_entries").innerHTML = e;
        }
    }
    if (sculptureid == 1) {
        var a = "megacow";
    }
    else {
        if (sculptureid == 2) {
            var a = "megasheep";
        }
        else {
            if (sculptureid == 3) {
                var a = "megachicken";
            }
            else {
                if (sculptureid == 4) {
                    var a = "megagoat";
                }
            }
        }
    }
    $("guildpark").style.background = "url(" + imgpath + "guild/" + a + sculpturedata[sculptureid]["phase"] + ".jpg)";
} showDiv("transp9"); showDiv("guildpark"); }
function buildGuildParkEntry(a, b) { var c = { type: "forestry", pid: a }; globalcommitbox(guild_park_entry_headline, htmlEntryLine(c), 0, 0, 1); $("dialog_entryline_number").focus(); $("dialog_entryline_number").onchange = new Function("chkGuildParkEntry(" + a + ", " + b + ")"); $("dialog_entryline_number").onkeyup = new Function("chkGuildParkEntry(" + a + ", " + b + ")"); chkGuildParkEntry(a, b); }
function chkGuildParkEntry(a, b) { var c = { stockamount: guildpark_stock[a], rest: b, click: "sendGuildPark(" + a + ")" }; checkEntryLine(c); }
function sendGuildPark(a) { if ($("dialog_entryline_number").value > 0) {
    var b = { id: sculptureid, pid: a, amount: $("dialog_entryline_number").value };
    guildAction("sendguildpark", b);
} }
function showGuildParkStats() { if (guildparkstats[sculptureid]) {
    if ($("guildparksstats_container").style.display == "block") {
        hideDiv("guildparksstats_container");
        hideDiv("guildparksstats_container_transp");
        $("guildparkcompareimg").style.backgroundImage = "url(" + imgpath + "guild/plus.gif)";
    }
    else {
        hideDiv("guildpark_ownguild");
        showDiv("guildparksstats_container");
        showDiv("guildparksstats_container_transp");
        $("guildparkcompareimg").style.backgroundImage = "url(" + imgpath + "guild/minus.gif)";
        var c = 0;
        var d = 0;
        var b = "";
        for (var a = 0; a < guildparkstats[sculptureid].length; a++) {
            if (c != guildparkstats[sculptureid][a][2]) {
                d++;
            }
            var h = "";
            if (guildparkstats[sculptureid][a][4] == 1) {
                h = "font-weight:bold;";
                showDiv("guildpark_ownguild");
            }
            var e = d + ".";
            if (c == guildparkstats[sculptureid][a][2]) {
                var e = "&nbsp;";
            }
            b += '<div style="margin-bottom:4px;">';
            if (guildparkstats[sculptureid][a][4] == 1) {
                b += '<a name="guildparkownguild"></a>';
            }
            b += '  <div style="float:left; width:30px; text-align:right; margin-right:5px;">' + e + "</div>";
            b += '  <div style="float:left; width:200px; margin-right:5px; ' + h + '">' + guildparkstats[sculptureid][a][1] + "&nbsp;[" + guildparkstats[sculptureid][a][3] + "]</div>";
            b += '  <div style="float:left; position:relative; width:200px; height:15px; background-color:#000; overflow:hidden; margin-right:5px;">';
            b += '    <div style="position:absolute; background-color:#f00; height:15px; width:' + guildparkstats[sculptureid][a][2] + '%"></div>';
            b += "  </div>";
            b += '  <div style="float:left;">' + guildparkstats[sculptureid][a][2] + "%</div>";
            b += '  <div class="clear"></div>';
            b += "</div>";
            c = guildparkstats[sculptureid][a][2];
        }
        $("guildparksstats_container_content").innerHTML = b;
    }
} }
function showGuildParkEntryLine() { if ($("guildparkentries").style.display == "block") {
    hideDiv("guildparkentriestransp");
    hideDiv("guildparkentries");
    $("guildparkentriesimg").style.background = "url(" + imgpath + "guild/plus.gif)";
}
else {
    showDiv("guildparkentriestransp");
    showDiv("guildparkentries");
    $("guildparkentriesimg").style.background = "url(" + imgpath + "guild/minus.gif)";
} }
function closeGuildPark() { hideDiv("transp9"); hideDiv("guildpark"); }
function showGuildMedalcase(l) { var e = ""; var d = {}; for (var c = 0; c < infoguildquests.length; c++) {
    if (infoguildquests[c]["success"] > 0) {
        d[infoguildquests[c]["id"]] = infoguildquests[c]["success"];
    }
} for (var c = 1; c <= 130; c++) {
    var b = "left";
    if (c % 22 > 15 || c % 22 == 0) {
        b = "right";
    }
    var a = "";
    var h = "<div>" + t_quest_foodworld + "&nbsp;" + c + "</div>";
    if (d[c]) {
        if (d[c] >= guildmedalboxbronze) {
            a = "guild_medalcase_bronze";
        }
        if (d[c] >= guildmedalboxsilver) {
            a = "guild_medalcase_silver";
        }
        if (d[c] >= guildmedalboxgold) {
            a = "guild_medalcase_gold";
        }
        if (d[c] >= guildmedalboxplatin) {
            a = "guild_medalcase_platin";
        }
        h += '<div class="bonusinfo">' + str_replace("%SUCCESS%", d[c], guildquestlist_success_tt) + "</div>";
    }
    e += '<div class="guild_medalcase_item link ' + a + '" onmouseover="showDiv(\'guild_medalcase_tt' + c + "')\" onmouseout=\"hideDiv('guild_medalcase_tt" + c + "')\">";
    e += '  <div id="guild_medalcase_tt' + c + '" class="ttbox guild_medalcase_item_tt_' + b + '">' + h + "</div>";
    e += "</div>";
    if (c % 22 == 0) {
        e += '<div class="clear"></div>';
    }
} $("guildmedalcasecontent").innerHTML = e; showDiv("guildmedalcase"); }
function initGuildAchievements() { guildAction("achievementsinit"); }
function buildGuildAchievements(a) { for (var b in a) {
    if ($("guildachievement" + b)) {
        $("guildachievement" + b).addClassName("gach" + b + "off");
        $("guildachievement" + b).removeClassName("gach" + b);
        if (a[b].date) {
            $("guildachievement" + b).removeClassName("gach" + b + "off");
            $("guildachievement" + b).addClassName("gach" + b);
            $("guildachievements_item_tt_time" + b).innerHTML = a[b].date;
        }
    }
} }
function closeguildachievements() { hideDiv("transp9"); hideDiv("guildachievements"); }
var guildjob_quickview = {};
var guildjob_quickview_mover = 0;
function guildJobQuickView() { showDiv("guildjob_quickview"); setTimer("guildjob_quickview"); if (job_data && job_data.config) {
    var e = '<div style="font-weight:bold; margin-bottom:5px;">' + t_guildjob_current_job + "</div>";
    e += '<div style="margin-bottom:2px;">' + t_guildjob_need_jobs + ":</div>";
    for (var d = 0; d < guildjob_quickview.data.jobs.length; d++) {
        var n = "opacity:0.3";
        if (job_data.currentjob == guildjob_quickview.data.jobs[d]) {
            n = "";
        }
        e += '<div class="link" style="float:left; position:relative; margin-right:5px; width:50px; height:50px;" onclick="showJobOverview()" onmouseover="showDiv(\'guildjob_quickview_job_tt' + d + "')\" onmouseout=\"hideDiv('guildjob_quickview_job_tt" + d + "')\">";
        e += '  <div style="position:absolute; width:100%; height:100%; ' + n + '" class="job_jobsymbol_mini job_jobsymbol' + guildjob_quickview.data.jobs[d] + '_mini"></div>';
        if (n == "") {
            n = "<br>" + t_guildjob_memberjob_select;
        }
        else {
            n = "";
        }
        e += '  <div id="guildjob_quickview_job_tt' + d + '" class="ttbox" style="left:50px;"><b>' + job_data.config.jobs[guildjob_quickview.data.jobs[d]].name + "</b>" + n + "</div>";
        e += "</div>";
    }
    e += '<div class="clear"></div>';
    $("guildjob_quickview_info_jobs").innerHTML = e;
    e = '<div style="margin-bottom:2px;">' + t_guildjob_need_products + ":</div>";
    for (var d in guildjob_quickview.data.products) {
        var n = "opacity:0.3";
        if (in_array(d, job_data.config.jobs[job_data.currentjob].products)) {
            n = "";
        }
        e += '<div style="float:left; position:relative; margin-right:5px; margin-bottom:5px; width:50px; height:50px;" onmouseover="showDiv(\'guildjob_quickview_product' + d + "_tt')\" onmouseout=\"hideDiv('guildjob_quickview_product" + d + "_tt')\">";
        e += '  <div class="tt' + d + '" style="position:absolute; top:0px; border-radius:5px; ' + n + '"></div>';
        e += '  <div id="guildjob_quickview_product' + d + '_tt" class="ttbox" style="left:50px;">' + produkt_name[d] + "</div>";
        e += '  <div style="position:absolute; bottom:0px; left:0px; width:100%; height:5px; background-color:#000;">';
        var l = 0;
        if (guildjob_quickview.data.entries && guildjob_quickview.data.entries[d]) {
            l = ((guildjob_quickview.data.entries[d] * 100) / guildjob_quickview.data.products[d]);
        }
        e += '    <div style="position:absolute; top:0px; left:0px; width:' + l + '%; height:5px; background-color:#f00;"></div>';
        e += "  </div>";
        if (n == "") {
            var m = 0;
            if (in_array(produkt_category[d], ["v", "hr"])) {
                m = 1;
            }
            for (var c in farms_data.config.building2product) {
                if (farms_data.config.building2product[c] == d) {
                    m = c;
                }
            }
            if (!m) {
                for (var c in farms_data.config.advancedbuilding) {
                    for (var b = 0; b < farms_data.config.advancedbuilding[c].length; b++) {
                        if (farms_data.config.advancedbuilding[c][b][2] == d) {
                            m = c;
                        }
                    }
                }
            }
            if (m > 0) {
                start: for (var h in farms_data.farms) {
                    for (var a in farms_data.farms[h]) {
                        if (farms_data.farms[h][a].buildingid == m && (m == 1 || !farms_data.farms[h][a].production)) {
                            e += '<div class="button_new link" style="position:absolute; top:50px; text-align:center; width:42px;" onclick="guildJobQuickViewOpenBuilding(' + h + ", " + a + ", " + m + ')">';
                            e += '  <div style="margin-left:20px; border-color:transparent transparent transparent #000; border-style:solid; border-width:6px; height:0px; width:0px;"></div>';
                            e += "</div>";
                            break start;
                        }
                    }
                }
            }
        }
        e += "</div>";
    }
    e += '<div class="clear"></div>';
    $("guildjob_quickview_info_products").innerHTML = e;
} guildJobQuickViewUpdate(); }
function guildJobQuickViewOpenBuilding(b, c, a) { guildJobQuickViewNavi(); farmMove(b); if (a == 1) {
    setTimeout(function () { specialZoneFieldHandler(c); }, 200);
}
else {
    setTimeout(function () { initLocation(c); }, 200);
} }
function guildJobQuickViewUpdate() { $("guildjob_quickview_timer").innerHTML = formatTime(guildjob_quickview.remain); }
function guildJobQuickViewTimer() { guildjob_quickview.remain--; if (guildjob_quickview.remain > 0) { }
else {
    clearTimer("guildjob_quickview");
    hideDiv("guildjob_quickview");
} guildJobQuickViewUpdate(); }
function guildJobQuickViewNavi() { if (guildjob_quickview_mover) {
    hideDiv("guildjob_quickview_info");
    guildjob_quickview_mover = 0;
}
else {
    showDiv("guildjob_quickview_info");
    guildjob_quickview_mover = 1;
} }
var guild_job = {};
function guildJobInit(a) { guildAction("job_init", { page: a }); }
function guildJobChangeMemberJob(a) { guildAction("memberjob_change", { job: a }); }
function guildJobGamble() { guildAction("job_gamble"); }
function guildJobSetBoost(a) { guildAction("job_set_boost", { pid: a }); }
function guildStockSlotEntry(c, a, b) { guildAction("stock_slot_entry", { slot: c, pid: a, type: b, amount: $("dialog_entryline_number").value }); }
function guildStockSlotUnlock(a) { guildAction("stock_slot_unlock", { slot: a }); }
function guildStockDeleteProduct(a) { guildAction("stock_delete_product", { pid: a }); }
function guildJobJoin() { guildAction("job_join"); }
function guildJobStartJob(a) { guildAction("job_start", { difficulty: a }); }
function guildJobEntry(a) { guildAction("job_entry", { pid: a, amount: $("dialog_entryline_number").value }); }
function guildJobAddMember() { guildAction("add_jobmember"); }
function guildJobBuyPoints(a) { guildAction("job_buy_points", { coins: a }); }
function guildJobFinish() { guildAction("job_finish"); }
function guildJobSetTool(a) { guildAction("job_set_tool", { pid: a }); }
function guildJobSetToolCommit(a) { if (!job_data.guild_job_data) {
    var b = "<div>" + t_guildjob_tools_and_booster_warning + "</div>";
    b += '<div style="margin-top:10px; font-weight:bold;">' + t_guildjob_no_current_job_commit + "</div>";
    var c = "guildJobSetTool(" + a + ")";
    globalcommitbox(t_guildjob_no_current_job, b, c);
}
else {
    guildJobSetTool(a);
} }
function guildJobStartJobCommit(c) { var l = {}; for (var d = 0; d < guild_job.members.length; d++) {
    l[guild_job.members[d].unr] = guild_job.members[d].uname;
} var e = "guildJobStartJob(" + c + ")"; var b = "<div>" + t_guildjob_start_body + "</div>"; b += '<div style="margin-top:10px; font-weight:bold;">' + t_guildjob_member_confirmed + ":</div>"; var h = 0; for (var a in guild_job.job.jobs) {
    if (a == player_unr) {
        h = 1;
    }
    b += "<div>" + l[a] + "</div>";
} if (!h) {
    b += '<div style="margin-top:10px; background-color:#C3A75E; border-radius:5px; padding:10px;">' + t_guildjob_start_body_join + "</div>";
} globalcommitbox(t_guildjob_start_head, b, e); }
function guildJobStats() { var a = "points"; if ($("guild_job_stats_select")) {
    a = $("guild_job_stats_select").value;
} guild_job_stats_select = a; if (guild_job_stats_cache_delay[a] && guild_job_stats_cache_delay[a] > 0) {
    showGuildJobStats(a);
}
else {
    guildAction("job_stats", { type: a });
} }
function initGuildJobBox() { showDiv("transp9"); showDiv("guild_job_box"); naviGuildJob(1); setTimer("guildjob"); showDiv("guild_job_jobselect_timer_bar"); $("guild_job_levelbar").innerHTML = htmlLevelBar("guild_job", 0, 0); $("guild_job_countbar").innerHTML = htmlCountBar("guild_job"); $("guild_job_countbar_inner").innerHTML = '<div class="guildjob_orderpoints" style="float:left; margin:-5px 5px 0px -5px;"></div><div style="float:left;">' + guild_job.job.count + '</div><div class="clear"></div>'; $("guild_job_countbar_plus").onclick = new Function("guildJobDialog('buy_points')"); $("guild_job_countbar_plus_tt").innerHTML = t_guildjob_points_buy; $("guild_job_levelbar_number").innerHTML = guild_job.job.level; $("guild_job_levelbar_inner").style.width = guild_job.job.level_progress + "%"; $("guild_job_levelbar_plus").onclick = new Function("guildJobDialog('add_level')"); $("guild_job_levelbar_plus_tt").innerHTML = t_guildjob_points_add; var a = str_replace("%AMOUNT%", (guild_job.job.next_level_points - guild_job.job.points), t_guildjob_level_tt); if (!guild_job.config.level[(guild_job.job.level + 1)]) {
    a = t_reached_maxlevel;
    hideDiv("guild_job_levelbar_plus");
} if (!checkGuildJobMemberStatus("levelbar")) {
    hideDiv("guild_job_levelbar_plus");
} $("guild_job_levelbar_tt").innerHTML = a; hideDiv("guildbanner_back"); }
function closeGuildJobBox() { showDiv("guildbanner_back"); hideDiv("transp9"); hideDiv("guild_job_box"); }
function naviGuildJob(b) { for (var a = 1; a <= 4; a++) {
    $("guild_job_box_navi" + a).removeClassName("brown_tab_active");
    if (b == a) {
        $("guild_job_box_navi" + b).addClassName("brown_tab_active");
    }
} if (b == 1) {
    buildGuildJobInfoboard();
}
else {
    if (b == 2) {
        buildGuildJobMemberlist();
    }
    else {
        if (b == 3) {
            buildGuildJobStock();
        }
        else {
            if (b == 4) {
                buildGuildJobLog();
            }
        }
    }
} }
function buildGuildJobInfos() { var c = ""; if (guild_job.job.startdate == 0) {
    var a = {};
    for (var b in guild_job.job.jobs) {
        if (guild_job.job.jobs[b] > 0) {
            if (!a[guild_job.job.jobs[b]]) {
                a[guild_job.job.jobs[b]] = 0;
            }
            a[guild_job.job.jobs[b]]++;
        }
    }
    c += '<div id="guild_job_jobselect_box">';
    c += '  <div style="float:left; padding:5px; margin-right:5px;">';
    c += '    <div style="margin-bottom:5px;">' + t_guildjob_need_jobs + "</div>";
    for (var b = 0; b < guild_job.job.data.jobs.length; b++) {
        var e = guild_job.job.data.jobs[b];
        c += '<div style="position:relative; float:left; margin-right:5px;" class="job_jobsymbol_mini job_jobsymbol' + e + '_mini link" onclick="showJobOverview()" onmouseover="showDiv(\'guild_job_jobselect_job' + b + "_" + e + "_tt')\" onmouseout=\"hideDiv('guild_job_jobselect_job" + b + "_" + e + "_tt')\">";
        var d = "<div>" + job_data.config.jobs[e].name + "</div>";
        if (a[e]) {
            d += '<div style="margin-top:2px;">' + t_guildjob_take_part + ":&nbsp;" + a[e] + "</div>";
        }
        c += '  <div id="guild_job_jobselect_job' + b + "_" + e + '_tt" class="guild_job_jobselect_job_tt ttbox">' + d + "</div>";
        c += "</div>";
    }
    c += '    <div class="clear"></div>';
    c += "  </div>";
    c += '  <div style="float:left; padding:5px; margin-right:5px;">';
    c += '    <div style="margin-bottom:5px;">' + t_guildjob_need_products + "</div>";
    for (pid in guild_job.job.data.products) {
        c += htmlProductSymbol(pid, "guild_job_jobselect_product", "l", "guild_job_jobselect_product", "guild_job_jobselect_product_tt");
    }
    c += '    <div class="clear"></div>';
    c += "  </div>";
    c += '  <div style="float:right">';
    if (checkGuildJobMemberStatus("gamble")) {
        c += '<div class="megafield_job_gamble link" style="margin-top:7px;" onclick="guildJobDialog(\'gamble_job\')" onmouseover="showDiv(\'guild_job_jobselect_gamble_tt\')" onmouseout="hideDiv(\'guild_job_jobselect_gamble_tt\')">';
        c += '  <div id="guild_job_jobselect_gamble_tt" class="ttbox">' + str_replace("%COINS%", guild_job.config.job_gamble_coins, t_guildjob_change_jobs) + "</div>";
        c += "</div>";
    }
    c += "  </div>";
    c += '  <div class="clear"></div>';
    c += "</div>";
} c += '<div id="guild_job_jobselect_timer_bar">'; c += '  <div id="guild_job_jobselect_timer_bar_inner"></div>'; c += '  <div id="guild_job_jobselect_timer"></div>'; c += "</div>"; return c; }
function buildGuildJobInfoboard() { var r = ""; r += buildGuildJobInfos(); if (guild_job.job.startdate > 0 && guild_job.job.startdate > 0) {
    var I = 1;
    var D = 0;
    var l = 0;
    var d = 0;
    var s = 0;
    var b = 20;
    var c = '<div id="guild_job_products">';
    for (var z in guild_job.job.data.products) {
        var A = 0;
        if (guild_job.job.data.entries && guild_job.job.data.entries[z]) {
            A = guild_job.job.data.entries[z];
        }
        var B = "";
        if (guild_job.stock.stock[z] && A < guild_job.job.data.products[z] && checkGuildJobMemberStatus("jobentry")) {
            B = "guildJobDialog('job_entry', " + z + ")";
        }
        var I = (guild_job.config.difficulty[guild_job.job.difficulty].steps_amount.length - 1);
        c += '<div class="product" style="z-index:' + (b--) + '">';
        c += '  <div class="img l' + z + '" onmouseover="showDiv(\'guild_job_product' + z + "_tt')\" onmouseout=\"hideDiv('guild_job_product" + z + "_tt')\">";
        c += '    <div id="guild_job_product' + z + '_tt" class="ttbox">' + produkt_name[z] + "</div>";
        c += '    <div class="guildjob_orderpoints"></div>';
        c += "  </div>";
        c += '  <div class="bar link" onclick="' + B + '">';
        var a = Math.min((A * 100 / guild_job.job.data.products[z]), 100);
        var e = "";
        if (guild_job.reward.reached > -1) {
            e = "reached";
        }
        c += '    <div class="inner ' + e + '" style="width:' + a + '%"></div>';
        var n = 10;
        for (var J = 0; J <= I; J++) {
            var m = guild_job.job.data.products[z];
            var e = "";
            var a = guild_job.config.difficulty[guild_job.job.difficulty].steps_amount[J] * 100;
            if (J == I) {
                e = "last";
                a = 100;
            }
            else {
                var m = Math.ceil(guild_job.job.data.products[z] * guild_job.config.difficulty[guild_job.job.difficulty].steps_amount[J]);
            }
            c += '<div class="step ' + e + '" style="width:' + a + "%; z-index:" + (n--) + '" onmouseover="showDiv(\'guild_job_product' + z + "_step" + J + "_tt')\" onmouseout=\"hideDiv('guild_job_product" + z + "_step" + J + "_tt')\">";
            c += '  <div id="guild_job_product' + z + "_step" + J + '_tt" class="ttbox">';
            c += '    <div class="percent">' + a + "%</div>";
            if (J == 0) {
                c += "<div>" + t_min_sum + "</div>";
            }
            c += "    <div>" + lotterylotsrequired + "</div>";
            c += "    <div>" + formatNumber(m) + "/" + formatNumber(guild_job.job.data.products[z]) + "</div>";
            c += "  </div>";
            c += "</div>";
        }
        if (!guild_job.stock.stock[z]) {
            c += '<div class="block important" class="important">' + product_notavailable_info + "</div>";
        }
        c += "  </div>";
        c += '  <div class="amount">' + formatNumber(A) + "/" + formatNumber(guild_job.job.data.products[z]) + "</div>";
        c += '  <div class="clear"></div>';
        c += "</div>";
        s += guild_job.job.data.products[z];
        d += A;
        l++;
    }
    c += "</div>";
    r += '<div style="position:absolute; right:19px; z-index:10; top:13px;" class="refresh link" onclick="guildJobInit()" onmouseover="showDiv(\'guild_job_refresh_tt\')" onmouseout="hideDiv(\'guild_job_refresh_tt\')">';
    r += '  <div id="guild_job_refresh_tt" class="ttbox" style="right:20px;">' + guildnewsrefresh + "</div>";
    r += "</div>";
    if (!guild_job.job.joinedtask) {
        r += '<div class="important" style="position:absolute; top:215px; width:500px;">' + t_guildjob_not_take_part + "</div>";
    }
    var y = "";
    if (!checkGuildJobMemberStatus("jobentry")) {
        y = "&nbsp;(" + t_guildjob_insert_only + ")";
    }
    r += '<div class="guild_job_memberlist_item_head" style="margin-bottom:5px;">' + t_need_products + y + "</div>";
    r += '  <div style="overflow:auto; height:205px; margin:5px 0px;">' + c + "</div>";
    r += '<div class="guild_job_memberlist_item_head">' + t_current_reward + "</div>";
    r += '<div style="position:absolute; width:548px; margin:0 auto;">';
    var I = (guild_job.config.difficulty[guild_job.job.difficulty].steps_taskpoints.length - 1);
    var a = 0;
    var v = t_guildjob_reward_goal_none;
    if (guild_job.reward.reached == I) {
        a = 100;
        v = t_guildjob_reward_goal_final;
    }
    else {
        if (guild_job.reward.reached > -1) {
            a = (guild_job.config.difficulty[guild_job.job.difficulty].steps_amount[guild_job.reward.reached] * 100);
            if (guild_job.reward.reached == 0) {
                v = t_guildjob_reward_goal_step0;
            }
            else {
                v = t_guildjob_reward_goal_step;
            }
            v = str_replace("%PERCENT%", a, v);
            v = str_replace("%STEP%", (guild_job.reward.reached + 1), v);
        }
    }
    r += '<div id="guild_job_reward_status">';
    r += '  <div class="inner" style="width:' + a + '%"></div>';
    for (var J = 0; J <= I; J++) {
        var a = (guild_job.config.difficulty[guild_job.job.difficulty].steps_amount[J] * 100);
        if (J == I) {
            a = 100;
        }
        r += '<div class="step" style="width:' + a + '%"></div>';
    }
    r += '  <div class="istext">' + v + "</div>";
    r += "</div>";
    var H = 0;
    for (var F in guild_job.reward.player_points) {
        if (parseInt(F) == parseInt(player_unr)) {
            H = guild_job.reward.player_points[F];
        }
    }
    r += '<div id="guild_job_reward_player">';
    r += '  <div class="headline">' + t_guildjob_player_reward + "</div>";
    r += '  <div class="icon_star"></div>';
    r += '  <div class="points">' + formatNumber(H) + "&nbsp;" + t_points + "</div>";
    r += '  <div class="clear"></div>';
    for (var F in guild_job.reward.job_points) {
        if (parseInt(F) == parseInt(player_unr)) {
            r += '  <div class="guildjob_jobpoints"></div>';
            r += '  <div class="points2">';
            for (var G in guild_job.reward.job_points[F]) {
                r += '<div class="job_jobsymbol' + G + '_mini job_jobsymbol_mini"></div>';
                r += '<div class="points">' + formatNumber(guild_job.reward.job_points[F][G]) + "&nbsp;" + t_guildjob_jobpoints + "</div>";
                r += '<div class="clear"></div>';
            }
            r += "  </div>";
            r += '  <div class="clear"></div>';
        }
    }
    r += '  <div class="bonusinfo">' + t_guildjob_reward_player_info + "</div>";
    r += "</div>";
    var K = Math.round(guild_job.config.production[guild_job.job.data.configuration].taskpoints * guild_job.config.difficulty[guild_job.job.difficulty].steps_taskpoints[I]);
    r += '<div id="guild_job_reward_guild">';
    r += '  <div class="headline">' + t_guildjob_guild_reward + "</div>";
    for (var J = 1; J <= 2; J++) {
        var e = "";
        if (guild_job.reward.reached == -1) {
            e = "active";
        }
        if (J == 1) {
            r += '<div class="column' + J + '">' + guildwbwrankingamount + '</div><div class="column' + J + '">0%</div>';
        }
        if (J == 2) {
            r += '<div class="guildjob_orderpoints column' + J + '"></div><div class="column' + J + " " + e + '">0</div>';
        }
        for (var E = 0; E < guild_job.config.difficulty[guild_job.job.difficulty].steps_taskpoints.length; E++) {
            var a = guild_job.config.difficulty[guild_job.job.difficulty].steps_amount[E] * 100;
            if (E == I) {
                a = 100;
            }
            var m = K;
            if (E < I) {
                m = Math.round(K * guild_job.config.difficulty[guild_job.job.difficulty].steps_taskpoints[E]);
            }
            if (J == 1) {
                r += '<div class="column' + J + '">' + a + "%</div>";
            }
            if (J == 2) {
                var e = "";
                if (E == guild_job.reward.reached) {
                    e = "active";
                }
                r += '<div class="column' + J + " " + e + '">' + m + "</div>";
            }
        }
        r += '<div class="clear"></div>';
    }
    r += "</div>";
    r += "</div>";
    r += '<div id="guild_job_finish_button">';
    r += '  <div id="guild_job_finish_button_inner">';
    r += "    <div>" + t_guildjob_finish_job_info + "</div>";
    if (checkGuildJobMemberStatus("finishjob")) {
        r += '<div class="button_new link" style="margin-top:10px;" onclick="guildJobFinish()">' + t_guildjob_finish_job + "</div>";
    }
    r += "  </div>";
    r += "</div>";
    r += '<div class="clear"></div>';
}
else {
    if (specialbonus && specialbonus.data && specialbonus.data.guild && specialbonus.data.guild.products_reduction_animal && specialbonus.data.remain > 0) {
        r += '<div class="specialbonus" style="text-align:center; font-weight:bold; margin-top:5px;">' + t_specialbonus_guild_products_reduction_animal_inguild.replace("%BONUS%", (specialbonus.data.guild.products_reduction_animal * 100)) + "</div>";
    }
    var q = "";
    if (checkGuildJobMemberStatus("startjob")) {
        var q = "onmouseover=\"this.style.transform='scale(1.02)'\" onmouseout=\"this.style.transform='scale(1)'\"";
        var h = t_farmersmarket_job_select_difficulty;
    }
    else {
        var h = "";
    }
    r += '<div style="padding:4px; text-align:center; margin-top:5px; font-weight:bold;">' + h + "</div>";
    r += '<div style="position:relative; margin-left:5px; width:558px;">';
    if (!checkGuildJobMemberStatus("startjob")) {
        for (var J = 0; J < guild_job.members.length; J++) {
            if (guild_job.members[J].unr == player_unr) {
                r += '<div style="background-color:#C3A75E; width:100%; border-radius:5px; text-align:center; padding:20px 0px;">';
                if (job_data.currentjob) {
                    var L = t_guildjob_memberjob_job_check;
                    r += "<div>" + t_guildjob_memberjob_select + "</div>";
                    r += '<div class="job_jobsymbol_mini job_jobsymbol' + job_data.currentjob + '_mini link" style="margin:0 auto; margin-top:5px;" onclick="showJobOverview()"></div>';
                    if (parseInt(job_data.jobs[job_data.currentjob].joined) == 1) {
                        if (guild_job.job.jobs[player_unr]) {
                            r += '<div style="margin-top:10px;">' + t_guildjob_start_ready + "</div>";
                        }
                        else {
                            r += '<div style="margin-top:10px;">' + t_guildjob_start_wait + "</div>";
                        }
                        L = t_guildjob_start_undone;
                    }
                    else {
                        r += '<div style="margin-top:10px;">' + t_guildjob_start_join + "</div>";
                    }
                    r += '<div class="button_new link" style="width:200px; margin:0 auto; margin-top:5px;" onclick="guildJobDialog(\'job_check\', ' + J + ')">' + L + "</div>";
                }
                else {
                    r += "<div>" + t_guildjob_start_need_job + "</div>";
                    r += '<div class="button_new link" style="width:200px; margin:0 auto; margin-top:5px;" onclick="showJobOverview()">' + t_guildjob_start_need_job_button + "</div>";
                }
                r += "</div>";
                break;
            }
        }
    }
    else {
        var w = 0;
        if (guild_job.job.jobs) {
            for (var J in guild_job.job.jobs) {
                if (guild_job.job.jobs[J] > 0) {
                    w++;
                }
            }
        }
        for (var J = 1; J <= 3; J++) {
            var u = t_difficulty[J];
            if (J == 1) {
                u = t_difficulty[3];
            }
            if (J == 3) {
                u = t_difficulty[1];
            }
            r += '<div class="guild_job_jobselect_job_box" ' + q + ">";
            r += '  <div style="text-align:center; color:#6C441D; font-size:12px; font-weight:bold;">' + u + "</div>";
            r += '  <div class="guild_job_difficulty' + J + '"></div>';
            r += '  <div id="guild_job_jobselect_membercount' + J + '">';
            r += '    <div style="margin-bottom:2px;">' + t_guildjob_need_member_count + ":</div>";
            var y = "";
            if (guild_job.job.data.memberadd) {
                y = '<span style="color:green;">+' + guild_job.job.data.memberadd.length + "</span>";
            }
            r += '    <div style="float:left; margin-top:3px; font-size:14px; font-weight:bold; margin-left:37px;">' + guild_job.config.difficulty[J].min + "&nbsp;-&nbsp;" + guild_job.config.difficulty[J].max + "&nbsp;" + y + "</div>";
            var C = 1;
            if (guild_job.job.data.memberadd && guild_job.job.data.memberadd.length >= guild_job.config.addmembers_max) {
                C = 0;
            }
            if (checkGuildJobMemberStatus("addmemberspace") && C == 1) {
                r += '<button class="button_new link" style="float:left; width:24px; font-size:14px; margin-left:4px;" onclick="guildJobDialog(\'add_jobmember\')">+</button>';
            }
            r += '    <div class="clear"></div>';
            r += "  </div>";
            var I = guild_job.config.difficulty[J].max;
            if (guild_job.job.data.memberadd) {
                I += guild_job.job.data.memberadd.length;
            }
            var t = (parseInt(guild_job.config.difficulty[J].min) - parseInt(w));
            if (parseInt(w) > I) {
                r += '<div id="guild_job_jobselect_maxmember' + J + '" style="position:absolute; bottom:5px; width:95%;">' + str_replace("%COUNT%", (parseInt(w) - I), t_guildjob_to_much_member_for_start) + "</div>";
            }
            else {
                if (t > 0) {
                    r += '<div id="guild_job_jobselect_minmember' + J + '" style="position:absolute; bottom:5px; width:95%;">' + str_replace("%COUNT%", t, t_guildjob_need_member_for_start) + "</div>";
                }
                else {
                    r += '<button id="guild_job_jobselect_start' + J + '" style="position:absolute; bottom:5px; width:171px;" class="button_new link" onclick="guildJobStartJobCommit(' + J + ')">' + t_megafield_job_select + "</button>";
                }
            }
            r += '  <div id="guild_job_jobselect_block' + J + '" class="big_block"></div>';
            r += '  <div id="guild_job_jobselect_blockinfo' + J + '" class="guild_job_jobselect_blockinfo important">' + str_replace("%LEVEL%", guild_job.config.difficulty[J].level, t_guildjob_need_level) + "</div>";
            r += "</div>";
        }
    }
    r += '  <div class="clear"></div>';
    r += "</div>";
} $("guild_job_box_inner").innerHTML = r; for (var J in guild_job.config.difficulty) {
    if (guild_job.config.difficulty[J].level > guild_job.job.level) {
        showDiv("guild_job_jobselect_block" + J);
        showDiv("guild_job_jobselect_blockinfo" + J);
        hideDiv("guild_job_jobselect_membercount" + J);
        if ($("guild_job_jobselect_minmember" + J)) {
            hideDiv("guild_job_jobselect_minmember" + J);
        }
        if ($("guild_job_jobselect_maxmember" + J)) {
            hideDiv("guild_job_jobselect_maxmember" + J);
        }
        if ($("guild_job_jobselect_start" + J)) {
            hideDiv("guild_job_jobselect_start" + J);
        }
    }
    else {
        hideDiv("guild_job_jobselect_block" + J);
        hideDiv("guild_job_jobselect_blockinfo" + J);
        showDiv("guild_job_jobselect_membercount" + J);
        if ($("guild_job_jobselect_minmember" + J)) {
            showDiv("guild_job_jobselect_minmember" + J);
        }
        if ($("guild_job_jobselect_maxmember" + J)) {
            showDiv("guild_job_jobselect_maxmember" + J);
        }
        if ($("guild_job_jobselect_start" + J)) {
            showDiv("guild_job_jobselect_start" + J);
        }
    }
} }
function buildGuildJobMemberlist() { var h = ""; h += buildGuildJobInfos(); var b = 310; if (guild_job.job.startdate > 0 && guild_job.job.startdate > 0) {
    b = 395;
} h += '<div style="height:' + b + 'px; overflow:auto; margin-top:20px;">'; h += '  <div class="guild_job_memberlist_item_blank">'; h += '    <select id="guild_job_memberlist_filter" class="link guild_job_memberlist_filter" onchange="setGuildJobMemberFilter()" style="width:160px; margin-right:20px; border-radius:5px; border:0px; padding:2px;">'; h += '      <option value="0">---</option>'; for (jobid in guild_job.config.jobs) {
    h += '<option value="' + jobid + '">' + guild_job.config.jobs[jobid].name + "</option>";
} h += '      <option value="confirmed">' + t_guildjob_member_confirmed + "</option>"; h += '      <option value="unconfirmed">' + t_guildjob_member_unconfirmed + "</option>"; h += "    </select>"; h += '    <div class="guild_job_memberlist_currentjob head">' + t_guildjob_memberjob_job_head + "</div>"; h += '    <div class="guild_job_memberlist_check head">' + t_guildjob_memberjob_job_check + "</div>"; h += '    <div class="guild_job_memberlist_join head">' + t_guildjob_memberjob_job_joined + "</div>"; h += '    <div style="float:right;" class="refresh link" onclick="guildJobInit(2);" onmouseover="showDiv(\'guild_job_memberlist_refresh_tt\')" onmouseout="hideDiv(\'guild_job_memberlist_refresh_tt\')">'; h += '      <div id="guild_job_memberlist_refresh_tt" class="ttbox" style="right:20px;">' + guildnewsrefresh + "</div>"; h += "    </div>"; h += '    <div class="clear"></div>'; h += "  </div>"; var c = ""; var a = ""; for (var e = 0; e < guild_job.members.length; e++) {
    var d = "";
    d += '<div id="guild_job_memberlist_item' + e + '" class="guild_job_memberlist_item">';
    d += '  <div id="guild_job_memberlist_status' + e + '" class="guild_job_memberlist_status">&nbsp;</div>';
    d += '  <div id="guild_job_memberlist_name' + e + '" class="link guild_job_memberlist_name"></div>';
    d += '  <div id="guild_job_memberlist_currentjob' + e + '" class="guild_job_memberlist_currentjob"></div>';
    d += '  <div id="guild_job_memberlist_check' + e + '" class="guild_job_memberlist_check"></div>';
    d += '  <div id="guild_job_memberlist_join' + e + '" class="guild_job_memberlist_join"></div>';
    d += '  <div class="clear"></div>';
    d += '  <div id="guild_job_memberlist_data' + e + '" class="guild_job_memberlist_data"></div>';
    d += "</div>";
    if (guild_job.members[e].self) {
        c += d;
    }
    else {
        a += d;
    }
} h += '  <div class="guild_job_memberlist_item_head">' + t_guildjob_member_self + "</div>"; h += c; h += '  <div class="guild_job_memberlist_item_head">' + t_guildjob_member_other + "</div>"; h += a; $("guild_job_box_inner").innerHTML = h; h += "</div>"; for (var e = 0; e < guild_job.members.length; e++) {
    buildGuildJobMemberlistEntry(e);
} }
function buildGuildJobStock() { var d = ""; d += '<div id="guildstock">'; d += '	<div id="guildstock_slots">'; for (var c = 1; c <= guild_job.config.stock_slots_max; c++) {
    var l = "showGuildJobStockInfo(" + c + ")";
    d += '<div id="guildstock_item' + c + '" class="guildstock_item link" onclick="' + l + '">';
    d += '  <div id="guildstock_item_img' + c + '" class="guildstock_item_img"></div>';
    d += '  <div id="guildstock_item_del' + c + '" class="guildstock_item_del shop_cart_item_del link"></div>';
    d += '  <div id="guildstock_item_amount' + c + '" class="guildstock_item_amount"></div>';
    d += '  <div id="guildstock_item_locked' + c + '" class="guildstock_item_locked"></div>';
    var a = "guildstock_item_top";
    if (c > 25) {
        a = "guildstock_item_bottom";
    }
    d += '  <div id="guildstock_item_tt' + c + '" class="guildstock_item_tt ttbox ' + a + '"></div>';
    d += "</div>";
} d += '    <div class="clear"></div>'; d += "  </div>"; d += '  <div id="guildstock_info"></div>'; d += '  <div class="clear"></div>'; d += "</div>"; $("guild_job_box_inner").innerHTML = d; for (var c = 1; c <= guild_job.config.stock_slots_max; c++) {
    if (c > guild_job.config.stock_slots_base) {
        var e = "";
        var a = "";
        if (!guild_job.stock.slots[c] || (guild_job.stock.slots[c] && guild_job.stock.slots[c].finishdate == 0)) {
            if (guild_job.config.stock_expansion[c].level > guild_job.job.level) {
                $("guildstock_item" + c).style.backgroundColor = "coral";
                a = "locked";
                e = '<div class="important">' + str_replace("%LEVEL%", guild_job.config.stock_expansion[c].level, t_guildjob_stock_slot_locked) + "</div>";
            }
            else {
                if (guild_job.stock.slots[c]) {
                    a = "locked_plus";
                    e = t_guildjob_stock_slot_fill;
                }
                else {
                    $("guildstock_item" + c).style.backgroundColor = "cornflowerblue";
                    a = "unlocked";
                    e = t_guildjob_stock_slot_unlock;
                }
            }
        }
        if (e != "") {
            $("guildstock_item" + c).onmouseover = new Function("showDiv('guildstock_item_tt" + c + "')");
            $("guildstock_item" + c).onmouseout = new Function("hideDiv('guildstock_item_tt" + c + "')");
            $("guildstock_item_tt" + c).innerHTML = e;
        }
        $("guildstock_item_locked" + c).addClassName(a);
    }
} var h = 1; if (guild_job.stock.stock) {
    for (var b in guild_job.stock.stock) {
        if (guild_job.stock.stock[b] > 0) {
            while (h > guild_job.config.stock_slots_base && !(guild_job.stock.slots[h] && guild_job.stock.slots[h].finishdate > 0)) {
                h++;
                if (h >= guild_job.config.stock_slots_max) {
                    break;
                }
            }
            if (checkGuildJobMemberStatus("delstockslot")) {
                showDiv("guildstock_item_del" + h);
            }
            $("guildstock_item_del" + h).onclick = new Function("guildJobDialog('stock_product_delete', " + b + ")");
            $("guildstock_item_img" + h).className = "guildstock_item_img tt" + b;
            $("guildstock_item_amount" + h).innerHTML = guild_job.stock.stock[b];
            $("guildstock_item_tt" + h).innerHTML = produkt_name[b];
            $("guildstock_item" + h).onmouseover = new Function("showDiv('guildstock_item_tt" + h + "')");
            $("guildstock_item" + h).onmouseout = new Function("hideDiv('guildstock_item_tt" + h + "')");
        }
        h++;
    }
} }
function buildGuildJobLog() { if (guild_job.stock_log) {
    var b = '<div style="height:415px; overflow:auto; width:100%;">';
    for (var a = 0; a < guild_job.stock_log.length; a++) {
        b += '<div style="margin-bottom:2px;">';
        b += '  <div style="float:left; width:120px; margin-right:5px;">' + guild_job.stock_log[a].time + "</div>";
        b += '  <div style="float:left; width:50px; text-align:right; margin-right:5px;">' + guild_job.stock_log[a].amount + "x</div>";
        b += '  <div style="float:left; margin-right:5px;" class="kp' + guild_job.stock_log[a].pid + '"></div>';
        b += '  <div style="float:left; width:100px; margin-right:5px;">' + produkt_name[guild_job.stock_log[a].pid] + "</div>";
        b += '  <div style="float:left; width:150px;">' + guild_job.stock_log[a].uname + "</div>";
        b += '  <div class="clear"></div>';
        b += "</div>";
    }
    b += "</div>";
    $("guild_job_box_inner").innerHTML = b;
} }
function setGuildJobMemberlistJobConfirm(a) { guildAction("job_confirm", { unr: guild_job.members[a].unr }); }
function buildGuildJobMemberlistEntry(l) { var h = guild_job.members[l]; var r = 0; if (h.job && h.job.currentjob) {
    r = h.job.currentjob;
} if (h.status == 1 || h.status == 2) {
    $("guild_job_memberlist_status" + l).addClassName("guild_crown" + h.status);
} $("guild_job_memberlist_name" + l).innerHTML = h.uname; var q = "toogleDiv('guild_job_memberlist_data" + l + "')"; $("guild_job_memberlist_name" + l).onclick = new Function(q); if (!r) {
    var c = t_guildjob_memberjob_noselect;
}
else {
    var e = getGuildJobMemberJobLevel(l, r);
    var c = guild_job.config.jobs[r].name + "&nbsp;(" + e.level + ")";
} $("guild_job_memberlist_currentjob" + l).innerHTML = '<div class="job_jobsymbol_mini job_jobsymbol' + r + '_mini link" onclick="showJobOverview();" style="float:left; transform:scale(0.5); margin:-16px 0px;"></div><div style="float:left; width:100px;">' + c + '</div><div class="clear"></div>'; var b = ""; if (h.self && guild_job.job.startdate == 0) {
    if (r > 0) {
        var n = "";
        if (h.job.jobs[r].joined == 1) {
            n = "checked";
        }
        b = '<input id="guild_job_memberlist_checkbox" style="padding:0px; margin:0px;" class="link" type="checkbox" ' + n + " onclick=\"guildJobDialog('job_check', " + l + ')">';
    }
}
else {
    var m = "";
    if (r > 0 && h.job.jobs[r].joined == 1) {
        m = "guildjob_job_confirm_confirmed";
    }
    b = '<div class="' + m + '">&nbsp;</div>';
} $("guild_job_memberlist_check" + l).innerHTML = b; var a = ""; if (checkGuildJobMemberStatus("confirmmember") && guild_job.job.startdate == 0) {
    var n = "";
    for (var d in guild_job.job.jobs) {
        if (d == h.unr) {
            n = "checked";
        }
    }
    if (r > 0 && h.job.jobs[r].joined == 1) {
        var a = '<input id="guild_job_memberlist_confirmbox' + l + '" style="padding:0px; margin:0px;" class="link" type="checkbox" onclick="setGuildJobMemberlistJobConfirm(' + l + ')" ' + n + ">";
    }
    else {
        a = "&nbsp;";
    }
}
else {
    if (r > 0) {
        var m = "guildjob_job_confirm_wait";
        if (guild_job.job.jobs[h.unr]) {
            m = "guildjob_job_confirm_confirmed";
        }
        var a = '<div class="' + m + '">&nbsp;</div>';
    }
} $("guild_job_memberlist_join" + l).innerHTML = a; $("guild_job_memberlist_data" + l).innerHTML = getGuildJobMemberJobData(l); if (guild_job.job.startdate > 0) {
    hideDiv("guild_job_memberlist_item" + l);
    for (var d in guild_job.job.jobs) {
        if (d == h.unr) {
            showDiv("guild_job_memberlist_item" + l);
        }
    }
}
else {
    showDiv("guild_job_memberlist_item" + l);
} }
function getGuildJobMemberJobData(c) { var b = ""; for (var a in guild_job.config.jobs) {
    var d = getGuildJobMemberJobLevel(c, a);
    var e = "";
    if (guild_job.members[c].job.currentjob == a) {
        e = "color:#0f0;";
    }
    b += '<div style="margin-bottom:2px;">';
    b += '  <div style="float:left; width:150px; ' + e + '">' + guild_job.config.jobs[a].name + "</div>";
    b += '  <div style="float:left; margin-right:5px;">' + getGuildJobMemberJobLevelBar(d) + "</div>";
    b += '  <div class="clear"></div>';
    b += "</div>";
} return b; }
function getGuildJobMemberJobLevel(c, b) { var e = { level: 1, percent: 0 }; if (guild_job.members[c].job.jobs && guild_job.members[c].job.jobs[b]) {
    var d = parseInt(guild_job.members[c].job.jobs[b].points);
    for (var m in guild_job.config.jobs_level) {
        var a = parseInt(guild_job.config.jobs_level[m].points);
        if (d >= a) {
            e.level = parseInt(m);
            if (!guild_job.config.jobs_level[(parseInt(m) + 1)]) {
                e.percent = 100;
            }
            else {
                var l = (guild_job.config.jobs_level[(parseInt(m) + 1)].points - a);
                var h = (d - a);
                e.percent = ((h * 100) / l);
            }
        }
    }
} return e; }
function getGuildJobMemberJobLevelBar(b) { var a = ""; a += '<div style="float:left; margin-right:2px;">' + b.level + "</div>"; a += '<div style="float:left; width:150px; height:12px; background-color:#000; margin-bottom:2px; overflow:hidden; border-radius:3px;">'; a += '  <div style="width:' + b.percent + '%; height:12px; background-color:#f00;"></div>'; a += "</div>"; a += '<div class="clear"></div>'; return a; }
function setGuildJobMemberFilter() { var b = $("guild_job_memberlist_filter").value; hideDiv("globaltransp"); hideDiv("globalbox"); for (var a = 0; a < guild_job.members.length; a++) {
    if (b == 0) {
        showDiv("guild_job_memberlist_item" + a);
    }
    else {
        if (b == "confirmed") {
            if (guild_job.job.jobs[guild_job.members[a].unr]) {
                showDiv("guild_job_memberlist_item" + a);
            }
            else {
                hideDiv("guild_job_memberlist_item" + a);
            }
        }
        else {
            if (b == "unconfirmed") {
                if (!guild_job.job.jobs[guild_job.members[a].unr]) {
                    showDiv("guild_job_memberlist_item" + a);
                }
                else {
                    hideDiv("guild_job_memberlist_item" + a);
                }
            }
            else {
                if (guild_job.config.jobs[b]) {
                    if (guild_job.members[a].job.currentjob && guild_job.members[a].job.currentjob == b) {
                        showDiv("guild_job_memberlist_item" + a);
                    }
                    else {
                        hideDiv("guild_job_memberlist_item" + a);
                    }
                }
            }
        }
    }
} }
function showGuildJobStockInfo(c) { $("guildstock_info").innerHTML = ""; if (guild_job.config.stock_expansion[c] && guild_job.config.stock_expansion[c].level <= guild_job.job.level) {
    var b = "";
    if (!guild_job.stock.slots[c]) {
        if (checkGuildJobMemberStatus("unlockstockslot")) {
            b += str_replace("%COUNT%", guild_job.config.stock_expansion[c].unlock, t_guildjob_stock_slot_entry_to_unlock);
            b += '<div class="button_new link" style="text-align:center; margin:10px 0px;" onclick="guildStockSlotUnlock(' + c + ')">' + t_unlock + "</div>";
        }
    }
    else {
        if (guild_job.stock.slots[c] && guild_job.stock.slots[c].finishdate > 0) {
            return false;
        }
        for (var a in guild_job.config.stock_expansion[c].products) {
            b += htmlGuildStockSlotEntry(c, a, guild_job.config.stock_expansion[c].products[a], "products");
        }
        for (var a in guild_job.config.stock_expansion[c].forestry) {
            b += htmlGuildStockSlotEntry(c, a, guild_job.config.stock_expansion[c].forestry[a], "forestry");
        }
        if (guild_job.config.stock_expansion[c].coins) {
            b += htmlGuildStockSlotEntry(c, 0, guild_job.config.stock_expansion[c].coins, "coins");
        }
    }
    $("guildstock_info").innerHTML = b;
    showDiv("guildstock_info");
} }
function htmlGuildStockSlotEntry(w, l, h, s) { var m = 0; if (guild_job.stock.slots[w]) {
    var c = guild_job.stock.slots[w].data;
    for (var d = 0; d < c.length; d++) {
        if (c[d].pid == l && c[d].type == s) {
            if (!m) {
                m = {};
            }
            if (!m[c[d].unr]) {
                m[c[d].unr] = c[d].amount;
            }
            else {
                m[c[d].unr] += c[d].amount;
            }
        }
    }
} var r = ""; var b = "l" + l; var a = produkt_name[l]; if (s == "forestry") {
    b = "f_symbol" + l;
    a = produkt_name_forestry[l];
    r = "margin-left:15px;";
} if (s == "coins") {
    b = "icon_coins";
    var t = guild_job.config.stock_expansion[w][s];
    a = t_coins;
}
else {
    var t = guild_job.config.stock_expansion[w][s][l];
} var n = getGuildStockSlotAmount(w, l, s); var q = ((n * 100) / t); var v = "link"; var y = "guildJobDialog('stock_slotentry', " + w + ", " + l + ", '" + s + "')"; if (!getGuildStockProductAmount(l, s) || n >= t) {
    v = "";
    y = "";
} var u = ""; if (!getGuildStockProductAmount(l, s)) {
    u = "important";
} var e = ""; e += '<div style="position:relative; margin-bottom:5px; min-height:50px;" class="' + v + '">'; e += '  <div style="float:left; position:relative; margin-right:5px; margin-bottom:5px; border-radius:5px;" class="' + b + ' link"></div>'; e += '  <div style="float:left; position:relative; width:180px; margin-right:5px; ' + r + '">'; e += '    <div class="' + u + '" style="margin:2px 0px; float:left;">' + a + "</div>"; if (m) {
    e += '<div id="stockslotentry' + w + "_" + l + "_" + s + '" style="float:right;" class="link arrow_black_small_top" onclick="toogleGuildStockSlotEntries(' + w + ", " + l + ", '" + s + "')\"></div>";
} e += '    <div class="clear"></div>'; e += '    <div class="guild_job_bar" style="width:100%; height:20px;" onclick="' + y + '">'; e += '      <div class="guild_job_bar_inner" style="width:' + q + '%; background-color:#f00;"></div>'; e += '      <div style="position:absolute; top:0px; left:0px; width:100%; text-align:center; margin-top:3px; color:#fff;">' + n + "/" + t + "</div>"; e += "    </div>"; e += "  </div>"; e += '  <div class="clear"></div>'; if (m) {
    e += '<div id="guildstock_slotentries' + w + "_" + l + "_" + s + '_log" class="guildstock_slotentries_log">';
    for (unr in m) {
        for (var d = 0; d < guild_job.members_all.length; d++) {
            if (unr == guild_job.members_all[d].unr) {
                e += '<div style="margin-bottom:2px;">';
                e += '  <div style="float:left; width:120px;">' + guild_job.members_all[d].uname + "</div>";
                e += '  <div style="float:left; width:92px; text-align:right;">' + m[unr] + "</div>";
                e += '  <div class="clear"></div>';
                e += "</div>";
            }
        }
    }
    e += "</div>";
} e += "</div>"; return e; }
function toogleGuildStockSlotEntries(e, a, c) { var d = "stockslotentry" + e + "_" + a + "_" + c; var b = "guildstock_slotentries" + e + "_" + a + "_" + c + "_log"; if ($(b).style.display == "block") {
    $(d).removeClassName("arrow_black_small_bottom").addClassName("arrow_black_small_top");
}
else {
    $(d).removeClassName("arrow_black_small_top").addClassName("arrow_black_small_bottom");
} toogleDiv(b); }
function checkGuildStockSlotEntry(l, a, d) { if (d == "coins") {
    var c = guild_job.config.stock_expansion[l][d];
}
else {
    var c = guild_job.config.stock_expansion[l][d][a];
} var e = getGuildStockSlotAmount(l, a, d); var b = (c - e); var h = { stockamount: getGuildStockProductAmount(a, d), rest: b, click: "guildStockSlotEntry(" + l + ", " + a + ", '" + d + "')" }; checkEntryLine(h); }
function getGuildStockProductAmount(a, b) { var c = checkRackItem(a); if (b == "coins") {
    c = $("coins").innerHTML;
} if (b == "forestry") {
    c = checkForestryRackItem(a);
} return c; }
function getGuildStockSlotAmount(h, b, d) { var e = 0; if (guild_job.stock.slots[h] && guild_job.stock.slots[h]["data"]) {
    var a = guild_job.stock.slots[h]["data"];
    for (var c = 0; c < a.length; c++) {
        if (a[c].type == d && a[c].pid == b) {
            e += a[c].amount;
        }
    }
} return e; }
function guildJobRewardDialog(d) { if (d.success) {
    var b = t_guildjob_job_message_head;
    var a = '<div style="margin-bottom:10px;">' + t_guildjob_job_success + "</div>";
    if (d.count > 0) {
        a += '<div class="guildjob_orderpoints" style="float:left; margin-left:60px; margin-right:5px;"></div><div style="float:left; margin-top:5px;">' + d.count + '</div><div class="clear"></div>';
    }
}
else {
    var b = t_guildjob_job_failed;
    var a = t_guildjob_job_failed_body;
} var c = ""; globalcommitbox(b, a, c); }
function checkGuildJobEntry(a) { var c = guild_job.job.data.products[a]; var d = 0; if (guild_job.job.data.entries && guild_job.job.data.entries[a]) {
    d = guild_job.job.data.entries[a];
} var b = (c - d); var e = { stockamount: guild_job.stock.stock[a], rest: b, click: "guildJobEntry(" + a + ")" }; checkEntryLine(e); }
function guild_jobCheckLevelAdd() { var a = $("guild_job_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > guild_job.job.count) {
    a = guild_job.job.count;
} if (a > (guild_job.job.next_level_points - guild_job.job.points)) {
    a = (guild_job.job.next_level_points - guild_job.job.points);
} $("guild_job_dialog_leveladd_insert").value = a; }
function guildJobDialog(d, l, h, e) { var q = ""; var n = ""; var t = 0; var r = 0; var a = 0; if (d == "buy_points") {
    q = t_guildjob_points_buy;
    for (var u in guild_job.config.points_cost) {
        var s = str_replace("%COUNT%", guild_job.config.points_cost[u], t_guildjob_points_buy_body);
        s = str_replace("%COINS%", u, s);
        n += '<div class="coinsbutton_flex link" style="margin-bottom:10px; font-size:11px; font-weight:normal;" onclick="guildJobDialog(\'buy_points_commit\', ' + u + ')">' + s + "</div>";
    }
    a = 1;
} if (d == "buy_points_commit") {
    q = t_guildjob_points_buy;
    var n = str_replace("%COUNT%", guild_job.config.points_cost[l], t_guildjob_points_buy_body);
    n = str_replace("%COINS%", l, n);
    t = "guildJobBuyPoints(" + l + ")";
} if (d == "add_jobmember") {
    q = t_guildjob_addmember_head;
    n = str_replace("%AMOUNT%", guild_job.job.addmember_cost, t_guildjob_addmember_body);
    t = "guildJobAddMember()";
} if (d == "job_entry") {
    var c = { pid: l };
    globalcommitbox(t_inner_feedsubmit, htmlEntryLine(c), 0, 0, 1);
    $("dialog_entryline_number").focus();
    $("dialog_entryline_number").onchange = new Function("checkGuildJobEntry(" + l + ")");
    $("dialog_entryline_number").onkeyup = new Function("checkGuildJobEntry(" + l + ")");
    checkGuildJobEntry(l);
    return false;
} if (d == "add_level") {
    var q = t_guildjob_level_plus_head;
    var n = htmlLevelAddDialog("guild_job");
} if (d == "job_check") {
    var b = guild_job.members[l].job;
    if (b.jobs[b.currentjob].joined == 1) {
        q = t_guildjob_check_head2;
        n = t_guildjob_check_body2;
        if ($("guild_job_memberlist_checkbox")) {
            $("guild_job_memberlist_checkbox").checked = true;
        }
    }
    else {
        q = t_guildjob_check_head;
        n = t_guildjob_check_body;
        if ($("guild_job_memberlist_checkbox")) {
            $("guild_job_memberlist_checkbox").checked = false;
        }
    }
    t = "guildJobJoin()";
} if (d == "stock_slotentry") {
    var c = { slot: l, pid: h, type: e };
    globalcommitbox(t_inner_feedsubmit, htmlEntryLine(c), 0, 0, 1);
    $("dialog_entryline_number").focus();
    $("dialog_entryline_number").onchange = new Function("checkGuildStockSlotEntry(" + l + ", " + h + ", '" + e + "')");
    $("dialog_entryline_number").onkeyup = new Function("checkGuildStockSlotEntry(" + l + ", " + h + ", '" + e + "')");
    checkGuildStockSlotEntry(l, h, e);
    return false;
} if (d == "stock_product_delete") {
    q = t_guildjob_stock_pid_delete_head;
    n = str_replace("%PRODUCT%", produkt_name[l], t_guildjob_stock_pid_delete_body);
    t = "guildStockDeleteProduct(" + l + ")";
} if (d == "gamble_job") {
    q = t_megafield_new_jobs_head;
    n = str_replace("%COINS%", guild_job.config.job_gamble_coins, t_guildjob_change_jobs);
    t = "guildJobGamble()";
} globalcommitbox(q, n, t, r, a); }
function guildJobTimer() { guild_job.job.remain--; guildJobTimerContentUpdater(); for (var a in guild_job_stats_cache_delay) {
    guild_job_stats_cache_delay[a]--;
} }
function guildJobTimerContentUpdater() { if ($("guild_job_jobselect_timer")) {
    if (guild_job.job.remain > 0) {
        showDiv("guild_job_jobselect_timer_bar");
        hideDiv("guild_job_finish_button");
        if (guild_job.job.startdate > 0) {
            var b = t_guildjob_jobrunning_time;
        }
        else {
            var b = t_guildjob_jobselect_time;
        }
        $("guild_job_jobselect_timer").innerHTML = str_replace("%TIME%", formatTime(guild_job.job.remain), b);
        var a = 100 - ((guild_job.job.remain * 100) / guild_job.config.job_duration);
        $("guild_job_jobselect_timer_bar_inner").style.width = a + "%";
    }
    if (guild_job.job.remain <= 0) {
        if (guild_job.job.remain == -1 && guild_job.job.startdate == 0) {
            guildJobInit();
        }
        else {
            hideDiv("guild_job_jobselect_timer_bar");
            showDiv("guild_job_finish_button");
        }
    }
} }
var guild_job_stats_cache = {};
var guild_job_stats_cache_delay = {};
var guild_job_stats_select = "points";
function showGuildJobStats(d) { var c = ""; c += '<div id="guild_job_stats_select_line">'; c += ' <select id="guild_job_stats_select" onchange="guildJobStats()">'; var a = ["points", "job1", "job2", "job3"]; for (var b = 0; b < a.length; b++) {
    var e = "";
    if (guild_job_stats_select == a[b]) {
        e = "selected";
    }
    c += '<option value="' + a[b] + '" ' + e + ">" + t_guildjob_stats[a[b]] + "</option>";
} c += " </select>"; c += "</div>"; c += '<div class="headline">' + t_guildjob_stats_headlines[guild_job_stats_select] + "</div>"; c += '<div class="guild_job_stats_list">'; c += htmlStatsContent(guild_job_stats_cache[d]); c += '<div class="mini_close link" onclick="closeGuildJobStats()"></div>'; $("guild_job_stats_box").innerHTML = c; showDiv("guild_job_stats_box_transp"); showDiv("guild_job_stats_box"); }
function closeGuildJobStats() { hideDiv("guild_job_stats_box_transp"); hideDiv("guild_job_stats_box"); }
function checkGuildJobMemberStatus(a) { if (in_array(a, ["levelbar", "gamble", "jobentry", "confirmmember", "finishjob", "startjob", "unlockstockslot", "addmemberspace", "delstockslot"]) && in_array(player_guildmemberstatus, [1, 2])) {
    return 1;
} return 0; }
var hillwalk = function () { this.data = {}; this.tour = {}; this.tourString = ""; this.tourNeed = {}; this.tourReward = {}; this.tourHelper = { stamina: 0, duration: 0 }; this.tourLastStage = 0; this.stats_cache = {}; this.stats_cache_delay = {}; this.stats_select = "points"; this.page = 1; this.drawingsInStage = 0; this.drawingsCount = 0; };
hillwalk.prototype.stats = function () { if ($("hillwalk_stats_select")) {
    hillwalk.stats_select = $("hillwalk_stats_select").value;
} if (hillwalk.stats_cache_delay[hillwalk.stats_select] <= 0 || !hillwalk.stats_cache[this.stats_select]) {
    hillwalk.action("hillwalk_stats", { type: hillwalk.stats_select });
}
else {
    hillwalk.showStats(hillwalk.stats_select);
} };
hillwalk.prototype.addLevel = function () { hillwalk.action("hillwalk_add_level", { amount: $("hillwalk_dialog_leveladd_insert").value }); };
hillwalk.prototype.buyAddLevel = function () { hillwalk.action("hillwalk_buy_add_level"); };
hillwalk.prototype.start = function () { hillwalk.action("hillwalk_start_tour", { tour: "{" + this.tourString + "}", helper_stamina: this.tourHelper.stamina, helper_duration: this.tourHelper.duration }); };
hillwalk.prototype.finish = function () { hillwalk.action("hillwalk_finish_tour"); };
hillwalk.prototype.init = function () { hillwalk.action("hillwalk_init"); };
hillwalk.prototype.action = function (a, b) { ajaxAction("farm", a, b, hillwalk.response); };
hillwalk.prototype.response = function (b, a, c) { showDiv("hillwalk"); if (a == "hillwalk_finish_tour") {
    hideDiv("hillwalk_book");
    hideDiv("hillwalk_transp");
    showDiv("hillwalk_plan");
    hillwalk.tour = {};
    hillwalk.tourString = "";
    hillwalk.tourNeed = {};
    hillwalk.tourHelper = { stamina: 0, duration: 0 };
    hillwalk.tourLastStage = 0;
    $("hillwalk_helper_stamina").className = "link helper helper0";
    $("hillwalk_helper_duration").className = "link helper helper0";
} hillwalk.build(); hillwalk.update(); hillwalk.timerUpdate(); if (b.stats) {
    hillwalk.stats_cache_delay[hillwalk.stats_select] = 30;
    if (!hillwalk.stats_cache[hillwalk.stats_select]) {
        hillwalk.stats_cache[hillwalk.stats_select] = {};
    }
    hillwalk.stats_cache[hillwalk.stats_select] = b.stats;
    hillwalk.showStats();
} if (b.book && b.book.length > 0) {
    hillwalk.bookEntry(b.book);
} if (b.first == 1) {
    hillwalk.help();
} };
hillwalk.prototype.update = function () { if (this.data.data.tour && this.data.data.tour.remain > 0) {
    this.tourLastStage = 0;
    this.tour = this.data.data.tour.tour;
} this.drawingsStats(); this.need(); this.stages(); this.hunt(); };
hillwalk.prototype.build = function () { var a = ""; a += htmlLevelBar("hillwalk"); a += htmlCountBar("hillwalk"); $("hillwalk_header").innerHTML = a; $("hillwalk_levelbar_number").innerHTML = this.data.data.level; $("hillwalk_countbar_inner").innerHTML = formatNumber(this.data.data.count); $("hillwalk_levelbar_inner").style.width = this.data.data.level_percent + "%"; if (!this.data.data.level_rest) {
    var b = t_reached_maxlevel;
    hideDiv("hillwalk_levelbar_plus");
}
else {
    var b = str_replace("%AMOUNT%", formatNumber(this.data.data.level_rest), t_hillwalk_level_line);
    $("hillwalk_levelbar_plus").onclick = new Function("hillwalk.addLevelCommit()");
    $("hillwalk_levelbar_plus_tt").innerHTML = t_hillwalk_leveladd_tt;
} $("hillwalk_levelbar_tt").innerHTML = b; $("hillwalk_countbar_plus_tt").innerHTML = t_hillwalk_levelitem_buy; $("hillwalk_countbar_plus").onclick = new Function("hillwalk.buyAddLevelCommit()"); };
hillwalk.prototype.addLevelCommit = function () { var b = t_hillwalk_dialog_leveladd_head; var a = htmlLevelAddDialog("hillwalk"); globalcommitbox(b, a, 0, 0, 1); };
hillwalk.prototype.addLevelCheck = function () { var a = $("hillwalk_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > hillwalk.data.data.count) {
    a = hillwalk.data.data.count;
} $("hillwalk_dialog_leveladd_insert").value = a; };
hillwalk.prototype.buyAddLevelCommit = function (c) { var d = t_hillwalk_levelitem_buy; var b = str_replace("%COINS%", hillwalk.data.data.exchangecoins, t_hillwalk_levelitem_buy_dialog); b = str_replace("%AMOUNT%", (hillwalk.data.data.exchangeamount), b); if (!c) {
    var a = '<div class="link coinsbutton_flex" onclick="hillwalk.buyAddLevelCommit(1)">' + b + "</div>";
    globalcommitbox(d, a, 0, 0, 1);
}
else {
    var a = b;
    var e = "hillwalk.buyAddLevel()";
    globalcommitbox(d, a, e);
} };
hillwalk.prototype.stages = function () { var c = ""; c += '<div id="hillwalk_stage_start" class="stage start link" onclick="mapGo2Location(\'farm\', ' + farm + ')" onmouseover="showDiv(\'hillwalk_stage_start_tt\')" onmouseout="hideDiv(\'hillwalk_stage_start_tt\')">'; c += '  <div id="hillwalk_stage_start_tt" class="ttbox">' + t_back_to_farm + "&nbsp;" + farm + "</div>"; c += '  <div id="hillwalk_stage_start_lines" class="lines"></div>'; c += '  <div id="hillwalk_stage_start_img"></div>'; c += "</div>"; for (var b in this.data.config.stages) {
    var l = 0;
    var d = "hillwalk.clickStage(" + b + ")";
    var a = "";
    if (this.data.data.level < this.data.config.stages[b].level) {
        l = 1;
        d = "";
    }
    var h = 0;
    if (this.tour) {
        for (var m in this.tour) {
            if (m > 0 && this.tour[m] == b) {
                a = "active";
            }
            h = this.tour[m];
        }
    }
    c += '<div id="hillwalk_stage' + b + '" class="stage stage' + b + '" onclick="' + d + '">';
    c += '  <div id="hillwalk_stage' + b + '_lines" class="lines"></div>';
    c += '  <div id="hillwalk_stage' + b + '_img" class="img cat' + this.data.config.stages[b].category + " " + a + '" onmouseover="hillwalk.stageInfo(' + b + ')" onmouseout="hillwalk.stageInfo(' + b + ', 1)">';
    if (b == h) {
        c += '<div class="current"></div>';
    }
    if (this.data.data.fav == b) {
        c += '<div class="fav"></div>';
    }
    if (this.data.hunt && this.data.hunt.stage == b) {
        c += '<div class="hunt" onmouseover="showDiv(\'hillwalk_stage_hunt_tt\')" onmouseout="hideDiv(\'hillwalk_stage_hunt_tt\')">';
        c += '  <div id="hillwalk_stage_hunt_tt" class="ttbox">' + t_hillwalk_hunt_info + "</div>";
        c += "</div>";
    }
    if (l) {
        c += '<div class="locked"></div>';
    }
    if (this.data.config.stages[b].start) {
        var e = "start";
        if (this.tourString != "") {
            if (this.tour[1] != b) {
                e = "finish";
            }
        }
        c += '<div id="hillwalk_starter' + b + '" class="' + e + '"></div>';
    }
    c += "  </div>";
    c += "</div>";
} $("hillwalk_stages").innerHTML = c; this.checkStartButton(); this.showInfo(); this.drawLines(); };
hillwalk.prototype.checkStartButton = function () { $("hillwalk_tourstart").addClassName("inactive"); var c = ""; var b = 0; if (this.tour) {
    if (this.tourLastStage <= 1 || !this.tour[this.tourLastStage] || !this.data.config.stages[this.tour[this.tourLastStage]].start) {
        b = 1;
        c += "<div>" + t_hillwalk_start_failed1 + "</div>";
    }
    for (var a in this.tourNeed.products) {
        if (checkRackItem(a, farm) < this.tourNeed.products[a]) {
            b = 2;
            c += "<div>" + str_replace("%FARM%", 6, t_hillwalk_start_failed2) + "</div>";
            break;
        }
    }
    if ((this.data.config.level[this.data.data.level].stamina - this.tourNeed.stamina) < 0) {
        b = 3;
        c += "<div>" + t_hillwalk_start_failed3 + "</div>";
    }
    if (this.tourNeed.money > 0 && this.tourNeed.money > user_bar) {
        b = 4;
    }
    if (this.tourNeed.hillwalk_points > 0 && this.tourNeed.hillwalk_points > parseInt(this.data.data.count)) {
        b = 4;
    }
    if (this.tourNeed.coins > 0 && this.tourNeed.coins > user_coins) {
        b = 4;
    }
    if (b == 4) {
        c += "<div>" + t_hillwalk_start_failed4 + "</div>";
    }
    if (!b) {
        $("hillwalk_tourstart").removeClassName("inactive");
        $("hillwalk_tourstart").onmouseover = new Function("");
        $("hillwalk_tourstart").onmouseout = new Function("");
    }
    else {
        $("hillwalk_tourstart_tt").innerHTML = c;
        $("hillwalk_tourstart").onmouseover = new Function("showDiv('hillwalk_tourstart_tt')");
        $("hillwalk_tourstart").onmouseout = new Function("hideDiv('hillwalk_tourstart_tt')");
    }
} };
hillwalk.prototype.stageInfo = function (d, h) { if (h) {
    hideDiv("hillwalk_stage_info");
    return true;
} var e = 0; var l = 1; if (this.data.data.level < this.data.config.stages[d].level) {
    e = 1;
} if (this.data.data.fav == d) {
    l = this.data.config.fav_bonus;
} var c = ""; c += '<div class="name">' + this.data.config.stages[d].name + "</div>"; c += '<div class="info">'; c += '<div class="need">'; c += '  <div class="bold">' + t_hillwalk_stage_needs + "</div>"; c += "  <div>" + this.data.config.stages[d].stamina + "&nbsp;" + t_hillwalk_stamina + "</div>"; c += "  <div>" + formatTime(this.data.config.stages[d].duration) + "</div>"; if (this.data.config.stages[d].coins) {
    c += "<div>" + this.data.config.stages[d].coins + "&nbsp;" + t_coins + "</div>";
} if (this.data.config.stages[d].money) {
    c += "<div>" + formatPrice(this.data.config.stages[d].money) + "</div>";
} if (this.data.config.stages[d].hillwalk_points) {
    c += "<div>" + formatNumber(this.data.config.stages[d].hillwalk_points) + "&nbsp;" + t_hillwalk_points + "</div>";
} for (var b in this.data.data.stages[d]) {
    var a = "";
    if (checkRackItem(b, farm) < this.data.data.stages[d][b]) {
        a = "important";
    }
    c += '<div class="' + a + '">' + htmlProductBody(b, this.data.data.stages[d][b]) + "</div>";
} if (e) {
    c += '<div class="important">' + t_hillwalk_level_info.replace("%LEVEL%", this.data.config.stages[d].level) + "</div>";
} c += "</div>"; c += '<div class="reward">'; c += '  <div class="bold">' + t_vet_reward_head + ":</div>"; if (this.data.config.stages[d].reward.points) {
    c += "<div>" + formatNumber(Math.ceil(this.data.config.stages[d].reward.points * l)) + "&nbsp;" + t_points + "</div>";
} if (this.data.config.stages[d].reward.money) {
    c += "<div>" + formatPrice(Math.ceil(this.data.config.stages[d].reward.money * l)) + "</div>";
} if (this.data.config.stages[d].reward.hillwalk_points) {
    c += "<div>" + formatNumber(Math.ceil(this.data.config.stages[d].reward.hillwalk_points * l)) + "&nbsp;" + t_hillwalk_points + "</div>";
} if (this.data.config.stages[d].recovery) {
    c += "<div>" + t_hillwalk_recovery.replace("%AMOUNT%", this.data.config.stages[d].recovery) + "</div>";
} if (this.data.data.fav == d) {
    c += "<div>" + t_hillwalk_fav_bonus.replace("%AMOUNT%", Math.ceil((this.data.config.fav_bonus - 1) * 100)) + "</div>";
} c += "  </div>"; c += "</div>"; $("hillwalk_stage_info").innerHTML = c; showDiv("hillwalk_stage_info"); };
hillwalk.prototype.drawLines = function () { var e = {}; for (var l in this.data.config.stages) {
    var q = parseInt($("hillwalk_stage" + l).getStyle("left"));
    var m = parseInt($("hillwalk_stage" + l).getStyle("bottom"));
    for (var d = 0; d < this.data.config.stages[l].neighbors.length; d++) {
        var b = this.data.config.stages[l].neighbors[d];
        if (!(e[l] && e[l][b]) && !(e[b] && e[b][l])) {
            var t = parseInt($("hillwalk_stage" + b).getStyle("left"));
            var s = parseInt($("hillwalk_stage" + b).getStyle("bottom"));
            var a = Math.ceil(Math.sqrt(Math.pow(t - q, 2) + Math.pow(s - m, 2)));
            var h = Math.ceil(Math.atan2((m - s), (t - q)) * 180 / Math.PI);
            var n = '<div class="angel" style="transform:rotate(' + h + 'deg);">';
            n += '  <div id="hillwalk_stage_line' + l + "_" + b + '" class="line" style="width:' + a + 'px;"></div>';
            n += "</div>";
            $("hillwalk_stage" + l + "_lines").insert(n);
            if (!e[l]) {
                e[l] = {};
            }
            e[l][b] = 1;
            if (!e[b]) {
                e[b] = {};
            }
            e[b][l] = 1;
        }
    }
} var q = parseInt($("hillwalk_stage_start").getStyle("left")); var m = parseInt($("hillwalk_stage_start").getStyle("bottom")); for (var l = 1; l <= 3; l++) {
    var t = parseInt($("hillwalk_stage" + l).getStyle("left"));
    var s = parseInt($("hillwalk_stage" + l).getStyle("bottom"));
    var a = Math.ceil(Math.sqrt(Math.pow(t - q, 2) + Math.pow(s - m, 2)));
    var h = Math.ceil(Math.atan2((m - s), (t - q)) * 180 / Math.PI);
    var n = '<div class="angel" style="transform:rotate(' + h + 'deg);">';
    n += '  <div id="hillwalk_stage_line_start_' + l + '" class="line" style="width:' + a + 'px;"></div>';
    n += "</div>";
    $("hillwalk_stage_start_lines").insert(n);
} var c = 0; if (this.tour) {
    var r = 0;
    for (var l in this.tour) {
        r++;
    }
    for (var l in this.tour) {
        if (l == 1) {
            $("hillwalk_stage_line_start_" + this.tour[l]).addClassName("active");
        }
        if (l == r && $("hillwalk_stage_line_start_" + this.tour[l])) {
            $("hillwalk_stage_line_start_" + this.tour[l]).addClassName("active");
        }
        if (!c) {
            c = this.tour[l];
            continue;
        }
        if ($("hillwalk_stage_line" + c + "_" + this.tour[l])) {
            $("hillwalk_stage_line" + c + "_" + this.tour[l]).addClassName("active");
        }
        if ($("hillwalk_stage_line" + this.tour[l] + "_" + c)) {
            $("hillwalk_stage_line" + this.tour[l] + "_" + c).addClassName("active");
        }
        c = this.tour[l];
    }
} };
hillwalk.prototype.showInfo = function () { var d = ""; all = 1; for (var e in this.tourNeed.products) {
    var r = "";
    if (checkRackItem(e, farm) < this.tourNeed.products[e]) {
        r = "important";
        all = 0;
    }
    d += '<div class="' + r + '">' + htmlProductBody(e, this.tourNeed.products[e]) + "</div>";
} $("hillwalk_products").innerHTML = d; if (this.tourNeed.money > 0) {
    $("hillwalk_money").innerHTML = formatPrice(this.tourNeed.money);
}
else {
    $("hillwalk_money").innerHTML = "";
} if (this.tourNeed.hillwalk_points > 0) {
    $("hillwalk_points").innerHTML = formatNumber(this.tourNeed.hillwalk_points) + "&nbsp;" + t_hillwalk_points;
}
else {
    $("hillwalk_points").innerHTML = "";
} if (this.tourNeed.coins > 0) {
    $("hillwalk_coins").innerHTML = this.tourNeed.coins + "&nbsp;" + t_coins;
}
else {
    $("hillwalk_coins").innerHTML = "";
} if (this.tourNeed.money > 0 && this.tourNeed.money > user_bar) {
    $("hillwalk_money").addClassName("important");
}
else {
    $("hillwalk_money").removeClassName("important");
} if (this.tourNeed.hillwalk_points > 0 && this.tourNeed.hillwalk_points > parseInt(this.data.data.count)) {
    $("hillwalk_points").addClassName("important");
}
else {
    $("hillwalk_points").removeClassName("important");
} if (this.tourNeed.coins > 0 && this.tourNeed.coins > user_coins) {
    $("hillwalk_coins").addClassName("important");
}
else {
    $("hillwalk_coins").removeClassName("important");
} var s = this.tourReward.points; var a = this.tourReward.money; var t = this.tourReward.hillwalk_points; if (this.tour) {
    var h = 0;
    for (var c in this.tour) {
        h++;
    }
} if (h > 0) {
    var q = this.data.config.stagecountbonus[h];
} var d = '<div class="bold">' + t_vet_reward_head + ":</div>"; if (this.tourReward.points) {
    d += "<div>" + formatNumber(s) + " " + t_points + "</div>";
} if (this.tourReward.money) {
    d += "<div>" + formatPrice(a) + "</div>";
} if (this.tourReward.hillwalk_points) {
    d += "<div>" + formatNumber(t) + " " + t_hillwalk_points + "</div>";
} if (h > 0 && q.points > 1) {
    d += '<div class="stagebonus">' + str_replace("%AMOUNT%", Math.round((q.points - 1) * 100), t_hillwalk_stage_bonus) + "</div>";
} $("hillwalk_reward").innerHTML = d; var m = (this.data.config.level[this.data.data.level].stamina - this.tourNeed.stamina); if (this.data.data.tour && this.data.data.tour.remain > 0) { }
else {
    if (this.tourLastStage > 0) {
        for (var c = 0; c < this.data.config.stages[this.tour[this.tourLastStage]].neighbors.length; c++) {
            var b = this.data.config.stages[this.tour[this.tourLastStage]].neighbors[c];
            if (this.data.data.level < this.data.config.stages[b].level) {
                continue;
            }
            if (!$("hillwalk_stage" + b + "_img").hasClassName("active")) {
                $("hillwalk_stage" + b + "_img").addClassName("valid").addClassName("pulse");
                if (m < this.getStageStamina(b)) {
                    $("hillwalk_stage" + b + "_img").removeClassName("valid").removeClassName("pulse").addClassName("exhausted");
                }
            }
        }
    }
    else {
        for (var c in this.data.config.stages) {
            if (this.data.config.stages[c].start) {
                $("hillwalk_stage" + c + "_img").addClassName("valid").addClassName("pulse");
            }
        }
    }
} $("hillwalk_stamina").removeClassName("important"); if (m < 0) {
    $("hillwalk_stamina").addClassName("important");
} $("hillwalk_duration").innerHTML = formatTime(this.tourNeed.time); $("hillwalk_stamina").innerHTML = (this.data.config.level[this.data.data.level].stamina - this.tourNeed.stamina) + "/" + this.data.config.level[this.data.data.level].stamina; var l = Math.min((this.tourNeed.stamina * 100) / this.data.config.level[this.data.data.level].stamina, 100); $("hillwalk_stamina_bar_inner").style.width = (100 - l) + "%"; this.checkStartButton(); };
hillwalk.prototype.timer = function () { if (this.data.data.tour) {
    this.data.data.tour.remain--;
    this.timerUpdate();
} };
hillwalk.prototype.timerUpdate = function () { if (this.data.data.tour) {
    if ($("hillwalk") && $("hillwalk").style.display == "block") {
        showDiv("hillwalk_transp");
        hideDiv("hillwalk_plan");
        if (this.data.data.tour.remain <= 0) {
            hideDiv("hillwalk_progress");
            var a = '<div id="hillwalk_tour_finished">';
            a += '  <div style="font-weight:bold;">' + t_vet_reward_head + "</div>";
            if (this.data.reward) {
                if (this.data.reward.points) {
                    a += "<div>" + formatNumber(this.data.reward.points) + "&nbsp;" + t_points + "</div>";
                }
                if (this.data.reward.money) {
                    a += "<div>" + formatPrice(this.data.reward.money) + "</div>";
                }
                if (this.data.reward.hillwalk_points) {
                    a += "<div>" + formatNumber(this.data.reward.hillwalk_points) + "&nbsp;" + t_hillwalk_points + "</div>";
                }
            }
            a += '  <div class="button_new link" onclick="hillwalk.finish()">' + t_hillwalk_tour_end_reward + "</div>";
            a += "</div>";
            globalcommitbox(t_hillwalk_tour_end, a, 0, 0, 1);
            hideDiv("globalbox_close");
        }
        else {
            var b = 100 - ((this.data.data.tour.remain * 100) / this.data.data.tour.duration);
            $("hillwalk_progress_bar_inner").style.width = Math.min(b, 100) + "%";
            $("hillwalk_progress_bar_timer").innerHTML = formatTime(this.data.data.tour.remain);
            showDiv("hillwalk_progress");
        }
    }
} };
hillwalk.prototype.need = function () { this.tourLastStage = 0; this.tourString = ""; this.tourNeed = { time: this.data.config.duration_base, stamina: 0, money: 0, coins: 0, hillwalk_points: 0, products: {} }; this.tourReward = { points: 0, money: 0, hillwalk_points: 0 }; var b = 0; for (var c in this.tour) {
    if (c > 0) {
        this.tourNeed.time += this.getStageDuration(this.tour[c]);
        this.tourNeed.stamina += this.getStageStamina(this.tour[c]);
        if (this.data.config.stages[this.tour[c]].recovery) {
            this.tourNeed.stamina = Math.max(this.tourNeed.stamina - this.data.config.stages[this.tour[c]].recovery, 0);
        }
        if (this.data.config.stages[this.tour[c]].money) {
            this.tourNeed.money += this.data.config.stages[this.tour[c]].money;
        }
        if (this.data.config.stages[this.tour[c]].coins) {
            this.tourNeed.coins += this.data.config.stages[this.tour[c]].coins;
        }
        if (this.data.config.stages[this.tour[c]].hillwalk_points) {
            this.tourNeed.hillwalk_points += this.data.config.stages[this.tour[c]].hillwalk_points;
        }
        if (this.data.data.stages[this.tour[c]]) {
            for (var a in this.data.data.stages[this.tour[c]]) {
                if (!this.tourNeed.products[a]) {
                    this.tourNeed.products[a] = 0;
                }
                this.tourNeed.products[a] += this.data.data.stages[this.tour[c]][a];
            }
        }
        this.tourString += '"' + c + '":' + this.tour[c] + ",";
        this.tourLastStage = c;
        if (this.data.config.stages[this.tour[c]].reward.points) {
            this.tourReward.points += this.data.config.stages[this.tour[c]].reward.points;
        }
        if (this.data.config.stages[this.tour[c]].reward.money) {
            this.tourReward.money += this.data.config.stages[this.tour[c]].reward.money;
        }
        if (this.data.config.stages[this.tour[c]].reward.hillwalk_points) {
            this.tourReward.hillwalk_points += this.data.config.stages[this.tour[c]].reward.hillwalk_points;
        }
        b++;
    }
} if (this.data.config.stagecountbonus[b]) {
    bonus = this.data.config.stagecountbonus[b];
    this.tourReward.points = Math.ceil(this.tourReward.points * bonus.points);
    this.tourReward.money = Math.ceil(this.tourReward.money * bonus.money);
    this.tourReward.hillwalk_points = Math.ceil(this.tourReward.hillwalk_points * bonus.hillwalk_points);
} if (this.tourHelper.stamina > 0) {
    if (this.data.config.helper[this.tourHelper.stamina].money) {
        this.tourNeed.money += this.data.config.helper[this.tourHelper.stamina].money;
    }
    if (this.data.config.helper[this.tourHelper.stamina].coins) {
        this.tourNeed.coins += this.data.config.helper[this.tourHelper.stamina].coins;
    }
} if (this.tourHelper.duration > 0) {
    if (this.data.config.helper[this.tourHelper.duration].money) {
        this.tourNeed.money += this.data.config.helper[this.tourHelper.duration].money;
    }
    if (this.data.config.helper[this.tourHelper.duration].coins) {
        this.tourNeed.coins += this.data.config.helper[this.tourHelper.duration].coins;
    }
} this.tourString = this.tourString.substring(0, this.tourString.length - 1); };
hillwalk.prototype.clickStage = function (b) { var l = this.data.config.level[this.data.data.level].stamina; var d = 0; var a = 0; var h = 1; for (var c in this.tour) {
    if (c > 0) {
        h++;
        if (this.tour[c] == b) {
            a = 1;
        }
        if (a == 1) {
            delete this.tour[c];
        }
        else {
            d += this.getStageStamina(this.tour[c]);
            if (this.data.config.stages[this.tour[c]].recovery) {
                d = Math.max(d - this.data.config.stages[this.tour[c]].recovery, 0);
            }
        }
    }
} if (!a) {
    var e = 0;
    if (h == 1) {
        if (this.data.config.stages[b].start) {
            e = 1;
        }
    }
    else {
        if (in_array(b, this.data.config.stages[this.tour[(h - 1)]].neighbors)) {
            e = 1;
        }
    }
    if (e && (l - d) >= this.getStageStamina(b)) {
        this.tour[h] = b;
    }
} this.update(); };
hillwalk.prototype.showHelper = function (e) { var d = '<div id="hillwalk_helper_select">'; d += '<div class="item">'; if (e == "stamina") {
    var a = t_hillwalk_helper_stamina_remove;
} if (e == "duration") {
    var a = t_hillwalk_helper_duration_remove;
} d += '  <div class="button_new link" onclick="hillwalk.addHelper(\'' + e + "', 0)\">" + a + "</div>"; d += "</div>"; for (var c in this.data.config.helper) {
    if (this.data.config.helper[c].type == e) {
        d += '<div class="item">';
        d += '  <div class="img helper helper' + c + '"></div>';
        d += '  <div class="info">';
        d += '    <div class="name">' + this.data.config.helper[c].name + "</div>";
        d += "    <div>" + t_hillwalk_helper[e].replace("%PERCENT%", Math.floor((1 - this.data.config.helper[c].reduction) * 100)) + "</div>";
        if (this.data.config.helper[c].coins) {
            d += '<div class="cost">' + cityadcost + this.data.config.helper[c].coins + "&nbsp;" + t_coins + "</div>";
        }
        if (this.data.config.helper[c].money) {
            d += '<div class="cost">' + cityadcost + formatPrice(this.data.config.helper[c].money) + "</div>";
        }
        d += '    <div class="button_new link" onclick="hillwalk.addHelper(\'' + e + "', " + c + ')">' + t_hillwalk_helper_add + "</div>";
        d += "  </div>";
        d += '  <div class="clear"></div>';
        d += "</div>";
    }
} d += "</div>"; if (e == "stamina") {
    var b = t_hillwalk_helper_stamina_head;
} if (e == "duration") {
    var b = t_hillwalk_helper_duration_head;
} globalBoxFlex(b, d, 0, 0, 1); };
hillwalk.prototype.addHelper = function (a, b) { $("hillwalk_helper_" + a).className = "link helper helper" + b; this.tourHelper[a] = b; hideDiv("globaltransp"); hideDiv("globalbox"); this.update(); };
hillwalk.prototype.getStageStamina = function (a) { var b = this.data.config.stages[a].stamina; if (this.tourHelper.stamina > 0) {
    b = Math.ceil(b * this.data.config.helper[this.tourHelper.stamina].reduction);
} return b; };
hillwalk.prototype.getStageDuration = function (a) { var b = this.data.config.stages[a].duration; if (this.tourHelper.duration > 0) {
    b = Math.ceil(b * this.data.config.helper[this.tourHelper.duration].reduction);
} return b; };
hillwalk.prototype.startCommit = function () { if ($("hillwalk_tourstart").hasClassName("inactive")) {
    return 0;
} var b = '<div id="hillwalk_startcommit">'; b += '  <div class="block">'; b += '    <div class="bold">' + t_pony_tt_need + "</div>"; for (var a in this.tourNeed.products) {
    b += htmlProductBody(a, this.tourNeed.products[a]);
} if (this.tourNeed.money > 0) {
    b += "<div>" + formatPrice(this.tourNeed.money) + "</div>";
} if (this.tourNeed.coins > 0) {
    b += "<div>" + this.tourNeed.coins + "&nbsp;" + t_coins + "</div>";
} if (this.tourNeed.hillwalk_points > 0) {
    b += "<div>" + formatNumber(this.tourNeed.hillwalk_points) + "&nbsp;" + t_hillwalk_points + "</div>";
} b += "  </div>"; b += '  <div class="block">'; b += '    <div class="bold">' + t_vet_reward_head + ":</div>"; if (this.tourReward.points) {
    b += "<div>" + formatNumber(this.tourReward.points) + "&nbsp;" + t_points + "</div>";
} if (this.tourReward.money) {
    b += "<div>" + formatPrice(this.tourReward.money) + "</div>";
} if (this.tourReward.hillwalk_points) {
    b += "<div>" + formatNumber(this.tourReward.hillwalk_points) + "&nbsp;" + t_hillwalk_points + "</div>";
} b += "  </div>"; b += "</div>"; var c = "hillwalk.start()"; globalcommitbox(t_hillwalk_tour_start, b, c); };
hillwalk.prototype.drawingsStats = function () { this.drawingsInStage = {}; this.drawingsCount = 0; for (var b in this.data.config.stages) {
    if (!this.data.config.stages[b].drawings) {
        continue;
    }
    for (var a = 0; a < this.data.config.stages[b].drawings.pool.length; a++) {
        this.drawingsInStage[this.data.config.stages[b].drawings.pool[a]] = b;
        this.drawingsCount++;
    }
} };
hillwalk.prototype.book = function () { var d = t_hillwalk_book; var c = ""; c += '<div id="hillwalk_book_page1" class="page"></div>'; c += '<div id="hillwalk_book_page2" class="page"></div>'; c += '<div class="clear"></div>'; c += '<div class="navi">'; c += '  <div id="hillwalk_book_navi_left" class="link" onclick="hillwalk.bookNavi(-1)"></div>'; c += '  <div id="hillwalk_book_navi_right" class="link" onclick="hillwalk.bookNavi(1)"></div>'; c += '  <div class="clear"></div>'; c += "</div>"; c += '<div class="subnavi">'; var a = 0; for (var b in this.data.config.stages) {
    if (!this.data.config.stages[b].drawings) {
        continue;
    }
    c += '<div id="hillwalk_book_subnavi_' + b + '" class="link link' + b + '" onclick="hillwalk.page=' + ((Math.ceil((a + 1) / 2) * 2) - 1) + '; hillwalk.bookNavi();" onmouseover="showDiv(\'hillwalk_book_subnavi_' + b + "_tt')\" onmouseout=\"hideDiv('hillwalk_book_subnavi_" + b + "_tt')\">";
    c += '  <div id="hillwalk_book_subnavi_' + b + '_tt" class="ttbox">' + this.data.config.stages[b].name + "</div>";
    c += "</div>";
    a += this.data.config.stages[b].drawings.pool.length;
} c += "</div>"; c += "<div class=\"mini_close link\" onclick=\"hideDiv('hillwalk_book'); hideDiv('hillwalk_transp')\"></div>"; $("hillwalk_book").innerHTML = c; showDiv("hillwalk_book"); showDiv("hillwalk_transp"); this.bookNavi(); };
hillwalk.prototype.drawPage = function (d) { var c = 1; if (d % 2 == 0) {
    c = 2;
} var b = ""; if (this.drawingsInStage[d]) {
    if (in_array(d, this.data.data.book)) {
        b += '<div class="drawing drawing' + d + '"></div>';
    }
    b += '<div class="page_count">' + d + "</div>";
    b += '<div class="headline">' + this.data.config.stages[this.drawingsInStage[d]].name + "</div>";
    for (var a in this.drawingsInStage) {
        $("hillwalk_book_subnavi_" + this.drawingsInStage[a]).removeClassName("active");
    }
    $("hillwalk_book_subnavi_" + this.drawingsInStage[d]).addClassName("active");
} $("hillwalk_book_page" + c).innerHTML = b; };
hillwalk.prototype.bookNavi = function (a) { if (a) {
    this.page += (a * 2);
} if (this.page < 1) {
    this.page = 1;
} if (this.page > this.drawingsCount) {
    this.page = (Math.ceil(this.drawingsCount / 2) * 2) - 1;
} this.drawPage(this.page); this.drawPage((this.page + 1)); showDiv("hillwalk_book_navi_left"); showDiv("hillwalk_book_navi_right"); if (this.page == 1) {
    hideDiv("hillwalk_book_navi_left");
} if (this.page == (this.drawingsCount - 1)) {
    hideDiv("hillwalk_book_navi_right");
} };
hillwalk.prototype.bookEntry = function (a) { for (var c = 0; c < a.length; c++) {
    var b = this.drawingsInStage[a[c]];
    this.bookEntryFly(b);
} };
hillwalk.prototype.bookEntryFly = function (a) { html = '<div id="flyer_bookentry' + a + '" class="bookentry stage' + a + '"></div>'; $("hillwalk_stages").insert(html); setTimeout(function () { if ($("flyer_bookentry" + a)) {
    $("flyer_bookentry" + a).className = "bookentry fly";
} }, 300); setTimeout(function () { if ($("flyer_bookentry" + a)) {
    $("flyer_bookentry" + a).remove();
} }, 1200); };
hillwalk.prototype.hunt = function () { hideDiv("hillwalk_hunt"); if (this.data.hunt) {
    var c = "";
    c += '<div id="hillwalk_hunt_tt" class="ttbox">' + this.data.config.hunt[this.data.hunt.id].name + "</div>";
    c += '<div class="target"><div class="target' + this.data.hunt.id + '"></div></div>';
    c += '<div class="meter">';
    for (var b = 1; b <= this.data.config.hunt[this.data.hunt.id].steps; b++) {
        var a = "";
        if (b <= this.data.hunt.step) {
            a = "found";
        }
        c += '<div class="step ' + a + '"></div>';
    }
    c += "</div>";
    $("hillwalk_hunt").innerHTML = c;
    showDiv("hillwalk_hunt");
} };
hillwalk.prototype.help = function (b) { showDiv("hillwalk_transp"); showDiv("hillwalk_help"); hideDiv("hillwalk_helppage"); hideDiv("hillwalk_achievements"); $("hillwalk_navi_helppage").removeClassName("active"); $("hillwalk_navi_achievements").removeClassName("active"); if (!b) {
    b = "helppage";
} showDiv("hillwalk_" + b); $("hillwalk_navi_" + b).addClassName("active"); for (var a = 0; a < this.data.achievements.achievements.length; a++) {
    showDiv("hillwalk_help_achievement_ready" + this.data.achievements.achievements[a]);
} for (var a = 0; a < this.data.achievements.hunts.length; a++) {
    showDiv("hillwalk_help_hunt_ready" + this.data.achievements.hunts[a]);
} };
hillwalk.prototype.helpClose = function () { hideDiv("hillwalk_transp"); hideDiv("hillwalk_help"); };
hillwalk.prototype.showStats = function () { var a = '<div id="hillwalk_stats">'; a += '  <div class="select_line">'; a += '    <select id="hillwalk_stats_select" onchange="hillwalk.stats()">'; var b = ["points", "tours", "stages", "category2", "category3", "category4"]; for (var c = 0; c < b.length; c++) {
    var d = "";
    if (this.stats_select == b[c]) {
        d = "selected";
    }
    a += '<option value="' + b[c] + '" ' + d + ">" + t_hillwalk_stats[b[c]] + "</option>";
} a += "    </select>"; a += "  </div>"; a += '  <div class="headline">' + t_hillwalk_stats_headlines[this.stats_select] + "</div>"; a += '  <div class="list">'; a += htmlStatsContent(this.stats_cache[this.stats_select]); a += "</div>"; globalBoxFlex("", a, 0, 0, 1); };
function jobTeaser() { var b = ""; b += '<div style="margin-bottom:5px;">' + t_guildjob_teaser_intro + "</div>"; b += '<div style="margin-bottom:5px;">'; b += '  <div class="job_overview_link" style="float:left; margin-right:5px;"></div>'; b += '  <div style="float:left; font-weight:bold; margin-top:3px;">' + t_guildjob_teaser_block1 + "</div>"; b += '  <div class="clear"></div>'; b += "</div>"; for (var a in job_data.config.jobs) {
    b += '<div class="job_jobsymbol_mini job_jobsymbol' + a + '_mini" style="position:relative; float:left; margin:2px;"></div>';
} b += '<div class="clear"></div>'; b += '<div class="button_new link" style="width:200px; margin:0 auto;" onclick="showJobOverview()">' + t_guildjob_start_need_job_button + "</div>"; b += '<div style="float:left; margin-right:30px; background-size:100%; width:40px; height:55px; margin-left:-20px;" class="guild_job_difficulty1"></div>'; b += '<div style="float:left; font-weight:bold; margin-top:30px; margin-bottom:5px;">' + t_guildjob_teaser_block2 + "</div>"; b += '<div class="clear"></div>'; if (player_guild > 0) {
    b += '<div class="button_new link" style="width:200px; margin:0 auto; margin-top:-30px;" onclick="initGuild()">' + t_go2guild + "</div>";
} globalBoxFlex(t_guildjob_teaser_head, b, 0, 0, 1); }
function jobAchievements() { var b = '<div style="width:440px; height:380px; text-align:left;">'; for (var a in job_data.config.achievements) {
    var c = t_guildjob_job_achievement[job_data.config.achievements[a].type];
    if (job_data.config.achievements[a].key) {
        c = t_guildjob_job_achievement[job_data.config.achievements[a].key];
    }
    c = str_replace("%COUNT%", job_data.config.achievements[a].count, c);
    b += '<div style="position:relative; float:left; width:200px; margin:10px;">';
    b += '  <img src="' + imgpath + "gifts/" + job_data.config.achievements[a].giftid + '.gif" align="left" hspace="5" style="width:50px;">' + c;
    if (job_data.config.achievements[a].done) {
        b += '<div style="display:block; right:auto; left:0px;" class="megafield_product_ready"></div>';
    }
    b += "</div>";
} b += "</div>"; click2 = "hideDiv('globalbox'); hideDiv('globaltransp'); showJobOverview();"; globalBoxFlex(t_guildjob_job_achievements, b, 0, click2, 1); $("globalbox").style.top = "50px"; }
function jobHelp(h) { var d = ""; d += '<div style="width:500px; height:400px; margin-top:-30px; overflow:auto;">'; d += '  <div id="jobhelp_navi">'; for (var c = 1; c <= 4; c++) {
    d += '<div id="jobhelp_navi' + c + '" class="link brown_tab" onclick="jobHelpNavi(' + c + ')">' + t_guildjob_help[c] + "</div>";
} d += '    <div class="clear"></div>'; d += "  </div>"; d += '  <div class="brown_tab_content" style="text-align:left;">'; for (var c = 1; c <= 4; c++) {
    d += '<div id="jobhelp_content' + c + '">';
    if (c == 1) {
        d += '<div style="margin-bottom:10px;" class="headline">' + t_guildjob_help["1_1"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_2"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_3"] + "</div>";
        d += '<div style="margin-bottom:10px; padding:10px; border:2px solid #6C441D; border-radius:5px;">';
        d += '  <ol style="margin:0px; padding:0px 15px;">';
        d += '    <li style="margin-bottom:10px;">';
        d += "      <div>";
        d += "        <div>" + t_guildjob_help["1_4"] + "</div>";
        for (var e = 1; e <= 3; e++) {
            var m = t_difficulty[e];
            if (e == 1) {
                m = t_difficulty[3];
            }
            if (e == 3) {
                m = t_difficulty[1];
            }
            d += '<div style="float:left; width:97px; height:120px; border-radius:5px; background-color:#C3A75E; margin-right:5px;">';
            d += '  <div style="text-align:center; margin:5px 0px -35px; font-weight:bold;">' + m + "</div>";
            d += '  <div class="guild_job_difficulty' + e + '" style="transform:scale(0.5); margin-top:-5px; margin-left:-30px;"></div>';
            d += "</div>";
        }
        d += '        <div class="clear"></div>';
        d += "      </div>";
        d += "    </li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_5"] + '<br><span style="margin-top:5px; display:block; color:navy; font-weight:bold;">' + t_guildjob_help["1_6"] + "</span></li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_7"] + "</li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_8"] + "</li>";
        d += "    <li>";
        d += "      <div>" + t_guildjob_help["1_9"] + "</div>";
        d += '      <div style="float:left; position:relative; border-radius:5px; margin:5px 0px;" class="l1"><div class="guildjob_orderpoints" style="right:-5px; top:-5px; position:absolute;"></div></div>';
        d += '      <div style="float:left; width:330px; margin-left:5px; margin-top:15px;" class="guild_job_bar">';
        d += '        <div style="position:absolute; top:0px; left:0px; background-color:#transparent; border-right:1px dashed #fff; height:20px; width:90%"></div>';
        d += "      </div>";
        d += '      <div style="float:left;"></div>';
        d += '      <div class="clear"></div>';
        d += "    </li>";
        d += "  </ol>";
        d += "</div>";
        d += '<div style="margin-bottom:10px; margin-top:15px;" class="headline">' + t_guildjob_help["1_10"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_20"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_12"] + "</div>";
        d += '<div style="margin-bottom:10px; margin-top:15px;" class="headline">' + t_guildjob_help["1_13"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_14"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["1_15"] + "</div>";
        d += '<div style="margin-bottom:10px;">';
        d += '  <ul style="margin:0px; padding:0px 15px;">';
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_16"] + "</li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_17"] + "</li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_18"] + "</li>";
        d += '    <li style="margin-bottom:10px;">' + t_guildjob_help["1_19"] + "</li>";
        d += "  </ul>";
        d += "</div>";
    }
    if (c == 2) {
        d += '<div style="margin-bottom:10px;" class="headline">' + t_guildjob_help["2_1"] + "</div>";
        d += '<div style="margin-bottom:10px;">';
        d += '  <div style="float:left; margin-right:15px; border-radius:5px;" class="tt1">';
        d += '    <div class="guildjob_orderpoints" style="position:absolute; top:-5px; right:-10px;"></div>';
        d += "  </div>";
        d += '  <div style="float:left; width:400px;">' + t_guildjob_help["2_2"] + "</div>";
        d += '  <div class="clear"></div>';
        d += "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["2_3"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["2_4"] + "</div>";
        d += '<div style="margin-bottom:10px; margin-top:15px;" class="headline">' + t_guildjob_help["2_5"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["2_6"] + "</div>";
        d += '<div style="margin-bottom:10px; font-weight:bold;">' + t_guildjob_help["2_7"] + "</div>";
        d += '<div style="margin-bottom:10px; padding:10px; border:2px solid #6C441D; border-radius:5px;">';
        d += '  <div style="margin-bottom:10px;">' + t_guildjob_help["2_8"] + "</div>";
        d += "  <div>" + t_guildjob_help["2_9"] + "</div>";
        d += "</div>";
        d += '<div style="margin-bottom:10px; margin-top:15px;" class="headline">' + t_guildjob_help["2_10"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["2_11"] + "</div>";
    }
    if (c == 3) {
        d += '<div style="margin-bottom:10px;" class="headline">' + t_guildjob_help["3_1"] + "</div>";
        d += '<div style="margin-bottom:10px;">';
        d += '  <div style="float:left; background:url(' + imgpath + 'reallocate_symbol5.png); background-position:0px -83px; width:20px; height:20px; margin-right:5px;" class="link" onclick="showJobOverview();"></div>';
        d += '  <div style="float:left; width:440px;">' + t_guildjob_help["3_2"] + "</div>";
        d += '  <div class="clear"></div>';
        d += "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["3_3"] + "</div>";
        d += '<div style="margin-bottom:10px; margin-top:15px;" class="headline">' + t_guildjob_help["3_4"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["3_5"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["3_6"] + "</div>";
        d += '<div style="margin-top:15px;">';
        d += '  <div style="margin-bottom:10px;" class="headline">' + t_guildjob_help["3_7"] + "</div>";
        var a = 8;
        for (var b = 1; b <= 2; b++) {
            var n = {};
            n[1] = { data: job_data.config.tools, "class": "f_symbol", head: t_tool_name };
            n[2] = { data: job_data.config.boosts, "class": "job_boost", head: t_booster_name };
            d += '<div style="margin-bottom:10px; padding:10px; border:2px solid #6C441D; border-radius:5px;">';
            d += '  <div style="float:left; width:120px; margin-right:5px;">';
            for (id in n[b].data) {
                d += '<div class="' + n[b]["class"] + id + '" style="float:left; margin:2px;"></div>';
            }
            d += "  </div>";
            d += '  <div style="float:left; width:315px;">';
            d += '    <div class="headline">' + n[b].head + "</div>";
            d += '    <div style="margin-bottom:10px;">' + t_guildjob_help["3_" + a] + "</div>";
            a++;
            d += "    <div>" + t_guildjob_help["3_" + a] + "</div>";
            a++;
            d += "  </div>";
            d += '  <div class="clear"></div>';
            d += "</div>";
        }
        d += "</div>";
    }
    if (c == 4) {
        d += '<div style="margin-bottom:10px;" class="headline">' + t_guildjob_help[4] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["4_1"] + "</div>";
        d += '<div style="margin-bottom:10px;">' + t_guildjob_help["4_2"] + "</div>";
        d += '<div style="padding:10px; border:2px solid #6C441D; border-radius:5px;">';
        d += '  <div style="margin-bottom:5px;" class="headline">' + t_guildjob_help["4_3"] + "</div>";
        var n = {};
        n[1] = { style: "background-color:coral;", "class": "locked", text: t_guildjob_help["4_4"] };
        n[2] = { style: "background-color:cornflowerblue;", "class": "unlocked", text: t_guildjob_help["4_5"] };
        n[3] = { style: "", "class": "locked_plus", text: t_guildjob_help["4_6"] };
        n[4] = { style: "background-color:white;", "class": "", text: t_guildjob_help["4_7"] };
        for (var b = 1; b <= 4; b++) {
            d += '<div style="margin-bottom:5px;">';
            d += '  <div style="width:50px; height:50px; border-radius:5px; float:left; margin-right:5px; ' + n[b].style + '" class="' + n[b]["class"] + '"></div>';
            d += '  <div style="float:left; width:400px;">' + n[b].text + "</div>";
            d += '  <div class="clear"></div>';
            d += "</div>";
        }
        d += "</div>";
    }
    d += "</div>";
} d += "  </div>"; d += "</div>"; var l = ""; if (h == "job") {
    l = "hideDiv('globalbox'); hideDiv('globaltransp'); showJobOverview();";
} globalBoxFlex(0, d, 0, l, 1); jobHelpNavi(); }
function jobHelpNavi(b) { if (!b) {
    b = 1;
} for (var a = 1; a <= 4; a++) {
    $("jobhelp_navi" + a).removeClassName("brown_tab_active");
    hideDiv("jobhelp_content" + a);
} $("jobhelp_navi" + b).addClassName("brown_tab_active"); showDiv("jobhelp_content" + b); }
function showJobOverview() { closeBuildingInner(); var b = t_guildjob_navi5; var a = htmlJobOverview(); a += '<div id="job_overview_helpbutton" class="helpbutton_blue link" onclick="jobHelp(\'job\')"></div>'; a += '<div id="job_overview_achievementbutton" class="achievementbutton link link" onclick="jobAchievements()"></div>'; globalBoxFlex(b, a, 0, 0, 1); $("globalbox").style.top = "50px"; }
function jobTimer() { if (job_data.changeremain) {
    job_data.changeremain--;
} if (job_data.tool) {
    job_data.tool.remain--;
} if (job_data.boost) {
    job_data.boost.remain--;
} if (job_data.guild_job_data && job_data.guild_job_data.remain) {
    job_data.guild_job_data.remain--;
} jobTimerContentUpdate(); }
function jobTimerContentUpdate() { if ($("job_change_cooldown")) {
    if (job_data.changeremain > 0) {
        $("job_change_cooldown").innerHTML = t_guildjob_memberjob_change_cooldown + "&nbsp;" + formatTime(job_data.changeremain);
        showDiv("job_change_cooldown");
    }
    else {
        hideDiv("job_change_cooldown");
    }
} if ($("job_change_cooldown_dialog")) {
    var d = "";
    if (job_data.changeremain > 0) {
        d = '<div style="margin-bottom:10px;">' + t_additionalcost + job_data.config.job_change_cooldown_coins + "&nbsp;" + t_coins + "</div>";
        d += '<div class="bonusinfo important">' + str_replace("%TIME%", formatTime(job_data.changeremain), t_guildjob_memberjob_change_cooldown_info) + "</div>";
        $("job_change_cooldown_dialog").innerHTML = d;
        showDiv("job_change_cooldown_dialog");
    }
    else {
        hideDiv("job_change_cooldown_dialog");
    }
} for (var b = 1; b <= 2; b++) {
    if (b == 1) {
        var a = "tool";
    }
    if (b == 2) {
        var a = "boost";
    }
    if ($("job_" + a + "_img")) {
        if (job_data[a] && job_data[a].remain > 0) {
            $("job_" + a + "_timer").innerHTML = formatTime(job_data[a].remain);
            var c = 100 - ((job_data[a].remain * 100) / job_data.config[a + "s"][job_data[a].pid].duration);
            $("job_" + a + "_bar_inner").style.width = c + "%";
            if (a == "tool") {
                $("job_tool_img").className = "ftool" + job_data.tool.pid;
            }
            if (a == "boost") {
                $("job_boost_img").className = "job_boost" + job_data.boost.pid;
            }
            $("job_" + a + "_name").innerHTML = job_data.config[a + "s"][job_data[a].pid].name;
            showDiv("job_" + a + "_run");
            $("job_" + a + "_tt").innerHTML = htmlJobItemTT(a, job_data[a].pid);
            $("job_" + a + "_img").onmouseover = new Function("showDiv('job_" + a + "_tt')");
            $("job_" + a + "_img").onmouseout = new Function("hideDiv('job_" + a + "_tt')");
            $("job_" + a + "_img").onclick = new Function("");
            showDiv("job_" + a + "_production");
        }
        else {
            hideDiv("job_" + a + "_run");
            $("job_" + a + "_img").className = "cross";
            $("job_" + a + "_img").onmouseover = new Function("");
            $("job_" + a + "_img").onmouseout = new Function("");
            $("job_" + a + "_img").onclick = new Function("jobDialog('show_" + a + "s')");
            hideDiv("job_" + a + "_production");
        }
    }
} }
function toogleJobDetails(a) { if ($("job_overview_boni" + a).style.display == "block") {
    $("job_overview_details" + a).removeClassName("arrow_black_small_bottom").addClassName("arrow_black_small_top");
}
else {
    $("job_overview_details" + a).removeClassName("arrow_black_small_top").addClassName("arrow_black_small_bottom");
} toogleDiv("job_overview_boni" + a); }
function htmlJobLevelBoni(l, m) { var e = ""; if (job_data.config.level_boni[l]) {
    for (var d = 1; d <= m; d++) {
        if (job_data.config.level_boni[l][d]) {
            for (var c = 0; c < job_data.config.level_boni[l][d].length; c++) {
                var b = "";
                e += '<div style="margin:5px 0px;">';
                for (var a = 0; a < job_data.config.level_boni[l][d][c].products.length; a++) {
                    e += '<div class="kp' + job_data.config.level_boni[l][d][c].products[a] + '" style="float:left; margin-right:5px;"></div>';
                    b = produkt_name[job_data.config.level_boni[l][d][c].products[a]];
                }
                var h = str_replace("%PERCENT%", (job_data.config.level_boni[l][d][c].chance * 100), t_guildjob_job_harvest_bonus);
                e += '  <div style="text-align:left; float:left; width:180px;">' + b + ":&nbsp;" + str_replace("%BONUS%", (job_data.config.level_boni[l][d][c].harvest * 100), h) + "</div>";
                e += '  <div class="clear"></div>';
                e += "</div>";
            }
        }
    }
} return e; }
function htmlJobOverview() { var n = ""; var b = ""; for (jobid in job_data.config.jobs) {
    var d = getJobLevel(jobid);
    var l = "";
    l += '<div style="position:relative; margin-top:5px;">';
    l += '  <div style="position:relative; float:left; margin-right:5px;" class="job_jobsymbol' + jobid + ' job_jobsymbol"></div>';
    l += '  <div style="position:relative; float:left; width:425px;">';
    l += '    <div style="font-weight:bold; text-align:left; margin-bottom:5px; float:left;">' + job_data.config.jobs[jobid].name + "</div>";
    l += '    <div id="job_overview_details' + jobid + '" class="link arrow_black_small_top" style="position:relative; float:right;" onclick="toogleJobDetails(' + jobid + ');"></div>';
    l += '    <div class="clear"></div>';
    l += '    <div style="margin-bottom:5px;">';
    for (var e = 0; e < job_data.config.jobs[jobid].products.length; e++) {
        var m = job_data.config.jobs[jobid].products[e];
        l += '<div class="kp' + m + '" style="position:relative; margin-right:5px; float:left;" onmouseover="showDiv(\'job_jobproduct_tt' + m + "')\" onmouseout=\"hideDiv('job_jobproduct_tt" + m + "')\">";
        l += '  <div id="job_jobproduct_tt' + m + '" style="left:20px;" class="ttbox">' + produkt_name[m] + "</div>";
        l += "</div>";
    }
    l += '      <div class="clear"></div>';
    l += "    </div>";
    l += '    <div style="float:left; font-weight:bold; font-size:20px; margin-right:5px; margin-top:-2px;">' + d.level + "</div>";
    l += '    <div class="guild_job_bar" style="float:left;">';
    l += '      <div class="guild_job_bar_inner" style="width:' + d.percent + '%;"></div>';
    l += '      <div class="guild_job_bar_text">' + t_level_status + ":&nbsp;" + Math.round(d.percent) + "%</div>";
    l += "    </div>";
    if (job_data.currentjob != jobid) {
        l += '<button class="button_new link" onclick="jobDialog(\'change\', ' + jobid + ')">' + t_guildjob_memberjob_change + "</button>";
    }
    l += '    <div class="clear"></div>';
    l += '      <div style="width:320px;">' + formatNumber(d.current) + "&nbsp;/&nbsp;" + formatNumber(d.next) + "</div>";
    l += '  <div id="job_overview_boni' + jobid + '" class="job_overview_boni" style="margin-top:5px;">';
    l += '    <div style="float:left; width:200px; background-color:#C3A75E; padding:5px; margin-right:5px; border-radius:5px;">';
    l += '      <div style="font-weight:bold; margin-bottom:5px;">' + t_guildjob_current_boni + "</div>";
    l += htmlJobLevelBoni(jobid, d.level);
    l += "    </div>";
    if (job_data.config.level[(d.level + 1)]) {
        l += '<div style="float:left; width:200px; background-color:#C3A75E; padding:5px; border-radius:5px;">';
        l += '  <div style="font-weight:bold; margin-bottom:5px;">' + t_guildjob_next_level + "<br>" + t_vet_reward_head + "</div>";
        for (var c in job_data.config.level[(d.level + 1)].reward) {
            if (c == "points") {
                l += "<div>" + formatNumber(job_data.config.level[(d.level + 1)].reward[c]) + "&nbsp;" + t_points + "</div>";
            }
            if (c == "money") {
                l += "<div>" + formatPrice(job_data.config.level[(d.level + 1)].reward[c]) + "</div>";
            }
        }
        l += htmlJobLevelBoni(jobid, (d.level + 1));
        l += "</div>";
    }
    l += '    <div class="clear"></div>';
    l += "  </div>";
    l += "  </div>";
    l += '  <div class="clear"></div>';
    l += "</div>";
    if (job_data.currentjob == jobid) {
        n += l;
    }
    else {
        b += l;
    }
} if (n == "") {
    n = t_job_nojob;
} var l = ""; l += '<div style="position:relative; height:430px; overflow:auto; width:550px;">'; l += '  <div style="background-color:antiquewhite; padding:15px 10px; width:510px; border-radius:5px; margin-bottom:10px;">'; l += "    <div>" + t_guildjob_level_job_info + "</div>"; if (player_guild > 0) {
    l += '<div class="button_new link" style="position:relative; width:200px; margin:5px auto;" onclick="initGuild()">' + t_go2guild + "</div>";
} l += "  </div>"; l += '  <div class="guild_job_memberlist_item_head">' + t_guildjob_memberjob_select + "</div>"; l += "  <div>" + n + "</div>"; l += '  <div style="position:relative; margin:10px 0; background-color:#C3A75E; border-radius:5px; padding:5px; width:520px;">'; l += '    <div style="margin-bottom:10px;">' + t_guildjob_tools_and_booster_warning + "</div>"; for (var e = 1; e <= 2; e++) {
    var a = "tool";
    var h = t_tool_name;
    if (e == 2) {
        a = "boost";
        h = t_booster_name;
    }
    l += '<div style="float:left; margin-right:5px; margin-left:20px;">' + h + "</div>";
    l += '<div id="job_' + a + '_img" class="cross">';
    l += '  <div id="job_' + a + '_tt" class="ttbox"></div>';
    l += "</div>";
    l += '<div id="job_' + a + '_info">';
    l += '  <div id="job_' + a + '_run">';
    l += '    <div id="job_' + a + '_name"></div>';
    l += '    <div id="job_' + a + '_bar">';
    l += '      <div id="job_' + a + '_bar_inner"></div>';
    l += '      <div id="job_' + a + '_timer" style=""></div>';
    l += "    </div>";
    l += "  </div>";
    l += "</div>";
} l += '    <div class="clear"></div>'; l += "  </div>"; l += '  <div class="guild_job_memberlist_item_head">'; l += '    <div style="float:left;">' + t_guildjob_memberjob_other + "</div>"; l += '    <div style="float:right" id="job_change_cooldown"></div>'; l += '    <div class="clear"></div>'; l += "  </div>"; l += "  <div>" + b + "</div>"; l += "</div>"; return l; }
function getJobLevel(l) { var d = { level: 1, percent: 0, current: 0, next: 0 }; if (job_data.jobs && job_data.jobs[l]) {
    var c = 0;
    var b = parseInt(job_data.jobs[l].points);
    for (var m in job_data.config.level) {
        var a = parseInt(job_data.config.level[m].points);
        if (b >= a) {
            d.level = parseInt(m);
            if (!job_data.config.level[(parseInt(m) + 1)]) {
                d.percent = 100;
            }
            else {
                c = job_data.config.level[(parseInt(m) + 1)].points;
                var h = (job_data.config.level[(parseInt(m) + 1)].points - a);
                var e = (b - a);
                d.percent = ((e * 100) / h);
            }
        }
    }
    d.current = b;
    d.next = c;
}
else {
    d.current = 0;
    d.next = job_data.config.level[2].points;
} return d; }
function jobDialog(d, a) { if (d == "change") {
    var n = t_guildjob_memberjob_change;
    var l = "<div>" + str_replace("%NEW%", "<b>" + job_data.config.jobs[a].name + "</b>", t_guildjob_memberjob_change_body) + "</div>";
    var c = formatPrice(job_data.config.job_change_cost);
    if (!job_data.config.jobs[job_data.currentjob]) {
        c = forfree;
    }
    l += '<div style="margin-top:10px; margin-bottom:20px;">' + cityadcost + c + "</div>";
    l += '<div id="job_change_cooldown_dialog" class="job_change_cooldown_dialog"></div>';
    l += '<div style="margin-top:10px;">' + t_guildjob_memberjob_change_body_info2 + "</div>";
    if (job_data.config.jobs[job_data.currentjob]) {
        l += '<div class="bonusinfo">' + str_replace("%CURRENT%", "<b>" + job_data.config.jobs[job_data.currentjob].name + "</b>", t_guildjob_memberjob_change_body_info) + "</div>";
    }
    var s = "guildJobChangeMemberJob(" + a + ")";
    var q = "showJobOverview()";
    globalcommitbox(n, l, s, q);
} if (d == "show_tools") {
    var n = t_guildjob_add_tool_head;
    var l = '<div style="width:350px; margin:0 auto; margin-top:-5px; margin-bottom:15px;">' + t_guildjob_add_tool_info + "</div>";
    l += '<div style="width:615px; height:330px; overflow:auto;">';
    var e = job_data.config.tools;
    for (var a in e) {
        var s = "";
        var m = "opacity:0.5;";
        var h = checkForestryRackItem(a);
        if (h) {
            s = "guildJobSetToolCommit(" + a + ")";
            m = "";
        }
        l += '<div class="link" onclick="' + s + '" style="position:relative; float:left; background-color:#C3A75E; border-radius:5px; padding:5px; width:180px; margin:3px; height:170px; ' + m + '">';
        l += '  <div class="f_symbol' + a + '" style="float:left; margin-right:5px;"></div>';
        l += '  <div style="float:left; text-align:left; width:150px;">';
        l += '    <div style="font-weight:bold; margin-bottom:5px;">' + produkt_name_forestry[a] + "</div>";
        for (var b in e[a].bonus) {
            if (e[a].bonus.harvest) {
                var r = str_replace("%BONUS%", (e[a].bonus.harvest * 100), t_guildjob_tool_harvest);
                l += "<div>" + str_replace("%TIME%", formatTime(e[a].duration), r) + "</div>";
            }
        }
        l += '    <div style="margin-top:5px;">';
        for (var b = 0; b < e[a].jobs.length; b++) {
            l += '<div class="job_jobsymbol' + e[a].jobs[b] + '_mini job_jobsymbol_mini" style="position:relative; float:left; margin-right:5px;" onmouseover="showDiv(\'guildjob_showtools' + a + "_" + e[a].jobs[b] + "_tt')\" onmouseout=\"hideDiv('guildjob_showtools" + a + "_" + e[a].jobs[b] + "_tt')\">";
            l += '  <div id="guildjob_showtools' + a + "_" + e[a].jobs[b] + '_tt" class="ttbox" style="left:50px;">' + job_data.config.jobs[e[a].jobs[b]].name + "</div>";
            l += "</div>";
        }
        l += '    <div class="clear"></div>';
        l += "    </div>";
        l += "  </div>";
        l += '  <div class="clear"></div>';
        l += "</div>";
    }
    l += '<div class="clear"></div>';
    l += "</div>";
    globalBoxFlex(n, l, 0, "showJobOverview()", 1);
} if (d == "show_boosts") {
    var n = t_guildjob_add_boost_head;
    var l = '<div style="width:350px; margin:0 auto; margin-top:-5px; margin-bottom:15px;">' + t_guildjob_add_boost_info + "</div>";
    var e = job_data.config.boosts;
    for (var a in e) {
        var s = "";
        var m = "opacity:0.5;";
        if ($("coins").innerHTML >= e[a].coins) {
            s = "guildJobSetBoostCommit(" + a + ")";
            m = "";
        }
        l += '<div style="background-color:#C3A75E; border-radius:5px; margin-bottom:5px; padding:5px; ' + m + '">';
        l += '  <div style="position:relative; float:left;" class="job_boost' + a + '"></div>';
        l += '  <div style="position:relative; float:left; width:190px; text-align:left; margin:0px 10px;">';
        l += '    <div style="font-weight:bold;">' + e[a].name + "</div>";
        for (var b in e[a].bonus) {
            if (b == "points") {
                var r = str_replace("%PERCENT%", ((e[a].bonus[b] - 1) * 100), t_guildjob_boost_points);
                l += "<div>" + str_replace("%TIME%", formatTime(e[a].duration), r) + "</div>";
            }
        }
        l += "  </div>";
        l += '  <div style="position:relative; float:left; font-size:11px;" class="link coinsbutton_flex" onclick="' + s + '">' + str_replace("%COINS%", e[a].coins, t_guildjob_add_boost_buy) + "</div>";
        l += '  <div class="clear"></div>';
        l += "</div>";
    }
    l += '<div class="clear"></div>';
    globalBoxFlex(n, l, 0, "showJobOverview()", 1);
} }
function guildJobSetBoostCommit(e) { var a = ""; a += '<div style="position:relative; float:left;" class="job_boost' + e + '"></div>'; a += '<div style="float:left; margin-left:10px; text-align:left; width:150px;">'; a += '  <div style="font-weight:bold;">' + job_data.config.boosts[e].name + "</div>"; for (var d in job_data.config.boosts[e].bonus) {
    if (d == "points") {
        var c = str_replace("%PERCENT%", ((job_data.config.boosts[e].bonus[d] - 1) * 100), t_guildjob_boost_points);
        a += "<div>" + str_replace("%TIME%", formatTime(job_data.config.boosts[e].duration), c) + "</div>";
    }
} a += "</div>"; a += '<div class="clear"></div>'; a += '<div style="margin-top:10px;">' + str_replace("%COINS%", job_data.config.boosts[e].coins, t_guildjob_add_boost_buy) + "</div>"; if (!guild_job || !guild_job.job) {
    a += '<div style="width:95%; background-color:#C3A75E; border-radius:5px; padding:10px; margin-top:15px;">';
    a += "  <div>" + t_guildjob_tools_and_booster_warning + "</div>";
    a += '  <div style="margin-top:10px; font-weight:bold;">' + t_guildjob_no_current_job_commit + "</div>";
    a += "</div>";
} var b = "guildJobSetBoost(" + e + ")"; globalcommitbox(t_guildjob_add_boost_head, a, b, "showJobOverview()"); }
function htmlJobItem(c, d, a) { var b = ""; b += '<div id="job_' + c + '_production" class="job_' + c + d + ' job_item_slot" style="position:relative;" onmouseover="showDiv(\'job_' + c + "_production" + d + "_tt')\" onmouseout=\"hideDiv('job_" + c + "_production" + d + "_tt')\">"; if (c == "tool") {
    b += '<div class="ftool' + d + '"></div>';
} b += '  <div id="job_' + c + "_production" + d + '_tt" class="job_item_tt_' + a + ' ttbox">' + htmlJobItemTT(c, d) + "</div>"; b += "</div>"; return b; }
function htmlJobItemTT(c, l) { if (c == "tool") {
    var e = job_data.config.tools;
} if (c == "boost") {
    var e = job_data.config.boosts;
} var b = ""; b += '<div style="font-weight:bold; margin-bottom:5px;">' + e[l].name + "</div>"; if (e[l].jobs) {
    for (var a = 0; a < e[l].jobs.length; a++) {
        b += '<div style="margin-bottom:2px;">' + job_data.config.jobs[e[l].jobs[a]].name + "</div>";
    }
} b += "<div>&nbsp;</div>"; for (var a in e[l].bonus) {
    if (a == "points") {
        var d = e[l].bonus[a];
        if (c == "boost") {
            d = (d - 1) * 100;
        }
        var h = str_replace("%PERCENT%", d, t_guildjob_boost_points);
        b += "<div>" + str_replace("%TIME%", formatTime(e[l].duration), h) + "</div>";
    }
    if (a == "harvest") {
        var h = str_replace("%BONUS%", (e[l].bonus[a] * 100), t_guildjob_tool_harvest);
        b += "<div>" + str_replace("%TIME%", formatTime(e[l].duration), h) + "</div>";
    }
} return b; }
var kniffel = function () { this.data = {}; this.set = {}; this.dir = {}; };
kniffel.prototype.action = function (c, b) { var a = ""; if (b) {
    for (i in b) {
        a += "&" + i + "=" + encodeURIComponent(b[i]);
    }
} showGlobalWait(c); var d = createAjaxRequestObj(); d.open("GET", "ajax/kniffel.php?rid=" + rid + "&mode=" + c + a, true); d.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); d.onreadystatechange = function () { kniffel.response(d, c, b); }; d.send(null); };
kniffel.prototype.response = function (b, d, c) { var a = _chkRequest(b); if (a != 0) {
    hideGlobalWait();
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        hideDiv("globaltransp");
        hideDiv("globalbox");
        this.data = a;
        this.set = { "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 };
        setTimer("kniffel");
        this.init();
        if (d == "kniffel_roll") {
            this.showRollAni();
        }
    }
} };
kniffel.prototype.init = function () { showDiv("kniffel"); if (this.data.tutorial) {
    showDiv("kniffel_help");
    showDiv("kniffel_transp");
} hideDiv("kniffel_today"); hideDiv("kniffel_start"); showDiv("kniffel_roll_button"); showDiv("kniffel_current_combo"); hideDiv("kniffel_playtime_end"); showDiv("kniffel_playtime"); $("kniffel_sum_count").innerHTML = this.data.points; this.setPrizes(); if (this.data.playtime <= 0) {
    hideDiv("kniffel_dices");
    hideDiv("kniffel_roll_button");
    hideDiv("kniffel_end_button");
    hideDiv("kniffel_playtime");
    showDiv("kniffel_playtime_end");
    return true;
} if (this.data.reward) {
    var b = t_kniffel_reward;
    var a = "";
    if (this.data.reward.points) {
        a += '<div style="float:left; margin:7px 5px 0 65px; font-size:14px; font-weight:bold;">' + this.data.reward.points + '</div><div style="float:left;" class="kniffel_ball"></div><div class="clear"></div>';
    }
    if (this.data.reward.mainprize) {
        a += '<div style="margin-top:10px;">' + str_replace("%POINTS%", formatNumber(this.data.reward.mainprize), t_got_points) + "</div>";
    }
    globalcommitbox(b, a);
} if (this.data.round == 0 || this.data.finished) {
    hideDiv("kniffel_dices");
    hideDiv("kniffel_prize");
    hideDiv("kniffel_end_button");
    hideDiv("kniffel_current_combo");
    if (this.data.finished) {
        showDiv("kniffel_today");
        hideDiv("kniffel_roll_button");
    }
    else {
        showDiv("kniffel_start");
    }
    return true;
}
else {
    showDiv("kniffel_dices");
    showDiv("kniffel_prize");
} var c = {}; for (var d in this.data.set) {
    if (d > 0) {
        $("kniffel_dice_img" + d).className = "kniffel_dice_img";
        $("kniffel_dice_img" + d).addClassName("kniffel_dice" + this.data.set[d]);
        hideDiv("kniffel_dice_block" + d);
        if (!c[this.data.set[d]]) {
            c[this.data.set[d]] = 0;
        }
        c[this.data.set[d]]++;
    }
} this.checkCombos(c); };
kniffel.prototype.rollCommit = function () { if (this.data.round >= this.data.config.free_rounds) {
    var a = "<div>" + str_replace("%AMOUNT%", this.data.config.round_cost, t_kniffel_roll_body) + "</div>";
    if (this.data.config.coin_balls > 0) {
        a += '<div class="bonusinfo" style="float:left; margin-left:30px;">' + str_replace("%BALLS%", this.data.config.coin_balls + '</div><div class="kniffel_ball_mini" style="float:left;"></div>', t_kniffel_coin_balls);
        a += '<div class="clear"></div>';
    }
    globalcommitbox(t_kniffel_roll_head, a, "kniffel.roll()");
}
else {
    this.roll();
} };
kniffel.prototype.roll = function () { var a = { set: '{"1":"' + this.set[1] + '", "2":"' + this.set[2] + '", "3":"' + this.set[3] + '", "4":"' + this.set[4] + '", "5":"' + this.set[5] + '"}' }; this.action("kniffel_roll", a); };
kniffel.prototype.prizeCommit = function (c) { var a = str_replace("%COUNT%", parseInt($("kniffel_prize_balls" + c).innerHTML), t_kniffel_prize_body); var b = "kniffel.prize(" + c + ")"; globalcommitbox(t_kniffel_prize_head, a, b); };
kniffel.prototype.prize = function (a) { this.action("kniffel_prize", { prize: a }); };
kniffel.prototype.finish = function () { this.action("kniffel_end"); };
kniffel.prototype.buyBalls = function (a) { this.action("kniffel_buy", { coins: a }); };
kniffel.prototype.clickDice = function (a) { if (this.set[a] == 1) {
    this.set[a] = 0;
    hideDiv("kniffel_dice_block" + a);
}
else {
    this.set[a] = 1;
    showDiv("kniffel_dice_block" + a);
} };
kniffel.prototype.move = function () { if (this.dir == "left") {
    this.dir = "right";
}
else {
    this.dir = "left";
} $("kniffel_area").className = "kniffel_move_" + this.dir; };
kniffel.prototype.checkCombos = function (d) { var e = []; var h = 1; for (var b in d) {
    if (d[b] == 5) {
        e.push("kniffel");
    }
    if (d[b] == 4) {
        e.push("4er");
    }
    if (d[b] == 3) {
        e.push("3er");
    }
    if (d[b] == 2) {
        e.push("2er");
    }
    if (d[b] != 1) {
        h = 0;
    }
} if (h == 1) {
    e.push("street");
} for (var c in this.data.config.combos) {
    $("kniffel_combo_" + c).removeClassName("kniffel_combo_active");
} hideDiv("kniffel_end_button"); for (var c in this.data.config.combos) {
    var a = "";
    if (c == "fullhouse" && in_array("3er", e) && in_array("2er", e)) {
        a = "fullhouse";
    }
    else {
        if (in_array(c, e)) {
            a = c;
        }
    }
    if (a != "") {
        $("kniffel_combo_" + a).addClassName("kniffel_combo_active");
        $("kniffel_current_combo").innerHTML = '<div style="float:left; margin-left:62px;">' + t_kniffel_current_prize + this.data.config.combos[a].points + '</div><div style="float:left; margin-left:10px; margin-top:-5px;" class="kniffel_ball"></div><div class="clear"></div>';
        showDiv("kniffel_end_button");
        break;
    }
} };
kniffel.prototype.showRollAni = function () { showDiv("kniffel_roll_ani"); showDiv("kniffel_transp"); $("kniffel_roll_ani").src = imgpath + "em/roll_ani.gif"; window.setTimeout("hideDiv('kniffel_roll_ani'); $('kniffel_roll_ani').src = ''; hideDiv('kniffel_transp');", 1600); };
kniffel.prototype.setPrizes = function () { for (var a = 1; a <= 100; a++) {
    if ($("kniffel_prize" + a)) {
        var b = parseInt($("kniffel_prize_balls" + a).innerHTML);
        if (b > parseInt(this.data.points)) {
            $("kniffel_prize_balls" + a).addClassName("important");
            $("kniffel_prize" + a).removeClassName("link");
            $("kniffel_prize" + a).onclick = new Function("");
        }
        else {
            $("kniffel_prize_balls" + a).removeClassName("important");
            $("kniffel_prize" + a).addClassName("link");
            $("kniffel_prize" + a).onclick = new Function("kniffel.prizeCommit(" + a + ")");
        }
    }
    if (this.data.sheeps && this.data.sheeps[a]) {
        hideDiv("kniffel_prize" + a);
    }
} };
kniffel.prototype.buyBallsCommit = function () { var b = ""; for (var a in this.data.config.coins) {
    var c = str_replace("%COUNT%", this.data.config.coins[a], t_kniffel_buy_body);
    c = str_replace("%AMOUNT%", a, c);
    b += '<div class="coinsbutton_flex link" style="margin-bottom:10px;" onclick="kniffel.buyBallsCommitCommit(' + a + ')">' + c + "</div>";
} globalcommitbox(t_kniffel_buy_head, b, 0, 0, 1); };
kniffel.prototype.buyBallsCommitCommit = function (a) { var b = "kniffel.buyBalls(" + a + ")"; var c = str_replace("%COUNT%", this.data.config.coins[a], t_kniffel_buy_body); c = str_replace("%AMOUNT%", a, c); globalcommitbox(t_kniffel_buy_head, c, b); };
kniffel.prototype.timer = function () { if (this.data.playtime > 0) {
    this.data.playtime--;
    $("kniffel_playtime").innerHTML = str_replace("%TIME%", formatTime(this.data.playtime), t_kniffel_playtime);
} if (this.data.exchangetime > 0) {
    this.data.exchangetime--;
    $("kniffel_playtime_end").innerHTML = str_replace("%TIME%", formatTime(this.data.exchangetime), t_kniffel_playtime_end);
}
else {
    hideDiv("kniffel_link");
    this.close();
} };
kniffel.prototype.close = function () { hideDiv("kniffel"); };
var loginevent = function () { this.data = {}; this.click = 0; };
loginevent.prototype.init = function () { loginevent.action("loginevent_init"); };
loginevent.prototype.setbonus = function () { loginevent.action("loginevent_setbonus", { pid: $("loginevent_select").value }); };
loginevent.prototype.getday = function () { loginevent.action("loginevent_getday"); };
loginevent.prototype.action = function (a, b) { ajaxAction("farm", a, b, loginevent.response); };
loginevent.prototype.response = function (b, a, c) { if (b) {
    loginevent.data = b;
    loginevent.build();
    if (a == "loginevent_init") {
        setTimer("loginevent");
    }
    if (loginevent.data.reward) {
        loginevent.reward(loginevent.data.reward);
    }
} };
loginevent.prototype.build = function () { showDiv("loginevent_transp"); showDiv("loginevent"); hideDiv("loginevent_daily_button"); for (var a in this.data.config.rewards) {
    if (this.data.data.rewards && this.data.data.rewards[a]) {
        showDiv("loginevent_reward_slot" + a + "_ready");
        if (this.data.data.rewards[a].reward) {
            $("loginevent_reward_slot" + a + "_tt").innerHTML = this.htmlReward(a);
        }
        $("loginevent_reward_slot" + a).removeClassName("off");
        $("loginevent_reward_slot" + a + "_icon").removeClassName("off");
    }
    else {
        var b = "";
        if (this.data.config.rewards[a].money) {
            b += "<div>" + gamecurrency + "</div>";
        }
        if (this.data.config.rewards[a].products) {
            b += "<div>" + t_reward_products + "</div>";
        }
        if (this.data.config.rewards[a].powerup) {
            b += "<div>" + t_pointsboost_unit + "<br>" + t_pointsboost.replace("%PERCENT%", this.data.config.rewards[a].percent) + "</div>";
        }
        if (this.data.config.rewards[a].giftid) {
            b += "<div>" + t_pan_item + "</div>";
        }
        if (this.data.config.rewards[a].eventbonus) {
            b += "<div>" + t_reward_eventbonus + "</div>";
        }
        $("loginevent_reward_slot" + a + "_tt").innerHTML = b;
        $("loginevent_reward_slot" + a).addClassName("off");
        $("loginevent_reward_slot" + a + "_icon").addClassName("off");
    }
    $("loginevent_reward_slot" + a).removeClassName("today");
    if (this.data.today == parseInt(a)) {
        $("loginevent_reward_slot" + a).removeClassName("off").addClassName("today");
        $("loginevent_reward_slot" + a + "_icon").removeClassName("off");
        if (this.data.data.rewards && this.data.data.rewards[a]) { }
        else {
            showDiv("loginevent_daily_button");
        }
    }
} hideDiv("loginevent_select_intro2"); hideDiv("loginevent_select_bonus"); hideDiv("loginevent_selected_bonus"); $("loginevent_timer_pre").innerHTML = t_loginevent_timer_pre_login; if (this.data.data.success) {
    if (this.data.data.bonus) {
        $("loginevent_timer_pre").innerHTML = t_loginevent_timer_pre_bonus;
        $("loginevent_selected_bonus_pid").addClassName("tt" + this.data.data.bonus.pid);
        $("loginevent_selected_bonus_name").innerHTML = produkt_name[this.data.data.bonus.pid];
        showDiv("loginevent_selected_bonus");
    }
    else {
        $("loginevent_timer_pre").innerHTML = t_loginevent_timer_pre_select;
        showDiv("loginevent_select_bonus");
    }
}
else {
    showDiv("loginevent_select_intro2");
} };
loginevent.prototype.reward = function (a) { html = '<div id="loginevent_reward">'; html += this.htmlReward(a); html += "  <div class=\"button_yes link\" onclick=\"hideDiv('globaltransp'); hideDiv('globalbox')\"></div>"; html += "</div>"; globalcommitbox(t_vet_reward_head, html, 0, 0, 1); };
loginevent.prototype.htmlReward = function (b) { var c = "<div>" + t_specialoffer_message + "</div>"; c += '<div class="price">'; if (this.data.data.rewards[b].reward.money) {
    c += "<div>" + formatPrice(this.data.data.rewards[b].reward.money) + "</div>";
} if (this.data.data.rewards[b].reward.products) {
    for (var a in this.data.data.rewards[b].reward.products) {
        c += htmlProductBody(a, this.data.data.rewards[b].reward.products[a]);
    }
} if (this.data.data.rewards[b].reward.powerup) {
    c += t_payment_pointsboost_info2.replace("%PERCENT%", windmillarray[this.data.data.rewards[b].reward.powerup][5][3]);
} if (this.data.data.rewards[b].reward.giftid) {
    c += '<img src="' + imgpath + "gifts/" + this.data.data.rewards[b].reward.giftid + '.gif">';
} c += "</div>"; return c; };
loginevent.prototype.clickIt = function () { this.click++; if (this.click % 5 == 0) {
    $("loginevent_eyes").src = imgpath + "Dormouse_BG_01_Ani.gif";
} };
loginevent.prototype.timer = function () { this.data.data.remain--; if ($("loginevent_timer")) {
    $("loginevent_timer").innerHTML = formatTime(this.data.data.remain);
} if (this.data.data.remain < 0) {
    clearTimer("loginevent");
    hideDiv("loginevent_link");
    this.close();
} };
loginevent.prototype.close = function () { hideDiv("loginevent_transp"); hideDiv("loginevent"); };
var main = function () { this.data = {}; };
main.prototype.statsFlyer = function (m, e, q) { var b = {}; b[1] = { type: "points", current: user_points, compare: m }; b[2] = { type: "bar", current: user_bar, compare: e }; b[3] = { type: "coins", current: user_coins, compare: q }; for (var c in b) {
    var h = 1;
    if ($("main_" + b[c].type + "_flyer" + h)) {
        $("main_" + b[c].type + "_flyer" + h).remove();
    }
    if (parseInt(b[c].current) > 0 && parseInt(b[c].compare) != parseInt(b[c].current)) {
        var a = "main_" + b[c].type + "_flyer" + h;
        if ($(a)) {
            $(a).remove();
        }
        var n = "+";
        var l = (parseInt(b[c].compare) - parseInt(b[c].current));
        if (l <= 0) {
            n = "";
        }
        if (b[c].type == "bar") {
            l = formatPrice(l);
        }
        else {
            l = formatNumber(l);
        }
        var d = '<div id="' + a + '" class="main_flyer ' + b[c].type + '">' + n + l + "</div>";
        $("userinfoscontainer").insert(d);
        main.statsFlyerRemove(a);
    }
} };
main.prototype.statsFlyerRemove = function (a) { setTimeout(function () { if ($(a)) {
    $(a).addClassName("fly");
} }, 200); setTimeout(function () { if ($(a)) {
    $(a).remove();
} }, 1400); };
function roundDecimal(a) { return Math.round(a * 100) / 100; }
var map_help_navi_select = 0;
var map_current_route = 0;
var map_current_vehicle = 0;
var map_current_vehicle_slot = 0;
var map_vehicle_cart = {};
var map_stock_overview_filter = ["v", "ex", "e", "o", "alpin"];
var map_fill_vehicle_slot_filter = "v";
var map_fill_vehicle_slot_page = 1;
var map_overview_filter = "stock";
var map_overview_vehicles_filter = 1;
var mapBlockzones = { city2: { name: cityname2, level: 8, unlock: 0 }, forestry: { name: cityzone_quicknavi, level: 20, unlock: 1 }, picknick: { name: rack_foodworld, level: 11, unlock: 0 }, farmersmarket: { name: t_farmers_market, level: 23, unlock: 0 } };
setTimer("map");
function mapHelpNavi(b) { if (!b) {
    map_help_navi_select = 1;
}
else {
    map_help_navi_select = b;
} hideDiv("map_help_box_inner_1"); hideDiv("map_help_box_inner_2"); hideDiv("map_help_box_inner_3"); hideDiv("map_help_box_inner_4"); $("map_help_navi_tab_1").removeClassName("white_tab_active"); $("map_help_navi_tab_2").removeClassName("white_tab_active"); $("map_help_navi_tab_3").removeClassName("white_tab_active"); $("map_help_navi_tab_4").removeClassName("white_tab_active"); showDiv("map_help_box_inner_" + map_help_navi_select); $("map_help_navi_tab_" + map_help_navi_select).addClassName("white_tab_active"); if (b == 3) {
    for (var a in farms_data.map.achievements) {
        if (farms_data.map.achievements[a].solved) {
            showDiv("map_achievement_blocker" + a);
        }
        else {
            hideDiv("map_achievement_blocker" + a);
        }
    }
} }
function mapVehicleTours() { for (var h = 1; h <= const_maxfarms; h++) {
    if ($("map_active_tour" + h)) {
        hideDiv("map_active_tour" + h);
    }
} for (var d in farms_data.map.vehicles) {
    for (var l in farms_data.map.vehicles[d]) {
        var c = farms_data.map.vehicles[d][l];
        if (c.remain > 0) {
            var e = "";
            var b = "";
            if (d == 1 && c.current > 1) {
                b = "mirrored";
            }
            if (d == 2 && c.current == 1) {
                b = "mirrored";
            }
            var a = (100 - ((c.remain * 100) / c.duration_original));
            e += '<div style="float:left; margin-right:3px;" onmouseover="$(\'map_active_tour_time' + d + "_" + l + "').style.opacity=1\" onmouseout=\"$('map_active_tour_time" + d + "_" + l + "').style.opacity=0.5\" onclick=\"map_overview_filter='vehicles'; mapDialog('stock_overview')\">";
            e += '  <div class="map_vehicle' + c.type + "_mini_farm link " + b + "\" onclick=\"map_overview_filter='vehicles'; mapDialog('stock_overview')\"></div>";
            e += '  <div style="position:relative; margin-top:2px; width:65px; height:5px; background-color:black; border-radius:5px; overflow:hidden;">';
            e += '    <div style="position:absolute; top:0px; left:0px; width:' + a + '%; height:5px; background-color:lime;"></div>';
            e += "  </div>";
            e += '  <div id="map_active_tour_time' + d + "_" + l + '" class="map_active_tour_time route' + d + '">' + formatTime(c.remain) + "</div>";
            e += "</div>";
            e += '<div style="float:left; margin-top:10px;" class="speedupgardenbutton link" onclick="hideDiv(\'globalbox\'); globalSpeedupBox(\'map_tour\', 0, ' + d + ')"></div>';
            $("map_active_tour" + d).innerHTML = e;
            showDiv("map_active_tour" + d);
        }
    }
} }
function openMap() { if (farmersmarket_addon == 1) {
    mapBlockzones.farmersmarket2 = { name: t_farmers_market + "&nbsp;2", level: 23, unlock: 0 };
} showDiv("map_main"); for (var b in farms_data.farms) {
    var a = "";
    for (var c in farms_data.farms[b]) {
        a += '<div class="map_farm_bld map_farm_bld' + farms_data.farms[b][c].buildingid + '"></div>';
    }
    if ($("map_farm" + b + "_buildings")) {
        $("map_farm" + b + "_buildings").innerHTML = a;
    }
} updateMap(); if (tutorial == 4 || tutorial == 9) {
    $("t_step1").className = "nope";
    $("t_step2").className = "highlight_tutorial_step";
    if (tutorial == 4) {
        hideDiv("tutorial7");
        showDiv("tutorial7_1");
    }
    if (tutorial == 9) {
        hideDiv("tutorial17");
        showDiv("tutorial17_1");
    }
} if (currentuserlevel >= 40) {
    showDiv("map_help_link");
}
else {
    hideDiv("map_help_link");
} }
function updateMap() { for (var l in mapBlockzones) {
    var e = 0;
    var d = 0;
    if (currentuserlevel < mapBlockzones[l].level) {
        e = 1;
        d = 1;
    }
    if ((l == "farmersmarket" || l == "farmersmarket2") && !farmersmarket_data) {
        e = 1;
    }
    if (l == "forestry" && !forestry_unlock) {
        e = 1;
    }
    if (e == 1) {
        var b = t_requirements;
        if (mapBlockzones[l].unlock) {
            b = t_requirements_unlock;
        }
        var s = str_replace("%NAME%", mapBlockzones[l].name, b);
        s = str_replace("%LEVEL%", mapBlockzones[l].level, s);
        if (l == "farmersmarket" && farms_data.count < 2) {
            var w = "<div>" + str_replace("%FARM%", 2, t_map_previous_farm_required) + "</div>";
            if (d == 1) {
                s += "<div>&nbsp;</div>" + w;
            }
            else {
                s = w;
            }
        }
        if (l == "forestry") {
            s += '<div style="margin-top:5px;">' + str_replace(":", "", lotterylotsrequired) + t_quest_forestry1_tt + "&nbsp;/&nbsp;" + t_help_new_quest + "&nbsp;3</div>";
        }
        $("map_" + l + "_tt").innerHTML = s;
        showDiv("map_" + l + "_block");
        $("map_" + l).onclick = new Function("");
    }
    else {
        var u = l;
        var r = 1;
        if (l == "city2") {
            u = "city";
            r = 2;
        }
        hideDiv("map_" + l + "_block");
        $("map_" + l + "_tt").innerHTML = mapBlockzones[l].name;
        $("map_" + l).onclick = new Function("mapGo2Location('" + u + "', " + r + ")");
    }
} for (var q in farms_data.farms) {
    if ($("map_vehicle_shop" + (q - 4))) {
        showDiv("map_vehicle_shop" + (q - 4));
    }
    hideDiv("map_farm" + q + "_block");
    hideDiv("map_farm" + q + "_buy");
    if ($("map_farm" + q)) {
        $("map_farm" + q).onclick = new Function("mapGo2Location('farm', " + q + ")");
    }
} for (var q in farms_data.blocked) {
    if ($("map_farm" + q)) {
        var n = farmBuyOption(q);
        if (n.block) {
            showDiv("map_farm" + q + "_block");
            var s = $("map_farm" + q + "_block_tt").innerHTML = n.tt;
            v = "";
        }
        else {
            showDiv("map_farm" + q + "_buy");
            v = "mapDialog('buy_farm', " + q + ")";
        }
        $("map_farm" + q).onclick = new Function(v);
        if ($("map_vehicle_shop" + (q - 4))) {
            hideDiv("map_vehicle_shop" + (q - 4));
        }
    }
} for (var t in farms_data.map.config.routes) {
    var y = { a: "", b: "" };
    for (var c in farms_data.map.vehicles[t]) {
        var h = '<div style="float:left;" class="map_vehicles_mini map_vehicles_mini' + farms_data.map.vehicles[t][c].type + '"></div>';
        if (farms_data.map.vehicles[t][c].current == 1) {
            y.a += h;
        }
        else {
            y.b += h;
        }
    }
    var m = '<div id="map_vehicle_shop_vehicles' + t + '_a">' + y.a + "</div>";
    m += '<div id="map_vehicle_shop_vehicles' + t + '_b">' + y.b + "</div>";
    $("map_vehicle_shop_vehicles" + t).innerHTML = m;
} var a = ""; var v = ""; if (farm > 0) {
    a = "map_pin_farm" + farm;
    v = "mapGo2Location('farm', " + farm + ")";
} if (city > 0) {
    a = "map_pin_city" + city;
    v = "mapGo2Location('city', " + city + ")";
} if (forestry_quicknavi > 0) {
    a = "map_pin_forestry";
    v = "mapGo2Location('forestry')";
} if (foodworld_quicknavi > 0) {
    a = "map_pin_foodworld";
    v = "mapGo2Location('farmersmarket')";
} $("map_pin").className = "link " + a; $("map_pin").onclick = new Function(v); }
function mapVehicleSheetNavi(a) { $("map_vehiclesheet_navi1").removeClassName("brown_tab_active"); $("map_vehiclesheet_navi2").removeClassName("brown_tab_active"); $("map_vehiclesheet_navi" + a).addClassName("brown_tab_active"); if (a == 1) {
    mapDialog("vehicleSheetTour");
} if (a == 2) {
    mapDialog("vehicleSheetShop");
} }
function mapDialog(m, J, K) { if (m == "send_vehicle") {
    var q = t_map_vehicle_start_tour;
    var z = t_map_vehicle_start_tour;
    var H = "farmAction('map_sendvehicle', " + farms_data.map.vehicles[map_current_route][map_current_vehicle].current + ", 1);";
    var O = "mapDialog('openVehicleSheet', " + map_current_route + ")";
    globalcommitbox(q, z, H, O);
} if (m == "buy_farm" && farms_data.blocked[J]) {
    var q = t_building_hqbuyfarm;
    var z = $("map_farm" + J + "_buy_tt").innerHTML;
    var H = "farmAction('map_buyfarm', 1, 1, " + J + ")";
    globalcommitbox(q, z, H);
} if (m == "buy_vehicle" && J > 0) {
    var q = t_megafield_vehicle_buy_head;
    if (farms_data.map.config.vehicles[J].money && farms_data.map.config.vehicles[J].money > 0) {
        var d = formatPrice(farms_data.map.config.vehicles[J].money);
    }
    if (farms_data.map.config.vehicles[J].coins && farms_data.map.config.vehicles[J].coins > 0) {
        var d = farms_data.map.config.vehicles[J].coins + "&nbsp;" + t_coins;
    }
    if (farms_data.map.config.vehicles[J].unlock && farms_data.map.config.vehicles[J].unlock > 0) {
        var d = Math.ceil(farms_data.map.config.routes[map_current_route].vehicle_multi * farms_data.map.config.vehicles[J].unlock) + "&nbsp;" + t_fuelstation_currency;
    }
    var z = str_replace("%COST%", d, t_megafield_vehicle_buy_body);
    if (!farm) {
        var ab = 1;
    }
    else {
        ab = farm;
    }
    var H = "farmAction('map_buyvehicle', " + ab + ", 1, " + map_current_route + ", " + J + ")";
    globalcommitbox(q, z, H);
} if (m == "vehicleSheetTour") {
    if ($("map_vehiclesheet_inner")) {
        var D = "";
        var u = 0;
        for (var s in farms_data.map.config.vehicles) {
            if (farms_data.map.vehicles[map_current_route] && farms_data.map.vehicles[map_current_route][s]) {
                if (farms_data.map.vehicles[map_current_route][s].remain && farms_data.map.vehicles[map_current_route][s].remain > 0) {
                    u++;
                }
            }
        }
        D += '<div style="margin-bottom:5px; border-bottom:1px solid #000; padding-bottom:5px;">';
        D += '  <div style="float:left; width:55px; font-weight:bold; text-align:left;">' + t_map_vehicle_current_location + "</div>";
        D += '  <div style="float:left; font-weight:bold; margin-left:210px; margin-top:12px;">' + t_map_vehicle_overview_cargo + "</div>";
        D += '  <div class="clear"></div>';
        D += "</div>";
        D += '<div style="position:relative; height:440px; overflow:auto;">';
        var S = 0;
        for (var s in farms_data.map.config.vehicles) {
            if (farms_data.map.vehicles[map_current_route] && farms_data.map.vehicles[map_current_route][s]) {
                var X = 0;
                if (farms_data.map.vehicles[map_current_route][s].remain && farms_data.map.vehicles[map_current_route][s].remain > 0) {
                    X = 1;
                }
                var b = ((mapGetCurrentCapacity(s) * 100) / farms_data.map.config.vehicles[s].capacity);
                var W = Math.ceil(farms_data.map.config.routes[map_current_route].fuel * farms_data.map.config.vehicles[s].fuel_multi);
                if (farms_data.map.vehicles[map_current_route][s].current > 4) {
                    W = 0;
                }
                var R = checkRackItem(farms_data.map.config.fuel_product);
                var A = Math.ceil(farms_data.map.config.routes[map_current_route].duration * farms_data.map.config.vehicles[s].duration_multi);
                var N = "";
                var e = "";
                if (W > R) {
                    N = "important";
                    e = '<div style="margin-top:5px;" class="important">' + str_replace("%AMOUNT%", (W - R), t_fuel_need_info2) + "</div>";
                }
                D += '<div class="map_vehiclesheet_tour_item">';
                D += '  <a name="vehicle' + s + '"></a>';
                var h = farms_data.map.vehicles[map_current_route][s].current;
                if (h <= 4) {
                    var t = t_map_stock_overview_mainstock;
                }
                else {
                    var t = str_replace("%FARM%", h, t_map_stock_overview_tempstock);
                }
                D += '  <div style="position:relative; float:left; margin-right:5px; width:106px; margin-top:-3px; margin-right:5px; padding-top:25px; height:40px; text-align:center; font-size:11px; font-weight:bold; color:#503300; background:url(' + imgpath + 'map_current_location2.png);">' + t + "</div>";
                D += '  <div style="position:relative; float:left; margin-right:5px; width:150px;">';
                D += '    <div style="font-weight:bold; margin-bottom:5px;">' + farms_data.map.config.vehicles[s].name + "</div>";
                D += '    <div class="map_vehicle' + s + '_mini" style="margin-bottom:5px;"></div>';
                if (!X) {
                    D += '<div style="margin-top:5px;">' + str_replace(" ", "", guildquestlist_duration) + ":&nbsp;" + formatTime(A) + "</div>";
                    if (farms_data.map.vehicles[map_current_route][s].current <= 4) {
                        D += '<div style="margin-top:5px;">';
                        D += '  <div style="float:left; margin:5px 5px 0px 0px;">' + production_require + "</div>";
                        D += '  <div style="float:left; position:relative;" class="link" onmouseover="showDiv(\'map_vehiclesheet_tour_fuel_tt' + s + "')\" onmouseout=\"hideDiv('map_vehiclesheet_tour_fuel_tt" + s + "')\">";
                        D += '    <div style="float:left;" class="fuel_barrel_mini"></div>';
                        D += '    <div style="float:left; margin:5px 0px 0px 5px;" class="' + N + '">' + W + "</div>";
                        D += '    <div class="clear"></div>';
                        D += '    <div id="map_vehiclesheet_tour_fuel_tt' + s + '" style="top:32px; width:120px;" class="ttbox">' + t_fuel_need_info + e + "</div>";
                        D += "  </div>";
                        D += '  <div class="clear"></div>';
                        D += "</div>";
                    }
                }
                D += "  </div>";
                D += '  <div style="position:relative; float:left; width:315px;">';
                var ac = map_vehicle_cart[s];
                if (X) {
                    var T = {};
                    var ac = farms_data.map.vehicles[map_current_route][s].data;
                    for (var aa = 0; aa < ac.length; aa++) {
                        T[(aa + 1)] = ac[aa];
                    }
                    ac = T;
                }
                for (var aa = 1; aa <= farms_data.map.config.vehicles[s].products; aa++) {
                    var l = 0;
                    var M = 0;
                    var H = "mapDialog('fillVehicleSlot', " + s + ", " + aa + ")";
                    var E = "onmouseover=\"showDiv('map_vehicle_" + s + "_sheet_current_slot" + aa + "_tt')\" onmouseout=\"hideDiv('map_vehicle_" + s + "_sheet_current_slot" + aa + "_tt')\"";
                    if (ac && ac[aa]) {
                        l = ac[aa].amount;
                        M = ac[aa].pid;
                        H = "map_current_vehicle_slot=" + aa + "; mapDialog('fillVehicleSlot_product', " + s + ", " + M + ")";
                    }
                    if (X) {
                        H = "";
                    }
                    if ((mapGetCurrentCapacity(s) >= farms_data.map.config.vehicles[s].capacity && M <= 0) || X) {
                        H = "";
                        E = "";
                    }
                    D += '<div id="map_vehicle_sheet_current_slot' + aa + '" class="map_vehicle_sheet_current_slot" ' + E + ">";
                    D += '  <div class="tt' + M + '" style="position:relative; margin-top:5px; border-radius:5px;"></div>';
                    D += '  <div class="link" style="position:absolute; top:0px; left:0px; width:100%; height:100%;" onclick="' + H + '"></div>';
                    if (l > 0) {
                        D += '<div style="position:absolute; bottom:0px; width:50px; font-weight:bold; text-align:right; right:2px; bottom:2px;">' + l + "</div>";
                    }
                    if (M > 0 && !X) {
                        D += '<div class="link close_mini_white" onclick="mapRemoveVehicleCardItem(' + s + ", " + M + ')"></div>';
                    }
                    if (in_array(aa % 5, [0, 4])) {
                        var ad = "right";
                    }
                    else {
                        var ad = "left";
                    }
                    D += '  <div class="ttbox" id="map_vehicle_' + s + "_sheet_current_slot" + aa + '_tt" style="top:0; ' + ad + ':60px; width:75px;">' + t_map_vehicle_how_to_load + "</div>";
                    D += "</div>";
                }
                D += '    <div class="clear"></div>';
                if (X) {
                    D += '<div class="map_vehiclesheet_tour_item_timer" style="margin-bottom:5px; float:left;">' + t_building_time + '<span id="map_vehiclesheet_tour_item' + map_current_route + "_" + s + 'timer"></span></div>';
                    D += '<div style="float:left; margin-top:-5px; margin-left:5px;" class="speedupgardenbutton link" onclick="hideDiv(\'globalbox\'); globalSpeedupBox(\'map_tour\', 0, ' + map_current_route + ')"></div>';
                    D += '<div class="clear"></div>';
                }
                else {
                    D += '    <div style="margin-bottom:5px;">';
                    D += '      <div style="float:left; margin-right:5px;">' + t_map_vehicle_capacity + ":</div>";
                    D += '      <div style="float:left; position:relative; height:15px; width:150px; background-color:black; border-radius:5px; overflow:hidden;">';
                    D += '        <div style="position:absolute; top:0px; left:0px; height:15px; width:' + b + '%; background-color:lime;"></div>';
                    D += "      </div>";
                    D += '      <div style="float:left; margin-left:5px;">' + mapGetCurrentCapacity(s) + "/" + farms_data.map.config.vehicles[s].capacity + "</div>";
                    D += '      <div class="clear"></div>';
                    D += "    </div>";
                }
                D += "  </div>";
                D += '  <div class="clear"></div>';
                if (!X && u > 0) {
                    D += '<div class="important" style="margin-left:265px; margin-bottom:5px;">' + t_map_vehicle_tour_info + "</div>";
                }
                else {
                    if (!X && W <= R) {
                        D += '<div class="button_new link" onclick="map_current_vehicle=' + s + '; mapDialog(\'send_vehicle\')" style="position:relative; text-align:center; bottom:5px; margin-top:5px; width:100px; margin-left:265px;">' + marktschreiersubmit + "</div>";
                    }
                }
                D += "</div>";
                S++;
            }
        }
        D += "</div>";
        if (!S) {
            D = t_map_tour_need_vehicles;
        }
        $("map_vehiclesheet_inner").innerHTML = D;
        window.location.hash = "#vehicle" + map_current_vehicle;
    }
} if (m == "vehicleSheetShop") {
    var F = K;
    if (!F) {
        F = 1;
    }
    var D = "";
    D += '<div id="map_vehicleslot_shop_arrowleft" class="link market_category_arrowleft" onclick="mapDialog(\'vehicleSheetShop\', ' + aa + ", " + (F - 1) + ')"></div>';
    D += '<div style="float:left; margin-left:35px;">';
    var r = F;
    var af = (F + 2);
    var S = 1;
    var G = 0;
    for (var aa in farms_data.map.config.vehicles) {
        var ab = farms_data.map.config.routes[map_current_route].b;
        if (!in_array(ab, farms_data.map.config.vehicles[aa].farms)) {
            continue;
        }
        if (!(farms_data.map.vehicles[map_current_route] && farms_data.map.vehicles[map_current_route][aa])) {
            if ((S >= r && S <= af)) {
                var W = Math.ceil(farms_data.map.config.routes[map_current_route].fuel * farms_data.map.config.vehicles[aa].fuel_multi);
                var A = Math.ceil(farms_data.map.config.routes[map_current_route].duration * farms_data.map.config.vehicles[aa].duration_multi);
                var N = "";
                var H = "mapDialog('buy_vehicle', " + aa + ")";
                if (farms_data.map.config.vehicles[aa].unlock) {
                    var d = Math.ceil(farms_data.map.config.routes[map_current_route].vehicle_multi * farms_data.map.config.vehicles[aa].unlock);
                    if (farms_data.map.config.fuelstation_currency < d) {
                        N = "important";
                        H = "";
                    }
                    d = formatNumber(d);
                }
                if (farms_data.map.config.vehicles[aa].money) {
                    if (user_bar < farms_data.map.config.vehicles[aa].money) {
                        N = "important";
                        H = "";
                    }
                    var d = formatPrice(farms_data.map.config.vehicles[aa].money);
                }
                if (farms_data.map.config.vehicles[aa].coins) {
                    if (user_coins < farms_data.map.config.vehicles[aa].coins) {
                        N = "important";
                        H = "";
                    }
                    var d = farms_data.map.config.vehicles[aa].coins + "&nbsp;" + t_coins;
                }
                D += '<div class="map_vehiclesheet_shop_item">';
                D += '  <div class="map_vehicle' + aa + '_big"></div>';
                D += '  <div style="margin-top:5px;">';
                D += '    <div style="font-weight:bold; margin-bottom:5px;">' + farms_data.map.config.vehicles[aa].name + "</div>";
                D += '      <div style="float:left; margin:5px 5px 0px 0px;">' + production_require + "</div>";
                D += '      <div style="float:left;" class="fuel_barrel_mini"></div>';
                D += '      <div style="float:left; margin:5px 0px 0px 5px;">' + W + "</div>";
                D += '      <div class="clear"></div>';
                D += '      <div style="margin-top:5px;">' + str_replace(" ", "", guildquestlist_duration) + ":&nbsp;" + formatTime(A) + "</div>";
                D += '      <div style="margin-top:5px; margin-bottom:5px;">' + t_map_vehicle_capacity + ":&nbsp;" + formatNumber(farms_data.map.config.vehicles[aa].capacity) + "</div>";
                for (var Z = 1; Z <= farms_data.map.config.vehicles[aa].products; Z++) {
                    D += '<div style="float:left; width:20px; height:20px; background-color:#FFAF62; border-radius:4px; margin:0px 2px 2px 0;"></div>';
                    if (Z > 1 && Z % 5 == 0) {
                        D += '<div class="clear"></div>';
                    }
                }
                D += '    <div class="clear"></div>';
                D += '    <div class="button_new link" onclick="' + H + '" style="position:absolute; bottom:5px; width:152px; text-align:center;">';
                D += '      <div style="float:left; font-size:16px; text-align:center; width:100%;" class="' + N + '">' + d + "</div>";
                D += '      <div class="clear"></div>';
                D += "    </div>";
                D += "  </div>";
                D += "</div>";
            }
            S++;
            G++;
        }
    }
    if (!G) {
        D += '<div style="width:525px; text-align:center; margin:10px 0px;">' + t_map_vehicleshop_all_vehicles_bought + "</div>";
    }
    D += "</div>";
    D += '<div id="map_vehicleslot_shop_arrowright" class="link market_category_arrowright" onclick="mapDialog(\'vehicleSheetShop\', ' + aa + ", " + (F + 1) + ')"></div>';
    D += '<div style="clear:both;"></div>';
    $("map_vehiclesheet_inner").innerHTML = D;
    $("map_vehiclesheet_inner").removeClassName("map_vehiclesheet_inner_overflow");
    hideDiv("map_vehicleslot_shop_arrowleft");
    hideDiv("map_vehicleslot_shop_arrowright");
    if (F > 1) {
        showDiv("map_vehicleslot_shop_arrowleft");
    }
    if (F < (S - 3)) {
        showDiv("map_vehicleslot_shop_arrowright");
    }
} if (m == "openVehicleSheet") {
    var q = "";
    var z = '<div style="margin-top:-30px;">';
    z += '  <div id="map_vehiclesheet_navi1" class="brown_tab link" onclick="mapVehicleSheetNavi(1)" style="margin-left:10px;">' + t_map_plan_tour + "</div>";
    z += '  <div id="map_vehiclesheet_navi2" class="brown_tab link" onclick="mapVehicleSheetNavi(2)">' + t_map_buy_vehicle + "</div>";
    z += '  <div class="clear"></div>';
    z += '  <div class="brown_tab_content">';
    z += '    <div id="map_vehiclesheet_inner"></div>';
    z += "  </div>";
    z += "</div>";
    globalcommitbox(q, z, 0, 0, 1);
    $("globalbox_content").removeClassName("globalbox_content");
    $("globalbox_content").addClassName("globalbox_content_max_width");
    hideDiv("globalbox_char");
    hideDiv("globalbox_footer");
    var b = $("globalbox").getWidth();
    $("globalbox").style.marginLeft = "-" + (b / 2) + "px";
    $("globalbox").style.top = "50px";
    map_current_route = J;
    var S = 0;
    if (farms_data.map.vehicles[map_current_route]) {
        for (var aa in farms_data.map.vehicles[map_current_route]) {
            S++;
        }
    }
    if (S > 0) {
        mapVehicleSheetNavi(1);
    }
    else {
        mapVehicleSheetNavi(2);
    }
} if (m == "fillVehicleSlot") {
    map_current_vehicle = J;
    if (farms_data.map.vehicles[map_current_route] && farms_data.map.vehicles[map_current_route][map_current_vehicle]) {
        farm = farms_data.map.vehicles[map_current_route][map_current_vehicle].current;
        sortRackNew();
        var c = [];
        if (map_vehicle_cart[map_current_vehicle]) {
            for (var aa in map_vehicle_cart[map_current_vehicle]) {
                c.push(map_vehicle_cart[map_current_vehicle][aa].pid);
            }
        }
        if (K > 0) {
            map_current_vehicle_slot = K;
        }
        var q = t_map_vehicle_fill;
        var z = "";
        z += '<div style="margin-bottom:-1px;">';
        z += '  <div class="link map_vehicle_fill_slot_category white_tab" id="map_vehicle_fill_slot_category_v" style="margin-left:10px; background-image:url(' + imgpath + "contract_v.png);\" onclick=\"map_fill_vehicle_slot_page=1; map_fill_vehicle_slot_filter='v'; mapDialog('fillVehicleSlot', " + J + ');"></div>';
        z += '<div class="link map_vehicle_fill_slot_category white_tab" id="map_vehicle_fill_slot_category_ex" style="margin-left:10px; background-image:url(' + imgpath + "contract_ex.png);\" onclick=\"map_fill_vehicle_slot_page=1; map_fill_vehicle_slot_filter='ex'; mapDialog('fillVehicleSlot', " + J + ');"></div>';
        z += '<div class="link map_vehicle_fill_slot_category white_tab" id="map_vehicle_fill_slot_category_alpin" style="margin-left:10px; background-image:url(' + imgpath + "contract_alpin.png);\" onclick=\"map_fill_vehicle_slot_page=1; map_fill_vehicle_slot_filter='alpin'; mapDialog('fillVehicleSlot', " + J + ');"></div>';
        z += '  <div class="link map_vehicle_fill_slot_category white_tab" id="map_vehicle_fill_slot_category_e" style="margin-left:10px; background-image:url(' + imgpath + "contract_e.png);\" onclick=\"map_fill_vehicle_slot_page=1; map_fill_vehicle_slot_filter='e'; mapDialog('fillVehicleSlot', " + J + ');"></div>';
        z += '  <div class="link map_vehicle_fill_slot_category white_tab" id="map_vehicle_fill_slot_category_o" style="margin-left:10px; background-image:url(' + imgpath + "contract_o.png);\" onclick=\"map_fill_vehicle_slot_page=1; map_fill_vehicle_slot_filter='o'; mapDialog('fillVehicleSlot', " + J + ');"></div>';
        z += '  <div class="clear"></div>';
        z += "</div>";
        z += '<div class="white_tab_content" style="width:478px; height:345px;">';
        var ae = mapGetStockData();
        var Q = 36;
        var r = (((map_fill_vehicle_slot_page - 1) * Q) + 1);
        var af = (map_fill_vehicle_slot_page * Q);
        var S = 1;
        var w = [map_fill_vehicle_slot_filter];
        if (map_fill_vehicle_slot_filter == "alpin") {
            w = ["alpin", "tea"];
        }
        for (var M in ae) {
            if (in_array(produkt_category[M], w)) {
                if (S >= r && S <= af) {
                    var ag = "sack";
                    if (map_fill_vehicle_slot_filter == "e") {
                        var ag = "box";
                    }
                    if (map_fill_vehicle_slot_filter == "o") {
                        var ag = "bottle";
                    }
                    if (map_fill_vehicle_slot_filter == "tea") {
                        var ag = "box";
                    }
                    var H = "mapDialog('fillVehicleSlot_product', " + map_current_vehicle + ", " + M + ")";
                    var n = "";
                    if (in_array(M, c)) {
                        n = "opacity:0.50;";
                        H = "";
                    }
                    z += '<div class="map_vehicle_fill_slot_item ' + ag + ' link" style="' + n + '" onclick="' + H + '" onmouseover="showDiv(\'map_vehicle_fill_slot_item' + M + "_tt')\" onmouseout=\"hideDiv('map_vehicle_fill_slot_item" + M + "_tt')\">";
                    z += '  <div class="e' + M + " img_" + ag + '"></div>';
                    z += '  <div class="tklein2 counter_box">' + formatNumber(ae[M].number) + "</div>";
                    z += '  <div id="map_vehicle_fill_slot_item' + M + '_tt" style="bottom:55px;" class="ttbox">' + produkt_name[M] + "</div>";
                    z += "</div>";
                }
                S++;
            }
        }
        z += '  <div class="clear"></div>';
        z += '  <div id="map_vehicle_fill_slot_arrow_left" class="link big_red_arrow_left" onclick="map_fill_vehicle_slot_page -= 1; mapDialog(\'fillVehicleSlot\', ' + J + ", " + K + ')"></div>';
        z += '  <div id="map_vehicle_fill_slot_arrow_right" class="link big_red_arrow_right" onclick="map_fill_vehicle_slot_page += 1; mapDialog(\'fillVehicleSlot\', ' + J + ", " + K + ')"></div>';
        z += "</div>";
        var u = farms_data.map.vehicles[map_current_route][map_current_vehicle].current;
        if (map_transfer_rest[u] && map_transfer_rest[u][map_fill_vehicle_slot_filter]) {
            z += '<div class="important">' + str_replace("%COUNT%", map_transfer_rest[u][map_fill_vehicle_slot_filter], t_farmtransfer_rest_warning) + "</div>";
        }
        var O = "mapDialog('openVehicleSheet', " + map_current_route + ")";
        globalcommitbox(q, z, 0, O, 1);
        $("globalbox_content").removeClassName("globalbox_content");
        $("globalbox_content").addClassName("globalbox_content_flex");
        hideDiv("globalbox_char");
        hideDiv("globalbox_footer");
        var b = $("globalbox").getWidth();
        $("globalbox").style.marginLeft = "-" + (b / 2) + "px";
        $("globalbox").style.top = "50px";
        if ($("map_vehicle_fill_slot_category_" + map_fill_vehicle_slot_filter)) {
            $("map_vehicle_fill_slot_category_" + map_fill_vehicle_slot_filter).addClassName("white_tab_active");
        }
        hideDiv("map_vehicle_fill_slot_arrow_left");
        hideDiv("map_vehicle_fill_slot_arrow_right");
        if (map_fill_vehicle_slot_page > 1) {
            showDiv("map_vehicle_fill_slot_arrow_left");
        }
        if (map_fill_vehicle_slot_page < Math.ceil(S / Q)) {
            showDiv("map_vehicle_fill_slot_arrow_right");
        }
    }
} if (m == "fillVehicleSlot_product") {
    map_current_vehicle = J;
    var M = K;
    var P = farms_data.map.config.vehicles[map_current_vehicle];
    var ae = mapGetStockData();
    var q = t_map_vehicle_fill;
    var z = "";
    var C = 0;
    if (map_vehicle_cart[map_current_vehicle]) {
        for (var aa in map_vehicle_cart[map_current_vehicle]) {
            if (map_vehicle_cart[map_current_vehicle][aa].pid == M) {
                C = map_vehicle_cart[map_current_vehicle][aa].amount;
            }
        }
    }
    z += '<div class="dialog_input_line">';
    z += '  <div class="kp' + M + '" style="float:left; margin:2px 5px 0 0;"></div>';
    z += '  <input type="text" id="map_vehicle_slot_fill_input" value="' + C + '" class="dialog_input" style="float:left; width:65px;" onchange="mapCalcVehicleSlot(' + M + ');" onkeyup="mapCalcVehicleSlot(' + M + ');">';
    z += '  <div style="float:left; margin:2px 0 0 5px;">' + t_inner_stock + "&nbsp;" + formatNumber(ae[M].number) + "</div>";
    z += '  <button class="button_new link" style="float:right; margin-left:10px;" onclick="mapSetVehicleSlot(' + M + ')">' + t_map_vehicle_fill + "</button>";
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += "<div>" + t_map_vehicle_fill_restspace + "&nbsp;" + mapGetCurrentCapacity() + "/" + P.capacity + "</div>";
    var u = farms_data.map.vehicles[map_current_route][map_current_vehicle].current;
    if (map_transfer_rest[u] && map_transfer_rest[u][map_fill_vehicle_slot_filter] && produkt_category[M] != "tea") {
        z += '<div class="important" style="margin-top:5px;">' + str_replace("%COUNT%", map_transfer_rest[u][map_fill_vehicle_slot_filter], t_farmtransfer_rest_warning2) + "</div>";
    }
    var O = "mapDialog('fillVehicleSlot', " + map_current_vehicle + ", " + map_current_vehicle_slot + ")";
    globalcommitbox(q, z, 0, O, 1);
    $("map_vehicle_slot_fill_input").focus();
} if (m == "stock_overview") {
    var q = "";
    var z = "";
    z += '<div style="position:absolute; margin-top:-25px; z-index:10;">';
    z += '  <div id="map_overview_tab_stock" class="link brown_tab" style="margin-left:5px;" onclick="map_overview_filter=\'stock\'; mapDialog(\'stock_overview\');">' + t_map_stock_overview_head + "</div>";
    z += '  <div id="map_overview_tab_vehicles" class="link brown_tab" style="margin-left:-1px;" onclick="map_overview_filter=\'vehicles\'; mapDialog(\'stock_overview\');">' + t_map_vehicles_overview_head + "</div>";
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += '<div id="map_vehicle_overview" class="brown_tab_content">';
    var B = "";
    if (map_overview_vehicles_filter == 1) {
        B = "checked";
    }
    z += '  <div style="background:#C3A75E; border-radius:5px; padding:2px; margin-bottom:5px;">';
    z += '    <input type="checkbox" style="float:left;" ' + B + ' onclick="mapSetVehicleOverviewFilter()"><div style="float:left; margin:2px 10px 0 0;">' + t_map_vehicle_overview_active_tours + '</div><div class="clear"></div>';
    z += "  </div>";
    z += '  <div style="float:left; font-weight:bold; width:120px;">&nbsp;</div>';
    z += '  <div style="float:left; font-weight:bold; width:50px;">' + t_map_vehicle_overview_start + "</div>";
    z += '  <div style="float:left; font-weight:bold; width:200px;">&nbsp;</div>';
    z += '  <div style="float:left; font-weight:bold; width:50px;">' + t_map_vehicle_overview_target + "</div>";
    z += '  <div style="float:left; font-weight:bold; width:80px; text-align:left;">' + t_map_vehicle_overview_duration + "</div>";
    z += '  <div style="float:left; font-weight:bold; width:100px; text-align:left;">' + t_map_vehicle_overview_cargo + "</div>";
    z += '  <div class="clear"></div>';
    z += '  <div id="map_vehicle_overview_inner"></div>';
    z += "</div>";
    var L = ["v", "ex", "e", "o", "alpin"];
    z += '<div id="map_stock_overview" class="brown_tab_content">';
    z += '  <div style="background:#C3A75E; border-radius:5px; padding:2px; margin-bottom:5px;">';
    z += '    <input id="map_stockoverview_checkbox_v" type="checkbox" style="float:left;" onclick="setMapstockOverviewFilter(\'v\')"><div style="float:left; margin:2px 10px 0 0;">' + t_category_plants + "</div>";
    z += '    <input id="map_stockoverview_checkbox_ex" type="checkbox" style="float:left;" onclick="setMapstockOverviewFilter(\'ex\')"><div style="float:left; margin:2px 10px 0 0;">' + t_help_new_products_ex_head + "</div>";
    z += '    <input id="map_stockoverview_checkbox_e" type="checkbox" style="float:left;" onclick="setMapstockOverviewFilter(\'e\')"><div style="float:left; margin:2px 10px 0 0;">' + t_category_animals + "</div>";
    z += '    <input id="map_stockoverview_checkbox_o" type="checkbox" style="float:left;" onclick="setMapstockOverviewFilter(\'o\')"><div style="float:left; margin:2px 10px 0 0;">' + t_category_oils + "</div>";
    z += '    <div class="clear"></div>';
    z += "  </div>";
    z += '  <div class="map_stock_overview_list">';
    var S = 0;
    if (farms_data.count > 4) {
        for (var Z = 5; Z <= farms_data.count; Z++) {
            S++;
        }
    }
    z += '    <div style="width:' + (270 + (S * 115)) + 'px;">';
    z += '      <div style="float:left; font-weight:bold; text-align:left; width:170px;">&nbsp;</div>';
    z += '      <div style="float:left; font-weight:bold; width:100px; text-align:left; margin-right:5px;">' + t_map_stock_overview_mainstock + "</div>";
    if (farms_data.count > 4) {
        for (var Z = 5; Z <= farms_data.count; Z++) {
            z += '<div style="float:left; font-weight:bold; width:100px; text-align:left; margin-right:5px;">' + str_replace("%FARM%", Z, t_map_stock_overview_tempstock) + "</div>";
        }
    }
    z += '      <div class="clear"></div>';
    z += "    </div>";
    z += '    <div style="position:relative; width:100%;">';
    var V = {};
    for (var Z in rackCache[1]) {
        for (var Y in rackCache[1][Z]) {
            V[rackCache[1][Z][Y].pid] = { number: rackCache[1][Z][Y].amount };
        }
    }
    for (var aa in produkt_name) {
        if (aa > 0 && in_array(produkt_category[aa], map_stock_overview_filter)) {
            var y = 0;
            var I = 0;
            if (V[aa]) {
                I = V[aa].number;
            }
            if (I > 0) {
                y++;
            }
            var T = "";
            T += '<div class="map_stock_overview_item">';
            T += '<div style="float:left; width:170px;">' + htmlProductBody(aa) + "</div>";
            T += '  <div style="float:left; width:100px; text-align:left; margin-right:5px;">' + formatNumber(I) + "</div>";
            if (farms_data.count > 4) {
                for (var Z = 5; Z <= farms_data.count; Z++) {
                    var a = 0;
                    if (rackCache[Z]) {
                        for (var U in rackCache[Z]) {
                            for (var Y in rackCache[Z][U]) {
                                if (rackCache[Z][U][Y].pid == aa) {
                                    a = rackCache[Z][U][Y].amount;
                                }
                            }
                        }
                    }
                    if (a > 0) {
                        y++;
                    }
                    T += '<div style="float:left; width:100px; text-align:left; margin-right:5px;">' + formatNumber(a) + "</div>";
                }
            }
            T += '  <div class="clear"></div>';
            T += "</div>";
            if (y > 0) {
                z += T;
            }
        }
    }
    z += "    </div>";
    z += "  </div>";
    z += "</div>";
    globalcommitbox(q, z, 0, 0, 1);
    $("globalbox_content").removeClassName("globalbox_content");
    $("globalbox_content").addClassName("globalbox_content_max_width");
    hideDiv("globalbox_char");
    hideDiv("globalbox_footer");
    var b = $("globalbox").getWidth();
    $("globalbox").style.marginLeft = "-" + (b / 2) + "px";
    $("globalbox").style.top = "50px";
    for (var aa = 0; aa < map_stock_overview_filter.length; aa++) {
        if (in_array(map_stock_overview_filter[aa], L) && $("map_stockoverview_checkbox_" + map_stock_overview_filter[aa])) {
            $("map_stockoverview_checkbox_" + map_stock_overview_filter[aa]).checked = true;
        }
    }
    if (map_overview_filter == "stock") {
        showDiv("map_stock_overview");
        $("map_overview_tab_stock").addClassName("brown_tab_active");
    }
    else {
        showDiv("map_vehicle_overview");
        $("map_overview_tab_vehicles").addClassName("brown_tab_active");
    }
    mapTimerUpdate();
} }
function mapShowTourInfo() { map_overview_filter = "vehicles"; mapDialog("stock_overview"); }
function mapGetStockData() { var b = {}; if (map_current_route > 0 && map_current_vehicle > 0) {
    var e = farms_data.map.vehicles[map_current_route][map_current_vehicle].current;
    for (var d in rackCache[e]) {
        for (var h in rackCache[e][d]) {
            var a = rackCache[e][d][h].pid;
            var c = rackCache[e][d][h].amount;
            b[a] = {};
            b[a].number = c;
        }
    }
} return b; }
function mapSetVehicleSlot(a) { var b = $("map_vehicle_slot_fill_input").value; if (b <= 0) {
    return false;
} if (!map_vehicle_cart[map_current_vehicle]) {
    map_vehicle_cart[map_current_vehicle] = {};
} if (!map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot]) {
    map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot] = {};
} map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot].pid = a; map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot].amount = b; hideDiv("globaltransp"); hideDiv("globalbox"); mapDialog("openVehicleSheet", map_current_route); }
function mapCalcVehicleSlot(d) { var h = $("map_vehicle_slot_fill_input").value; h = parseInt(h); if (h < 1) {
    h = 0;
} if (h != "" && isNaN(h)) {
    h = 0;
} var e = mapGetStockData(); var b = 0; if (e[d]) {
    b = e[d].number;
} var m = farms_data.map.vehicles[map_current_route][map_current_vehicle].current; if (map_transfer_rest[m] && map_transfer_rest[m][map_fill_vehicle_slot_filter] && produkt_category[d] != "tea") {
    b = (b - map_transfer_rest[m][map_fill_vehicle_slot_filter]);
} var c = mapGetCurrentCapacity(); var a = farms_data.map.config.vehicles[map_current_vehicle].capacity; var l = (a - c); if (map_vehicle_cart[map_current_vehicle] && map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot]) {
    var m = map_vehicle_cart[map_current_vehicle][map_current_vehicle_slot].amount;
    l += parseInt(m);
} if (h > l) {
    h = l;
} if (h > b) {
    h = b;
} $("map_vehicle_slot_fill_input").value = h; }
function mapGetCurrentCapacity(b) { if (!b) {
    b = map_current_vehicle;
} var a = 0; for (var c in map_vehicle_cart[b]) {
    a += parseInt(map_vehicle_cart[b][c].amount);
} return a; }
function mapRemoveVehicleCardItem(c, a) { map_current_vehicle = c; for (var b in map_vehicle_cart[map_current_vehicle]) {
    if (map_vehicle_cart[map_current_vehicle][b].pid == a) {
        delete map_vehicle_cart[map_current_vehicle][b];
    }
} mapDialog("openVehicleSheet", map_current_route); }
function setMapstockOverviewFilter(b) { if (in_array(b, map_stock_overview_filter)) {
    for (var a = 0; a < map_stock_overview_filter.length; a++) {
        if (b == map_stock_overview_filter[a]) {
            delete map_stock_overview_filter[a];
            break;
        }
    }
    map_stock_overview_filter.sort;
}
else {
    map_stock_overview_filter.push(b);
} mapDialog("stock_overview"); }
function mapSetVehicleOverviewFilter() { if (map_overview_vehicles_filter == 1) {
    map_overview_vehicles_filter = 0;
}
else {
    map_overview_vehicles_filter = 1;
} mapDialog("stock_overview"); }
function mapCloseVehicleSheet() { map_current_route = 0; }
function closeMap() { hideDiv("map_main"); }
function mapTimer() { if (farms_data.map && farms_data.map.vehicles) {
    for (var a in farms_data.map.vehicles) {
        for (var b in farms_data.map.vehicles[a]) {
            farms_data.map.vehicles[a][b].remain--;
        }
    }
} mapTimerUpdate(); }
function mapTimerUpdate() { if (farms_data.map && farms_data.map.vehicles) {
    if ($("map_vehicle_sheet_current_time")) {
        hideDiv("map_vehicle_sheet_current_time");
        if (farms_data.map.vehicles[map_current_route] && farms_data.map.vehicles[map_current_route][map_current_vehicle]) {
            if (farms_data.map.vehicles[map_current_route][map_current_vehicle].remain) {
                $("map_vehicle_sheet_current_time").innerHTML = formatTime(farms_data.map.vehicles[map_current_route][map_current_vehicle].remain);
                showDiv("map_vehicle_sheet_current_time");
            }
        }
    }
    for (var n in farms_data.map.vehicles) {
        for (var a in farms_data.map.vehicles[n]) {
            var m = farms_data.map.vehicles[n][a];
            if ($("map_vehiclesheet_tour_item" + n + "_" + a + "timer")) {
                if (m.remain >= 0) {
                    $("map_vehiclesheet_tour_item" + n + "_" + a + "timer").innerHTML = formatTime(m.remain);
                }
            }
            if (!farm) {
                f = 1;
            }
            else {
                f = farm;
            }
            if (m.remain == -1) {
                farmAction("map_update", f, 0);
            }
        }
    }
    if ($("map_vehicle_overview")) {
        var e = "";
        for (var n in farms_data.map.vehicles) {
            for (var a in farms_data.map.vehicles[n]) {
                var m = farms_data.map.vehicles[n][a];
                var h = farms_data.map.config.routes[n].a;
                if (m.current == h) {
                    h = farms_data.map.config.routes[n].b;
                }
                var b = "";
                var l = 0;
                if (m.remain > 0) {
                    b = formatTime(m.remain);
                    l = (((m.duration_original - m.remain) * 100) / m.duration_original);
                }
                var c = 1;
                if (map_overview_vehicles_filter == 1 && !m.remain) {
                    c = 0;
                }
                if (c == 1) {
                    e += '<div class="map_vehicle_overview_line">';
                    e += '  <div style="float:left; width:120px; height:45px;" class="map_vehicle' + a + '_mini"></div>';
                    e += '  <div style="float:left; width:50px; font-size:18px; font-weight:bold; color:#C3A75E;">' + m.current + "</div>";
                    e += '  <div style="float:left; position:relative; width:200px; height:12px; border-radius:5px; margin-top:6px; background-color:#C3A75E; overflow:hidden;">';
                    e += '    <div style="position:relative; top:0; left:0; width:' + l + '%; height:12px; background-color:#a88f52;">&nbsp;</div>';
                    e += "  </div>";
                    e += '  <div style="float:left; width:50px; font-size:18px; font-weight:bold; color:#C3A75E;">' + h + "</div>";
                    e += '  <div style="float:left; width:80px; margin-top:5px; text-align:left;">';
                    e += "    <div>" + b + "</div>";
                    if (m.remain > 0) {
                        e += '<div style="margin-top:5px;" class="speedupgardenbutton link" onclick="hideDiv(\'globalbox\'); globalSpeedupBox(\'map_tour\', 0, ' + n + ')"></div>';
                    }
                    e += "  </div>";
                    if (m.data) {
                        e += '<div style="float:left; width:100px; margin-top:5px; text-align:left;">';
                        for (var d = 0; d < m.data.length; d++) {
                            e += htmlProductBody(m.data[d].pid, m.data[d].amount);
                        }
                        e += "</div>";
                    }
                    e += '  <div class="clear"></div>';
                    e += "</div>";
                }
            }
        }
        $("map_vehicle_overview_inner").innerHTML = e;
    }
    mapVehicleTours();
} }
var travel_box_timer_start = 0;
var travel_box_type = "";
var travel_box_count = "";
function mapGo2Location(a, c, b) { travel_box_type = a; travel_box_count = c; hideDiv("lager_info_button"); if (premium || !travelad || b == 1 || ((farm > 0 && a == "farm") || (city == c && a == "city"))) {
    if (a == "forestry") {
        if (!forestry_unlock || currentuserlevel < mapBlockzones.forestry.level) {
            return false;
        }
        farm = 0;
        city = 0;
        forestry_quicknavi = 1;
        initForestry();
    }
    if (a == "picknick") {
        if (currentuserlevel < mapBlockzones.picknick.level) {
            return false;
        }
        farm = 0;
        city = 0;
        foodworld_quicknavi = 1;
        foodworldAction("foodworld_init");
    }
    if (a == "city") {
        if (c == 2 && currentuserlevel < mapBlockzones.city2.level) {
            return false;
        }
        farm = 1;
        city = c;
        initCity(c);
    }
    if (a == "farm") {
        farm = c;
        showMain();
        farmMove(c);
        hideDiv("farm_speedlinks_farm_list");
    }
    if (a == "farmersmarket") {
        if (!farmersmarket_data || currentuserlevel < mapBlockzones.farmersmarket.level) {
            return false;
        }
        farm = 99;
        showMain();
        farmMove(99);
    }
    if (a == "farmersmarket2") {
        if (!farmersmarket_data || currentuserlevel < mapBlockzones.farmersmarket.level) {
            return false;
        }
        farm = 100;
        showMain();
        farmMove(100);
    }
    if (a == "megafield") {
        showMain();
        farm = 0;
        city = 0;
        inguild = 0;
        buildMegafield();
    }
    if (a == "guild") {
        inguild = 1;
        showMain();
        farmMove(1);
        initGuild();
    }
    closeMap();
    if (!rackCache[farm] && farm > 0) {
        farmAction("updater", farm, 1);
    }
    else {
        var d = 0;
        if (farm == 5) {
            d = 1;
        }
        sortRackNew(d);
    }
}
else {
    mapTravelStart();
} }
function mapTravelStart() { if (travelad == 1) {
    travel_box_timer_start = gametimer_runtime;
    setTimer("travelbox");
    var b = "city";
    if (farm > 0) {
        b = "farm";
    }
    setBlockMain(2);
    showDiv("blockmainnavi");
    showDiv("globaltransp");
    showDiv("travel_box");
    $("travel_box_back").className = "travel_" + b + "back min";
    $("travel_box_timer").innerHTML = formatTime(5);
    $("travel_box_bus").className = "travel_box_bus_" + b + "start min";
    setTimeout(function () { $("travel_box_bus").addClassName("travel_box_bus_" + b + "move"); }, 100);
    hideDiv("travel_box_premium");
    hideDiv("travel_box_ad");
    if (!tutorial) {
        var a = getRandom(1, 3);
        if (a == 1) {
            showDiv("travel_box_premium");
        }
        else {
            showDiv("travel_box_ad");
        }
    }
} }
function mapTravelEnd() { setBlockMain(1); hideDiv("blockmainnavi"); clearTimer("travelbox"); hideDiv("globaltransp"); hideDiv("travel_box"); hideDiv("blockmainnavi"); mapGo2Location(travel_box_type, travel_box_count, 1); }
function mapTravelStop() { clearTimer("travelbox"); return true; }
function mapTravelAd(a, b) { if (a == 1 || a == 3) {
    if (a == 3) {
        b = "del_me";
    }
    var c = { hash: encodeURIComponent(b) };
    generalAction("watchtravelad", c);
} }
function mapHelpOpen() { showDiv("map_help_box_transp"); showDiv("map_help_box"); mapHelpNavi(); }
function mapHelpClose() { hideDiv("map_help_box_transp"); hideDiv("map_help_box"); }
function mapRackTransfer() { var a = (farm - 4); var b = 0; if (farms_data.map && farms_data.map.vehicles && farms_data.map.vehicles[a]) {
    for (var c in farms_data.map.vehicles[a]) {
        if (farms_data.map.vehicles[a][c].current == farm) {
            b++;
        }
    }
} if (!b) {
    globalerrorbox(str_replace("%FARM%", farm, t_map_transfer_to_main), "mapDialog('openVehicleSheet', " + a + ")");
}
else {
    mapDialog("openVehicleSheet", a);
} }
var market_minshop_line = 0;
function marketAction(d, c, l) { if (!c) {
    c = 0;
} if (d == "marketinit") {
    market_comp = 1;
    market_filter_pid = -1;
    market_filter_name = "";
    market_filter_own = 0;
    market_guild_filter = 0;
    market_main_navi = 1;
    market_navi = 1;
    hideDiv("marketfilterdelbutton");
} if (d == "marketcreateoffer") {
    var m = market_filter_pid;
    var h = $("marketnewoffer_amount").value;
    var q = $("marketnewoffer_price1").value + "." + $("marketnewoffer_price2").value;
} if (d == "marketupdate" || d == "marketdeloffer") {
    if (market_filter_pid > -1) {
        m = market_filter_pid;
    }
} if (d == "marketcreateoffer_coins") {
    var m = 0;
    var h = $("marketnewoffer_amount_coins").value;
    var q = $("marketnewoffer_price_coins").value;
    var r = market_coinstype;
}
else {
    if (d == "marketsearch") {
        var b = $("marketsearch").value;
    }
    else {
        if (d == "marketbuyoffer") {
            if (market_filter_pid > -1) {
                m = market_filter_pid;
            }
            if (market_offer_id < 1) {
                return false;
            }
            c = market_offer_id;
            var h = $("marketbuyofferamount").value;
        }
        else {
            if (d == "marketfilter") {
                if (market_filter_name != "") {
                    var b = market_filter_name;
                }
                if (market_filter_pid > -1) {
                    var m = market_filter_pid;
                }
                else {
                    m = -1;
                }
                if (market_guild_filter > 0) {
                    var e = market_guild_filter;
                }
                if (market_filter_own > 0) {
                    var s = market_filter_own;
                }
            }
        }
    }
} var a = "ajax/city.php?rid=" + rid + "&mode=" + d + "&id=" + c; if (m) {
    a += "&pid=" + m;
} if (h) {
    a += "&amount=" + h;
} if (q) {
    a += "&price=" + q;
} if (r) {
    a += "&type=" + r;
} if (e) {
    a += "&guildid=" + e;
} if (b) {
    a += "&name=" + encodeURIComponent(b);
} if (s) {
    a += "&own=" + s;
} a += "&comp=" + market_comp; showGlobalWait(d); var n = createAjaxRequestObj(); n.open("GET", a, true); n.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); n.onreadystatechange = function () { marketActionResponse(n, d, c, l); }; n.send(null); }
function marketActionResponse(c, d, e, b) { var a = _chkRequest(c); if (a != 0) {
    hideGlobalWait();
    market_comp = 1;
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        if (a[1]["offers"]) {
            market_offers = a[1]["offers"];
        }
        if (a[1]["products"]) {
            market_products = a[1]["products"];
        }
        if (a[1]["guild"]) {
            market_guildid = a[1]["guild"];
        }
        if (a[1]["bar"]) {
            market_current_bar = a[1]["bar"];
        }
        if (a[1]["count"]) {
            market_user_entries = a[1]["count"];
        }
        if (a[1]["transfer"]) {
            if (a[1]["transfer"]["msg"]) {
                globalerrorbox(a[1]["transfer"]["msg"]);
            }
        }
        if (d == "marketupdate") {
            if ($("marketoffers").style.display == "block") {
                showOffers(marketlist_currentpage);
            }
        }
        else {
            showDiv("transp3");
            showDiv("market");
            closeMarketNewOffer();
            showDiv("market_navi");
            showDiv("marketoffers");
            hideDiv("market_categories");
            hideDiv("marketcategories");
            hideDiv("marketbuyoffer");
            if (d != "marketfilter") {
                setMarketNavi(1);
            }
            market_offer_id = 0;
            showOffers();
            if (b > 0) {
                market_filter_pid = e;
                market_filter_own = 0;
                market_guild_filter = 0;
                openMarketNewOffer();
            }
            if (d == "marketdeloffer" || d == "marketbuyoffer" || d == "marketcreateoffer" || d == "marketcreateoffer_coins") { }
        }
        $("naviitem_tt3").innerHTML = str_replace("%COUNT%", market_user_entries, market_mainnavi3);
        startMarketTimer();
    }
} return true; }
function setMarketNavi(b) { market_main_navi = b; for (var a = 1; a <= 6; a++) {
    if ($("market_navi" + a)) {
        $("market_navi" + a).removeClassName("market_navi" + a + "_active");
    }
} $("market_navi" + b).addClassName("market_navi" + b + "_active"); }
var markettimerrun = 0;
function startMarketTimer() { markettimerrun = 0; if (!market_timer.update) {
    market_timer.update = window.setInterval("marketTimer()", 1000);
} }
function marketTimer() { markettimerrun++; if (markettimerrun >= 45) {
    markettimerrun = 0;
    $("market_updater_bar").style.left = "-100px";
    marketAction("marketupdate");
}
else {
    var a = ((markettimerrun / 45) * 100);
    $("market_updater_bar").style.left = "-" + (100 - a) + "px";
} }
function clearMarketTimer() { if (market_timer) {
    for (var a in market_timer) {
        if (market_timer[a]) {
            window.clearInterval(market_timer[a]);
            market_timer[a] = 0;
        }
    }
} }
function closeMarket() { clearMarketTimer(); hideDiv("transp3"); hideDiv("market"); }
function showMarketCategory(r, a) { if (market_navi == 6) {
    market_filter_pid == -1;
    hideDiv("marketfilterdelbutton");
    r = 1;
} if (!a) {
    page = 1;
}
else {
    page += a;
} if (!r || typeof r == "undefined") {
    r = market_navi;
}
else {
    market_navi = r;
} var e = { "1": ["v", "hr", "ex"], "2": ["e"], "3": ["o"], "4": ["fw"], "5": ["z"], "6": [0], "7": ["fl", "fla", "md", "breed"], "8": ["alpin", "tea"] }; showDiv("market_navi"); hideDiv("marketoffers"); showDiv("market_categories"); showDiv("marketcategories"); hideDiv("market_category_arrowright"); hideDiv("market_category_arrowleft"); for (var c = 1; c <= 8; c++) {
    $("market_navi_cat" + c).removeClassName("market_cat" + c + "_active");
} $("market_navi_cat" + r).addClassName("market_cat" + r + "_active"); if (r == 6) {
    market_filter_pid = 0;
    filterMarket();
    return false;
} var d = ""; var q = 0; for (var h in market_products) {
    if (in_array(produkt_category[h], e[r])) {
        q++;
    }
} var t = 0; var s = q; if (q > 40) {
    if (page == 1 || (page * 40) < q) {
        showDiv("market_category_arrowright");
    }
    if (page > 1) {
        t = ((page - 1) * 40);
        showDiv("market_category_arrowleft");
    }
    $("marketcategories").removeClassName("marketcategories").addClassName("marketcategories_pages");
    s = (page * 40);
}
else {
    $("marketcategories").removeClassName("marketcategories_pages").addClassName("marketcategories");
} var l = 1; var m = 1; for (var h in market_products) {
    if (in_array(produkt_category[h], e[r])) {
        if (m > t && m <= s) {
            var n = checkRackItem(h);
            d += '<div class="market_pframe link" style="float:left; position:relative; margin-right:3px; margin-bottom:3px;" ';
            d += 'onclick="market_navi=' + r + "; market_filter_pid=" + h + '; filterMarket();" ';
            d += "onmouseover=\"showDiv('market_catitem" + h + "')\" onmouseout=\"hideDiv('market_catitem" + h + "')\">";
            d += '  <div style="position:absolute; top:7px; left:8px;" class="tt' + h + '">';
            var b = "left";
            if (q <= 40 && (l % 8 == 0 || l % 9 == 0)) {
                b = "right";
            }
            else {
                if (q > 40 && (l % 7 == 0 || l % 8 == 0)) {
                    b = "right";
                }
            }
            d += '  <div style="z-index:100; display:none; position:absolute; top:60px; ' + b + ':0px; white-space:nowrap;" class="ttbox" id="market_catitem' + h + '">';
            d += produkt_name[h] + " (" + formatNumber(n ? n : 0) + ")</div>";
            d += "  </div>";
            d += "</div>";
            if ((q < 40 && l == 9) || (q > 40 && l == 8)) {
                l = 1;
            }
            else {
                l++;
            }
        }
        m++;
    }
} d += '<div style="clear:both;"></div>'; $("marketcategories").innerHTML = d; }
function sortOffers() { var c = new Array; if (market_filter_pid > -1) {
    for (var b = 0; b < market_offers.length; b++) {
        var a = market_offers[b];
        if (market_filter_pid == a.p) {
            c.push(a);
        }
    }
    c.sort(function (e, d) { if (e.pr == d.pr) {
        return e.id - d.id;
    } return e.pr - d.pr; });
    return c;
}
else {
    return market_offers;
} }
function showOffers(r) { if (market_filter_pid > -1 || market_filter_own > 0 || market_filter_name != "" || market_guild_filter > 0) {
    showDiv("marketfilterdelbutton");
} if (!r) {
    r = 1;
} marketlist_currentpage = r; var u = ((r - 1) * marketlist_maxsize); var v = (r * marketlist_maxsize); showDiv("market_navi"); showDiv("marketoffers"); hideDiv("market_categories"); hideDiv("marketcategories"); hideDiv("marktoffers_navi_prev"); hideDiv("marktoffers_navi_next"); hideDiv("market_category_arrowright"); hideDiv("market_category_arrowleft"); var l = ""; var q = 0; var y = sortOffers(); if (y.length < 1) {
    $("marktoffers_rows").innerHTML = '<div style="text-align:center; padding-top:20px">' + no_offers + "</div>";
    return false;
} var e = "left"; if (setarab) {
    e = "right";
} hideDiv("marktoffers_self_sum"); var w = 0; if (market_filter_own == 1) {
    for (var h = 0; h < y.length; h++) {
        if (y[h].s) {
            w += (y[h].pr * y[h].a);
        }
    }
    if (w > 0) {
        $("marktoffers_self_sum_in").innerHTML = formatPrice(w);
        showDiv("marktoffers_self_sum");
    }
} for (var h = 0; h < y.length; h++) {
    var a = y[h];
    var c = 0;
    if (market_guild_filter == 1) {
        if (a.g != market_guildid) {
            continue;
        }
    }
    if (market_filter_pid > -1) {
        if (a.p == market_filter_pid) {
            c = 1;
        }
        else {
            c = 0;
        }
    }
    else {
        c = 1;
    }
    if (market_filter_name != "") {
        if (a.no == market_filter_name) {
            c = 1;
        }
        else {
            c = 0;
        }
    }
    else {
        c = 1;
    }
    if (market_filter_own == 1) {
        if (!a.s) {
            c = 0;
        }
    }
    if (c == 1) {
        if (q >= u && q < v) {
            l += '<div style="padding:2px;" onmouseover="this.addClassName(\'market_mark\')" onmouseout="this.removeClassName(\'market_mark\')">';
            var b = produkt_name[a.p];
            var n = "";
            if (produkt_price && produkt_price[a.p] && market_minshop_line == 1) {
                var t = (parseFloat(a.pr) - parseFloat(produkt_price[a.p] * 1.1));
                if (t > 0) {
                    n = " color:orangered;";
                }
            }
            if (a.p > 0) {
                l += '  <div class="kp' + a.p + '" style="float:' + e + ';"></div>';
            }
            else {
                l += '<img style="height:15px; width:15px; float:' + e + ';" src="' + imgpath + 'menu/coins.gif">';
                b = t_coins;
            }
            if (a.b) {
                n = " color:orangered;";
            }
            l += '  <div title="' + b + '" class="market_product underline link" onclick="market_filter_name=\'\'; market_filter_pid=' + a.p + '; filterMarket();" style="' + n + '">' + b + "</div>";
            var s = "";
            if (a.b) {
                s = "important2";
            }
            l += '  <div class="market_price ' + s + '" onmouseover="showDiv(\'market_price_tt' + a.id + "');\" onmouseout=\"hideDiv('market_price_tt" + a.id + "');\">" + formatPrice(a.pr);
            if (a.sb) {
                s = "important";
            }
            l += '    <div id="market_price_tt' + a.id + '" style="z-index:100; border-radius:5px; display:none; position:absolute; top:20px; right:0px; white-space:nowrap;" class="ttbox">' + market_sum + ': <span class="' + s + '" style="font-weight:bold">' + formatPrice(a.pr * a.a) + "</span></div>";
            l += "  </div>";
            l += '  <div class="market_amount" onmouseover="showDiv(\'market_amount_tt' + a.id + "');\" onmouseout=\"hideDiv('market_amount_tt" + a.id + "');\">" + formatNumber(a.a) + "&nbsp;";
            l += '    <div id="market_amount_tt' + a.id + '" style="z-index:100; border-radius:5px; display:none; position:absolute; top:20px; right:0px; white-space:nowrap;" class="ttbox">' + market_sum + ': <span class="' + s + '" style="font-weight:bold">' + formatPrice(a.pr * a.a) + "</span></div>";
            l += "  </div>";
            l += '  <div class="market_seller">&nbsp;<span class="underline link" onclick="market_filter_pid=-1; market_filter_name=\'' + a.no + "'; filterMarket();\">" + a.n + "</span>";
            l += '&nbsp;<img class="link" onclick="window.open(\'schaugarten/index.php?mode=view&user=' + a.u + '\')" src="' + imgpath + 'stadt/stats_sf.gif"></div>';
            var z = "";
            var d = market_buy;
            var s = "market_carticon";
            if (a.s) {
                d = market_del;
                s = "market_delicon";
                z = "onclick=\"marketAction('marketdeloffer'," + a.id + ')"';
            }
            else {
                if (a.b) {
                    s = "market_noicon";
                    d = market_block;
                }
                else {
                    z = 'onclick="buyMarketOffer(' + a.id + ')"';
                }
            }
            l += '  <div class="market_buy ' + s + ' link" ' + z + "></div>";
            l += '  <div style="clear:both;"></div>';
            l += "</div>";
        }
        q++;
    }
} $("marktoffers_rows").innerHTML = l; if (r > 1) {
    showDiv("marktoffers_navi_prev");
    $("marktoffers_navi_prev").onclick = new Function("showOffers(" + (r - 1) + ")");
} if (r >= market_comp_page) {
    market_comp = 0;
} if (r < market_comp_page) {
    market_comp = 1;
} if (r < Math.ceil(q / marketlist_maxsize)) {
    showDiv("marktoffers_navi_next");
    $("marktoffers_navi_next").onclick = new Function("showOffers(" + (r + 1) + ")");
} }
function filterMarket() { if (1 == 1) {
    marketAction("marketfilter");
}
else {
    showOffers();
} }
function delMarketFilter() { if (1 == 1) {
    marketAction("marketinit");
}
else {
    market_filter_pid = -1;
    market_filter_own = 0;
    market_filter_name = "";
    market_guild_filter = 0;
    hideDiv("marketfilterdelbutton");
    showOffers();
    setMarketNavi(1);
} }
function openMarketNewOffer() { showOffers(); showDiv("market_navi"); hideDiv("market_categories"); showDiv("market_transp"); showDiv("marketnewoffer"); hideDiv("market_new_block"); hideDiv("market_new_block_coins"); hideDiv("marketnewoffersel"); hideDiv("marketnewofferlimitreached"); showDiv("marketnewoffer_setup"); $("marketnewoffer_img").onclick = new Function(); $("marketnewoffer_name").onclick = new Function(); $("marketnewoffer_img").innerHTML = ""; $("marketnewoffer_img").className = ""; var b = 0; for (var a = 0; a < market_offers.length; a++) {
    if (market_offers[a].s) {
        b++;
    }
    if (b >= 20) {
        marketOffersLimitReached();
        return false;
    }
} var c = checkRackItem(market_filter_pid); if (market_filter_pid == 0) {
    showDiv("market_new_block_coins");
    calcMarketPrice();
}
else {
    if (!(c > 0)) {
        startMarketSelect();
    }
    else {
        showDiv("market_new_block");
        calcMarketFee();
        $("marketcreateoffer_stockamount").innerHTML = c;
        $("marketnewoffer_amount").value = c;
        $("marketnewoffer_img").className = "tt" + market_filter_pid;
        $("marketnewoffer_name").innerHTML = produkt_name[market_filter_pid];
        $("marketnewoffer_price1").value = 0;
        $("marketnewoffer_price2").value = 0;
        $("marketnewoffer_fee").innerHTML = 0;
        $("marketnewoffer_img").onclick = new Function("startMarketSelect()");
        $("marketnewoffer_name").onclick = new Function("startMarketSelect()");
        $("marketnewoffer_amount").focus();
    }
} }
function clearMarketFilter() { market_filter_pid = -1; market_filter_own = 0; market_filter_name = ""; market_guild_filter = 0; market_main_navi = 1; }
function setMarketFilter(a) { if (a == "guild") {
    if (market_guild_filter == 1) {
        market_guild_filter = 0;
        setMarketNavi(1);
    }
    else {
        setMarketNavi(4);
        market_filter_pid = -1;
        market_filter_own = 0;
        market_guild_filter = 1;
    }
} if (a == "own") {
    if (market_filter_own == 1) {
        market_filter_own = 0;
        setMarketNavi(1);
    }
    else {
        setMarketNavi(3);
        market_guild_filter = 0;
        market_filter_pid = -1;
        market_filter_own = 1;
    }
} if (1 == 1) {
    filterMarket();
}
else {
    showOffers();
} }
function createMarketSel() { html = ""; var d = 0; var c = 0; for (var a in market_products) {
    if (checkRackItem(a) && market_products[a] == 1) {
        if (c == 0) {
            d = a;
        }
        c++;
    }
} if (c == 0 && current_coins < 1) {
    $("marketnewoffersel_select").innerHTML = '<div style="margin-top:60px; padding:20px">' + market_new_nothingtosell + "</div>";
    return false;
} if (market_filter_pid >= 0) {
    if (market_filter_pid == 0) {
        d = market_filter_pid;
    }
    else {
        if (checkRackItem(market_filter_pid) > 0) {
            d = market_filter_pid;
        }
    }
} var b = produkt_name[d]; if (d == 0) {
    b = t_coins;
} html += '<div style="position:absolute; top:65px; left:50px;">'; html += '  <div class="link" onclick="marketControlDiv(\'market_select_list\');" style="float:left; padding:2px; width:185px; border-bottom:1px solid #000; background-color:#fff; color:#000;">'; if (d == 0) {
    html += '<div style="float:left; margin-right:5px;"><img src="' + imgpath + 'menu/coins.gif" style="height:15px; height:15px;"></div>';
}
else {
    html += '<div style="float:left; margin-right:5px;" class="kp' + d + '"></div>';
} html += '    <div style="float:left;">' + b + "</div>"; html += '    <div style="clear:both;"></div>'; html += "  </div>"; html += '  <div id="market_select_control" class="link" onclick="marketControlDiv(\'market_select_list\');" style="float:left; width:15px; height:20px; background:url(' + imgpath + 'market/sel_open.gif) no-repeat; background-color:#000;">&nbsp;</div>'; html += '  <div style="clear:both;"></div>'; html += "</div>"; html += '<div style="display:none; position:absolute; top:85px; left:50px; width:204px; height:135px; overflow:auto;" id="market_select_list">'; for (var a in market_products) {
    if ((checkRackItem(a) > 0 && market_products[a] == 1) || a == 0) {
        var b = produkt_name[a];
        if (a == 0) {
            b = t_coins;
        }
        html += '<div style="background-color:#fff; padding:2px; color:#000;" onmouseover="this.style.backgroundColor=\'#B39056\'" onmouseout="this.style.backgroundColor=\'#fff\'" onclick="selectMarketProduct(' + a + ')">';
        if (a == 0) {
            html += '  <img src="' + imgpath + 'menu/coins.gif" style="float:left; margin-right:5px; height:15px; width:15px;">';
        }
        else {
            html += '  <div style="float:left; margin-right:5px;" class="kp' + a + '"></div>';
        }
        html += '  <div style="float:left;">' + b + "</div>";
        html += '  <div style="clear:both;"></div>';
        html += "</div>";
    }
} html += "</div>"; $("marketnewoffersel_select").innerHTML = html; }
function selectMarketProduct(a) { market_filter_pid = a; openMarketNewOffer(); }
function startMarketSelect() { createMarketSel(); hideDiv("marketnewofferlimitreached"); showDiv("marketnewoffersel"); hideDiv("marketnewoffer_setup"); }
function marketOffersLimitReached() { showDiv("marketnewofferlimitreached"); hideDiv("marketnewoffersel"); hideDiv("marketnewoffer_setup"); }
function marketControlDiv(a) { if ($(a)) {
    if ($(a).style.display == "block") {
        $(a).style.display = "none";
    }
    else {
        $(a).style.display = "block";
    }
    if (a == "market_select_list") {
        if ($(a).style.display == "block") {
            $("market_select_control").style.backgroundImage = "url(" + imgpath + "market/sel_close.gif)";
        }
        else {
            $("market_select_control").style.backgroundImage = "url(" + imgpath + "market/sel_open.gif)";
        }
    }
} }
function calcMarketFee() { if (market_filter_pid < 0) { }
else {
    var b = market_filter_pid;
    var c = $("marketnewoffer_amount").value;
    var l = $("marketnewoffer_price1").value;
    var h = $("marketnewoffer_price2").value;
    if (c[0] == 0) {
        c = c.substring(1, c.length);
    }
    c = parseInt(c);
    var e = checkRackItem(b);
    if (e) {
        $("marketcreateoffer_stockamount").innerHTML = e;
    }
    if (c > 0 && Number(c)) {
        if (c > e) {
            c = e;
        }
        $("marketnewoffer_amount").removeClassName("market_correctme");
    }
    else {
        $("marketnewoffer_amount").addClassName("market_correctme");
        c = 0;
    }
    $("marketnewoffer_amount").value = c;
    var d = l + "." + h;
    var a = (c * ((parseInt(d * 1000) / 10000)));
    a = (Math.ceil(a * 100) / 100);
    if (isNaN(a)) {
        a = 0;
    }
    $("marketnewoffer_fee").innerHTML = a;
    if (a > 0 && c > 0 && d > 0) {
        showDiv("market_new_button");
        $("market_new_button").onclick = new Function("closeMarketNewOffer(); marketAction('marketcreateoffer')");
    }
    else {
        hideDiv("market_new_button");
        $("market_new_button").onclick = new Function();
    }
} }
function calcMarketPrice() { var c = $("marketnewoffer_price_coins").value; var h = (c / 100) * 10; var b = 2; market_coinstype = b; if (b == 2) {
    if (!isNaN(c) && parseInt(c) >= parseInt(COINS2KT)) {
        var a = parseInt(c);
        if (a < 18875) {
            var e = a - (a * (a - COINS2KT) * 0.00002);
        }
        else {
            var e = 0.25 * a + 7125.31;
        }
        h = (((a / 110) * 100) / 100) * 10;
        var d = c - e;
        if (h > d) {
            e = c - h;
        }
        $("market_new_userprice").innerHTML = Math.round(e);
    }
    else {
        $("market_new_userprice").innerHTML = 0;
    }
}
else {
    if (!isNaN(c) && parseInt(c) >= parseInt(COINS2KT)) {
        var a = parseInt(c);
        if (a < 11844) {
            var e = 25125 - Math.pow(631265625 - (a / 0.00002), 0.5);
        }
        else {
            var e = 4 * (a - 7125.31);
        }
        var d = e - a;
        if (h > d) {
            e = a + h;
        }
        $("market_new_marketprice").innerHTML = Math.round(e);
        $("market_new_userprice").innerHTML = Math.round(a);
    }
    else {
        $("market_new_marketprice").innerHTML = 0;
        $("market_new_userprice").innerHTML = 0;
    }
} if (parseInt(c) >= parseInt(COINS2KT) && $("marketnewoffer_amount_coins").value > 0) {
    showDiv("market_new_button_coins");
    $("market_new_button_coins").onclick = new Function("marketAction('marketcreateoffer_coins')");
}
else {
    hideDiv("market_new_button_coins");
    $("market_new_button_coins").onclick = new Function();
} }
function closeMarketNewOffer() { hideDiv("market_transp"); hideDiv("marketnewoffer"); }
function buyMarketOffer(b) { for (var a = 0; a < market_offers.length; a++) {
    if (b == market_offers[a].id) {
        market_offer_id = b;
        if (market_offers[a].p > 0) {
            $("marketbuyoffer_img").className = "tt" + market_offers[a].p;
            showDiv("marketbuyoffer_productimage");
            $("marketbuyoffer_name").innerHTML = produkt_name[market_offers[a].p];
            $("marketbuyoffer_name").style.marginTop = "0px";
        }
        else {
            hideDiv("marketbuyoffer_productimage");
            $("marketbuyoffer_name").innerHTML = t_coins;
            $("marketbuyoffer_name").style.marginTop = "20px";
        }
        $("marketbuyoffermarketprice").innerHTML = number_format(market_offers[a].pr, 2, set_komma, set_tausender);
        showDiv("market_transp");
        showDiv("marketbuyoffer");
        $("marketbuyofferamount").value = market_offers[a].a;
        $("marketbuyofferamount").select();
        calcMarketOfferCost();
        break;
    }
} }
function calcMarketOfferCost() { for (var b = 0; b < market_offers.length; b++) {
    if (market_offer_id == market_offers[b].id) {
        var a = $("marketbuyofferamount").value;
        if (parseInt(a) > parseInt(market_offers[b]["a"])) {
            a = market_offers[b]["a"];
        }
        $("marketbuyofferprice").innerHTML = formatPrice(market_offers[b]["pr"] * a);
        $("marketbuyofferamount").value = a;
        if (a > 0 && ((a * market_offers[b]["pr"]) <= market_current_bar)) {
            $("marketbuyofferbutton").onclick = new Function("closeMarketBuyOffer(); marketAction('marketbuyoffer');");
            showDiv("marketbuyofferbutton");
        }
        else {
            $("marketbuyofferbutton").onclick = new Function("");
            hideDiv("marketbuyofferbutton");
        }
    }
} }
function closeMarketBuyOffer() { hideDiv("market_transp"); hideDiv("marketbuyoffer"); }
var mastermind_log = [];
var mastermind_buy = [];
var mastermind_found = [];
var mastermind_remain = 0;
var mastermind_set = [-1, -1, -1, -1, -1, -1, -1];
var mastermind_pos = -1;
function mastermindAction(d) { var a = "ajax/mastermind.php?"; var c = "rid=" + rid + "&mode=" + d; if (d == "check") {
    for (var b = 0; b < mastermind_set.length; b++) {
        if (mastermind_set[b] == -1) {
            globalerrorbox(t_mastermind_chk_all);
            return false;
        }
    }
    var h = "";
    for (var b = 0; b < mastermind_set.length; b++) {
        h += mastermind_set[b] + ",";
    }
    c += "&set=" + h;
    mastermind_set = [-1, -1, -1, -1, -1, -1, -1];
} if (d == "buy") {
    c += "&pos=" + mastermind_pos;
} var e = createAjaxRequestObj(); e.open("GET", a + c, true); e.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); e.onreadystatechange = function () { mastermindActionResponse(e, d); }; e.send(null); }
function mastermindActionResponse(a, h) { var q = _chkRequest(a, h); if (q != 0) {
    if (!q[0]) {
        globalerrorbox(q[1]);
    }
    else {
        hideDiv("globaltransp");
        hideDiv("globalbox");
        if (h == "buy") {
            mastermindChangeItem(q[1].id);
            $("mastermind_line_item" + mastermind_pos).innerHTML = '<div class="mastermind_log_item_right"></div>';
        }
        else {
            mastermind_set = [-1, -1, -1, -1, -1, -1, -1];
            mastermind_log = q[1].log;
            mastermind_remain = q[1].remain;
            if (q[1].found) {
                mastermind_found = q[1].found;
            }
            $("mastermind_balls_count").innerHTML = q[1].balls;
            mastermindStart();
            if (q[1].reward) {
                var m = t_mastermind_reward_head;
                var l = t_mastermind_reward_intro;
                if (q[1].reward.points) {
                    m = t_mastermind_reward_win_head;
                    l = t_mastermind_reward_win_intro;
                    l += '<div style="margin-top:10px;">' + formatNumber(q[1].reward.points) + "&nbsp;" + t_points + "</div>";
                }
                if (q[1].reward.balls_detail) {
                    var c = [1, 2, 0];
                    for (var b = 0; b < c.length; b++) {
                        var d = c[b];
                        if (q[1].reward.balls_detail[d]) {
                            var n = "mastermind_log_item_wrong";
                            if (d == 1) {
                                n = "mastermind_log_item_right";
                            }
                            if (d == 2) {
                                n = "mastermind_log_item_ok";
                            }
                            l += '<div style="position:relative; margin:0 auto; width:100px;">';
                            l += ' <div style="float:left; position:relative; margin-right:5px;" class="' + n + '"></div>';
                            l += ' <div style="float:left; margin-top:20px;"><img src="' + imgpath + 'em/emball.png" height="10">&nbsp;' + q[1].reward.balls_detail[d] + "</div>";
                            l += ' <div class="clear"></div>';
                            l += "</div>";
                        }
                    }
                }
                globalBox(m, l, 0, 0, 1);
            }
            hideDiv("mastermind_popup");
            if (q[1].remain > 0) {
                hideDiv("mastermind_popup_solution");
                if (q[1].set) {
                    var e = '<div style="margin-bottom:5px; text-align:center;">' + t_mastermind_solution + "</div>";
                    for (var d = 0; d < q[1].set.length; d++) {
                        e += '<div class="mastermind_log_item mastermind_select_item' + q[1].set[d] + '"></div>';
                    }
                    e += '<div class="clear"></div>';
                    $("mastermind_popup_solution").innerHTML = e;
                    showDiv("mastermind_popup_solution");
                }
                showDiv("mastermind_popup");
            }
        }
        if (mastermind_remain > 0) {
            hideDiv("mastermind_line");
            $("mastermind_cooldown_timer").innerHTML = formatTime(mastermind_remain);
            showDiv("mastermind_cooldown");
            setTimer("mastermind");
        }
        else {
            showDiv("mastermind_line");
            hideDiv("mastermind_cooldown");
            clearTimer("mastermind");
        }
        if (q[1].first) {
            mastermindOpenHelp();
        }
    }
} }
function mastermindOpenSelect() { if (mastermind_found[mastermind_pos] && mastermind_found[mastermind_pos] > 0) {
    return false;
} showDiv("mastermind_select"); for (var a = 0; a < 20; a++) {
    if ($("mastermind_line_item" + a + "_active")) {
        hideDiv("mastermind_line_item" + a + "_active");
    }
} showDiv("mastermind_line_item" + mastermind_pos + "_active"); }
function mastermindCloseSelect() { hideDiv("mastermind_select"); for (var a = 0; a < 20; a++) {
    if ($("mastermind_line_item" + a + "_active")) {
        hideDiv("mastermind_line_item" + a + "_active");
    }
} }
function mastermindTimer() { mastermind_remain--; if (mastermind_remain < 0) {
    mastermindClose();
}
else {
    hideDiv("mastermind_line");
    showDiv("mastermind_cooldown");
    $("mastermind_cooldown_timer").innerHTML = formatTime(mastermind_remain);
} }
function mastermindStart() { html = ""; if (mastermind_log && mastermind_log.length) {
    for (var c = 0; c < mastermind_log.length; c++) {
        html += '<div class="mastermind_log_line">';
        for (var b = 0; b < mastermind_log[c].length; b++) {
            html += '<div class="mastermind_log_item mastermind_select_item' + mastermind_log[c][b].id + '">';
            var a = "mastermind_log_item_wrong";
            if (mastermind_log[c][b].check == 1) {
                a = "mastermind_log_item_right";
            }
            if (mastermind_log[c][b].check == 2) {
                a = "mastermind_log_item_ok";
            }
            html += '  <div class="' + a + '"></div>';
            html += "</div>";
        }
        html += '<div class="clear"></div>';
        html += "</div>";
    }
} $("mastermind_log").innerHTML = html; for (var c = 0; c < 20; c++) {
    if ($("mastermind_line_item" + c)) {
        if (mastermind_found && mastermind_found[c] > -1) {
            mastermind_pos = c;
            mastermindChangeItem(mastermind_found[c]);
            $("mastermind_line_item" + c).innerHTML = '<div class="mastermind_log_item_right"></div>';
            $("mastermind_line_item" + c).className = "mastermind_line_item link mastermind_select_item" + mastermind_found[c];
        }
        else {
            $("mastermind_line_item" + c).innerHTML = '<div id="mastermind_line_item' + c + '_active" class="mastermind_line_item_active"></div>';
            $("mastermind_line_item" + c).className = "mastermind_line_item mastermind_select_item-1 link";
        }
    }
} mastermind_pos = -1; showDiv("mastermind"); showDiv("mastermind_transp"); }
function mastermindDialog(d) { if (d == "buy") {
    var c = t_mastermind_buy_position_head;
    var a = str_replace("%COINS%", mastermind_coins, t_mastermind_buy_position_body);
    var b = "mastermindAction('buy')";
} globalcommitbox(c, a, b); }
function mastermindClose() { hideDiv("mastermind"); hideDiv("mastermind_transp"); }
function mastermindChangeItem(a) { $("mastermind_line_item" + mastermind_pos).className = "mastermind_line_item link mastermind_select_item" + a; mastermind_set[mastermind_pos] = a; mastermindCloseSelect(); }
function mastermindOpenHelp() { showDiv("mastermind_help_transp"); showDiv("mastermind_help"); }
function mastermindCloseHelp() { hideDiv("mastermind_help_transp"); hideDiv("mastermind_help"); }
function mastermindOpenShop() { mastermindClose(); if (!city) {
    initCity(1);
} cityAction("wm_init"); }
var megafield_data = {};
var megafield_plant_pid = 0;
var megafield_plant_cache = {};
var megafield_cache_time = 0;
var megafield_vehicle_id = 0;
var megafield_vehicle_tour = [];
var next_possible_tour_tiles = [];
var megafield_tour_type = "harvest";
var megafield_job_remember = 0;
var megafield_tutorial_remember = 0;
var megafield_move_position = 1;
var megafield_stats = {};
var megafield_stats_cache = {};
var drive_pos = 1;
var drive_dir = "r";
var megafield_insert_block = 0;
var megafield_tutorial_step = 1;
var megafield_reward_list_shown = 0;
var buy_license_block = 0;
var unlock_bunny = 0;
var megafield_stats_delay = 0;
function showTutorialMegafield() { if (megafield_tutorial_step < 8) {
    var c = ["megafield_vehicle_select_slot", "megafield_vehicle1", "megafield_tile1", "megafield_tile2", "megafield_tile3", "megafield_tile4", "megafield_tile12", "megafield_tile13", "megafield_tile14", "megafield_tile15", "megafield_tile_tt1", "megafield_tile_tt2", "megafield_tile_tt3", "megafield_tile_tt4", "megafield_tile_tt12", "megafield_tile_tt13", "megafield_tile_tt14", "megafield_tile_tt15", "megafield_vehicle_go1", "megafield_product0"];
    for (var b = 0; b < c.length; b++) {
        if ($(c[b])) {
            $(c[b]).style.zIndex = null;
        }
    }
    $("megafield_tutorial_arrow").className = "";
    $("megafield_vehicle_select_slot").onclick = new Function("moveMegafield(1)");
    $("megafield_vehicle_go1").onclick = new Function("fireTourMegafield()");
    if ($("megafield_product0")) {
        $("megafield_product0").onclick = new Function("setPlantProductMegafield(1)");
    }
    $("megafield_tutorial").style.width = "100%";
    $("megafield_tutorial").style.height = "100%";
    var d = t_megafield_tutorial_text[megafield_tutorial_step];
    if (megafield_tutorial_step == 1) {
        $("megafield_vehicle_select_slot").style.zIndex = 1000;
        $("megafield_vehicle_select_slot").onclick = new Function("addTutorialStepMegafield(); moveMegafield(1)");
    }
    else {
        if (megafield_tutorial_step == 2) {
            $("megafield_vehicle1").style.zIndex = 1000;
        }
        else {
            if (megafield_tutorial_step == 3) {
                d += "<br>" + str_replace("%COUNT%", megafield_data.vehicle_slots[megafield_vehicle_id].range, t_megafield_tutorial3_2);
                var e = [1, 2, 3, 4, 12, 13, 14, 15];
                var a = 1008;
                for (var b = 0; b < e.length; b++) {
                    if ($("megafield_tile" + e[b])) {
                        $("megafield_tile" + e[b]).style.zIndex = a;
                    }
                    if ($("megafield_tile_tt" + e[b])) {
                        $("megafield_tile_tt" + e[b]).style.zIndex = a;
                    }
                    a--;
                }
                $("megafield_vehicle_go1").style.zIndex = 1000;
            }
            else {
                if (megafield_tutorial_step == 4) {
                    $("megafield_tutorial").style.width = 0;
                    $("megafield_tutorial").style.height = 0;
                }
                else {
                    if (megafield_tutorial_step == 5) {
                        $("megafield_product0").style.zIndex = 1000;
                        $("megafield_product0").onclick = new Function("addTutorialStepMegafield(), setPlantProductMegafield(1)");
                    }
                    else {
                        if (megafield_tutorial_step == 6) {
                            megafield_move_position = 2;
                            moveMegafield();
                            $("megafield_tutorial").style.width = 0;
                            $("megafield_tutorial").style.height = 0;
                        }
                        else {
                            if (megafield_tutorial_step == 7) {
                                $("megafield_tutorial").style.width = 0;
                                $("megafield_tutorial").style.height = 0;
                                d += '<button type="button" class="button_new link" onclick="addTutorialStepMegafield()">' + t_megafield_tutorial_end + "</button>";
                                setTimeout(addTutorialStepMegafield, 10000);
                            }
                        }
                    }
                }
            }
        }
    }
    $("megafield_tutorial_arrow").className = "megafield_tutorial_arrow" + megafield_tutorial_step;
    $("megafield_tutorial_instructor_bubble").innerHTML = d;
    showDiv("megafield_tutorial");
}
else {
    hideDiv("megafield_tutorial");
} }
function addTutorialStepMegafield() { megafield_tutorial_step++; if (megafield_tutorial_step == 8) {
    farmAction("megafield_closetutorial", 1, 1);
}
else {
    showTutorialMegafield();
} }
function openHelpMegafield() { showDiv("megafield_transp"); showDiv("megafield_help"); helpNaviMegafield(); }
function closeHelpMegafield() { hideDiv("megafield_transp"); hideDiv("megafield_help"); }
function helpNaviMegafield(a) { if (!a) {
    a = 1;
} hideDiv("megafield_help1"); hideDiv("megafield_help2"); hideDiv("megafield_help3"); showDiv("megafield_help" + a); $("megafield_help_navi1").removeClassName("megafield_help_navi_active"); $("megafield_help_navi2").removeClassName("megafield_help_navi_active"); $("megafield_help_navi3").removeClassName("megafield_help_navi_active"); $("megafield_help_navi" + a).addClassName("megafield_help_navi_active"); }
function drive(a) { $("vehicle").className = ""; $("vehicle").addClassName("vehicle_" + megafield_data.tour.vid); $("vehicle").addClassName("vehicle_drive" + drive_pos); $("vehicle").addClassName("vehicle_dir_" + drive_dir); }
function moveMegafield(a) { if (a == 1 && megafield_move_position == 2) {
    return false;
} if (megafield_move_position == 1) {
    $("megafield_carpool").removeClassName("megafield_carpool_right");
    $("megafield_carpool").addClassName("megafield_carpool_left");
    $("megafield_back").removeClassName("megafield_move_l");
    $("megafield_back").addClassName("megafield_move_r");
    megafield_move_position = 2;
}
else {
    $("megafield_carpool").removeClassName("megafield_carpool_left");
    $("megafield_carpool").addClassName("megafield_carpool_right");
    $("megafield_back").removeClassName("megafield_move_r");
    $("megafield_back").addClassName("megafield_move_l");
    megafield_move_position = 1;
} }
function jobEndMegafield() { farmAction("megafield_update", 1, 1); }
function buildMegafield() { if (megafield_data.block) {
    return false;
} var l = ""; for (var e = 1; e <= 99; e++) {
    var s = "";
    var q = "";
    if (!megafield_data.area_free[e]) {
        s = "megafield_tile_block";
    }
    if (megafield_data.next_tiles && in_array(e, megafield_data.next_tiles.tiles)) {
        s = "megafield_tile_next_unlock";
        q = str_replace("%COST%", formatNumber(megafield_data.next_tiles.cost), t_megafield_next_tile_tt);
    }
    l += '<div id="megafield_tile' + e + '" class="link megafield_tile ' + s + '">';
    l += '  <div id="megafield_tile_cursor' + e + '" class="link"></div>';
    l += '  <div id="megafield_tile_flyer' + e + '" class="megafield_tile_flyer"></div>';
    l += '  <div id="megafield_tile_img' + e + '"></div>';
    l += '  <div id="megafield_tile_tour_arrow' + e + '"></div>';
    l += '  <div id="megafield_tile_tour' + e + '"></div>';
    l += '  <div id="megafield_tile_tt' + e + '" class="megafield_tile_tt ttbox">' + q + "</div>";
    l += "</div>";
    if (e > 1 && e % 11 == 0) {
        l += '<div class="clear"></div>';
    }
} l += '<div id="vehicle"></div>'; l += '<div id="megafield_harvest_all_blocker"></div>'; $("megafield_area").innerHTML = l; var a = 0; if (megafield_data.tour && megafield_data.tour.remain > 0) {
    var m = 1;
    if (megafield_data.vehicle_slots[megafield_data.tour.vid].size == 4) {
        m = 2;
    }
    var t = parseInt(megafield_data.tour.duration / megafield_data.tour.count);
    var r = parseInt(megafield_data.tour.duration - megafield_data.tour.remain);
    var b = Math.ceil(r / t);
    for (var d = 0; d < megafield_data.tour.steps.length; d++) {
        if (d == b) {
            for (var n in megafield_data.tour.steps[d]) {
                n = parseInt(n);
                drive_pos = n;
                var c = drive_dir;
                if (b < megafield_data.tour.steps.length) {
                    for (var h in megafield_data.tour.steps[(d + 1)]) {
                        if (n + (m * 1) == h) {
                            c = "r";
                        }
                        else {
                            if (n - (m * 1) == h) {
                                c = "l";
                            }
                            else {
                                if (n - (m * 11) == h) {
                                    c = "t";
                                }
                                else {
                                    if (n + (m * 11) == h) {
                                        c = "d";
                                    }
                                }
                            }
                        }
                        drive_dir = c;
                        break;
                    }
                }
                $("vehicle").className = "vehicle_" + megafield_data.tour.vid + " vehicle_drive" + n + " vehicle_dir_" + c;
                showDiv("vehicle");
                a = 1;
                break;
            }
        }
        if (a) {
            break;
        }
    }
    if (!megafield_plant_pid && !megafield_vehicle_id) {
        megafield_vehicle_id = megafield_data.tour.vid;
    }
}
else {
    hideDiv("vehicle");
} $("megafield_level_number").innerHTML = megafield_data.level; $("megafield_level_bar_inner").style.width = megafield_data.level_percent + "%"; $("megafield_level_bar_inner_tt").innerHTML = '<div style="font-weight:bold; margin-bottom:5px;">' + t_megafield_level + "</div><div>" + str_replace("%COUNT%", megafield_data.level_rest, t_megafield_require4levelup) + "</div>"; showDiv("megafield_level_plus"); if (!megafield_data.level_rest) {
    hideDiv("megafield_level_plus");
    $("megafield_level_bar").onmouseover = new Function("");
    $("megafield_level_bar").onmouseout = new Function("");
} $("megafield_count_number").innerHTML = formatNumber(megafield_data.count); if (megafield_data.job_start == 0) {
    if (!megafield_job_remember) {
        dialogMegafield("show_job");
    }
    megafield_job_remember = 1;
} setProductsMegafield(); setVehiclesMegafield(); timerContentMegafield(); if (megafield_data.reward) {
    dialogMegafield("reward");
} if (!inguild) {
    showDiv("megafield");
} showMegafieldHarvestAll(); if (megafield_tutorial_step <= 99) {
    showTutorialMegafield();
} moveBunny(); speedLinks(); }
function closeMegafield() { hideDiv("megafield"); }
function tileTTMegafield(b, a) { if (a) {
    if (megafield_data.area[b] || (megafield_data.next_tiles && in_array(b, megafield_data.next_tiles.tiles))) {
        showDiv("megafield_tile_tt" + b);
    }
    if (!megafield_data.area[b] && megafield_data.area_free[b] && megafield_plant_pid > 0) {
        $("megafield_tile_cursor" + b).addClassName("megafield_cursor_plant");
    }
    if (megafield_vehicle_id > 0) {
        $("megafield_tile_cursor" + b).addClassName("megafield_tile_vehicle_size" + megafield_data.vehicle_slots[megafield_vehicle_id].size);
    }
}
else {
    if (megafield_data.area[b] || (megafield_data.next_tiles && in_array(b, megafield_data.next_tiles.tiles))) {
        hideDiv("megafield_tile_tt" + b);
    }
    if (!megafield_data.area[b] && megafield_data.area_free[b]) {
        $("megafield_tile_cursor" + b).removeClassName("megafield_cursor_plant");
    }
    if (megafield_vehicle_id > 0) {
        $("megafield_tile_cursor" + b).removeClassName("megafield_tile_vehicle_size" + megafield_data.vehicle_slots[megafield_vehicle_id].size);
    }
} }
function timerMegafield() { if (megafield_data) {
    if (megafield_data.area) {
        for (var a = 1; a <= 99; a++) {
            if (megafield_data.area[a]) {
                megafield_data.area[a].remain--;
            }
        }
    }
    if (megafield_data.harvest_all_remain) {
        megafield_data.harvest_all_remain--;
    }
    if (megafield_data.tour) {
        megafield_data.tour.remain--;
    }
    if (megafield_data.job && megafield_data.job.remain) {
        megafield_data.job.remain--;
    }
    if ($("megafield_tile1")) {
        timerContentMegafield();
    }
} }
function timerContentMegafield() { if (megafield_data.tour && megafield_data.tour.remain < 0) {
    megafield_data.tour = 0;
} next_possible_tour_tiles = []; var c = 0; for (var I = 1; I <= 99; I++) {
    $("megafield_tile" + I).onclick = new Function("plantProductMegafield(" + I + ")");
    $("megafield_tile" + I).onmouseover = new Function("tileTTMegafield(" + I + ", 1)");
    $("megafield_tile" + I).onmouseout = new Function("tileTTMegafield(" + I + ")");
    $("megafield_tile_img" + I).className = "";
    $("megafield_tile_flyer" + I).innerHTML = "";
    $("megafield_tile_tour" + I).className = "";
    $("megafield_tile_tour_arrow" + I).className = "";
    $("megafield_tile_tour" + I).innerHTML = "";
    if (megafield_plant_cache[I]) {
        $("megafield_tile_img" + I).className = "megafield_tile_loading";
    }
    if (megafield_data.area[I]) {
        var L = megafield_data.area[I];
        var s = "<div>" + produkt_name[L.pid] + "</div>";
        if (L.remain > 0) {
            s += formatTime(L.remain);
        }
        else {
            s += statusProductionComplete;
        }
        if (!megafield_vehicle_id) {
            s += '<div class="bonusinfo">' + t_megafield_harvest_need_vehicle + "</div>";
        }
        $("megafield_tile_tt" + I).innerHTML = s;
        var B = L.remain;
        if (B < 0) {
            B = 0;
        }
        var b = (100 - ((B * 100) / L.duration));
        var w = "";
        if (b > 75) {
            w = "_3";
        }
        else {
            if (b > 35) {
                w = "_2";
            }
        }
        $("megafield_tile_img" + I).className = "megafield_area_product" + L.pid + w;
        $("megafield_tile" + I).onclick = new Function("");
    }
    if (megafield_data.next_tiles && in_array(I, megafield_data.next_tiles.tiles)) {
        $("megafield_tile" + I).onclick = new Function("dialogMegafield('buy_tile', " + I + ")");
    }
    if (!megafield_plant_pid && megafield_vehicle_id > 0) {
        var J = 1;
        if (megafield_data.vehicle_slots[megafield_vehicle_id].size == 4) {
            J = 2;
        }
        var F = checkTourTileMegafield(I);
        if (!megafield_vehicle_tour.length && F == 1 && !megafield_data.tour) {
            $("megafield_tile_tour" + I).className = "megafield_area_tour_possible";
            $("megafield_tile" + I).onclick = new Function("setTourTileMegafield(" + I + ")");
            next_possible_tour_tiles.push(I);
        }
        else {
            for (var G = 0; G < megafield_vehicle_tour.length; G++) {
                if (in_array(I, megafield_vehicle_tour[G])) {
                    $("megafield_tile_tour" + I).className = "megafield_area_tour";
                    if (megafield_vehicle_tour[(G - 1)]) {
                        for (var E = 0; E < megafield_vehicle_tour[(G - 1)].length; E++) {
                            var h = megafield_vehicle_tour[(G - 1)][E];
                            if ((parseInt(I) + (J * 1)) == h) {
                                var A = "l";
                            }
                            if ((parseInt(I) - (J * 1)) == h) {
                                var A = "r";
                            }
                            else {
                                if ((parseInt(I) + (J * 11)) == h) {
                                    var A = "t";
                                }
                                else {
                                    if ((parseInt(I) - (J * 11)) == h) {
                                        var A = "d";
                                    }
                                }
                            }
                            $("megafield_tile_tour_arrow" + I).className = "megafield_tile_tour_arrow_prev_" + A;
                        }
                    }
                    $("megafield_tile_tour" + I).innerHTML = (G + 1);
                    $("megafield_tile" + I).onclick = new Function("unsetTourTileMegafield(" + I + ")");
                    break;
                }
            }
        }
    }
    if (megafield_plant_cache[I]) {
        c++;
    }
} if (!megafield_plant_pid && megafield_vehicle_id > 0 && megafield_vehicle_tour.length > 0 && !megafield_data.tour) {
    var D = parseInt(megafield_data.vehicle_slots[megafield_vehicle_id].size);
    if (megafield_data.vehicles[megafield_vehicle_id].durability - D >= 0 && megafield_data.vehicles[megafield_vehicle_id].range > 0) {
        var n = (megafield_vehicle_tour.length - 1);
        var z = getNextTourTilesMegafield(n);
        for (var I = 0; I < z.length; I++) {
            $("megafield_tile_tour" + z[I]).className = "megafield_area_tour_possible";
            $("megafield_tile" + z[I]).onclick = new Function("setTourTileMegafield(" + z[I] + ")");
            next_possible_tour_tiles.push(z[I]);
        }
    }
} if (megafield_data.tour) {
    var d = {};
    if (megafield_data.tour.remain > 0) {
        var u = parseInt(megafield_data.tour.duration / megafield_data.tour.count);
        var a = parseInt(megafield_data.tour.duration - megafield_data.tour.remain);
        var l = Math.ceil(a / u);
        $("megafield_vehicle_select_slot_time_time").innerHTML = formatTime(megafield_data.tour.remain);
        showDiv("megafield_vehicle_select_slot_time");
        var J = 1;
        if (megafield_data.vehicle_slots[megafield_data.tour.vid].size == 4) {
            J = 2;
        }
        for (var H = 0; H < megafield_data.tour.steps.length; H++) {
            if ((H + 1) >= l) {
                var r = 0;
                for (var K in megafield_data.tour.steps[H]) {
                    $("megafield_tile_tour" + K).className = "megafield_area_tour_next";
                    if (megafield_data.tour.steps[H][K].pid) {
                        $("megafield_tile_img" + K).className = "megafield_area_product" + megafield_data.tour.steps[H][K].pid;
                        if (!d[megafield_data.tour.steps[H][K].pid]) {
                            d[megafield_data.tour.steps[H][K].pid] = 1;
                        }
                        else {
                            d[megafield_data.tour.steps[H][K].pid]++;
                        }
                    }
                    if ((H + 1) == l) {
                        $("megafield_tile_tour" + K).className = "megafield_area_tour_current";
                        if ((a + 1) % u == 0) {
                            if (megafield_data.tour.steps[H][K].pid && !megafield_data.area[K]) {
                                $("megafield_tile_flyer" + K).innerHTML = '<div class="kp' + megafield_data.tour.steps[H][K].pid + '"></div>';
                                $("megafield_tile_flyer" + K).addClassName("megafield_tile_flyer_out");
                                if (megafield_tutorial_step == 4) {
                                    addTutorialStepMegafield();
                                }
                            }
                            if (!r) {
                                if (l < megafield_data.tour.steps.length) {
                                    for (var q in megafield_data.tour.steps[(H + 1)]) {
                                        drive_pos = parseInt(q);
                                        if ((parseInt(K) - (J * 1)) == q) {
                                            var A = "l";
                                        }
                                        if ((parseInt(K) + (J * 1)) == q) {
                                            var A = "r";
                                        }
                                        else {
                                            if ((parseInt(K) - (J * 11)) == q) {
                                                var A = "t";
                                            }
                                            else {
                                                if ((parseInt(K) + (J * 11)) == q) {
                                                    var A = "d";
                                                }
                                            }
                                        }
                                        drive_dir = A;
                                        drive();
                                        r++;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (megafield_data.tour.steps[(H + 1)]) {
                        for (var q in megafield_data.tour.steps[(H + 1)]) {
                            if ((parseInt(K) - (J * 1)) == q) {
                                var A = "l";
                            }
                            if ((parseInt(K) + (J * 1)) == q) {
                                var A = "r";
                            }
                            else {
                                if ((parseInt(K) - (J * 11)) == q) {
                                    var A = "t";
                                }
                                else {
                                    if ((parseInt(K) + (J * 11)) == q) {
                                        var A = "d";
                                    }
                                }
                            }
                            $("megafield_tile_tour_arrow" + K).addClassName("megafield_tile_tour_arrow_" + A);
                            break;
                        }
                    }
                }
            }
            else {
                megafield_data.tour.steps[H] = {};
            }
        }
    }
    else {
        hideDiv("megafield_vehicle_select_slot_time");
        megafield_data.tour = 0;
        buildMegafield();
    }
    if (megafield_data.job_start && megafield_data.job.products && megafield_data.job.products.length) {
        var y = 1;
        for (var I = 0; I < megafield_data.job.products.length; I++) {
            var L = megafield_data.job.products[I];
            if (megafield_data.tour.remain > 0) {
                if (d[L.pid] && megafield_data.vehicle_slots[megafield_data.tour.vid].type == "harvest") {
                    $("megafield_product_have" + L.pid).innerHTML = (L.have - d[L.pid]);
                }
            }
            else {
                $("megafield_product_have" + L.pid).innerHTML = L.have;
            }
            var M = parseInt($("megafield_product_have" + L.pid).innerHTML);
            if (L.need <= M) {
                showDiv("megafield_product_ready" + I);
            }
            else {
                hideDiv("megafield_product_ready" + I);
            }
            if (M != L.need) {
                y = 0;
            }
        }
        if (y == 1) {
            jobEndMegafield();
        }
    }
}
else {
    if (megafield_tutorial_step == 4) {
        addTutorialStepMegafield();
    }
} for (var I in megafield_data.vehicle_slots) {
    var t = megafield_data.vehicle_slots[I];
    var e = "";
    if (t.block) {
        var C = "";
    }
    else {
        if (t.unlockable) {
            var C = "dialogMegafield('vehicle_unlock', 0, " + I + ");";
        }
        else {
            if (!megafield_data.vehicles || !megafield_data.vehicles[I]) {
                var C = "dialogMegafield('vehicle_buy', 0, " + I + ");";
                e = "<div>" + t_megafield_tt_buy_vehicle + "</div>";
            }
            else {
                if (megafield_data.vehicles && megafield_data.vehicles[I]) {
                    if (megafield_data.tour && megafield_data.tour.remain > 0) {
                        if (megafield_data.tour.vid == I) {
                            e = t_megafield_tt_tour_resttime + formatTime(megafield_data.tour.remain);
                        }
                        else {
                            e = t_megafield_tt_tour_block;
                        }
                        var C = "";
                    }
                    else {
                        e = t_megafield_tt_start_tour;
                        var C = "setTourVehicleMegafield(" + I + ");";
                    }
                }
            }
        }
    }
    if (megafield_tutorial_step == 2 && I == 1) {
        C += " addTutorialStepMegafield();";
    }
    $("megafield_vehicle" + I).onclick = new Function(C);
    if (e != "") {
        $("megafield_vehicle_tt_bonus" + I).innerHTML = e;
    }
} if (megafield_tutorial_step != 1) {
    $("megafield_vehicle_select_slot").onclick = new Function("moveMegafield(1)");
} if (megafield_vehicle_id > 0) {
    if (megafield_plant_pid > 0) {
        showDiv("megafield_vehicle_select_slot_x");
        $("megafield_vehicle_select_slot").onclick = new Function("megafield_plant_pid=0; setProductsMegafield(); timerContentMegafield();");
    }
    else {
        hideDiv("megafield_vehicle_select_slot_x");
    }
}
else {
    hideDiv("megafield_vehicle_select_slot_x");
} if (megafield_data.job) {
    if (megafield_data.job.remain && megafield_data.job.remain > 0) {
        showDiv("megafield_reward_icon");
        $("megafield_job_timer_inner").innerHTML = formatTime(megafield_data.job.remain);
        if ($("megafield_job_reward_info_timer")) {
            $("megafield_job_reward_info_timer").innerHTML = formatTime(megafield_data.job.remain);
        }
    }
    else {
        hideDiv("megafield_reward_icon");
        $("megafield_job_timer_inner").innerHTML = t_megafield_data_job_timeout;
        if (megafield_data.job.remain == 0) {
            jobEndMegafield();
        }
    }
} if (megafield_tutorial_step == 3) {
    if (megafield_vehicle_tour.length > 0) {
        $("megafield_tutorial_arrow").className = "megafield_tutorial_arrow3_2";
    }
    else {
        $("megafield_tutorial_arrow").className = "megafield_tutorial_arrow3";
    }
} if (megafield_data.harvest_all_remain > 0) {
    showDiv("megafield_harvest_all_blocker");
    $("megafield_harvest_all_blocker").innerHTML = formatTime(megafield_data.harvest_all_remain);
}
else {
    hideDiv("megafield_harvest_all_blocker");
} if (c > 0) {
    if (megafield_cache_time >= 1) {
        fireCacheMegafield();
        megafield_cache_time = 0;
    }
    megafield_cache_time++;
} }
function chkInsertAmountMegafield(a, b) { var c = { stockamount: checkRackItem(a), rest: b, click: "farmAction('megafield_insert', 1, 1, " + a + ")" }; checkEntryLine(c); }
function dialogMegafield(A, I, G, y, v) { var b = 0; var m = 0; if (A == "fertilize_all") {
    var c = t_megafield_fertilize_all_head;
    var l = "<div>" + str_replace("%COINS%", megafield_data.harvest_fertilize_coins, t_megafield_fertilize_all_body) + "</div>";
    l += '<div style="margin-top:10px;">' + str_replace("%TIME%", formatTime(megafield_data.constants.fertilize_all_duration), t_megafield_fertilize_all_info) + "</div>";
    var w = "farmAction('megafield_fertilize_all', 1, 1)";
} if (A == "harvest_all") {
    var c = crop_all_tttext;
    var l = "<div>" + str_replace("%COINS%", megafield_data.harvest_all_coins, t_megafield_harvest_all_body) + "</div>";
    l += '<div style="margin-top:10px;">' + str_replace("%TIME%", formatTime(megafield_data.constants.harvest_all_duration), t_megafield_harvest_all_info) + "</div>";
    var w = "farmAction('megafield_harvest_all', 1, 1)";
} if (A == "insert") {
    var s = 0;
    for (var D = 0; D < megafield_data.job.products.length; D++) {
        if (megafield_data.job.products[D].pid == v) {
            s = (megafield_data.job.products[D]["need"] - megafield_data.job.products[D]["have"]);
        }
    }
    var H = { pid: v };
    globalcommitbox(t_inner_feedsubmit, htmlEntryLine(H), 0, 0, 1);
    $("dialog_entryline_number").focus();
    $("dialog_entryline_number").onchange = new Function("chkInsertAmountMegafield(" + v + ", " + s + ")");
    $("dialog_entryline_number").onkeyup = new Function("chkInsertAmountMegafield(" + v + ", " + s + ")");
    chkInsertAmountMegafield(v, s);
    return false;
} if (A == "reward" || A == "reward_list") {
    if (A == "reward" && megafield_reward_list_shown > 0) {
        return false;
    }
    var c = t_megafield_new_jobs_reward_head;
    var l = "";
    if (A == "reward") {
        var J = megafield_data.reward;
    }
    else {
        var J = megafield_data.reward_info;
    }
    var C = (J.points - (J.difficultybonus_points + J.timebonus_points));
    var K = (J.money - (J.difficultybonus_money + J.timebonus_money));
    var n = (J.license - (J.difficultybonus_license + J.timebonus_license));
    var d = (J.points - C);
    var E = (J.money - K);
    var h = (J.license - n);
    if (d > 0 || E > 0 || h > 0) {
        l += '<div style="font-weight:bold;">' + t_megafield_reward_basic + "</div>";
        l += '<div style="padding:5px;">';
        l += '  <div class="megafield_points_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatNumber(C) + "&nbsp;" + t_points + "</div>";
        l += '  <div class="megafield_money_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatPrice(K) + "</div>";
        l += '  <div class="megafield_license_icon" style="float:left;"></div><div style="float:left; margin-top:15px; width:120px;">' + formatNumber(n) + "&nbsp;" + t_megafield_currency + "</div>";
        l += '  <div class="clear"></div>';
        l += "</div>";
        l += '<div style="margin-top:10px; font-weight:bold;">' + t_megafield_reward_bonus + "</div>";
        l += '<div style="padding:5px;">';
        l += '  <div class="megafield_points_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatNumber(d) + "&nbsp;" + t_points + "</div>";
        l += '  <div class="megafield_money_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatPrice(E) + "</div>";
        l += '  <div class="megafield_license_icon" style="float:left;"></div><div style="float:left; margin-top:15px; width:120px;">' + formatNumber(h) + "&nbsp;" + t_megafield_currency + "</div>";
        l += '  <div class="clear"></div>';
        l += "</div>";
    }
    l += '<div style="margin-top:10px; font-weight:bold;">' + t_megafield_reward_sum + "</div>";
    l += '<div style="background-color:#C3A75E; border-radius:5px; padding:5px;">';
    l += '  <div class="megafield_points_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatNumber(J.points) + "&nbsp;" + t_points + "</div>";
    l += '  <div class="megafield_money_icon" style="float:left;"></div><div style="float:left; margin-top:15px; margin-right:20px; width:120px;">' + formatPrice(J.money) + "</div>";
    l += '  <div class="megafield_license_icon" style="float:left;"></div><div style="float:left; margin-top:15px; width:120px;">' + formatNumber(J.license) + "&nbsp;" + t_megafield_currency + "</div>";
    l += '  <div class="clear"></div>';
    l += "</div>";
    if (A == "reward") {
        megafield_reward_list_shown = 1;
        var w = "dialogMegafield('show_job')";
        var m = "dialogMegafield('show_job')";
    }
} if (A == "vehicle_unlock") {
    var c = t_megafield_vehicle_unlock_head;
    var l = str_replace("%AMOUNT%", megafield_data.vehicle_slots[G].unlock, t_megafield_vehicle_unlock_body);
    var w = "farmAction('megafield_vehicle_unlock', 1, 1, " + G + ")";
} if (A == "vehicle_buy") {
    var c = t_megafield_vehicle_buy_head;
    if (megafield_data.vehicle_slots[G].coins) {
        var F = megafield_data.vehicle_slots[G].coins + "&nbsp;" + t_coins;
    }
    if (megafield_data.vehicle_slots[G].money) {
        var F = formatPrice(megafield_data.vehicle_slots[G].money);
    }
    if (megafield_data.vehicle_slots[G].license) {
        var F = megafield_data.vehicle_slots[G].license + "&nbsp;" + t_megafield_currency;
    }
    var l = '<div style="margin-bottom:5px;">' + str_replace("%COST%", F, t_megafield_vehicle_buy_body) + "</div>";
    if (megafield_data.vehicle_slots[G].products) {
        l += '<div style="margin-bottom:5px;">' + lotterylotsrequired + "</div>";
        for (var v in megafield_data.vehicle_slots[G].products) {
            l += '<div style="margin-bottom:5px; margin-left:30px;">';
            l += '  <div class="kp' + v + '" style="float:left; margin-right:5px;"></div>';
            l += '  <div style="float:left;">' + megafield_data.vehicle_slots[G].products[v] + "x&nbsp;" + produkt_name[v] + "</div>";
            l += '  <div class="clear"></div>';
            l += "</div>";
        }
    }
    var w = "farmAction('megafield_vehicle_buy', 1, 1, " + G + ")";
} if (A == "buy_license" || A == "buy_license_confirm") {
    if (!buy_license_block) {
        var c = t_megafield_buy_license_head;
        var t = str_replace("%COINS%", megafield_data.exchangecoins, t_megafield_buy_license_body);
        t = str_replace("%AMOUNT%", (megafield_data.constants.exchange_licences * megafield_data.level), t);
        var l = t;
        var w = "farmAction('megafield_buylicense', 1, 1);";
    }
} if (A == "level_plus") {
    var c = t_megafield_level_plus_head;
    var l = htmlLevelAddDialog("megafield");
    var w = 0;
    b = 1;
} if (A == "buy_tile") {
    var c = t_megafield_buytile_head;
    var l = str_replace("%AMOUNT%", formatNumber(megafield_data.next_tiles.cost), t_megafield_buytile_body);
    var w = "farmAction('megafield_buytile', 1, 1, " + I + ")";
} if (A == "show_job") {
    var c = "";
    var l = '<div style="position:relative; height:365px;">';
    l += '  <div class="headline" style="margin-top:-20px;">' + t_farmersmarket_job_select_products + "</div>";
    for (var D = 0; D < megafield_data.job.options[1].length; D++) {
        var J = megafield_data.job.options[1][D];
        l += '<div style="position:relative; float:left; margin-right:10px;" class="market_pframe">';
        l += '  <div style="position:absolute; top:6px; left:8px;" class="tt' + J.pid + '" onmouseover="showDiv(\'megafield_showjob_p' + J.pid + "');\" onmouseout=\"hideDiv('megafield_showjob_p" + J.pid + "');\">";
        l += '    <div id="megafield_showjob_p' + J.pid + '" class="ttbox" style="left:-5px; top:60px; width:95px;">';
        l += '      <div style="font-weight:bold;">' + produkt_name[J.pid] + "</div>";
        if (J.duration) {
            l += "<div>" + formatTime(J.duration) + "</div>";
            var r = str_replace("%AMOUNT%", J.amount, t_megafield_one_field_needs);
            r = str_replace("%PRODUCT%", produkt_name[J.pid], r);
            l += '      <div style="margin-top:5px;">' + r + "</div>";
        }
        l += '<div style="margin-top:5px;">';
        for (var B = 3; B >= 1; B--) {
            for (var z = 0; z < megafield_data.job.options[B].length; z++) {
                if (megafield_data.job.options[B][z].pid == J.pid) {
                    l += '<div style="margin-bottom:2px;">' + t_difficulty[B] + ": " + megafield_data.job.options[B][z].need + "x</div>";
                }
            }
        }
        l += "</div>";
        l += "    </div>";
        l += "  </div>";
        l += "</div>";
    }
    l += '  <div style="float:left; margin-left:20px; width:111px; text-align:center; height:19px; background:url(' + imgpath + 'megafield_jobtimer_box.png); padding:13px 0 0 0;">' + formatTime(megafield_data.constants.job_duration) + "</div>";
    l += '  <div style="float:right;" class="megafield_job_gamble link" onclick="dialogMegafield(\'gamblejob\')" onmouseover="showDiv(\'megafield_job_gamble_tt\');" onmouseout="hideDiv(\'megafield_job_gamble_tt\');">';
    l += '    <div id="megafield_job_gamble_tt" class="ttbox">' + str_replace("%COINS%", megafield_data.constants.gamble_jobs, t_megafield_data_get_new_jobs) + "</div>";
    l += "  </div>";
    l += '  <div class="clear"></div>';
    l += '  <div class="headline" style="margin-top:20px;">' + t_farmersmarket_job_select_difficulty + "</div>";
    for (var q = 3; q >= 1; q--) {
        l += '<div style="position:relative; float:left; margin-right:15px; width:150px;">';
        l += '  <div class="headline">' + t_difficulty[q] + "</div>";
        l += '  <div style="background-color:#C3A75E; border-radius:10px; padding:10px;">';
        l += '    <div class="megafield_money_icon" style="float:left; margin-right:5px;"></div><div style="float:left; margin-top:15px; width:75px;">' + formatPrice(megafield_data.job.reward[q].money) + '</div><div class="clear"></div>';
        l += '    <div class="megafield_points_icon" style="float:left; margin-right:5px;"></div><div style="float:left; margin-top:15px; width:75px;">' + formatNumber(megafield_data.job.reward[q].points) + "&nbsp;" + t_points + '</div><div class="clear"></div>';
        l += '    <div class="megafield_license_icon" style="float:left; margin-right:5px;"></div><div style="float:left; margin-top:15px; width:75px;">' + formatNumber(megafield_data.job.reward[q].license) + "&nbsp;" + t_megafield_currency + '</div><div class="clear"></div>';
        l += '    <div class="megafield_job_ok_button link" onclick="farmAction(\'megafield_selectjob\', 1, 1, ' + q + ')">' + t_megafield_job_select + "</div>";
        l += "  </div>";
        l += "</div>";
    }
    l += '  <div class="clear"></div>';
    l += "</div>";
    var w = "";
    b = 1;
} if (A == "gamblejob") {
    var c = t_megafield_new_jobs_head;
    var l = str_replace("%COINS%", megafield_data.constants.gamble_jobs, t_megafield_data_get_new_jobs);
    var w = "farmAction('megafield_gamblejob', 1, 1)";
    m = "dialogMegafield('show_job')";
} if (A == "tutorial") {
    var c = "TUTORIAL";
    var l = "WAS MACH ICH DENN HIER?";
    m = "dialogMegafield('show_job')";
    b = 1;
    megafield_tutorial_remember = 1;
} if (A == "stats") {
    var e = "";
    e += '<div id="megafield_stats_select_line">';
    e += '  <select id="megafield_stats_select" onchange="openStatsMegafield()">';
    var a = ["license", "job3", "job2", "job1", "tiles"];
    for (var D = 0; D < a.length; D++) {
        var u = "";
        if (y == a[D]) {
            u = "selected";
        }
        e += '<option value="' + a[D] + '" ' + u + ">" + t_megafield_stats[a[D]].opt + "</option>";
    }
    e += "  </select>";
    e += "</div>";
    e += '<div class="headline" style="margin-top:10px;">' + t_megafield_stats[y].head + "</div>";
    e += '<div id="megafield_stats_ranking">';
    e += htmlStatsContent(megafield_stats.ranking);
    $("megafield_stats_inner").innerHTML = e;
    showDiv("megafield_transp");
    showDiv("megafield_stats");
    return false;
} if (A == "autoplant") {
    var c = autoplant_headline;
    var l = '<div style="margin:0 auto; margin-bottom:5px;" class="tt' + v + '"></div>';
    l += "<div>" + autoplant_select + "</div>";
    var w = "farmAction('megafield_autoplant', 1, 1, " + v + ")";
} globalcommitbox(c, l, w, m, b); if (A == "show_job" || A == "reward_list" || A == "reward") {
    globalBoxFlex(c, l, w, m, b);
    if (A == "show_job") {
        $("globalbox").style.top = "45px";
    }
}
else {
    globalcommitbox(c, l, w, m, b);
} }
function megafieldCheckLevelAdd() { var a = $("megafield_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > megafield_data.count) {
    a = megafield_data.count;
} $("megafield_dialog_leveladd_insert").value = a; }
function openStatsMegafield() { if (!$("megafield_stats_select")) {
    var a = "license";
}
else {
    var a = $("megafield_stats_select").value;
} if (megafield_stats_cache[a]) {
    megafield_stats = megafield_stats_cache[a];
} if (megafield_stats_delay <= 0 || !megafield_stats_cache[a]) {
    farmAction("megafield_stats", 1, 1, a);
}
else {
    dialogMegafield("stats", 0, 0, a);
} }
function setProductsMegafield() { var c = ""; if (megafield_data.job_start && megafield_data.job.products && megafield_data.job.products.length) {
    for (var b = 0; b < megafield_data.job.products.length; b++) {
        var e = megafield_data.job.products[b];
        var d = "";
        if (checkRackItem(e.pid) >= e.amount) {
            d = "setPlantProductMegafield(" + e.pid + ")";
        }
        if (!e.duration) {
            d = "dialogMegafield('insert', 0, 0, 0, " + e.pid + ")";
        }
        var a = "";
        if (megafield_plant_pid == e.pid) {
            a = "megafield_product_select";
        }
        if (e.need <= e.have) {
            d = "";
        }
        c += '<div id="megafield_product' + b + '" class="megafield_product link" onmouseover="showDiv(\'megafield_product_tt' + b + "')\" onmouseout=\"hideDiv('megafield_product_tt" + b + '\')" onclick="' + d + '">';
        c += '  <div style="position:absolute; top:7px; left:8px; width:44px; height:46px; overflow:hidden;">';
        c += '    <div style="position:absolute; top:-3px; left:-5px; width:50px; height:50px;" class="tt' + e.pid + '"></div>';
        c += "  </div>";
        c += '  <div id="megafield_product_ready' + b + '" class="megafield_product_ready"></div>';
        c += '  <div style="position:absolute; top:0px; left:0px;" class="link ' + a + '"></div>';
        c += '  <div style="z-index:20; position:absolute; top:25px; left:65px; width:70px; text-align:center;"><span id="megafield_product_have' + e.pid + '">' + e.have + "</span>/" + e.need + "</div>";
        c += '  <div id="megafield_product_tt' + b + '" class="megafield_product_tt ttbox">';
        c += '    <div style="font-weight:bold;">' + produkt_name[e.pid] + "</div>";
        if (e.duration) {
            c += '    <div style="margin:5px 0;">' + formatTime(e.duration) + "</div>";
            var h = str_replace("%AMOUNT%", e.amount, t_megafield_one_field_needs);
            h = str_replace("%PRODUCT%", produkt_name[e.pid], h);
        }
        else {
            h = t_megafield_noplant_info;
        }
        if (checkRackItem(e.pid) < e.amount) {
            h += '<div class="important" style="margin-top:5px;">' + str_replace("%PRODUCT%", produkt_name[e.pid], t_megafield_plant_need_product) + "</div>";
        }
        c += "    <div>" + h + "</div>";
        c += "  </div>";
        if (checkRackItem(e.pid) >= e.amount && e.duration && premium == 1) {
            c += '<div style="position:absolute; bottom:10px; right:77px;" class="autoplantbutton link" onclick="dialogMegafield(\'autoplant\', 0, 0, 0, ' + e.pid + ');"></div>';
        }
        c += "</div>";
    }
    c += '<div class="clear"></div>';
    showDiv("megafield_job_timer");
}
else {
    c += '<div class="link" id="megafield_new_job" onmouseover="showDiv(\'megafield_new_job_tt\')" onmouseout="hideDiv(\'megafield_new_job_tt\')" onclick="dialogMegafield(\'show_job\')">';
    c += '  <div id="megafield_new_job_tt" class="ttbox">' + t_megafield_new_job_tt + "</div>";
    c += "</div>";
    hideDiv("megafield_job_timer");
} $("megafield_products").innerHTML = c; if (megafield_data.job_start && megafield_data.job.products && megafield_data.job.products.length) {
    for (var b = 0; b < megafield_data.job.products.length; b++) {
        var e = megafield_data.job.products[b];
        if (e.have == e.need) {
            showDiv("megafield_product_ready" + b);
        }
    }
} }
function setPlantProductMegafield(a) { if (!a || megafield_plant_pid == a) {
    megafield_plant_pid = 0;
}
else {
    for (var b = 0; b < megafield_data.job.products.length; b++) {
        if (megafield_data.job.products[b].pid == a && megafield_data.job.products[b].need <= megafield_data.job.products[b].have) {
            return false;
        }
    }
    megafield_plant_pid = a;
} fireCacheMegafield(); setProductsMegafield(); timerContentMegafield(); }
function plantProductMegafield(e) { if (megafield_plant_pid > 0 && !megafield_plant_cache[e] && megafield_data.area_free[e]) {
    if (megafield_data.tour && megafield_data.tour.steps) {
        for (var d = 0; d < megafield_data.tour.steps.length; d++) {
            for (var l in megafield_data.tour.steps[d]) {
                if (l == e) {
                    return false;
                }
            }
        }
    }
    var q = 0;
    for (var c in megafield_plant_cache) {
        q++;
    }
    for (var d = 0; d < megafield_data.job.products.length; d++) {
        if (megafield_data.job.products[d].pid == megafield_plant_pid) {
            var h = megafield_data.job.products[d].amount;
            if (!(checkRackItem(megafield_plant_pid) >= h)) {
                megafield_plant_pid = 0;
                setProductsMegafield();
                return false;
            }
            var s = 0;
            for (var b in megafield_data.area) {
                if (megafield_data.area[b].pid == megafield_plant_pid) {
                    s++;
                }
            }
            var a = (megafield_data.job.products[d].need - (megafield_data.job.products[d].have + s + q));
            if (a <= 0) {
                megafield_plant_pid = 0;
                setProductsMegafield();
                globalerrorbox(t_megafield_no_plant_necassary);
                return false;
            }
            var r = checkRackItem(megafield_plant_pid);
            r--;
            setRackItem(megafield_plant_pid, r);
            megafield_plant_cache[e] = megafield_plant_pid;
            $("megafield_tile_img" + e).className = "megafield_tile_loading";
            break;
        }
    }
} }
function fireCacheMegafield() { if (megafield_tutorial_step == 6) {
    var b = 0;
    for (var a in megafield_plant_cache) {
        b++;
    }
    if (b > 0) {
        addTutorialStepMegafield();
    }
} farmAction("megafield_plant", 1, 1); megafield_plant_cache = {}; }
function setVehiclesMegafield() { var d = ""; $("megafield_vehicle_select_slot_durability").innerHTML = ""; for (var b in megafield_data.vehicle_slots) {
    var n = megafield_data.vehicle_slots[b];
    var h = '<div style="font-weight:bold">' + n.name + "</div>";
    h += '<div style="margin:5px 0;" class="bonusinfo">' + t_megafield_vehicle_info[megafield_data.vehicle_slots[b].type] + "</div>";
    var u = "";
    var q = "";
    var e = "";
    var a = n.durability;
    var m = 100;
    if (megafield_data.vehicles && megafield_data.vehicles[b]) {
        a = megafield_data.vehicles[b].durability;
        m = ((a * 100) / n.durability);
        q = '<span id="megafield_vehicle_durability' + b + '">' + megafield_data.vehicles[b].durability + "<span>/";
        e = '<span id="megafield_vehicle_range' + b + '">' + megafield_data.vehicles[b].range + "<span>/";
    }
    q += n.durability;
    var r = "";
    var t = "margin:0 auto;";
    if (megafield_vehicle_id == b && m <= 50) {
        t = "";
    }
    r += '<div style="position:relative; left:2px; width:115px; margin-top:2px;">';
    r += '  <div style="width:80px; height:10px; background-color:#000; border-radius:4px; overflow:hidden; ' + t + '">';
    r += '    <div style="width:' + m + "%; height:10px; background:url(" + imgpath + 'blue_bar.jpg) 0px 18px;"></div>';
    r += "  </div>";
    r += "</div>";
    if (megafield_vehicle_id == b) {
        if (m <= 50) {
            r += '<div id="megafield_vehicles_fuel_button" class="fuel" onclick="fuelVehicleMegafield()" onmouseover="showDiv(\'megafield_fuel_vehicle_tt\')" onmouseout="hideDiv(\'megafield_fuel_vehicle_tt\')">';
            r += "  <div>+</div>";
            r += '  <div id="megafield_fuel_vehicle_tt" class="ttbox">' + t_megafield_fuel_vehicle + "</div>";
            r += "</div>";
        }
        $("megafield_vehicle_select_slot_durability").innerHTML = r;
    }
    e += n.range;
    if (megafield_data.vehicle_slots[b].duration) {
        h += "<div>" + t_megafield_drivetime + "&nbsp;" + formatTime(megafield_data.vehicle_slots[b].duration) + "</div>";
    }
    h += "<div>" + t_megafield_vehicle_range + e + "</div>";
    h += '<div style="float:left; margin-right:5px;">' + t_megafield_vehicle_durability + "</div>";
    h += '<div style="float:left; width:100px; height:10px; background-color:#000; border-radius:4px; overflow:hidden; margin-top:2px;">';
    h += '  <div style="width:' + m + "%; height:10px; background:url(" + imgpath + 'blue_bar.jpg) 0px 18px;"></div>';
    h += "</div>";
    h += '<div style="float:left; margin-left:5px;">' + q + "</div>";
    h += '<div class="clear"></div>';
    h += "<div>" + t_megafield_vehicle_size + n.size + "</div>";
    if (megafield_data.vehicle_slots[b].reduce) {
        h += "<div>" + t_pony_speedup_dialog_speeduptime + "&nbsp;" + formatTime(megafield_data.vehicle_slots[b].reduce) + "</div>";
    }
    h += '<div style="float:left;">' + cityadcost + '</div><div style="margin-left:5px; float:left;">';
    if (megafield_data.vehicle_slots[b].coins) {
        h += "<div>" + megafield_data.vehicle_slots[b].coins + "&nbsp;" + t_coins + "</div>";
    }
    if (megafield_data.vehicle_slots[b].money) {
        h += "<div>" + formatPrice(megafield_data.vehicle_slots[b].money) + "</div>";
    }
    if (megafield_data.vehicle_slots[b].license) {
        h += "<div>" + megafield_data.vehicle_slots[b].license + "&nbsp;" + t_megafield_currency + "</div>";
    }
    if (megafield_data.vehicle_slots[b].products) {
        for (var c in megafield_data.vehicle_slots[b].products) {
            h += '<div style="margin-top:2px;">';
            h += '  <div style="float:left; margin-right:5px;" class="kp' + c + '"></div>';
            h += '  <div style="float:left;">' + megafield_data.vehicle_slots[b].products[c] + "x&nbsp;" + produkt_name[c] + "</div>";
            h += '  <div class="clear"></div>';
            h += "</div>";
        }
    }
    h += '</div><div class="clear"></div>';
    var l = "megafield_vehicle_pos" + b;
    if (megafield_vehicle_id == b) {
        l = "megafield_vehicle_selected";
    }
    d += '<div class="' + l + '">';
    d += '  <div id="megafield_vehicle' + b + '" class="link megafield_vehicle' + b + '" onmouseover="showDiv(\'megafield_vehicle_tt' + b + "')\" onmouseout=\"hideDiv('megafield_vehicle_tt" + b + "')\">";
    if (n.block) {
        d += '<div class="megafield_vehicle_block"></div>';
        u += '<div class="important" style="margin-top:10px;">' + str_replace("%LEVEL%", n.level, t_megafield_unlockable_level) + "</div>";
        u += '<div style="margin-top:10px;">' + str_replace("%AMOUNT%", n.unlock, t_megafield_need_license) + "</div>";
    }
    else {
        if (n.unlockable) {
            d += '<div class="megafield_vehicle_unlock"></div>';
            u += '<div style="margin-top:10px;">' + str_replace("%AMOUNT%", n.unlock, t_megafield_unlockable) + "</div>";
        }
        else {
            if (!megafield_data.vehicles || !megafield_data.vehicles[b]) {
                d += '<div class="megafield_lock_open lock_open"></div>';
                u += "<div>" + t_megafield_tt_buy_vehicle + "</div>";
            }
            else {
                if (megafield_data.tour && megafield_data.tour.remain > 0) {
                    u = t_megafield_tt_tour_block;
                }
                if ((megafield_data.tour && (megafield_data.tour.remain <= 0 || !megafield_data.tour.remain))) {
                    u = t_megafield_tt_start_tour;
                }
            }
        }
    }
    d += '    <div id="megafield_vehicle_tt' + b + '" class="ttbox megafield_vehicle_tt">' + h + '<div id="megafield_vehicle_tt_bonus' + b + '" class="bonusinfo">' + u + "</div></div>";
    d += "  </div>";
    var s = "fireTourMegafield();";
    if (megafield_tutorial_step == 3 && b == 1) {
        s += " addTutorialStepMegafield();";
    }
    d += '  <div id="megafield_vehicle_go' + b + '" class="megafield_vehicle_go link" onmouseover="showDiv(\'megafield_vehicle_go_tt' + b + "')\" onmouseout=\"hideDiv('megafield_vehicle_go_tt" + b + '\')" onclick="' + s + '">';
    d += '    <div id="megafield_vehicle_go_tt' + b + '" class="megafield_vehicle_go_tt ttbox">' + t_megafield_vehicle_go_tt + "</div>";
    d += "  </div>";
    d += '  <div id="megafield_vehicle_cancel' + b + '" class="megafield_vehicle_cancel link" onmouseover="showDiv(\'megafield_vehicle_cancel_tt' + b + "')\" onmouseout=\"hideDiv('megafield_vehicle_cancel_tt" + b + '\')" onclick="setTourVehicleMegafield(0)">';
    d += '    <div id="megafield_vehicle_cancel_tt' + b + '" class="megafield_vehicle_cancel_tt ttbox">' + t_megafield_vehicle_cancel_tt + "</div>";
    d += "  </div>";
    d += "</div>";
} $("megafield_vehicles").innerHTML = d; for (var b in megafield_data.vehicle_slots) {
    hideDiv("megafield_vehicle_go" + b);
    hideDiv("megafield_vehicle_cancel" + b);
} if (megafield_vehicle_tour.length > 0 && megafield_vehicle_id > 0) {
    showDiv("megafield_vehicle_go" + megafield_vehicle_id);
    showDiv("megafield_vehicle_cancel" + megafield_vehicle_id);
} if (megafield_vehicle_id > 0) {
    if (megafield_vehicle_tour.length > 0) {
        hideDiv("megafield_vehicles_fuel_button");
    }
    else {
        showDiv("megafield_vehicles_fuel_button");
    }
} }
function fuelVehicleMegafield() { if (megafield_vehicle_id > 0) {
    var d = 0;
    if (megafield_data.vehicle_slots[megafield_vehicle_id].money) {
        d = formatPrice(megafield_data.vehicle_slots[megafield_vehicle_id].money);
    }
    if (megafield_data.vehicle_slots[megafield_vehicle_id].coins) {
        d = megafield_data.vehicle_slots[megafield_vehicle_id].coins + "&nbsp;" + t_coins;
    }
    if (megafield_data.vehicle_slots[megafield_vehicle_id].license) {
        d = formatNumber(megafield_data.vehicle_slots[megafield_vehicle_id].license) + "&nbsp;" + t_megafield_currency;
    }
    var b = t_megafield_fuel_vehicle;
    var a = "<div>" + t_megafield_fuel_vehicle_body.replace("%AMOUNT%", d) + "</div>";
    var c = "farmAction('megafield_fuel', 1, 1);";
    globalBox(b, a, c);
} }
function setTourVehicleMegafield(b) { if (!b) {
    if (megafield_vehicle_id > 0) {
        megafield_data.vehicles[megafield_vehicle_id].durability += megafield_vehicle_tour.length;
        megafield_data.vehicles[megafield_vehicle_id].range += megafield_vehicle_tour.length;
        megafield_vehicle_id = 0;
    }
    megafield_vehicle_tour = [];
    $("megafield_vehicle_select_slot").removeClassName("megafield_vehicle_select_slot");
    $("megafield_vehicle_select_slot").addClassName("megafield_vehicle_select_slot_add");
    setVehiclesMegafield();
    timerContentMegafield();
}
else {
    moveMegafield();
} if (megafield_data.vehicle_slots[b]) {
    var a = megafield_data.vehicle_slots[b];
    if (!a.block && !a.unlockable) {
        if (megafield_vehicle_id == b) {
            megafield_data.vehicles[megafield_vehicle_id].durability += megafield_vehicle_tour.length;
            megafield_data.vehicles[megafield_vehicle_id].range += megafield_vehicle_tour.length;
            megafield_vehicle_id = 0;
            $("megafield_vehicle_select_slot").removeClassName("megafield_vehicle_select_slot");
            $("megafield_vehicle_select_slot").addClassName("megafield_vehicle_select_slot_add");
        }
        else {
            megafield_vehicle_id = b;
            $("megafield_vehicle_select_slot").removeClassName("megafield_vehicle_select_slot_add");
            $("megafield_vehicle_select_slot").addClassName("megafield_vehicle_select_slot");
        }
        megafield_vehicle_tour = [];
        if (megafield_data.vehicle_slots[megafield_vehicle_id]) {
            megafield_tour_type = megafield_data.vehicle_slots[megafield_vehicle_id].type;
        }
        setVehiclesMegafield();
        setPlantProductMegafield(0);
        timerContentMegafield();
    }
} }
function setTourTileMegafield(e) { if (megafield_vehicle_id > 0) {
    var c = getNeighborsTileMegafield(e);
    if (!c) {
        return false;
    }
    if (megafield_vehicle_tour && megafield_vehicle_tour.length > 0) {
        for (var d = 0; d < c.length; d++) {
            for (var b = 0; b < megafield_vehicle_tour.length; b++) {
                if (in_array(c[d], megafield_vehicle_tour[b])) {
                    return false;
                }
            }
        }
    }
    var a = parseInt(megafield_data.vehicle_slots[megafield_vehicle_id].size);
    if (megafield_data.vehicles[megafield_vehicle_id] && (megafield_data.vehicles[megafield_vehicle_id].durability - a) < 0 || megafield_data.vehicles[megafield_vehicle_id].range == 0) {
        return false;
    }
    megafield_data.vehicles[megafield_vehicle_id].durability -= a;
    megafield_data.vehicles[megafield_vehicle_id].range--;
    megafield_vehicle_tour.push(c);
    setVehiclesMegafield();
    timerContentMegafield();
} }
function getNeighborsTileMegafield(d) { var c = parseInt(megafield_data.vehicle_slots[megafield_vehicle_id].size); var b = [d]; if (c == 4) {
    var e = Math.ceil(d / 11);
    var a = (e * 11);
    if ((d + 1) <= 99 && (d + 1) <= a && checkTourTileMegafield(d + 1) && in_array((d + 1), next_possible_tour_tiles)) {
        b.push((d + 1));
    }
    if ((d + 11) <= 99 && checkTourTileMegafield(d + 11) && in_array((d + 11), next_possible_tour_tiles)) {
        b.push((d + 11));
    }
    if (((d + 11) + 1) <= 99 && ((d + 11) + 1) <= (a + 11) && checkTourTileMegafield((d + 11) + 1) && in_array(((d + 11) + 1), next_possible_tour_tiles)) {
        b.push(((d + 11) + 1));
    }
} if (b.length != c) {
    return 0;
} return b; }
function unsetTourTileMegafield(d) { var a = 0; var b = 0; var c = []; var e = -1; for (i = 0; i < megafield_vehicle_tour.length; i++) {
    if (in_array(d, megafield_vehicle_tour[i])) {
        e = i;
    }
    if (e > -1) {
        a += megafield_vehicle_tour[i].length;
        b++;
    }
    else {
        c.push(megafield_vehicle_tour[i]);
    }
} megafield_data.vehicles[megafield_vehicle_id].durability += a; megafield_data.vehicles[megafield_vehicle_id].range += b; megafield_vehicle_tour = c; setVehiclesMegafield(); timerContentMegafield(); }
function checkTourTileMegafield(b) { var a = 0; if (!in_array(b, megafield_vehicle_tour)) {
    if (megafield_tour_type == "harvest") {
        if (megafield_data.area[b]) {
            if (megafield_data.area[b].remain <= 0) {
                a = 1;
            }
        }
        else {
            if (megafield_data.area_free[b]) {
                a = 1;
            }
        }
    }
    if (megafield_tour_type == "fertilize") {
        if (megafield_data.area_free[b] && (!megafield_data.area[b] || (megafield_data.area[b] && megafield_data.area[b].remain > 0))) {
            a = 1;
        }
    }
} return a; }
function getNextTourTilesMegafield(a) { var q = parseInt(megafield_data.vehicle_slots[megafield_vehicle_id].size); var m = []; for (var d = 0; d < megafield_vehicle_tour.length; d++) {
    for (var c = 0; c < megafield_vehicle_tour[d].length; c++) {
        m.push(megafield_vehicle_tour[d][c]);
    }
} var e = []; for (var d = 0; d < megafield_vehicle_tour[a].length; d++) {
    var h = megafield_vehicle_tour[a][d];
    var n = Math.ceil(h / 11);
    var b = ((n - 1) * 11);
    var l = (n * 11);
    if ((h - 1) > 0 && (h - 1) > b && checkTourTileMegafield(h - 1) && !in_array((h - 1), m)) {
        e.push((h - 1));
    }
    if (q > 1 && (h - 2) > 0 && (h - 2) > b && checkTourTileMegafield(h - 2) && !in_array((h - 2), m)) {
        e.push((h - 2));
    }
    if ((h + 1) <= 99 && (h + 1) <= l && checkTourTileMegafield(h + 1) && !in_array((h + 1), m)) {
        e.push((h + 1));
    }
    if (q > 1 && (h + 2) <= 99 && (h + 2) <= l && checkTourTileMegafield(h + 2) && !in_array((h + 2), m)) {
        e.push((h + 2));
    }
    if ((h - 11) > 0 && checkTourTileMegafield(h - 11) && !in_array((h - 11), m)) {
        e.push((h - 11));
    }
    if (q > 1 && (h - 22) > 0 && checkTourTileMegafield(h - 22) && !in_array((h - 22), m)) {
        e.push((h - 22));
    }
    if ((h + 11) <= 99 && checkTourTileMegafield(h + 11) && !in_array((h + 11), m)) {
        e.push((h + 11));
    }
    if (q > 1 && (h + 22) <= 99 && checkTourTileMegafield(h + 22) && !in_array((h + 22), m)) {
        e.push((h + 22));
    }
} return e; }
function fireTourMegafield() { if (megafield_vehicle_tour.length > 0) {
    farmAction("megafield_tour", 1, 1);
    megafield_vehicle_tour = [];
    if (megafield_data.vehicles[megafield_vehicle_id].durability <= 0) {
        setTourVehicleMegafield(0);
    }
    else {
        setVehiclesMegafield();
        setPlantProductMegafield(0);
        timerContentMegafield();
    }
} }
function showMegafieldHarvestAll() { if (!megafield_data.constants.harvest_all_active || currentuserlevel < megafield_data.constants.harvest_all_level) {
    hideDiv("megafield_harvest_all");
    hideDiv("megafield_fertilize_all");
}
else {
    showDiv("megafield_harvest_all");
    $("megafield_harvest_all").onclick = new Function("dialogMegafield('harvest_all')");
    showDiv("megafield_fertilize_all");
    $("megafield_fertilize_all").onclick = new Function("dialogMegafield('fertilize_all')");
} }
function moveBunny() { if (!unlock_bunny) {
    return 0;
} var a = 10; document.onkeydown = function (b) { var d = $("megafield_bunny").style.top; d = parseInt(str_replace("px", "", d)); var c = $("megafield_bunny").style.left; c = parseInt(str_replace("px", "", c)); if (b.keyCode == 65) {
    c -= a;
    if (c < 0) {
        return false;
    }
    if (c < 720 && megafield_move_position == 2) {
        moveMegafield();
    }
    $("megafield_bunny").className = "megafield_bunny_left";
} if (b.keyCode == 83) {
    d += a;
    if ((d + a) > (640 - 50)) {
        return false;
    }
    $("megafield_bunny").className = "megafield_bunny_bottom";
} if (b.keyCode == 87) {
    d -= a;
    if (d < 0) {
        return false;
    }
    $("megafield_bunny").className = "megafield_bunny_top";
} if (b.keyCode == 68) {
    c += a;
    if ((c + a) > (1200 - 50)) {
        return false;
    }
    if (c >= 720 && megafield_move_position == 1) {
        moveMegafield();
    }
    $("megafield_bunny").className = "megafield_bunny_right";
} $("megafield_bunny").style.top = d + "px"; $("megafield_bunny").style.left = c + "px"; }; }
var merchant = function () { this.data = {}; };
merchant.prototype.gambleItems = function () { merchant.action("merchant_gamble_items"); };
merchant.prototype.buy = function (a) { merchant.action("merchant_buy", { giftid: a }); };
merchant.prototype.action = function (a, b) { ajaxAction("city", a, b, merchant.response); };
merchant.prototype.response = function (b, a, c) { merchant.data = b; merchant.open(); };
merchant.prototype.timer = function () { if (this.data.remain) {
    this.data.remain--;
} if (this.data.remain > 0) {
    if (city == 1 && $("merchant_link")) {
        showDiv("merchant_link");
    }
    else {
        hideDiv("merchant_link");
    }
    if ($("merchant_timer")) {
        $("merchant_timer").innerHTML = t_merchant_resttime.replace("%TIME%", formatTime(this.data.remain));
    }
}
else {
    this.hide();
} };
merchant.prototype.open = function () { var e = '<div id="merchant">'; if (!this.data.cinema) {
    e += '<div class="back"></div>';
} e += '  <div id="merchant_timer" class="timer"></div>'; e += '  <div class="intro">' + t_merchant_intro + "</div>"; e += '  <div class="items">'; for (var d in this.data.gifts) {
    var b = "";
    if (this.data.gifts[d].block) {
        b = "off";
    }
    var c = d;
    if (presents_hack[d]) {
        c = presents_hack[d];
    }
    e += '<div class="item">';
    e += '  <img src="' + imgpath + "gifts/" + c + '.gif" class="' + b + '">';
    if (this.data.gifts[d].block) {
        e += '<div class="info">' + t_merchant_block.replace("%NAME%", this.data.gifts[d].name) + "</div>";
    }
    else {
        e += '<div class="coinsbutton_flex link" onclick="merchant.buyCommit(' + d + ')">' + t_buy_it_default.replace("%AMOUNT%", this.data.gifts[d].coins + "&nbsp;" + t_coins) + "</div>";
    }
    e += "</div>";
} e += '  <div class="clear"></div>'; e += "</div>"; if (this.data.cinema) {
    e += '<div class="cinema">';
    e += '  <div class="giftinfo" onmouseover="showDiv(\'merchant_cinema_info_tt\')" onmouseout="hideDiv(\'merchant_cinema_info_tt\')">';
    e += '    <div id="merchant_cinema_info_tt" class="ttbox">';
    e += '      <div class="head">' + t_cinema_valid_items + "</div>";
    for (var a in this.data.config.cinema) {
        var c = a;
        if (presents_hack[a]) {
            c = presents_hack[a];
        }
        e += '<img src="' + imgpath + "gifts/" + c + '.gif">';
    }
    e += "    </div>";
    e += "  </div>";
    e += '  <div class="intro2">' + t_merchant_eventitems + "</div>";
    for (var d = 0; d < this.data.cinema.length; d++) {
        var c = this.data.cinema[d].giftid;
        if (presents_hack[this.data.cinema[d].giftid]) {
            c = presents_hack[this.data.cinema[d].giftid];
        }
        e += '<div class="item">';
        e += '  <img src="' + imgpath + "gifts/" + c + '.gif">';
        e += '  <div class="coinsbutton_flex link" onclick="merchant.buyCommit(' + this.data.cinema[d].giftid + ')">' + t_buy_it_default.replace("%AMOUNT%", Math.ceil(this.data.cinema[d].points / this.data.config.cinema_exchange) + "&nbsp;" + t_coins) + "</div>";
        e += '  <div class="amount">' + this.data.cinema[d].pan + "</div>";
        e += "</div>";
    }
    e += '  <div class="clear"></div>';
    e += '  <div class="gamble link" onclick="merchant.gambleItemsCommit()">&circlearrowright;</div>';
    e += "</div>";
} e += "</div>"; globalBoxFlex(t_merchant_name, e, 0, 0, 1); $("globalbox").style.marginLeft = "-315px"; $("globalbox").style.top = "50px"; };
merchant.prototype.buyCommit = function (b) { var d = b; if (presents_hack[b]) {
    d = presents_hack[b];
} var e = '<img src="' + imgpath + "gifts/" + d + '.gif">'; if (this.data.gifts[b]) {
    var a = this.data.gifts[b].name;
    var n = this.data.gifts[b].coins;
}
else {
    for (var c = 0; c < this.data.cinema.length; c++) {
        if (this.data.cinema[c].giftid == b) {
            var a = this.data.cinema[c].name;
            var n = Math.ceil(this.data.cinema[c].points / this.data.config.cinema_exchange);
        }
    }
} var l = t_merchant_buy.replace("%NAME%", "<b>" + a + "</b>"); e += '<div style="margin-top:10px;">' + l.replace("%COST%", n + "&nbsp;" + t_coins) + "</div>"; var m = "merchant.buy(" + b + ")"; var h = "merchant.open()"; globalcommitbox("", e, m, h); };
merchant.prototype.gambleItemsCommit = function () { html = "<div>" + t_cinema_gamble_items_body.replace("%COINS%", this.data.config.gamble_cost) + "</div>"; html += '<div class="bonusinfo">' + t_merchant_no_rotation + "</div>"; globalcommitbox(t_cinema_gamble_items, html, "merchant.gambleItems()", "merchant.open()"); };
merchant.prototype.hide = function () { hideDiv("merchant_link"); };
var blocklist = [];
var messages_block = 0;
var messages_write_block = 0;
var messages_navi = ["in", "out", "system", "new", "contact"];
var messages_data = [];
var messages_select = [];
var messages_category = "";
function messagesClose() { hideDiv("messages_transp"); hideDiv("messages_main"); }
function messagesAction(h, m, d) { var e = "mode=" + h + "&rid=" + rid; if (h == "delete") {
    if (!messages_select.length) {
        return false;
    }
    e += "&category=" + messages_category + "&del=" + messages_select.join(",");
} if (h == "contact_del") {
    e += "&unr=" + m;
} if (h == "contact_add") {
    if (!$("messages_contacts_inner_left_input").value) {
        return false;
    }
    e += "&name=" + encodeURIComponent($("messages_contacts_inner_left_input").value);
} if (h == "blocklist_add") {
    if (!$("messages_contacts_inner_right_input").value) {
        return false;
    }
    e += "&name=" + encodeURIComponent($("messages_contacts_inner_right_input").value);
} if (h == "blocklist_del") {
    e += "&unr=" + m;
} if (h == "send") {
    if (messages_block == 1) {
        return false;
    }
    messages_block = 1;
    var b = $("messages_view_name").value;
    var c = $("messages_view_subject").value;
    var a = $("messages_view_body").value;
    $("messages_view_name").style.border = "";
    $("messages_view_subject").style.border = "";
    if (b == "") {
        $("messages_view_name").focus();
        $("messages_view_name").style.border = "2px solid #f00";
        messages_block = 0;
    }
    else {
        if (c == "") {
            $("messages_view_subject").focus();
            $("messages_view_subject").style.border = "2px solid #f00";
            messages_block = 0;
        }
    }
    if (b != "" && c != "") {
        e += "&name=" + encodeURIComponent(b) + "&subject=" + encodeURIComponent(c) + "&body=" + encodeURIComponent(a);
    }
    else {
        return false;
    }
} if (h == "unread") {
    e += "&id=" + messages_data[m].nnr;
} var l = createAjaxRequestObj(); if (h == "send") {
    l.open("POST", "ajax/messages.php", true);
    l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    l.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    l.setRequestHeader("Content-length", e.length);
    l.setRequestHeader("Connection", "close");
    l.onreadystatechange = function () { messagesActionResponse(l, h, m); };
    l.send(e);
}
else {
    l.open("GET", "ajax/messages.php?" + e, true);
    l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT");
    l.onreadystatechange = function () { messagesActionResponse(l, h, m); };
    l.send(null);
} }
function messagesActionResponse(c, d, e) { messages_block = 0; var a = _chkRequest(c, d); if (a != 0) {
    if (!a[0]) {
        if (a[1]) {
            globalerrorbox(a[1]);
        }
    }
    else {
        $("messages_list_checkbox").checked = false;
        if (a[1].contacts) {
            contacts = a[1].contacts;
        }
        else {
            contacts = {};
        }
        if (a[1].blocklist) {
            blocklist = a[1].blocklist;
        }
        else {
            blocklist = [];
        }
        if (a[1].counts) {
            if (a[1].counts["in"]) {
                var b = "&nbsp;(" + a[1].counts["in"] + ")";
            }
            else {
                var b = "";
            }
            $("messages_navi_in_count").innerHTML = b;
            if (a[1].counts.system) {
                var b = "&nbsp;(" + a[1].counts.system + ")";
            }
            else {
                var b = "";
            }
            $("messages_navi_system_count").innerHTML = b;
        }
        if (d == "open") {
            showDiv("messages_transp");
            showDiv("messages_main");
        }
        if (d == "unread") {
            $("messages_list_subject" + messages_data[e].nnr).removeClassName("messages_list_unread");
            $("messages_list_subject" + messages_data[e].nnr).onclick = new Function("messagesRead(" + e + ")");
            return 1;
        }
        if (in_array(d, ["open", "in", "out", "system", "send", "delete"])) {
            hideDiv("messages_view");
            hideDiv("messages_contacts");
            messages_data = a[1].list;
            messages_write_block = a[1].block;
            showDiv("messages_list");
            messagesList();
        }
        else {
            hideDiv("messages_list");
        }
        if (in_array(d, ["contact", "contact_add", "contact_del", "blocklist_add", "blocklist_del"])) {
            d = "contact";
            messagesContacts();
        }
        if (d == "send") {
            d = "in";
        }
        messagesNavi(d);
    }
} }
function messagesNavi(c) { messages_select = []; if (c == "delete") {
    c = messages_category;
} if (c == "open") {
    c = "in";
} messages_category = c; for (var a = 0; a < messages_navi.length; a++) {
    if ($("messages_navi_" + messages_navi[a])) {
        $("messages_navi_" + messages_navi[a]).removeClassName("messages_navi_item_active");
    }
} if ($("messages_navi_" + c)) {
    $("messages_navi_" + c).addClassName("messages_navi_item_active");
} hideDiv("messages_info"); $("messages_list_inner").removeClassName("messages_list_inner"); $("messages_list_inner").addClassName("messages_list_inner_withoutinfo"); if (c == "in" || c == "new") {
    var b = getRandom(0, 2);
    $("messages_info").innerHTML = messages_info[b];
    showDiv("messages_info");
    $("messages_list_inner").addClassName("messages_list_inner");
    $("messages_list_inner").removeClassName("messages_list_inner_withoutinfo");
} }
function messagesList() { var e = ""; if (messages_data) {
    for (var d = 0; d < messages_data.length; d++) {
        var b = messages_data[d];
        e += '<div class="messages_list_item">';
        e += '  <div class="messages_list_date">' + b.time + "</div>";
        var a = "messagesAction('unread', " + d + ")";
        var c = "messages_list_unread";
        if (b.read == 1) {
            a = "";
            c = "";
        }
        e += '  <div id="messages_list_subject' + b.nnr + '" class="messages_list_subject link ' + c + '" onclick="messagesRead(' + d + "); " + a + '">' + b.subject + "</div>";
        if (b.admin == 1) {
            c = "admin_icon";
        }
        e += '  <div class="messages_list_status ' + c + '">&nbsp;</div>';
        if (b.name) {
            e += '  <div class="messages_list_contract addcontact_icon link" onclick="addMessagesContact(\'' + b.name + "');\"></div>";
            e += "  <div class=\"messages_list_contract contract_icon link\" onclick=\"showPage('contracts', '" + b.name + "');\"></div>";
            e += '  <div class="messages_list_name">' + b.name + "</div>";
        }
        e += '  <input type="checkbox" id="messages_list_check' + d + '" value="' + d + '" class="messages_list_check link" onclick="messagesDel(' + d + ", " + b.nnr + ')">';
        e += '  <div class="clear"></div>';
        e += '  <div class="messages_list_body" id="messages_list_body' + d + '"></div>';
        e += "</div>";
    }
} $("messages_list_inner").innerHTML = e; }
function messagesRead(c) { var a = messages_data[c]; if ($("messages_list_body" + c)) {
    if ($("messages_list_body" + c).style.display == "block") {
        hideDiv("messages_list_body" + c);
        $("messages_list_body" + c).innerHTML = "";
    }
    else {
        a.body = str_replace("\\'", "'", a.body);
        var b = "";
        b += '<div class="messages_list_body_text">' + a.body + "</div>";
        b += '<div class="messages_list_body_navi">';
        if (a.from != "0") {
            b += '  <button type="button" class="link button_new" onclick="messageDetail(' + c + ')">' + t_msg_reply + "</button>";
        }
        b += '  <button type="button" class="link button_new" onclick="messagesDel(-1, ' + a.nnr + "); messagesAction('delete')\">" + t_msg_delete + "</button>";
        b += '  <div class="link messages_close_message" onclick="messagesRead(' + c + ');"></div>';
        b += "</div>";
        $("messages_list_body" + c).innerHTML = b;
        showDiv("messages_list_body" + c);
    }
} }
function messageDetail(b) { if (messages_write_block == 1) {
    showDiv("messages_view_info");
    hideDiv("messages_view_form");
}
else {
    hideDiv("messages_view_info");
    showDiv("messages_view_form");
} if (b < 0) {
    $("messages_view_name").value = "";
    $("messages_view_subject").value = "";
    $("messages_view_body").value = "";
}
else {
    var a = messages_data[b];
    $("messages_view_name").value = a.name;
    $("messages_view_subject").value = t_msg_reply_subject_add + a.subject;
    $("messages_view_body").value = "";
} hideDiv("messages_list"); hideDiv("messages_contacts"); showDiv("messages_view"); messagesNavi("new"); messagesCalcBody(); }
function messagesCalcBody() { var a = parseInt($("messages_view_body").value.length); $("messages_view_body_letters").innerHTML = (1500 - a); }
function messagesDel(e, c) { var d = 0; if (e < 0) {
    messages_select = [];
    d = 1;
}
else {
    if ($("messages_list_check" + e) && $("messages_list_check" + e).checked == true) {
        d = 1;
    }
} if (d == 1) {
    messages_select.push(c);
}
else {
    var b = [];
    for (var a = 0; a < messages_select.length; a++) {
        if (messages_select[a] != c) {
            b.push(messages_select[a]);
        }
    }
    messages_select = b;
} }
function messagesShowContactsList() { var b = ""; for (var a = 0; a < contacts.length; a++) {
    b += '<div class="messages_contacts_link_item link" onclick="messagesSetName(\'' + contacts[a].uname + "')\">" + contacts[a].uname + "</div>";
} $("messages_contacts_link_inner").innerHTML = b; showDiv("messages_contacts_link"); }
function messagesSetName(a, b) { if (b == 1) {
    messageDetail(-1);
} $("messages_view_name").value = a; if ($("messages_contacts_link")) {
    hideDiv("messages_contacts_link");
} }
function addMessagesContact(a) { showDiv("messages_transp"); showDiv("messages_main"); messagesAction("contact"); $("messages_contacts_inner_left_input").value = a; }
function messagesContacts() { var b = ""; if (contacts) {
    for (var a = 0; a < contacts.length; a++) {
        b += '<div class="messages_contacts_addressbook_line">';
        b += '  <div style="float:left; width:16px; margin-top:-2px;" class="mail_icon link" onclick="messagesSetName(\'' + contacts[a].uname + "', 1)\"></div>";
        b += '  <div style="float:left; width:16px; margin-top:-1px;" class="contract_icon link" onclick="showPage(\'contracts\', \'' + contacts[a].uname + "');\"></div>";
        b += '  <div style="float:left; width:100px; margin-top:1px; margin-right:5px;">' + contacts[a].uname + '&nbsp;<img src="' + imgpath + 'stadt/stats_sf_black.gif" class="link" onclick="window.open(\'' + http_host + "schaugarten/index.php?mode=view&user=" + contacts[a].unr + "')\"></div>";
        b += '  <div style="float:right; width:16px;" class="delete_icon link" onclick="messagesAction(\'contact_del\', \'' + contacts[a].unr + "')\"></div>";
        b += '  <div style="clear:both;"></div>';
        b += "</div>";
    }
} $("messages_contacts_inner_left_inner").innerHTML = b; var b = ""; if (blocklist) {
    for (var a = 0; a < blocklist.length; a++) {
        b += '<div class="messages_contacts_addressbook_line">';
        b += '  <div style="float:left;">' + blocklist[a].name + "</div>";
        b += '  <div style="float:right; width:16px;" class="delete_icon link" onclick="messagesAction(\'blocklist_del\', \'' + blocklist[a].unr + "')\"></div>";
        b += '  <div style="clear:both;"></div>';
        b += "</div>";
    }
} $("messages_contacts_inner_right_inner").innerHTML = b; hideDiv("messages_info"); hideDiv("messages_list"); hideDiv("messages_view"); showDiv("messages_contacts"); }
function messagesSelectAll() { if ($("messages_list_checkbox").checked == true) {
    var b = true;
}
else {
    var b = false;
} if (messages_data) {
    for (var c = 0; c < messages_data.length; c++) {
        var a = messages_data[c];
        if (b == false) {
            messages_select = [];
        }
        else {
            messages_select.push(messages_data[c].nnr);
        }
        if ($("messages_list_check" + c)) {
            $("messages_list_check" + c).checked = b;
        }
    }
} }
function messagesOpen(a) { showDiv("messages_transp"); showDiv("messages_main"); messageDetail(-1); $("messages_view_name").value = a; }
var anzahl, w_zeit, global_x, global_y, regal_leer, kategorie, iKategorie;
var mode = 0;
var stadt = false;
var wasserinterval = null;
var selected = null;
var cache_actions = 5;
var cache_fire = 1000;
var cache_timeout = null;
var cache = new Array();
var timeoutKundeGeht = null;
var timeoutBlaseGeht = null;
var neuerKundeLaeuft = null;
var timeoutKundeLaeuft = null;
var timeoutKundeRutscht = null;
var neu_lastLeft = null;
var letzterKunde;
var to_letzterKunde;
var to_lastLeft;
var to_letztesPic;
var kunden = new Array();
var pfeile = new Array();
var busLeft;
var cars = new Array();
var carCount = 0;
var lastCar = -1;
var pLeer = false;
Array.prototype.contains = function (b) { var a; for (a = 0; a < this.length; a++) {
    if (this[a] === b) {
        return true;
    }
} return false; };
function createAjaxRequestObj() { var d = null; var a = new Array("MSXML2.XMLHttp.6.0", "MSXML2.XMLHttp.5.0", "MSXML2.XMLHttp.4.0", "MSXML2.XMLHttp.3.0", "MSXML2.XMLHttp", "Microsoft.XMLHttp"); if (document.getElementById && window.XMLHttpRequest) {
    d = new XMLHttpRequest();
} if (window.ActiveXObject) {
    for (var c = 0; c < a.length; c++) {
        try {
            d = new ActiveXObject(a[c]);
        }
        catch (b) { }
    }
} return d; }
function show_built(e, b) { var t = new Array(); var h = new Array(); if (farm <= 4) {
    f = 1;
}
else {
    f = farm;
} var a = farm_garden_products[f]; if (b == "over") {
    if ((produkt_category[garten_prod[e]] == "v" || produkt_category[garten_prod[e]] == "ex" || produkt_category[garten_prod[e]] == "alpin" || produkt_category[garten_prod[e]] == "hr") && gartenshortinfo == 1) {
        gardenShowPlantInfo(e);
    }
    if (mode == 1) {
        var q = garten_x[e];
        var m = garten_y[e];
        var n = garten_max_x[e];
        var s = garten_max_y[e];
        t = berechneFelder(e, q, m, n, s);
        for (d = 0; d < t.length; d++) {
            if (garten_prod[t[d]] != 0) {
                if (n == 1 && s == 1) {
                    h[0] = "cursors/cursor_ernten";
                }
                else {
                    if (n == 2 && s == 1) {
                        h[d] = "cursors/ernten2_" + (d + 1);
                    }
                    else {
                        h[d] = "cursors/ernten_" + (d + 1);
                    }
                }
            }
            else {
                h[d] = "cursors/no";
            }
        }
    }
    else {
        if (mode == 2) {
            var q = garten_x[e];
            var m = garten_y[e];
            var n = garten_max_x[e];
            var s = garten_max_y[e];
            jsTimeStamp = Zeit.Client - Zeit.Verschiebung;
            letztesWasser = jsTimeStamp - (24 * 60 * 60);
            t = berechneFelder(e, q, m, n, s);
            for (d = 0; d < t.length; d++) {
                if (garten_prod[t[d]] == 0) {
                    h[d] = "cursors/no";
                }
                else {
                    if (garten_zeit[t[d]] <= jsTimeStamp) {
                        h[d] = "cursors/no";
                    }
                    else {
                        if (garten_wasser[t[d]] >= letztesWasser) {
                            h[d] = "cursors/no";
                        }
                        else {
                            if (garten_kategorie[t[d]] != "v" && garten_kategorie[t[d]] != "ex" && garten_kategorie[t[d]] != "alpin" && garten_kategorie[t[d]] != "hr") {
                                h[d] = "cursors/no";
                            }
                            else {
                                if (n == 1 && s == 1) {
                                    h[0] = "cursors/cursor_giessen";
                                }
                                else {
                                    if (n == 2 && s == 1) {
                                        h[d] = "cursors/giessen2_" + (d + 1);
                                    }
                                    else {
                                        h[d] = "cursors/giessen_" + (d + 1);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if (mode == 0) {
                if (regal_leer == 1) {
                    t = berechneFelder(e, 1, 1, 1, 1);
                    h[0] = "cursors/no";
                }
                else {
                    if (selected > 0) {
                        l = selected;
                        max_x = produkt_x[l];
                        max_y = produkt_y[l];
                        t = berechneFelder(e, 1, 1, max_x, max_y);
                        q = 1;
                        m = 1;
                        for (d = 0; d < t.length; d++) {
                            if (t[d] == false) {
                                continue;
                            }
                            else {
                                if (t.contains(false)) {
                                    h[d] = "cursors/no";
                                }
                                else {
                                    if (garten_prod[t[d]] == 0) {
                                        if (max_x == 1 && max_y == 1) {
                                            if (in_array(iKategorie, a)) {
                                                h[0] = "cursors/cursor_saat";
                                                if (iKategorie == "z") {
                                                    h[0] = "cursors/cursor_zier";
                                                }
                                            }
                                            else {
                                                h[0] = "cursors/cursor_forbidden";
                                            }
                                        }
                                        else {
                                            if (max_x == 2 && max_y == 1) {
                                                if (in_array(iKategorie, a)) {
                                                    h[d] = "cursors/pflanzer2_" + (d + 1);
                                                    if (iKategorie == "z") {
                                                        h[d] = "cursors/zierer2_" + (d + 1);
                                                    }
                                                }
                                                else {
                                                    h[d] = "cursors/forbidden2_" + (d + 1);
                                                }
                                            }
                                            else {
                                                if (in_array(iKategorie, a)) {
                                                    h[d] = "cursors/pflanzer_" + (d + 1);
                                                    if (iKategorie == "z") {
                                                        h[d] = "cursors/zierer_" + (d + 1);
                                                    }
                                                }
                                                else {
                                                    h[d] = "cursors/forbidden_" + (d + 1);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        h[d] = "cursors/no";
                                    }
                                }
                            }
                            if (q == max_x) {
                                q = 1;
                                m++;
                            }
                            else {
                                q++;
                            }
                        }
                    }
                }
            }
            else {
                if (mode == -1) {
                    max_x = produkt_x[selected];
                    max_y = produkt_y[selected];
                    t = berechneFelder(e, 1, 1, max_x, max_y);
                    for (d = 0; d < t.length; d++) {
                        h[d] = "0";
                    }
                }
            }
        }
    }
}
else {
    if (b == "out") {
        if (gartenshortinfo == 1) {
            hideGardenRemainTimeTitle();
        }
        if (mode == 1) {
            q = garten_x[e];
            m = garten_y[e];
            max_x = garten_max_x[e];
            max_y = garten_max_y[e];
            t = berechneFelder(e, q, m, max_x, max_y);
            for (d = 0; d < t.length; d++) {
                h[d] = "0";
            }
        }
        else {
            if (mode == 2) {
                q = garten_x[e];
                m = garten_y[e];
                max_x = garten_max_x[e];
                max_y = garten_max_y[e];
                t = berechneFelder(e, q, m, max_x, max_y);
                for (d = 0; d < t.length; d++) {
                    h[d] = "0";
                }
            }
            else {
                if (mode == 0) {
                    if (regal_leer == 1) {
                        t = berechneFelder(e, 1, 1, 1, 1);
                        h[0] = "0";
                    }
                    else {
                        if (regal_leer == 0) {
                            if (selected) {
                                var l = selected;
                                max_x = produkt_x[l];
                                max_y = produkt_y[l];
                            }
                            else {
                                max_x = global_x;
                                max_y = global_y;
                            }
                            t = berechneFelder(e, 1, 1, max_x, max_y);
                            for (d = 0; d < t.length; d++) {
                                h[d] = "0";
                            }
                        }
                    }
                }
                else {
                    if (mode == -1) {
                        max_x = produkt_x[selected];
                        max_y = produkt_y[selected];
                        t = berechneFelder(e, 1, 1, max_x, max_y);
                        for (d = 0; d < t.length; d++) {
                            h[d] = "0";
                        }
                    }
                }
            }
        }
    }
} var r = false; for (var d = 0; d < cache.length; d++) {
    elem = cache[d]["felder"];
    for (var c = 0; c < elem.length; c++) {
        if (t.contains(elem[c])) {
            r = true;
            break;
        }
    }
    if (r == true) {
        break;
    }
} if (!r) {
    for (d = 0; d < t.length; d++) {
        if (t[d] == false) {
            continue;
        }
        else {
            document.getElementById("b" + t[d]).src = _GFX + h[d] + ".gif";
        }
    }
} }
function cache_me(E, u, C, r) { clearTimeout(cache_timeout); var z = 0; for (z; z < cache_actions; z++) {
    if (cache[z] == null) {
        if (u > 0) {
            switch (mode) {
                case -1:
                    var b = new Array();
                    break;
                case 0:
                    var b = berechneFelder(u, 1, 1, global_x, global_y);
                    break;
                case 1:
                    var m = garten_x[u];
                    var l = garten_y[u];
                    var D = garten_max_x[u];
                    var A = garten_max_y[u];
                    var b = berechneFelder(u, m, l, D, A);
                    break;
                case 2:
                    var m = garten_x[u];
                    var l = garten_y[u];
                    var D = garten_max_x[u];
                    var A = garten_max_y[u];
                    var b = berechneFelder(u, m, l, D, A);
                    break;
            }
            var n = true;
            if (b.contains(false)) {
                n = false;
            }
            if (in_cache(b)) {
                n = false;
            }
            if (r == "u") {
                document.getElementById("raeumFeld").value = u;
                document.getElementById("raeumFeldPosition").value = E;
                var F = "raeumeFeld(document.getElementById('raeumFeldPosition').value,document.getElementById('raeumFeld').value)";
                var v = "";
                v += str_replace("%COST%", "<b>" + formatPrice(garten_entf[u]) + "</b>", gardenremoveweed);
                commitboxgarden(removeweedheadline, v, F, 2);
                n = false;
            }
            else {
                letztesWasser = Zeit.Client - Zeit.Verschiebung - (24 * 60 * 60);
                for (var w = 0; w < b.length; w++) {
                    switch (mode) {
                        case -1:
                            n = false;
                            break;
                        case 0: if (selected) {
                            if (garten_prod[b[w]] != 0) {
                                n = false;
                            }
                            break;
                        }
                        else {
                            n = false;
                        }
                        case 1:
                            var B = document.getElementById("b" + u).alt;
                            var h = garten_prod[u];
                            var c = (parseInt(garten_zeit[u]) + parseInt(Zeit.Verschiebung)) - parseInt(Zeit.Client);
                            if (garten_prod[b[w]] == 0) {
                                n = false;
                            }
                            else {
                                if (c >= 0 && garten_kategorie[u] != "z") {
                                    document.getElementById("ernteFeld").value = u;
                                    document.getElementById("ernteFeldPosition").value = E;
                                    document.getElementById("ernteProd").value = h;
                                    var v = gardennonecrop;
                                    var F = "document.getElementById('ernteJa').value='ernteJa';top.ernteFeld(document.getElementById('ernteFeldPosition').value,document.getElementById('ernteFeld').value);document.getElementById('erntepopup').style.display='none';document.getElementById('glock').style.display='none';";
                                    commitboxgarden(errorheadline, v, F, 2);
                                    n = false;
                                }
                            }
                            break;
                        case 2:
                            if (garten_prod[b[w]] == 0) {
                                n = false;
                            }
                            else {
                                if (garten_zeit[b[w]] <= jsTimeStamp) {
                                    n = false;
                                }
                                else {
                                    if (garten_wasser[b[w]] >= letztesWasser) {
                                        n = false;
                                    }
                                    else {
                                        if (garten_kategorie[b[w]] != "v" && garten_kategorie[b[w]] != "ex" && garten_kategorie[b[w]] != "alpin" && garten_kategorie[b[w]] != "hr") {
                                            n = false;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
            if (n == true) {
                var t = 1;
                if (selected && mode == 0) {
                    if (farm <= 4) {
                        f = 1;
                    }
                    else {
                        f = farm;
                    }
                    var e = farm_garden_products[f];
                    if (!in_array(iKategorie, e)) {
                        t = 0;
                    }
                }
                if (t == 1) {
                    cache[z] = new Object();
                    cache[z]["feld"] = u;
                    cache[z]["produkt"] = C;
                    cache[z]["kategorie"] = r;
                    if (mode == 1) {
                        cache[z]["pflanze"] = h;
                    }
                    else {
                        cache[z]["pflanze"] = selected;
                    }
                    cache[z]["mode"] = mode;
                    cache[z]["felder"] = b;
                    if (mode == 0) {
                        var a = checkRackItem(selected, farm);
                        if (a) {
                            var d = 0;
                            for (var s = 0; s < cache.length; s++) {
                                if (cache[s]["pflanze"] == selected) {
                                    d++;
                                }
                            }
                            if (d >= a) {
                                save_actions(E);
                                selected = 0;
                                selectMode(1);
                            }
                        }
                    }
                    for (var w = 0; w < b.length; w++) {
                        document.getElementById("b" + b[w]).src = _GFX + "loading.gif";
                    }
                }
            }
        }
        break;
    }
} if (z == (cache_actions - 1)) {
    save_actions(E);
}
else {
    cache_timeout = setTimeout("save_actions(" + E + ")", cache_fire);
} }
function save_actions(a) { var l = new Array(); var b = ""; var h = ""; var d = ""; for (var e = 0; e < cache.length; e++) {
    switch (cache[e]["mode"]) {
        case 0:
            if (cache[e]["pflanze"] === null || cache[e]["pflanze"] === -1) {
                continue;
            }
            b = b + "&pflanze[]=" + cache[e]["pflanze"] + "&feld[]=" + cache[e]["feld"] + "&felder[]=" + cache[e]["felder"];
            break;
        case 1:
            if (cache[e]["pflanze"] === null || cache[e]["pflanze"] === -1) {
                continue;
            }
            h = h + "&pflanze[]=" + cache[e]["pflanze"] + "&feld[]=" + cache[e]["feld"] + "&felder[]=" + cache[e]["felder"];
            break;
        case 2:
            d = d + "&feld[]=" + cache[e]["feld"] + "&felder[]=" + cache[e]["felder"];
            break;
    }
    for (var c = 0; c < cache[e]["felder"].length; c++) {
        document.getElementById("b" + cache[e]["felder"][c]).src = _GFX + "0.gif";
    }
} if (b.length > 0) {
    b = b.substring(1, b.length);
    farmAction("garden_plant", farm, a, b, wasserinterval);
} if (h.length > 0) {
    h = h.substring(1, h.length);
    farmAction("garden_harvest", farm, a, h);
} if (d.length > 0) {
    waterFunc(farm, a, d);
} cache = new Array(); }
function waterFunc(b, a, c) { c = c.substring(1, c.length); farmAction("garden_water", b, a, c); }
function in_cache(a) { for (var c = 0; c < a.length; c++) {
    for (var b = 0; b < cache.length; b++) {
        if (cache[b]["felder"].contains(a[c])) {
            return true;
        }
    }
} return false; }
function berechneFelder(d, q, m, n, s) { d = parseInt(d, 10); q = parseInt(q, 10); m = parseInt(m, 10); n = parseInt(n, 10); s = parseInt(s, 10); var a; if (s == 1) {
    a = 0;
}
else {
    if (q == 1 && m == 1) {
        a = 0;
    }
    else {
        a = (m - s + 1) * maxfieldsx;
    }
} var h = d - q - Math.abs(a); var t = new Array(); var r = h; var l = 0; var e = 0; for (var c = 0; c < s; c++) {
    e = r + n;
    for (var b = 0; b < n; b++) {
        r++;
        if (t[l] == null) {
            if (r > fieldsamount) {
                t[l] = false;
            }
            else {
                if ((r % maxfieldsx) == 0) {
                    if (n == 1) {
                        t[l] = parseInt(r, 10);
                    }
                    else {
                        if (r < e) {
                            t[l] = parseInt(r, 10);
                            anz_err = e - r;
                            for (k = 1; k <= anz_err; k++) {
                                t[l + k] = false;
                            }
                        }
                        else {
                            t[l] = parseInt(r, 10);
                        }
                    }
                }
                else {
                    t[l] = parseInt(r, 10);
                }
            }
        }
        l++;
    }
    r = h + ((c + 1) * maxfieldsx);
} return t; }
function show_page(d, a) { gclr(); var b; if (d == "msg") {
    b = "nachrichten/inbox.php";
}
else {
    if (d == "cont") {
        b = "vertraege/overview.php";
    }
    else {
        if (d == "prof") {
            b = "nutzer/profil.php";
        }
        else {
            if (d == "help") {
                b = "hilfe.php";
            }
            else {
                if (d == "muede") {
                    b = "muede.php";
                }
                else {
                    if (d == "coins") {
                        openCoinsBox();
                        return false;
                    }
                }
            }
        }
    }
} var c = 0; while (document.getElementById("kunde" + c)) {
    document.getElementById("kunde" + c).style.display = "none";
    c++;
} g("multiframe").src = b; g("multiframe").style.display = "block"; }
function gclr() { }
function close_page() { gclr(); var a = 0; while (document.getElementById("kunde" + a)) {
    document.getElementById("kunde" + a).style.display = "block";
    a++;
} g("multiframe").src = ""; g("multiframe").style.display = "none"; if (mode == 0 && stadt == false) {
    g("lagerlock").style.display = "none";
} }
function startTutorialPart2() { increaseTutorialStep(); tutorial = 7; showDiv("blockmainnavi"); setBlockMain(); $("continuetutorial").style.backgroundImage = "url(" + imgpath + "tutorial_continue.gif)"; showDiv("continuetutorial"); }
function continueTutorial() { hideDiv("continuetutorial"); hideDiv("gardenmaincontainer"); hideDiv("transp"); hideDiv("blockmainnavi"); setBlockMain(1); showDiv("blockmainnavi"); setBlockMain(2); setTutorialLine(); showTutorial(12, 1); }
function AbrissResponse(a) { if (a.success == 1) {
    hideDiv("globalbox");
    hideDiv("globaltransp");
    hideDiv("transp8");
    document.getElementById("f" + a.feld).style.background = "url(" + _GFX + "0.gif)";
    document.getElementById("b" + a.feld).alt = "";
    document.getElementById("b" + a.feld).src = _GFX + "0.gif";
    document.getElementById("w" + a.feld).src = _GFX + "0.gif";
    document.getElementById("unkrautpopup").style.display = "none";
    document.getElementById("glock").style.display = "none";
    garten_prod[a.feld] = 0;
    garten_x[a.feld] = 1;
    garten_y[a.feld] = 1;
    garten_max_x[a.feld] = 1;
    garten_max_y[a.feld] = 1;
    garten_gttpic[a.feld] = "";
    garten_zeit[a.feld] = 0;
    garten_ernte[a.feld] = "";
    garten_wasser[a.feld] = "";
    garten_kategorie[a.feld] = "";
    garten_entf[a.feld] = "";
    gclr();
    if (a.fund == 1) {
        document.getElementById("fundpopupbetrag").innerHTML = a.betrag;
        document.getElementById("glock").style.display = "block";
        document.getElementById("fundpopup").style.display = "block";
    }
}
else {
    if (a.bot == 1 || a.session_tot == 1) {
        document.location.href = "main.php?page=logout";
    }
    if (a.muede == 1) {
        document.getElementById("unkrautpopup").style.display = "none";
        document.getElementById("glock").style.display = "none";
        show_page("muede");
    }
    else {
        document.getElementById("unkrautpopup").style.display = "none";
        errorboxgarden(a[1]);
    }
} }
function raeumeFeld(a, b) { farmAction("garden_removeweed", farm, a, b); }
function ernteFeld(c, b) { var a = garten_prod[b]; var h = produkt_x[a]; var n = produkt_y[a]; var l = garten_x[b]; var e = garten_y[b]; var q = berechneFelder(b, l, e, h, n); var d = document.getElementById("ernteProd").value; var m = document.getElementById("ernteJa").value; farmAction("garden_harvest", farm, c, d, q[0], q, m); }
function endTutorial() { var a = createAjaxRequestObj(); a.open("GET", "tutorial/endtutorial.php?rid=" + rid, true); a.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); a.onreadystatechange = function () { document.getElementById("tutorial_div").style.display = "none"; }; a.send(null); }
function close_tutorial() { if (document.getElementById("current_step").value == 4) {
    endTutorial();
}
else {
    document.getElementById("tutorial_div").style.display = "none";
} }
function checkWasser() { var a = Zeit.Client - Zeit.Verschiebung - (24 * 60 * 60); for (x in water) {
    if (water[x] <= a) {
        if (document.getElementById("w" + x)) {
            document.getElementById("w" + x).src = _GFX + "0.gif";
            water[x] = undefined;
        }
    }
} }
function deleteCursor() { var b = document.getElementById("b1"); if (b) {
    for (var a = 1; a <= fieldsamount; a++) {
        document.getElementById("b" + a).src = _GFX + "0.gif";
    }
}
else {
    setTimeout("deleteCursor()", 1000);
} }
var tutorial_plant_timeout = 0;
var tutorial_plant_timeout_time = 0;
function wachse(z, e, h, A) { if (tutorial == 3) {
    h = 30;
} var n = parseInt(produkt_x[e]); var m = parseInt(produkt_y[e]); var a = berechneFelder(z, 1, 1, n, m); window.clearTimeout(to[a[0]]); var q = garten_kategorie[a[0]]; if (q == "v" || q == "hr" || q == "ex" || q == "alpin") {
    var t = 20;
}
else {
    if (q == "z") {
        var t = 0;
    }
} var y = Zeit.Client - Zeit.Verschiebung; var b = y - A; var E = (h - t) / 3; var w = null; if (q == "z") {
    var d = 4;
    var w = null;
}
else {
    if (b < t) {
        var d = 0;
        w = Math.ceil(t - b);
    }
    else {
        if (b >= t && b < (t + E)) {
            var d = 1;
            w = Math.ceil((t + E) - b);
        }
        else {
            if (b >= (t + E) && b < (t + (E * 2))) {
                var d = 2;
                w = Math.ceil((t + (E * 2)) - b);
            }
            else {
                if (b >= (t + (E * 2)) && b < (t + (E * 3))) {
                    var d = 3;
                    w = Math.ceil((t + (E * 3)) - b);
                }
                else {
                    var d = 4;
                    if (tutorial == 3) {
                        hideDiv("tutorial4_1");
                        hideDiv("tutorial5");
                        hideDiv("transp8");
                        hideDiv("globalbox");
                        hideDiv("globaltransp");
                        showTutorial(5, 2);
                    }
                }
            }
        }
    }
} var u = 0; u = produkt_img[e].slice(0, -1) + d; var l = ""; var v; if (document.getElementById("w" + z)) {
    v = document.getElementById("w" + z).src;
} if (d == 4) {
    l = parseInt(produkt_ernte[e], 10);
    v = _GFX + "0.gif";
} if (d == 0) {
    if (n == 1 && m == 1) {
        var C = "buddler";
    }
    else {
        if (n == 2 && m == 2) {
            var C = "buddler2";
        }
        else {
            if (n == 2 && m == 1) {
                var C = "buddler3";
            }
        }
    }
} var B = 0; for (var s = 1; s <= m; s++) {
    for (var D = 1; D <= n; D++) {
        if (n == 1 && m == 1) {
            if (d == 0) {
                document.getElementById("f" + a[B]).style.background = "url(" + _GFX + "produkte/" + C + ".gif)";
            }
            else {
                document.getElementById("f" + a[B]).style.background = "url(" + _GFX + "produkte/" + u + ".gif)";
            }
        }
        else {
            if (d == 0) {
                document.getElementById("f" + a[B]).style.background = "url(" + _GFX + "produkte/" + C + "." + s + "." + D + ".gif)";
            }
            else {
                document.getElementById("f" + a[B]).style.background = "url(" + _GFX + "produkte/" + u + "." + s + "." + D + ".gif)";
            }
        }
        document.getElementById("b" + a[B]).alt = l;
        document.getElementById("w" + a[B]).src = v;
        B++;
    }
} if (d < 4) {
    to[a[0]] = window.setTimeout("wachse( " + z + ", " + e + ", " + h + ", " + A + " )", w * 1000);
    if (tutorial == 3) {
        tutorial_plant_timeout_time = ((parseInt(A) + parseInt(h)) - parseInt(y));
        window.clearInterval(tutorial_plant_timeout);
        tutorial_plant_timeout = window.setInterval("specialTutorialTimer()", 1000);
    }
}
else {
    if (tutorial == 3) {
        window.clearInterval(tutorial_plant_timeout);
    }
} }
function specialTutorialTimer() { tutorial_plant_timeout_time--; if ($("tutorial_pid_timer")) {
    $("tutorial_pid_timer").innerHTML = formatTime(tutorial_plant_timeout_time);
} }
function clearWachseTimeouts() { for (x in to) {
    window.clearTimeout(to[x]);
} }
function updatePlayerInfo(c, a, b, e, d) { if (b) {
    b = parseInt(b, 10);
} if (c) {
    g("bar").innerHTML = c;
} if (a) {
    g("coins").innerHTML = a;
} if (b) {
    g("pkt").innerHTML = b.format();
} if (e) {
    g("level").innerHTML = e;
} }
function updateMenuImages(b, a, d, c) { $("mainmenue2_tt").innerHTML = d; $("mainmenue3_tt").innerHTML = c; lng_t_msg = d; lng_t_con = c; }
var updatemenue_data = {};
function updateMenu() { farmAction("updater", farm, 1); }
var carpentry_bonus = 0;
var user_points = 0;
var user_bar = 0;
var user_coins = 0;
var user_premium_bis = "";
var donkey_isset = 0;
var farmdog_isset = 0;
var farmdog_harvest = 0;
var reallocatebuilding_status = 0;
var reallocateanimals_status = 0;
var paymentitem_remain = 0;
var disable_autologout = 0;
function updateMenuGo() { var b = updatemenue_data; hideDiv("mainmenue2_incoming"); hideDiv("mainmenue3_incoming"); if (b.mail > 0) {
    showDiv("mainmenue2_incoming");
} if (b.contracts > 0) {
    showDiv("mainmenue3_incoming");
} if (b.forestry_unlock) {
    forestry_unlock = 1;
} if (b.levelnum) {
    $("levelnum").innerHTML = b.levelnum;
} currentuserlevel = b.levelnum; if (currentuserlevel >= 2) {
    showDiv("sub_friendlist");
}
else {
    hideDiv("sub_friendlist");
} if (!b.main_flyer) {
    main.statsFlyer(b.points, b.bar, b.coins);
} hideDiv("collectevent_link"); if (collectevent && collectevent.data) {
    if (collectevent.data.data && collectevent.data.data.points && collectevent.data.data.points > 0) {
        var h = (b.collectevent.data.points - collectevent.data.data.points);
        if (h > 0) {
            collectevent.flyer(h);
        }
    }
    collectevent.data = b.collectevent;
    if (collectevent.data.daily) {
        collectevent.daily(collectevent.data.daily);
    }
    setTimer("collectevent");
    showDiv("collectevent_link");
} if (deliveryevent && deliveryevent.data) {
    if (deliveryevent.data.data && deliveryevent.data.data.points && deliveryevent.data.data.points > 0) {
        var h = (b.deliveryevent.data.points - deliveryevent.data.data.points);
        if (h > 0) {
            deliveryevent.flyer(h);
        }
    }
    deliveryevent.data = b.deliveryevent;
} updatePlayerInfo(formatPrice(b.bar), b.coins, b.points, b.level); player_money = b.bar; var e = (b.points - b.levelcurrentlimit); var a = (b.levellimit - b.levelcurrentlimit); var d = Math.floor(e * 100 / a); if (d == 0) {
    d = 1;
} var c = (165 / 100); $("player_pointsbar_inner").style.width = ((d * c) + 10) + "px"; $("player_pointsbar_tt").innerHTML = t_level_status + "&nbsp;" + d + "%"; remainpts = parseInt(b.levellimit) - parseInt(b.points); gclr(); if (b.guildid) {
    player_guild = b.guildid;
} if (b.guildmemberstatus) {
    player_guildmemberstatus = b.guildmemberstatus;
} if (b.guildshort) {
    $("guild").innerHTML = "&nbsp;[" + b.guildshort + "]";
}
else {
    $("guild").innerHTML = "";
} hideDiv("cropbonus_symbol"); if (b.cropbonus) {
    showCropBonus(b.cropbonus);
} if (b.donkey) {
    donkey_isset = 1;
    showDonkey(b.donkey);
} farmdog_isset = 0; farmdog_harvest = 0; if (b.farmdog) {
    farmdog_isset = 1;
} if (b.farmdog_harvest) {
    farmdog_harvest = 1;
} if (!b.no_farmslide) {
    farm_move = 1;
    farmBuildPositions();
}
else {
    farm_move = 0;
} if (b.animalghosts) {
    ghost_visible = 1;
}
else {
    ghost_visible = 0;
} if (b.disable_autologout) {
    disable_autologout = 1;
}
else {
    disable_autologout = 0;
} hideDiv("carpentrybonus_symbol"); if (b.carpentry_bonus) {
    showCarpentryBonus(b.carpentry_bonus);
} if (b.carpentrybonus_data) {
    carpentry_data = b.carpentrybonus_data;
    if (carpentry_data.data.remain > 0) {
        gametimer.carpentrytimer = 1;
    }
} hideDiv("sub_premium_info"); hideDiv("sub_notepad"); if (b.premium) {
    premium = 1;
    showDiv("sub_premium_info");
    $("premium_endtime").innerHTML = b.premium_bis;
    showDiv("sub_notepad");
} hideDiv("reallocatebuilding_symbol"); reallocatebuilding_status = 0; if (b.reallocatebuilding) {
    if (currentuserlevel >= reallocatebuildinglevel) {
        if (farm > 0 && !city) {
            showDiv("reallocatebuilding_symbol");
        }
        else {
            hideDiv("reallocatebuilding_symbol");
        }
        reallocatebuilding_status = 1;
    }
} hideDiv("reallocateanimals_symbol"); reallocateanimals_status = 0; if (b.reallocateanimals) {
    if (currentuserlevel >= reallocatebuildinglevel) {
        if (farm > 0 && !city) {
            showDiv("reallocateanimals_symbol");
        }
        else {
            hideDiv("reallocateanimals_symbol");
        }
        reallocateanimals_status = 1;
    }
} user_points = b.points; user_bar = b.bar; user_coins = b.coins; user_premium_bis = b.premium_bis; paymentitem_remain = b.paymentitem_remain; if (b.tutorial) {
    tutorial = b.tutorial;
} if (tutorial > 0) {
    showDiv("blockmainnavi");
}
else {
    hideDiv("blockmainnavi");
} if (specialoffer && b.specialoffer && $("specialoffer_link")) {
    specialoffer.data = b.specialoffer;
    setTimer("specialoffer");
    hideDiv("specialoffer_link");
    if (b.specialoffer && b.specialoffer.active) {
        showDiv("specialoffer_link");
        if (b.specialoffer.today) {
            specialoffer.init(1);
        }
    }
} if (specialbonus && b.specialbonus) {
    specialbonus.data = b.specialbonus;
    setTimer("specialbonus");
} if (b.guildjob) {
    guildjob_quickview = b.guildjob;
    setTimeout(function () { guildJobQuickView(); }, 1500);
}
else {
    hideDiv("guildjob_quickview");
} if (b.giftevent && giftevent) {
    giftevent.data = b.giftevent;
    setTimer("giftevent");
} if (b.teaser) {
    teaser.data = b.teaser;
    teaser.build();
} if (b.loginevent) {
    loginevent.data = b.loginevent;
    setTimer("loginevent");
    if (loginevent.data.firstdailyvisit) {
        loginevent.build();
    }
} if (b.news) {
    news = b.news;
    currentnews = 1;
    showNews();
} updateMenuImages(b.mail, b.contracts, b.lng_mail, b.lng_con); Zeit.init(b.time); servertimetime = b.servertime; }
var Zeit = { Client: 0, Server: 0, Verschiebung: 0, UpdateInterval: null, SyncRequest: null, init: function (a) { this.Client = Math.round(new Date().getTime() / 1000); this.Server = a; this.Verschiebung = this.Client - this.Server; }, update: function () { Zeit.Server++; Zeit.Client++; } };
var ginfo_interval = null;
function ginfo(l, h, c, e, b, d) { clearInterval(ginfo_interval); ginfo_interval = null; document.getElementById("bubble_adtext").style.display = "none"; var a = ""; if (b == "z") {
    a += '<div style="position:absolute; top:10px; left:0px; width:200px;">';
    a += '  <font class="tnormal"><b>' + c + "</b></font><br>";
    a += '  <font class="tklein">' + lng_t_tt_zierwarnung + "</font><br>";
    a += "</div>";
}
else {
    if (b == "u") {
        a += '<div style="position:absolute; top:10px; left:0px; width:200px;">';
        a += '  <div class="tt' + h + '" style="float:left;margin-top:5px;margin-right:5px; border:2px solid #f00"></div>';
        a += '  <font class="tnormal"><b>' + c + "</b></font><br>";
        a += '  <font class="tklein">' + lng_t_tt_unkraut1 + "</font><br>";
        a += '  <font class="tklein">' + lng_t_tt_unkraut2 + "</font><br>";
        a += '  <font class="tklein">' + lng_t_tt_unkraut3 + "&nbsp;" + formatPrice(d) + "</font><br>";
        a += "</div>";
    }
    else {
        a += '<div style="position:absolute; top:10px; left:0px; width:200px;">';
        a += '  <div class="tt' + h + '" style="float:left;margin-top:5px;margin-right:5px;"></div>';
        a += '  <font class="tnormal"><b>' + c + "</b></font><br>";
        a += '  <font class="tklein">' + lng_t_tt_ertragfertig + "&nbsp;" + e + "</font>";
        if (produkt_ernte_bonus[h]) {
            a += '&nbsp;<span class="rack_cropbonus">+' + produkt_ernte_bonus[h] + "</span>";
        }
        a += "  <br>";
        a += '  <font class="tklein">' + lng_t_tt_remaining + '&nbsp;<span id="gtt_zeit">' + lng_t_tt_berechne + "</span></font><br>";
        a += "</div>";
    }
} g("bubble_infotext").innerHTML = a; if (b != "u") {
    calcTime(l, e);
    ginfo_interval = window.setInterval("calcTime(" + l + "," + e + ")", 1000);
} }
function calcTime(d, b) { kategorie = garten_kategorie[d]; if (Zeit.Server == 0) {
    g("gtt_zeit").innerHTML = lng_t_tt_berechne;
}
else {
    var c = (parseInt(garten_zeit[d]) + parseInt(Zeit.Verschiebung)) - parseInt(Zeit.Client);
    var a = b;
    if (c <= 0) {
        c = 0;
        if (interval != null) {
            clearInterval(interval);
        }
        if (kategorie != "z") {
            g("gtt_zeit").innerHTML = lng_t_fertig;
        }
    }
    else {
        a = 0;
        if (kategorie != "z") {
            g("gtt_zeit").innerHTML = formatTime(c);
        }
    }
} return c; }
function gclr() { document.getElementById("bubble_adtext").style.display = "block"; var a = ""; if (remainpts == 1) {
    var b = pts2nextlevel_1;
}
else {
    var b = pts2nextlevel;
} if (tutorial == 0) {
    if (currentuserlevel == highestuserlevel) {
        a += "<br>" + level_congratulations;
    }
    else {
        a += str_replace("%POINTS%", '<span style="font-weight:bold;" id="remainpoints">' + remainpts.format() + "</span>", b);
    }
}
else {
    a += introtutorial;
} g("bubble_infotext").innerHTML = a; clearInterval(ginfo_interval); ginfo_interval = null; zeit = null; }
function g(a) { return document.getElementById(a); }
Number.prototype.format = function (e, c, r) { if (!c) {
    c = set_komma;
} if (typeof r == "undefined") {
    r = set_tausender;
} if (!e) {
    e = 0;
} var d = (this < 0) ? "-" : ""; var s = Math.pow(10, e); var q = Math.round((Math.abs(this) * s)) / s; var h = q.toString().indexOf("."); if (h == -1) {
    h = q.toString().length;
} var n = q.toString().substring(h + 1); var a = q.toString().substring(0, h); var m = a.length; var l = 0; var b = ""; do {
    b = a.charAt(m) + b;
    if (l == 3 && m > 0) {
        b = r + b;
        l = 0;
    }
    l++;
} while (m--); s = s.toString().substring(1); n = (n + s).substring(0, e); if (n != "") {
    b = b + c + n;
} return d + b; };
var olympia = function () { this.data = {}; this.timeline_pos = 1; this.timeline_scroll_steps = [350, 700, 1050, 1400]; this.timeline_start_offset = 200; this.timeline_x = 0; this.energy = 0; this.interval = 0; this.maxWidth = 1800; };
olympia.prototype.action = function (a, b) { ajaxAction("main", a, b, olympia.response); };
olympia.prototype.response = function (b, a, c) { olympia.data = b; olympia.init(); };
olympia.prototype.buyBerries = function (a) { this.action("olympia_buy_berries", { coins: a }); };
olympia.prototype.hitchhiker = function () { this.action("olympia_hitchhiker"); };
olympia.prototype.conservation = function () { this.action("olympia_conservation"); };
olympia.prototype.entry = function (a) { this.action("olympia_entry", { amount: a }); };
olympia.prototype.init = function () { this.timeline_x = this.data.x; this.energy = this.data.energy; this.interval = this.data.interval; showDiv("olympia_transp"); showDiv("olympia_box"); setTimer("olympia"); this.scroll(); this.stars(); var a = 0; if (this.data.data.berries) {
    a = formatNumber(this.data.data.berries);
} $("olympia_berries").innerHTML = a; if (this.data.reward) {
    this.dialog("reward", this.data.reward);
} if (this.data.first) {
    this.help();
} };
olympia.prototype.checkEntry = function () { var c = 0; if (this.data.data.berries) {
    c = this.data.data.berries;
} var a = Math.ceil((100 - this.energy) / (100 / this.data.config.berries_full)); var b = { stockamount: c, rest: a, click: "olympia.entry()" }; checkEntryLine(b); };
olympia.prototype.dialog = function (l, c) { if (l == "reward") {
    var e = '<div style="margin-bottom:10px;">' + windmill_out + "</div>";
    for (var d = 0; d < c.length; d++) {
        if (c[d].powerup) {
            e += '<div style="margin-bottom:5px;">' + t_payment_pointsboost_info2.replace("%PERCENT%", windmillarray[c[d].powerup][5][3]) + "</div>";
        }
        if (c[d].points) {
            e += '<div style="margin-bottom:5px;">' + formatNumber(c[d].points) + "&nbsp;" + t_points + "</div>";
        }
        if (c[d].sheep) {
            e += '<div style="margin-bottom:5px;">' + str_replace("%NAME%", c[d].sheep, t_olympia_unlocked_sheep) + "</div>";
        }
    }
    globalcommitbox(t_olympia_stage_goal, e, "off");
} if (l == "feed") {
    var b = Math.ceil((100 - this.energy) / (100 / this.data.config.berries_full));
    var q = [10, 50, 100];
    var e = "";
    for (var d = 0; d < q.length; d++) {
        var a = (q[d] / (100 / this.data.config.berries_full));
        var m = str_replace("%PERCENT%", q[d], t_olympia_feed_select);
        m = str_replace("%AMOUNT%", a, m);
        var n = "";
        var h = "opacity:0.5;";
        if (this.data.data.berries >= a && a <= b) {
            n = "olympia.entry(" + q[d] + ")";
            h = "";
        }
        e += '<div class="button_new link" style="margin-bottom:10px; padding:5px; ' + h + '" onclick="' + n + '">' + m + "</div>";
    }
    globalcommitbox(t_olympia_feed_info, e, 0, 0, 1);
} if (l == "buy_berries") {
    var e = "";
    for (var d in this.data.config.buy_berries) {
        var m = str_replace("%COINS%", d, t_olympia_option3_desc);
        e += '<div class="coinsbutton_flex link" style="margin-bottom:10px;" onclick="olympia.dialog(\'buy_berries_commit\', ' + d + ')">' + str_replace("%AMOUNT%", this.data.config.buy_berries[d], m) + "</div>";
    }
    globalcommitbox(t_olympia_option3, e, 0, 0, 1);
} if (l == "buy_berries_commit") {
    var m = str_replace("%COINS%", c, t_olympia_option3_desc);
    var e = "<div>" + str_replace("%AMOUNT%", this.data.config.buy_berries[c], m) + "</div>";
    var n = "olympia.buyBerries(" + c + ")";
    globalcommitbox(t_olympia_option3, e, n);
} if (l == "hitchhiker") {
    var m = str_replace("%COINS%", this.data.config.hitchhiker_cost, t_olympia_option2_desc);
    var e = '<div style="margin-bottom:10px;">' + str_replace("%DISTANCE%", this.data.config.hitchhiker_distance, m) + "</div>";
    e += "<div>" + cityadcost + '<img src="' + imgpath + 'menu/coins.gif" style="width:12px; margin-right:3px;">' + this.data.config.hitchhiker_cost + "&nbsp;" + t_coins + "</div>";
    globalcommitbox(t_olympia_option2, e, "olympia.hitchhiker()");
} if (l == "conservation") {
    var m = str_replace("%TIME%", formatTime(this.data.config.conservation_duration), t_olympia_option1_desc);
    var e = '<div style="margin-bottom:10px;">' + str_replace("%COINS%", this.data.config.conservation_cost, m) + "</div>";
    e += "<div>" + cityadcost + '<img src="' + imgpath + 'menu/coins.gif" style="width:12px; margin-right:3px;">' + this.data.config.conservation_cost + "&nbsp;" + t_coins + "</div>";
    globalcommitbox(t_olympia_option1, e, "olympia.conservation()");
} if (l == "finder") {
    var e = '<div class="olympia_chocolate_berry"></div><div>' + c.amount + "x</div>";
    globalcommitbox(t_olympia_acai_berry, e, "off");
} };
olympia.prototype.scroll = function () { var a = 1; for (var b = 0; b < this.timeline_scroll_steps.length; b++) {
    if (this.timeline_x >= this.timeline_scroll_steps[b]) {
        a++;
    }
} this.timeline_pos = a; this.moveTimeline(0); };
olympia.prototype.stars = function () { for (var a in this.data.config.stages) {
    if (windmillarray[this.data.config.stages[a].powerup]) {
        $("olympia_stage_star" + a + "_tt").innerHTML = windmillarray[this.data.config.stages[a].powerup][5][3] + "%&nbsp;" + t_pointsboost_unit;
        $("olympia_stage_star" + a).onmouseover = new Function("showDiv('olympia_stage_star" + a + "_tt')");
        $("olympia_stage_star" + a).onmouseout = new Function("hideDiv('olympia_stage_star" + a + "_tt')");
    }
    if (a < (Math.floor(this.timeline_x / 100) + 1)) {
        $("olympia_stage_star" + a + "_img").removeClassName("olympia_stage_star_off").addClassName("olympia_stage_star_on");
        if (this.data.data.stages && this.data.data.stages[a]) {
            showDiv("olympia_stage_prize_ready" + a);
        }
    }
} };
olympia.prototype.timer = function () { this.data.conservation_remain--; this.data.remain--; if (this.data.remain <= 0) {
    this.close;
} $("olympia_eventtime").innerHTML = t_event_resttime + ": " + formatTime(this.data.remain); this.currentEnergy(); this.timeline_x += this.data.dps * (this.energy / 100); var a = Math.round(this.timeline_x + this.timeline_start_offset); if (a > this.maxWidth) {
    a = this.maxWidth;
} if (this.energy < 100 && a < this.maxWidth) {
    showDiv("olympia_sheep_feed");
    $("olympia_sheep_energy").onclick = new Function("olympia.dialog('feed')");
}
else {
    hideDiv("olympia_sheep_feed");
    $("olympia_sheep_energy").onclick = new Function("");
} $("olympia_sheep").style.left = a + "px"; if (this.energy > 50) {
    $("olympia_sheep_energy").removeClassName("low").removeClassName("empty").addClassName("high");
    $("olympia_sheep_feed").removeClassName("low").removeClassName("empty").addClassName("high");
    $("olympia_sheep").className = "olympia_sheep1";
}
else {
    if (this.energy > 0) {
        $("olympia_sheep_energy").removeClassName("high").removeClassName("empty").addClassName("low");
        $("olympia_sheep_feed").removeClassName("high").removeClassName("empty").addClassName("low");
        $("olympia_sheep").className = "olympia_sheep2";
    }
    else {
        $("olympia_sheep_energy").removeClassName("low").removeClassName("high").addClassName("empty");
        $("olympia_sheep_feed").removeClassName("low").removeClassName("high").addClassName("empty");
        $("olympia_sheep").className = "olympia_sheep3";
    }
} if (a == this.maxWidth) {
    $("olympia_sheep").className = "olympia_sheep_hooray";
    hideDiv("olympia_buy_hitchhiker");
    hideDiv("olympia_conservation");
    hideDiv("olympia_buy_berries");
    hideDiv("olympia_sheep_energy");
    showDiv("olympia_victory");
} var c = Math.round(((this.data.dps * 3600) * (this.energy / 100)) * 10) / 10; $("olympia_timeline_pointer_percent").innerHTML = c + "&nbsp;" + t_speed_currency; $("olympia_timeline_pointer_distance").innerHTML = (a - this.timeline_start_offset) + "&nbsp;" + t_distance_currency; $("olympia_timeline_fill").style.width = a + "px"; $("olympia_timeline_pointer").style.left = a + "px"; $("olympia_sheep_energy_inner").style.height = ((100 / 100) * this.energy) + "px"; $("olympia_sheep_energy_percent").innerHTML = this.energy + "%"; if (in_array(Math.round(this.timeline_x), this.timeline_scroll_steps)) {
    this.scroll();
} if (a % 100) {
    this.stars();
} if (Math.round(this.timeline_x) % 100 == 0) {
    var b = Math.floor(Math.round(this.timeline_x) / 100);
    if (b > 0 && !(this.data.data.stages && this.data.data.stages[b])) {
        this.action("olympia_init");
    }
} if (this.data.conservation_remain > 0) {
    showDiv("olympia_conservation_timer");
    hideDiv("olympia_conservation_button");
    showDiv("olympia_conservation_ready");
    $("olympia_conservation_timer").innerHTML = formatTime(this.data.conservation_remain);
}
else {
    hideDiv("olympia_conservation_timer");
    showDiv("olympia_conservation_button");
    hideDiv("olympia_conservation_ready");
} };
olympia.prototype.currentEnergy = function () { var a = this.data.config.energy_reduction_duration; if (this.data.conservation_remain > 0) {
    a = (a * 2);
} if (parseInt(this.interval) >= parseInt(a)) {
    this.interval = 1;
    this.energy = Math.max(this.energy - 10, 0);
}
else {
    this.interval++;
} };
olympia.prototype.moveTimeline = function (a) { this.timeline_pos += parseInt(a); if (this.timeline_pos > 5) {
    this.timeline_pos = 5;
} if (this.timeline_pos < 1) {
    this.timeline_pos = 1;
} $("olympia_timeline").className = "olympia_timeline_pos" + this.timeline_pos; hideDiv("olympia_navi_left"); hideDiv("olympia_navi_right"); if (this.timeline_pos > 1) {
    showDiv("olympia_navi_left");
} if (this.timeline_pos < 5) {
    showDiv("olympia_navi_right");
} };
olympia.prototype.finder = function (a) { this.dialog("finder", { amount: a }); };
olympia.prototype.help = function () { showDiv("olympia_help_transp"); showDiv("olympia_help"); };
olympia.prototype.openPan = function () { showMain(); initFarmhouse(); showPan(); pan_site = 18; buildSheeps("apresski"); };
olympia.prototype.close = function () { hideDiv("olympia_transp"); hideDiv("olympia_box"); clearTimer("olympia"); };
var paymentitemcollection = function () { this.data = {}; this.type = ""; this.requestBlocker = 0; };
paymentitemcollection.prototype.bonus = function () { paymentitemcollection.action("paymentitemcollection_bonus", { type: this.type }); };
paymentitemcollection.prototype.buyPackage = function () { paymentitemcollection.action("paymentitemcollection_buypackage", { type: this.type }); };
paymentitemcollection.prototype.openPackage = function () { paymentitemcollection.action("paymentitemcollection_openpackage", { type: this.type }); };
paymentitemcollection.prototype.shredder = function (a) { paymentitemcollection.action("paymentitemcollection_shredder", { type: this.type, id: a }); };
paymentitemcollection.prototype.action = function (a, b) { if (this.requestBlocker == 1) {
    return 1;
} this.requestBlocker = 1; ajaxAction("farm", a, b, paymentitemcollection.response); };
paymentitemcollection.prototype.response = function (c, b, d) { paymentitemcollection.requestBlocker = 0; paymentitemcollection.data = c; if (c.found) {
    var a = '<div id="paymentitem_collection_preview">';
    a += '  <div class="transp"></div>';
    a += '  <div id="paymentitem_collection_preview_box" class="package"></div>';
    a += '  <div class="item ' + paymentitemcollection.type + ' static preview link">';
    a += '    <div id="paymentitem_collection_preview_img" class="img item' + c.found + ' static off"></div>';
    a += "  </div>";
    a += "</div>";
    $("paymentitem_collection").insert(a);
    setTimeout(function () { $("paymentitem_collection_preview_box").addClassName(paymentitemcollection.type).addClassName("unbox"); }, 500);
    setTimeout(function () { $("paymentitem_collection_preview_img").removeClassName("off").addClassName("on"); }, 1750);
    setTimeout(function () { $("paymentitem_collection_preview_box").removeClassName(paymentitemcollection.type).removeClassName("unbox"); }, 2500);
    setTimeout(function () { $("paymentitem_collection_preview_img").onclick = new Function("paymentitemcollection.closePreview()"); }, 2500);
}
else {
    paymentitemcollection.update();
} if (c.transfer) {
    if (c.transfer.points) {
        globalerrorbox(formatNumber(c.transfer.points) + "&nbsp;" + t_get_points);
    }
} };
paymentitemcollection.prototype.closePreview = function () { $("paymentitem_collection_preview").remove(); paymentitemcollection.update(); if (this.data.doubleitem) {
    globalerrorbox(t_paymentitemcollection_double_item);
} };
paymentitemcollection.prototype.update = function (e) { if (!e) {
    e = this.type;
} this.type = e; showDiv("paymentitem_collection"); var h = 0; if (this.data.packages && this.data.packages[e]) {
    h = formatNumber(this.data.packages[e]);
} var l = 0; if (this.data.shreddered) {
    l = this.data.shreddered;
} var d = 0; if (this.data.config && this.data.config.collection && this.data.config.collection[e]) {
    var d = 1;
    for (var c in this.data.config.collection[e]) {
        if (!this.data.collections || !this.data.collections[e] || !this.data.collections[e][c]) {
            d = 0;
        }
    }
} var a = 1; if (this.data.lastbonus && this.data.lastbonus[e] && this.data.lastbonus[e] >= this.data.today) {
    a = 0;
} var b = ""; b += '<div class="header">'; b += '  <div class="slot help helpbutton_blue link" onclick="paymentitemcollection.help()"></div>'; b += '  <div class="slot packages ' + e + ' button_new link" onclick="paymentitemcollection.openPackageCommit()">'; b += "    <div>" + t_open + "</div>"; b += '    <div class="amount">' + h + "</div>"; b += "  </div>"; b += '  <div class="slot shreddered link">' + formatNumber(l) + "</div>"; b += '<div class="slot buy ' + e + ' button_new link" onclick="paymentitemcollection.buyPackageCommit()">' + market_buy + "</div>"; if (a == 1 && d == 1) {
    b += '<div class="slot bonus button_new link" onclick="paymentitemcollection.bonus()">' + t_paymentitemcollection_bonus + "</div>";
} b += '  <div class="clear"></div>'; b += "</div>"; b += '  <div id="paymentitem_collection_timer" class="timer"></div>'; b += '<div class="items">'; for (var c = 1; c <= 12; c++) {
    b += '<div id="paymentitem_collection_item' + c + '" class="' + this.type + ' item">';
    b += '  <div class="img item' + c + '"></div>';
    b += "</div>";
} b += "</div>"; $("paymentitem_collection").addClassName(e).innerHTML = b; for (var c = 1; c <= 12; c++) {
    if (!this.data.collections || !this.data.collections[e] || !this.data.collections[e][c]) {
        continue;
    }
    var b = '<div id="paymentitem_collection_item' + c + '_img" class="img item' + c + '"></div>';
    b += '<div class="amount link ' + e + '" onclick="paymentitemcollection.shredderCommit(' + c + ')" onmouseover="paymentitemcollection.shredderStatus(' + c + ', 1)" onmouseout="paymentitemcollection.shredderStatus(' + c + ', 0)">';
    b += '  <div id="paymentitem_collection_item' + c + '_amount">' + this.data.collections[e][c] + "</div>";
    b += '  <div id="paymentitem_collection_item' + c + '_amount_tt" class="ttbox">' + t_paymentitemcollection_shredder_body.replace("%COUNT%", formatNumber(this.data.config.collection[e][c].shredder)) + "</div>";
    b += "</div>";
    b += '<div id="paymentitem_collection_item' + c + '_tt" class="ttbox">' + this.data.config.collection[this.type][c].name + "</div>";
    $("paymentitem_collection_item" + c).innerHTML = b;
    $("paymentitem_collection_item" + c).addClassName("static");
    $("paymentitem_collection_item" + c + "_img").addClassName("static");
    $("paymentitem_collection_item" + c).onmouseover = new Function("paymentitemcollection.showAnimation(" + c + ", 1)");
    $("paymentitem_collection_item" + c).onmouseout = new Function("paymentitemcollection.showAnimation(" + c + ", 0)");
} this.timerUpdate(); };
paymentitemcollection.prototype.shredderStatus = function (a, b) { if (b == 1) {
    hideDiv("paymentitem_collection_item" + a + "_amount");
    showDiv("paymentitem_collection_item" + a + "_amount_tt");
}
else {
    showDiv("paymentitem_collection_item" + a + "_amount");
    hideDiv("paymentitem_collection_item" + a + "_amount_tt");
} };
paymentitemcollection.prototype.showAnimation = function (a, b) { if (b == 1) {
    showDiv("paymentitem_collection_item" + a + "_tt");
    $("paymentitem_collection_item" + a + "_img").addClassName("hover");
}
else {
    hideDiv("paymentitem_collection_item" + a + "_tt");
    $("paymentitem_collection_item" + a + "_img").removeClassName("hover");
} };
paymentitemcollection.prototype.openPackageCommit = function () { if (this.data.packages && this.data.packages[this.type]) {
    this.openPackage();
} };
paymentitemcollection.prototype.buyPackageCommit = function () { if (!this.data.config) {
    return 0;
} var b = 0; if (this.data.shreddered) {
    b = this.data.shreddered;
} var a = t_paymentitemcollection_buy_body.replace("%COUNT%", formatNumber(this.data.config.blindbox_cost)); var c = "paymentitemcollection.buyPackage()"; if (this.data.config.blindbox_cost > b) {
    globalcommitbox(t_paymentitemcollection_buy_head, '<div class="important">' + a + "</div>", 0, 0, 1);
}
else {
    globalcommitbox(t_paymentitemcollection_buy_head, a, c);
} };
paymentitemcollection.prototype.shredderCommit = function (a) { var b = "paymentitemcollection.shredder(" + a + ")"; globalcommitbox(t_paymentitemcollection_shredder_head, t_paymentitemcollection_shredder_body.replace("%COUNT%", formatNumber(this.data.config.collection[this.type][a].shredder)), b); };
paymentitemcollection.prototype.openPan = function (a) { showMain(); messagesClose(); initFarmhouse(); showPan(1); setTimeout(function () { pan_site = a; panBuildCollection(a); }, 800); };
paymentitemcollection.prototype.help = function () { var a = '<div class="paymentitemcollection_help">'; a += "  <ul>"; a += "    <li>" + t_paymentitemcollection_help1 + "</li>"; a += "    <li>" + t_paymentitemcollection_help2 + "</li>"; a += "    <li>" + t_paymentitemcollection_help3 + "</li>"; a += "    <li>" + t_paymentitemcollection_help4 + "</li>"; a += "    <li>" + t_paymentitemcollection_help5 + "</li>"; a += "  </ul>"; a += "</div>"; globalcommitbox(t_paymentitemcollection_name, a, 0, 0, 1); };
paymentitemcollection.prototype.timer = function () { if (this.data && this.data.remain) {
    for (var a in this.data.remain) {
        this.data.remain[a]--;
    }
    paymentitemcollection.timerUpdate();
} };
paymentitemcollection.prototype.timerUpdate = function () { if (this.data && this.data.remain) {
    for (var a in this.data.remain) {
        if (a == this.type && $("paymentitem_collection_timer")) {
            showDiv("paymentitem_collection_timer");
            $("paymentitem_collection_timer").innerHTML = t_paymentitemcollection_event_end;
            if (this.data.remain[a] > 0) {
                $("paymentitem_collection_timer").innerHTML = t_cropaction_resttime + formatTime(this.data.remain[a]);
                showDiv("paymentitem_collection_timer");
            }
        }
    }
} };
var pets = function () { this.data = {}; this.needs = ["food", "toy", "plushy"]; this.page = 1; this.rarity = 1; this.happiness_reduction = {}; this.production_slot = 0; this.production_selection_page = 1; this.production_selection_sort = ""; this.need_selection_page = 1; this.need_selection_slot = 0; this.care_need = ""; this.care_set = {}; this.stats_cache = {}; this.stats_cache_delay = {}; this.stats_select = "points"; this.cardsCount = 0; this.cardsFlipped = 0; this.cardsFlying = {}; };
pets.prototype.init = function () { pets.action("pets_init"); };
pets.prototype.finish = function () { pets.action("pets_finish_breed"); };
pets.prototype.partsBuyFire = function (b, a) { pets.action("pets_buy_parts", { id: b, amount: a }); };
pets.prototype.startProduction = function (a) { pets.action("pets_start_production", { slot: pets.production_slot, pid: a }); };
pets.prototype.speedupProduction = function (b, a) { pets.action("pets_speedup_production", { slot: b, coins: a }); };
pets.prototype.harvestProduction = function (b, a) { pets.action("pets_harvest_production", { slot: b, position: a }); };
pets.prototype.buyProductionSlot = function (a) { pets.action("pets_buy_production_slot", { slot: a }); };
pets.prototype.addLevel = function () { pets.action("pets_add_level", { amount: $("pets_dialog_leveladd_insert").value }); };
pets.prototype.buyAddLevel = function () { pets.action("pets_buy_add_level"); };
pets.prototype.startBreed = function (a) { pets.action("pets_start_breed", { id: a }); };
pets.prototype.care = function () { pets.action("pets_care", { set: pets.care_set[1] + "," + pets.care_set[2] + "," + pets.care_set[3] }); };
pets.prototype.openPack = function (a) { pets.action("pets_open_pack", { type: a }); };
pets.prototype.questEntry = function (a) { pets.action("pets_quest_entry", { pid: a, amount: parseInt($("dialog_entryline_number").value) }); };
pets.prototype.completeAnimal = function (a) { pets.action("pets_complete_animal", { animal: a }); };
pets.prototype.buyPharmacist = function () { pets.action("pets_buypharmacist"); };
pets.prototype.rememberPharmacist = function () { pets.action("pets_rememberpharmacist"); };
pets.prototype.stats = function () { if ($("pets_stats_select")) {
    pets.stats_select = $("pets_stats_select").value;
} if (pets.stats_cache_delay[pets.stats_select] <= 0 || !pets.stats_cache[this.stats_select]) {
    pets.action("pets_stats", { type: pets.stats_select });
}
else {
    pets.showStats(pets.stats_select);
} };
pets.prototype.action = function (a, b) { ajaxAction("farm", a, b, pets.response); };
pets.prototype.response = function (b, a, c) { this.care_set = {}; if (a == "pets_speedup_production") {
    global_speedup_block = 0;
} if (in_array(a, ["pets_buy_parts"])) {
    pets.partsBuy();
} if (in_array(a, ["pets_init", "pets_add_level", "pets_buy_add_level", "pets_start_breed", "pets_finish_breed", "pets_care"])) {
    pets.build();
} if (in_array(a, ["pets_start_production", "pets_speedup_production", "pets_harvest_production", "pets_buypharmacist"])) {
    pets.buildProductionSlots();
} if (in_array(a, ["pets_quest_entry"])) {
    pets.showQuest();
} if (in_array(a, ["pets_buy_parts", "pets_harvest_production"])) {
    pets.updateGeneral();
} if (in_array(a, ["pets_complete_animal"])) {
    pets.parts();
} if (b.add) {
    pets.surprise(b.add);
} if (b.reward) {
    pets.reward(b.reward, 1);
} if (b.stats) {
    pets.stats_cache_delay[pets.stats_select] = 30;
    if (!pets.stats_cache[pets.stats_select]) {
        pets.stats_cache[pets.stats_select] = {};
    }
    pets.stats_cache[pets.stats_select] = b.stats;
    pets.showStats();
} };
pets.prototype.build = function () { var b = '<div id="pets" class="move1">'; b += '  <div id="pets_pet" class="pet">'; b += '    <div id="pets_pet_tt" class="ttbox"></div>'; b += '    <div id="pets_pet_start" class="start link" onclick="pets.startSelection()" onmouseover="showDiv(\'pets_pet_start_tt\')" onmouseout="hideDiv(\'pets_pet_start_tt\')">'; b += '      <div class="bottle"></div>'; b += '      <div id="pets_pet_start_tt" class="ttbox">' + t_pets_breed_doit + "</div>"; b += "    </div>"; b += '    <div id="pets_pet_finish" class="finish link" onclick="pets.finish()" onmouseover="showDiv(\'pets_pet_finish_tt\')" onmouseout="hideDiv(\'pets_pet_finish_tt\')">'; b += '      <div id="pets_pet_finish_tt" class="ttbox">' + t_pets_breed_finish + "</div>"; b += "    </div>"; b += "  </div>"; b += '  <div id="pets_pet_needs" class="needs">'; for (var a = 0; a < this.needs.length; a++) {
    b += '<div id="pets_need_' + this.needs[a] + '" class="item link" onclick="pets.care_set={}; pets.needSlot(\'' + this.needs[a] + "')\">";
    b += '  <div class="img ' + this.needs[a] + '"></div>';
    b += '  <div id="pets_need_' + this.needs[a] + '_timer" class="timer">';
    b += '    <div id="pets_need_' + this.needs[a] + '_timer_inner" class="inner"></div>';
    b += '    <div id="pets_need_' + this.needs[a] + '_timer_amount" class="amount"></div>';
    b += "  </div>";
    b += '  <div id="pets_need_' + this.needs[a] + '_timer_reduction" class="timer_reduction" onmouseover="showDiv(\'pets_need_' + this.needs[a] + "_timer_reduction_tt')\" onmouseout=\"hideDiv('pets_need_" + this.needs[a] + "_timer_reduction_tt')\">";
    b += '    <div id="pets_need_' + this.needs[a] + '_timer_reduction_inner" class="inner"></div>';
    b += '    <div id="pets_need_' + this.needs[a] + '_timer_reduction_amount" class="amount"></div>';
    b += '    <div id="pets_need_' + this.needs[a] + '_timer_reduction_tt" class="ttbox">' + str_replace("%POINTS%", this.data.config.reduction_amount, t_pets_need_happy_reduction) + "</div>";
    b += "  </div>";
    b += "</div>";
} b += "  </div>"; b += '  <div id="pets_happiness" class="happiness" onmouseover="showDiv(\'pets_happiness_tt\')" onmouseout="hideDiv(\'pets_happiness_tt\')">'; b += '  	 <div id="pets_happiness_tt" class="ttbox"></div>'; b += '    <div id="pets_happiness_percent" class="percent"></div>'; b += '    <div class="inner"><div id="pets_happiness_inner"></div></div>'; b += "  </div>"; b += '  <div id="pets_mover" class="right mover link" onclick="pets.move()"></div>'; b += '  <div class="parts link" onclick="pets.parts()" onmouseover="showDiv(\'pets_inner_parts_link_tt\')" onmouseout="hideDiv(\'pets_inner_parts_link_tt\')">'; b += '    <div id="pets_inner_parts_link_tt" class="ttbox">' + t_pets_parts_link + "</div>"; b += "  </div>"; b += '  <div id="pets_pharmacist" class="link" onmouseover="showDiv(\'pets_pharmacist_tt\')" onmouseout="hideDiv(\'pets_pharmacist_tt\')">'; b += '    <div id="pets_pharmacist_timer"></div>'; b += '    <div id="pets_pharmacist_tt" class="ttbox"><div>' + t_pharmacist_pets_buy_head + '</div><div class="bonusinfo">' + t_pharmacist_pets_info + "</div></div>"; b += '    <div class="pets_pharmacist"></div>'; b += '    <div id="pets_pharmacist_unlocked" class="unlocked"></div>'; b += "  </div>"; b += '  <div id="pets_slots"></div>'; b += "</div>"; b += '<div id="pets_timer_box" class="pets_timer"><div id="pets_timer" class="inner"></div><div id="pets_timer_text" class="time"></div></div>'; b += htmlLevelBar("pets"); b += htmlCountBar("pets"); b += '  <div id="pets_stats_link" class="link" onclick="pets.stats()"></div>'; b += '  <div id="pets_reward_button" class="link" onclick="pets.reward()"></div>'; b += '  <div id="pets_quests_link" class="link" onclick="pets.showQuest()"></div>'; b += '<div class="help helpbutton_blue link" onclick="openFarmersMarketHowTo(\'pets\', 1);"></div>'; b += '<div class="mini_close link" onclick="pets.close()"></div>'; $("farmersmarket_pos4_inner").innerHTML = b; showDiv("transp"); showDiv("farmersmarket_pos4_inner"); this.updateGeneral(); this.update(); this.buildProductionSlots(); this.production_slot = 0; this.production_selection_page = 1; this.production_selection_sort = ""; };
pets.prototype.updateGeneral = function () { $("pets_levelbar_number").innerHTML = this.data.data.level; $("pets_countbar_inner").innerHTML = '<div class="breedpoints_icon"></div><div>' + this.data.data.count + "</div><br>"; $("pets_levelbar_inner").style.width = this.data.data.level_percent + "%"; if (!this.data.data.level_rest) {
    var b = t_reached_maxlevel;
    hideDiv("pets_levelbar_plus");
}
else {
    var b = str_replace("%AMOUNT%", this.data.data.level_rest, t_pets_level_line);
    $("pets_levelbar_plus").onclick = new Function("pets.addLevelCommit()");
    $("pets_levelbar_plus_tt").innerHTML = t_pets_leveladd_tt;
} $("pets_levelbar_tt").innerHTML = b; $("pets_countbar_plus_tt").innerHTML = t_pets_levelitem_buy; $("pets_countbar_plus").onclick = new Function("pets.buyAddLevelCommit()"); this.happiness_reduction = {}; if (this.data.breed && this.data.breed.care_remains) {
    for (var a = 0; a < this.needs.length; a++) {
        if (!this.data.breed.care_remains[this.needs[a]] || this.data.breed.care_remains[this.needs[a]] <= 0) {
            if (this.data.breed.happiness_interval && this.data.breed.happiness_interval[this.needs[a]]) {
                this.happiness_reduction[this.needs[a]] = this.data.breed.happiness_interval[this.needs[a]];
            }
        }
    }
} };
pets.prototype.addLevelCommit = function () { var b = t_pets_dialog_leveladd_head; var a = htmlLevelAddDialog("pets"); globalcommitbox(b, a, 0, 0, 1); };
pets.prototype.addLevelCheck = function () { var a = $("pets_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > pets.data.data.count) {
    a = pets.data.data.count;
} $("pets_dialog_leveladd_insert").value = a; };
pets.prototype.buyAddLevelCommit = function (c) { var d = t_pets_levelitem_buy; var b = str_replace("%COINS%", pets.data.data.exchangecoins, t_pets_levelitem_buy_dialog); b = str_replace("%AMOUNT%", (pets.data.data.exchangeamount), b); if (!c) {
    var a = '<div class="link coinsbutton_flex" onclick="pets.buyAddLevelCommit(1)">' + b + "</div>";
    globalcommitbox(d, a, 0, 0, 1);
}
else {
    var a = b;
    var e = "pets.buyAddLevel()";
    globalcommitbox(d, a, e);
} };
pets.prototype.update = function () { if (this.data.production) {
    var q = {};
    var a = 99999999;
    for (var n in this.data.production) {
        for (var e in this.data.production[n]) {
            if (this.data.production[n][e].remain < a) {
                a = this.data.production[n][e].remain;
                q = { pid: this.data.production[n][e].pid, slot: n, position: e };
            }
        }
    }
    if (q.pid) {
        var l = '<div class="kp' + q.pid + '" style="float:left; margin-right:5px;"></div>';
        $("farmersmarket_pos4_progress").removeClassName("farmersmarket_pos4_progress_ready").addClassName("farmersmarket_pos4_progress_active");
        if (this.data.production[q.slot][q.position].remain > 0) {
            l += '<div style="float:left;">' + formatTime(this.data.production[q.slot][q.position].remain) + "</div>";
        }
        else {
            l += statusProductionComplete;
            $("farmersmarket_pos4_progress").removeClassName("farmersmarket_pos4_progress_active").addClassName("farmersmarket_pos4_progress_ready");
            found2 = 0;
            for (var c = 0; c < farm_checker.length; c++) {
                if (farm_checker[c].farm == 99 && farm_checker[c].position == 4) {
                    found2++;
                }
            }
            if (!found2) {
                var d = { pid: q.pid, farm: 99, position: 4 };
                farm_checker.push(d);
            }
        }
        $("farmersmarket_pos4_timer").innerHTML = l + '<div class="clear"></div>';
    }
    else {
        $("farmersmarket_pos4_timer").innerHTML = "";
        hideDiv("farmersmarket_pos4_progress");
    }
} if ($("pets")) {
    hideDiv("pets_happiness");
    hideDiv("pets_pet_needs");
    if (this.data.breed) {
        $("pets_pet").className = "pet pets_pet" + this.data.breed.animal;
        if (this.data.breed.remain > 0) {
            this.breed();
        }
        else {
            this.finishBreed();
        }
        if (this.data.breed.care_remains) {
            for (var c = 0; c < this.needs.length; c++) {
                if (this.data.breed.care_remains[this.needs[c]] > 0) {
                    $("pets_need_" + this.needs[c]).addClassName("block");
                    showDiv("pets_need_" + this.needs[c] + "_timer");
                    $("pets_need_" + this.needs[c] + "_timer_amount").innerHTML = formatTime(this.data.breed.care_remains[this.needs[c]]);
                    var h = 0;
                    for (var b in this.data.breed.care) {
                        if (this.data.breed.care[b].type == this.needs[c]) {
                            h = ((this.data.breed.care_remains[this.needs[c]] * 100) / this.data.breed.care[b].duration);
                        }
                    }
                    $("pets_need_" + this.needs[c] + "_timer_inner").style.width = Math.max(h, 0) + "%";
                }
                else {
                    hideDiv("pets_need_" + this.needs[c] + "_timer");
                    $("pets_need_" + this.needs[c]).removeClassName("block");
                }
            }
        }
        this.calcHappiness();
    }
    else {
        showDiv("pets_pet_start");
    }
    for (var n = 1; n <= 4; n++) {
        var m = this.getCurrentProductionPosition(n);
        pets.updateProductionSlot(n, m);
    }
    if (this.data.quest && !this.data.quest.end) {
        if (this.data.quest.remain > 0) {
            showDiv("pets_quest_timer");
            hideDiv("pets_quest_data");
            if ($("pets_quest_timer")) {
                $("pets_quest_timer").innerHTML = formatTime(this.data.quest.remain);
            }
        }
        else {
            hideDiv("pets_quest_timer");
            showDiv("pets_quest_data");
        }
    }
} };
pets.prototype.timer = function () { if (this.data.data) {
    if (this.data.breed) {
        this.data.breed.remain--;
        if (this.data.breed.care_remains) {
            for (var h = 0; h < this.needs.length; h++) {
                if (this.data.breed.care_remains[this.needs[h]]) {
                    this.data.breed.care_remains[this.needs[h]]--;
                    if (this.data.breed.care_remains[this.needs[h]] == 1) {
                        this.happiness_reduction[this.needs[h]] = 1;
                    }
                }
            }
        }
    }
    if (this.data.data.pets_queue_active && this.data.data.queue_remain) {
        this.data.data.queue_remain--;
        if ($("pets_pharmacist")) {
            showDiv("pets_pharmacist");
            var a = "pets.buyPharmacistCommit()";
            if (this.data.data.queue_remain > 0) {
                $("pets_pharmacist_timer").innerHTML = formatTime(this.data.data.queue_remain);
                showDiv("pets_pharmacist_timer");
                hideDiv("pets_pharmacist_unlocked");
                a = "";
            }
            else {
                hideDiv("pets_pharmacist_timer");
                showDiv("pets_pharmacist_unlocked");
            }
            var d = 0;
            for (var e = 1; e <= 4; e++) {
                var m = 0;
                var l = 0;
                for (var b = 1; b <= 3; b++) {
                    if (this.data.production[e] && this.data.production[e][b]) {
                        l++;
                    }
                }
                if (this.data.data.queue_remain <= 0 && (!l || l <= 1)) {
                    hideDiv("pets_pharmacist_slots" + e);
                }
                else {
                    d++;
                    showDiv("pets_pharmacist_slots" + e);
                }
                for (var b = 1; b <= 3; b++) {
                    if (this.data.production[e] && this.data.production[e][b]) {
                        var s = this.getCurrentProductionPos(e);
                        m += parseInt(this.data.production[e][b].duration);
                        var c = "harvest";
                        t = "pets.harvestProduction(" + e + ", " + b + ")";
                        if (this.data.production[e]["gone"] < m) {
                            c = "next";
                            var t = "";
                        }
                        if (s == b && this.data.production[e]["gone"] < m) {
                            c = "running";
                            var t = "";
                        }
                        $("pets_pharmacist_slot_img" + e + "_" + b).className = "pets_pharmacist_slot_img tt" + this.data.production[e][b].pid;
                        $("pets_pharmacist_slot_status" + e + "_" + b).className = "pets_pharmacist_slot_status " + c;
                        var n = produkt_name[this.data.production[e][b].pid];
                    }
                    else {
                        if (this.data.data.queue_remain > 0) {
                            var t = "pets.productionSelection(" + e + ")";
                            var n = t_pharmacist_free_slot;
                        }
                        else {
                            var t = "";
                            var n = t_pharmacist_pets_free_slot_block;
                        }
                    }
                    $("pets_pharmacist_slot_tt" + e + "_" + b).innerHTML = n;
                    $("pets_pharmacist_slot" + e + "_" + b).onclick = new Function(t);
                }
            }
            if (d > 0) {
                $("pets_slots").className = "pets_production_slots_spacer";
                for (var h = 1; h <= 4; h++) {
                    $("pets_productionslot" + h).className = "slot pets_production_slot_spacer";
                }
            }
            else {
                $("pets_slots").className = "pets_production_slots_normal";
            }
            $("pets_pharmacist").onclick = new Function(a);
        }
    }
    for (var r = 1; r <= 4; r++) {
        var q = this.getCurrentProductionPosition(r);
        if (this.data.production[r]) {
            this.data.production[r]["gone"]++;
            if (this.data.production[r][q]) {
                this.data.production[r][q].remain--;
            }
        }
        if (this.data.data.slots && this.data.data.slots[r] && this.data.data.slots[r].rent_remain) {
            this.data.data.slots[r].rent_remain--;
            if (!this.data.data.slots[r].rent_remain) {
                this.data.data.slots[r].rent_remain--;
            }
        }
    }
    if (this.data.quest && this.data.quest.remain) {
        this.data.quest.remain--;
    }
    for (var h in this.stats_cache_delay) {
        this.stats_cache_delay[h]--;
    }
    this.update();
} };
pets.prototype.buyPharmacistCommit = function (h) { if (h == 1) {
    var c = t_pharmacist_pets_buy_head2;
}
else {
    var c = t_pharmacist_pets_buy_head;
} var e = t_pharmacist_pets_buy_body.replace("%TIME%", formatTime(this.data.config.queue_duration)); var a = '<div style="margin-bottom:10px;">' + t_pharmacist_pets_info + "</div><div>" + e.replace("%COINS%", this.data.config.queue_coins) + "</div>"; var d = "pets.buyPharmacist()"; var b = 0; if (!this.data.data.pharmacist_remember_box) {
    b = "pets.rememberPharmacist(); hideDiv('globaltransp'); hideDiv('globalbox')";
} globalcommitbox(c, a, d, b); };
pets.prototype.getCurrentProductionPos = function (d) { var b = 0; if (this.data.production[d]) {
    if (this.data.production[d]["gone"] >= this.data.production[d]["duration"]) {
        for (var a = 1; a <= 3; a++) {
            if (this.data.production[d][a]) {
                b = a;
            }
        }
    }
    else {
        var c = 0;
        for (var a = 1; a <= 3; a++) {
            if (this.data.production[d][a]) {
                c += parseInt(this.data.production[d][a].duration);
                if (c > this.data.production[d]["gone"]) {
                    b = a;
                    break;
                }
            }
        }
    }
} return b; };
pets.prototype.breed = function () { var b = '<div class="intro">' + t_pets_fav_list + "</div>"; for (var a = 0; a < this.needs.length; a++) {
    b += '<div class="item tt' + this.data.breed["fav_" + this.needs[a]] + '"></div>';
} b += '<div class="clear"></div>'; b += '<div class="bonusinfo">' + str_replace("%PERCENT%", (this.data.config.fav_bonus * 100), t_pets_fav_info) + "</div>"; $("pets_pet_tt").innerHTML = b; $("pets_pet").onmouseover = new Function("showDiv('pets_pet_tt')"); $("pets_pet").onmouseout = new Function("hideDiv('pets_pet_tt')"); showDiv("pets_happiness"); showDiv("pets_pet_needs"); showDiv("pets_timer_box"); $("pets_timer").style.width = 100 - ((this.data.breed.remain * 100) / this.data.config.duration) + "%"; $("pets_timer_text").innerHTML = str_replace("%TIME%", formatTime(this.data.breed.remain), t_pets_breed_resttime); };
pets.prototype.calcHappiness = function () { if (this.data.breed) {
    for (var c = 0; c < this.needs.length; c++) {
        hideDiv("pets_need_" + this.needs[c] + "_timer_reduction");
        if (this.happiness_reduction[this.needs[c]]) {
            this.happiness_reduction[this.needs[c]]++;
            $("pets_need_" + this.needs[c] + "_timer_reduction_amount").innerHTML = formatTime(this.data.config.reduction_duration - this.happiness_reduction[this.needs[c]]);
            var d = 100 - ((this.happiness_reduction[this.needs[c]] * 100) / this.data.config.reduction_duration);
            $("pets_need_" + this.needs[c] + "_timer_reduction_inner").style.width = d + "%";
            showDiv("pets_need_" + this.needs[c] + "_timer_reduction");
        }
        if (this.happiness_reduction[this.needs[c]] >= this.data.config.reduction_duration) {
            this.data.breed.happiness = Math.max(parseInt(this.data.breed.happiness) - parseInt(this.data.config.reduction_amount), 0);
            this.happiness_reduction[this.needs[c]] = 1;
        }
    }
    var d = Math.round(this.data.breed.happiness * 100 / this.data.config.max_happiness);
    $("pets_happiness_inner").style.height = d + "%";
    $("pets_happiness_percent").innerHTML = d + "%";
    var a = ((this.data.breed.happiness * 100) / this.data.config.max_happiness);
    var e = roundDecimal((Math.pow(a, 1.8) / 4000) * 100);
    var b = "<div>" + t_pets_happiness + "<br>" + formatNumber(this.data.breed.happiness) + "/" + formatNumber(this.data.config.max_happiness) + "</div>";
    b += '<div style="margin-top:10px;">' + t_calc_happiness_bonus + e + "%</div>";
    $("pets_happiness_tt").innerHTML = b;
} };
pets.prototype.finishBreed = function () { hideDiv("pets_timer_box"); showDiv("pets_pet_finish"); };
pets.prototype.startSelection = function () { var m = "addon"; var a = '<div id="pets_start_selection" class="' + m + '">'; a += '  <div class="animals">'; count = 1; for (var d in this.data.config.animals) {
    var c = 0;
    if (this.data.parts && this.data.parts[d] && this.data.parts[d].complete > 0) {
        c = this.data.parts[d].complete;
    }
    var b = "block";
    var l = "";
    var h = "";
    if (c > 0) {
        b = "";
        l = "pets.startBreed(" + d + ")";
        h = "onmouseover=\"showDiv('pets_start_selection" + d + "_tt')\" onmouseout=\"hideDiv('pets_start_selection" + d + "_tt')";
    }
    a += '<div class="item link pets_parts_base' + d + " " + b + '" ' + h + '" onclick="' + l + '">';
    a += '  <div class="rarity rarity' + this.data.config.animals[d].rarity + '"></div>';
    a += '  <div class="amount">' + c + "</div>";
    var e = "";
    if (count % 6 == 0) {
        e = "right";
    }
    a += '  <div id="pets_start_selection' + d + '_tt" class="ttbox ' + e + '">';
    a += '    <div class="name">' + this.data.config.animals[d].name + "</div>";
    a += "    <div>" + t_pets_multi.points + ":&nbsp;" + Math.round((this.data.config.animals[d].points_multi - 1) * 100) + "%</div>";
    a += "    <div>" + t_pets_multi.money + ":&nbsp;" + Math.round((this.data.config.animals[d].money_multi - 1) * 100) + "%</div>";
    a += "  </div>";
    a += "</div>";
    count++;
} a += "  </div>"; a += "</div>"; globalBoxFlex(t_pets_breed_doit, a, 0, 0, 1); $("globalbox").style.top = "50px"; };
pets.prototype.needSlot = function (l) { if (!l) {
    l = this.care_need;
}
else {
    this.care_need = l;
} this.need_selection_slot = 0; this.need_selection_page = 1; if (this.data.breed.care_remains && this.data.breed.care_remains[l] > 0) {
    return false;
} var d = '<div id="pets_need_slot">'; d += '<div class="head"><div class="img ' + this.care_need + '"></div></div>'; d += '<div class="intro">' + t_pets_need_slot_info + "</div>"; var b = 0; var m = 0; var a = 0; var h = 0; for (var c = 1; c <= 3; c++) {
    d += '<div class="slot link" onclick="pets.needSelection(' + c + ')" onmouseover="showDiv(\'pets_need_slot' + c + "')\" onmouseout=\"hideDiv('pets_need_slot" + c + "')\">";
    if (this.care_set[c]) {
        d += '<div class="img pets_item' + this.care_set[c] + '"></div>';
    }
    d += '	<div id="pets_need_slot' + c + '" class="ttbox tt">' + t_pets_need_slot + "</div>";
    if (this.care_set[c]) {
        var n = "";
        var q = this.data.config.tools[this.care_set[c]].happiness;
        if (this.data.breed["fav_" + l] == this.care_set[c]) {
            q = Math.ceil(q * (1 + this.data.config.fav_bonus));
            n = "bonus";
            h++;
        }
        d += '<div class="info">';
        d += '  <div class="name">' + produkt_name[this.care_set[c]] + "</div>";
        d += "  <div>" + t_duration + ":&nbsp;" + formatTime(this.data.config.tools[this.care_set[c]].happy_duration) + "</div>";
        d += "  <div>" + t_pets_happiness + ':&nbsp;<span class="' + n + '">' + q + "</span></div>";
        d += "</div>";
        b += this.data.config.tools[this.care_set[c]].happy_duration;
        m += q;
    }
    else {
        a = 1;
    }
    d += "</div>";
} if (b > 0) {
    b += this.data.config.time_base[l];
} d += '  <div class="clear"></div>'; if (m > 0) {
    d += '<div class="sum">';
    d += '  <div class="info">' + t_pets_need_sum + "</div>";
    d += "  <div>" + t_pets_need_sum_duration + ":&nbsp;" + formatTime(b) + "</div>";
    d += "  <div>" + t_pets_happiness + ":&nbsp;" + m + "</div>";
    if (!a) {
        d += '<div class="button_new link" onclick="pets.care()">' + t_inner_feedsubmit + "</div>";
    }
    d += "</div>";
} if (h > 0) {
    d += '<div class="bonus">' + t_pets_fav_bonus + "</div>";
} d += "</div>"; var e = "pets.care_set={}; hideDiv('globalbox'); hideDiv('globaltransp');"; globalBoxFlex("", d, 0, e, 1); };
pets.prototype.needSelection = function (r) { if (!r) {
    r = this.need_selection_slot;
} this.need_selection_slot = r; var w = {}; for (var c in this.care_set) {
    if (!w[this.care_set[c]]) {
        w[this.care_set[c]] = 1;
    }
    else {
        w[this.care_set[c]] += 1;
    }
} var e = '<div id="pets_need_slot_selection">'; var s = ((this.need_selection_page - 1) * 6) + 1; var t = (this.need_selection_page * 6); var h = 1; var m = this.toolsSort(); for (var a in m) {
    for (var c = 0; c < m[a].length; c++) {
        var b = m[a][c];
        var v = "pets.needSelectionSet(" + b.id + ")";
        var l = "";
        var d = checkRackItem(b.id);
        if (w[b.id]) {
            d -= w[b.id];
        }
        if (d < 1) {
            l = "opacity:0.5";
            v = "";
        }
        if (b.type != this.care_need) {
            continue;
        }
        if (h >= s && h <= t) {
            var q = "";
            var u = b.happiness;
            if (this.data.breed["fav_" + b.type] == b.id) {
                u = Math.ceil(u * (1 + this.data.config.fav_bonus));
                q = "bonus";
            }
            e += '<div class="slot link ' + q + '" style="' + l + '" onclick="' + v + '">';
            e += '  <div class="img tt' + b.id + '"></div>';
            e += '  <div class="info">';
            e += '    <div class="name">' + produkt_name[b.id] + "</div>";
            e += "    <div>" + t_pets_happy_duration + ":&nbsp;" + formatTime(b.happy_duration) + "</div>";
            e += "    <div>" + t_points + ":&nbsp;" + formatNumber(b.points_care) + "</div>";
            e += "    <div>" + t_money + ":&nbsp;" + formatPrice(b.money_care) + "</div>";
            e += "    <div>" + t_pets_points + ":&nbsp;" + formatNumber(b.breedpoints_care) + "</div>";
            e += "    <div>" + t_pets_happiness + ':&nbsp;<span class="' + q + '">' + formatNumber(u) + "</span></div>";
            if (q != "") {
                e += '<div class="bonus">' + t_pets_fav_bonus + "</div>";
            }
            e += "  </div>";
            e += '  <div class="amount">' + d + "</div>";
            e += '  <div class="clear"></div>';
            e += "</div>";
        }
        h++;
    }
} e += '  <div id="pets_need_selection_navi_up" class="link" onclick="pets.needSelectionNavi(-1, ' + h + ')"></div>'; e += '  <div id="pets_need_selection_navi_down" class="link" onclick="pets.needSelectionNavi(1, ' + h + ')"></div>'; e += "</div>"; var n = "pets.needSlot()"; globalBoxFlex(t_pets_need_slot_selection, e, 0, n, 1); $("globalbox").style.top = "50px"; };
pets.prototype.needSelectionSet = function (a) { this.care_set[this.need_selection_slot] = a; this.needSlot(); };
pets.prototype.needSelectionNavi = function (b, c) { var a = parseInt(Math.ceil(c / 6)); this.need_selection_page += b; if (this.need_selection_page < 1) {
    this.need_selection_page = 1;
} if (this.need_selection_page > a) {
    this.need_selection_page = a;
} this.needSelection(); hideDiv("pets_need_selection_navi_up"); hideDiv("pets_need_selection_navi_down"); if (this.need_selection_page > 1) {
    showDiv("pets_need_selection_navi_up");
} if (this.need_selection_page < a) {
    showDiv("pets_need_selection_navi_down");
} };
pets.prototype.buildProductionSlots = function () { var b = ""; for (var c = 1; c <= 4; c++) {
    b += '<div id="pets_productionslot' + c + '" class="slot">';
    b += '  <div id="pets_productionslot' + c + '_img" class="img"></div>';
    b += '  <div id="pets_productionslot' + c + '_info" class="info"></div>';
    b += '  <div id="pets_productionslot' + c + '_block" class="block"></div>';
    b += '  <div id="pets_productionslot' + c + '_click" class="click link"></div>';
    b += '  <div id="pets_productionslot' + c + '_speedup" class="link production_slot_speedup" onclick="globalSpeedupBox(\'pets_production_slot_speedup\', 1, ' + c + ');"></div>';
    b += '  <div id="pets_pharmacist_slots' + c + '" class="pets_pharmacist_slots">';
    for (var a = 1; a <= 3; a++) {
        b += '<div id="pets_pharmacist_slot' + c + "_" + a + '" class="link pets_pharmacist_slot" onmouseover="showDiv(\'pets_pharmacist_slot_tt' + c + "_" + a + "')\" onmouseout=\"hideDiv('pets_pharmacist_slot_tt" + c + "_" + a + "')\">";
        b += '  <div id="pets_pharmacist_slot_img' + c + "_" + a + '" class="pets_pharmacist_slot_img"></div>';
        b += '  <div id="pets_pharmacist_slot_status' + c + "_" + a + '" class="pets_pharmacist_slot_status"></div>';
        b += '  <div id="pets_pharmacist_slot_tt' + c + "_" + a + '" class="ttbox pets_pharmacist_slot_tt"></div>';
        b += "</div>";
    }
    b += "</div>";
    b += '  <div id="pets_productionslot' + c + '_rent_timer" class="rent_timer"></div>';
    b += "</div>";
} $("pets_slots").innerHTML = b; this.update(); };
pets.prototype.updateProductionSlot = function (l, a) { if ($("pets_productionslot" + l)) {
    var d = "pets.productionSelection(" + l + ")";
    var h = t_start_production;
    if (this.data.production[l] && this.data.production[l][a]) {
        var c = parseInt(this.data.production[l][a].amount);
        var e = "";
        var b = "";
        if (specialbonus && specialbonus.data && specialbonus.data.pets && specialbonus.data.pets.production_harvest && specialbonus.data.remain > 0) {
            c += specialbonus.data.pets.production_harvest;
            e = '<div class="specialbonus">(' + t_specialbonus_incl_harvestbonus.replace("%BONUS%", "+" + specialbonus.data.pets.production_harvest) + ")</div>";
            b = "specialbonus";
        }
        h = '<div class="name ' + b + '">' + formatNumber(c) + "x&nbsp;" + produkt_name[this.data.production[l][a].pid] + "</div>";
        $("pets_productionslot" + l + "_img").addClassName("pets_item" + this.data.production[l][a].pid);
        if (this.data.production[l][a].remain > 0) {
            h += formatTime(this.data.production[l][a].remain);
            showDiv("pets_productionslot" + l + "_cancel");
            showDiv("pets_productionslot" + l + "_speedup");
            d = "";
        }
        else {
            h += '<div class="ready">' + click4products + "</div>";
            d = "pets.harvestProduction(" + l + ", " + a + ")";
        }
        if (e != "") {
            h += e;
        }
    }
    hideDiv("pets_productionslot" + l + "_block");
    if (this.data.data.slots[l] && this.data.data.slots[l].block) {
        hideDiv("pets_productionslot" + l + "_cancel");
        hideDiv("pets_productionslot" + l + "_speedup");
        showDiv("pets_productionslot" + l + "_block");
        d = "pets.buyProductionSlotCommit(" + l + ")";
        if (this.data.data.slots[l].rent_duration) {
            h = str_replace("%TIME%", formatTime(this.data.data.slots[l].rent_duration), t_rent_slot);
            h = str_replace("%COINS%", this.data.data.slots[l].coins + "&nbsp;" + t_coins, h);
        }
        else {
            if (this.data.data.slots[l].money) {
                h = str_replace("%MONEY%", formatPrice(this.data.data.slots[l].money), t_buy_slot);
            }
            if (this.data.data.slots[l].coins) {
                h = str_replace("%MONEY%", this.data.data.slots[l].coins + "&nbsp;" + t_coins, t_buy_slot);
            }
        }
        h = '<div id="pets_productionslot_info' + l + '" class="ready">' + h + "</div>";
    }
    $("pets_productionslot" + l + "_info").innerHTML = h;
    $("pets_productionslot" + l + "_click").onclick = new Function(d);
    hideDiv("pets_productionslot" + l + "_rent_timer");
    if (this.data.data.slots[l] && this.data.data.slots[l].rent_remain) {
        if (this.data.data.slots[l].rent_remain > 0) {
            showDiv("pets_productionslot" + l + "_rent_timer");
            $("pets_productionslot" + l + "_rent_timer").innerHTML = formatTime(this.data.data.slots[l].rent_remain);
        }
        else {
            this.data.data.slots[l].block = 1;
        }
    }
} };
pets.prototype.getCurrentProductionPosition = function (d) { var b = 0; if (this.data.production[d]) {
    if (this.data.production[d]["gone"] >= this.data.production[d]["duration"]) {
        for (var a = 1; a <= 3; a++) {
            if (this.data.production[d][a]) {
                b = a;
            }
        }
    }
    else {
        var c = 0;
        for (var a = 1; a <= 3; a++) {
            if (this.data.production[d][a]) {
                c += parseInt(this.data.production[d][a].duration);
                if (c > this.data.production[d]["gone"]) {
                    b = a;
                    break;
                }
            }
        }
    }
} return b; };
pets.prototype.buyProductionSlotCommit = function (d) { var b = click4buyslot; if (this.data.data.slots[d].rent_duration) {
    b = click4rentslot;
} var a = $("pets_productionslot_info" + d).innerHTML; var c = "pets.buyProductionSlot(" + d + ")"; globalcommitbox(b, a, c); };
pets.prototype.productionSelectionCommit = function (b) { if (!this.data.config.tools[b]) {
    return 0;
} var d = "pets.startProduction(" + b + ")"; var c = "pets.productionSelection()"; var a = '<div id="pets_production_selection_commit">'; a += '  <div class="img tt' + b + '"></div>'; a += '  <div class="name">' + produkt_name[b] + "</div>"; if (this.data.config.tools[b].money) {
    var e = formatPrice(this.data.config.tools[b].money);
} if (this.data.config.tools[b].coins) {
    var e = this.data.config.tools[b].coins + "&nbsp;" + t_coins;
} a += "  <div>" + cityadcost + e + "</div>"; a += "</div>"; globalcommitbox(t_start_production, a, d, c); };
pets.prototype.productionSelection = function (s) { if (!s) {
    s = this.production_slot;
}
else {
    this.production_slot = s;
} var l = []; var t = ((this.production_selection_page - 1) * 4) + 1; var u = (this.production_selection_page * 4); var m = '<div id="pets_production_selection">'; var n = 1; var q = this.toolsSort(); for (var a in q) {
    for (var d = 0; d < q[a].length; d++) {
        data = q[a][d];
        if (this.production_selection_sort != "" && data.type != this.production_selection_sort) {
            continue;
        }
        if (n >= t && n <= u) {
            var c = 0;
            var w = "";
            var h = data.amount;
            var v = "";
            var r = "";
            if (specialbonus && specialbonus.data && specialbonus.data.pets && specialbonus.data.pets.production_harvest && specialbonus.data.remain > 0) {
                h += specialbonus.data.pets.production_harvest;
                v = '<div style="color:green;">(' + t_specialbonus_incl_harvestbonus.replace("%BONUS%", "+" + specialbonus.data.pets.production_harvest) + ")</div>";
                r = "specialbonus";
            }
            m += '<div id="pets_production_selection_slot' + data.id + '" class="slot link" onclick="pets.productionSelectionCommit(' + data.id + ')">';
            m += '  <div class="img tt' + data.id + '"></div>';
            m += '  <div class="info">';
            m += '    <div class="name ' + r + '">' + formatNumber(h) + "x " + produkt_name[data.id] + "</div>";
            m += "    <div>" + t_points + ":&nbsp;" + formatNumber(data.points) + "</div>";
            m += "    <div>" + t_pets_points + ":&nbsp;" + formatNumber(data.breedpoints_production) + "</div>";
            if (v != "") {
                m += v;
            }
            m += '    <div class="infoadd" onmouseover="showDiv(\'pets_production_selection' + data.id + "_info')\" onmouseout=\"hideDiv('pets_production_selection" + data.id + "_info')\">i";
            m += '      <div id="pets_production_selection' + data.id + '_info" class="ttbox">';
            m += '        <div class="intro">' + t_pets_addinfo + "</div>";
            m += "        <div>" + t_pets_happy_duration + ":&nbsp;" + formatTime(data.happy_duration) + "</div>";
            m += "        <div>" + t_points + ":&nbsp;" + formatNumber(data.points_care) + "</div>";
            m += "        <div>" + t_money + ":&nbsp;" + formatPrice(data.money_care) + "</div>";
            m += "        <div>" + t_pets_points + ":&nbsp;" + formatNumber(data.breedpoints_care) + "</div>";
            m += "        <div>" + t_pets_happiness + ":&nbsp;" + formatNumber(data.happiness) + "</div>";
            m += "      </div>";
            m += "    </div>";
            m += "  </div>";
            m += '  <div class="clear"></div>';
            m += '  <div class="needs">';
            if (this.data.data.level < data.breedlevel) {
                m += '<div class="block important">' + str_replace("%LEVEL%", data.breedlevel, t_pets_need_level) + "</div>";
                c = 1;
            }
            else {
                var r = "";
                if (data.money) {
                    if (data.money > user_bar) {
                        r = "important";
                        c = 1;
                    }
                    var b = formatPrice(data.money);
                }
                if (data.coins) {
                    if (data.coins > user_coins) {
                        r = "important";
                        c = 1;
                    }
                    var b = data.coins + "&nbsp;" + t_coins;
                }
                m += '<div class="intro">' + t_needs + ":</div>";
                m += '<div class="intro_block">';
                m += "  <div>" + formatTime(data.duration) + "</div>";
                m += '  <div class="cost ' + r + '">' + b + "</div>";
                m += "</div>";
                m += '<div class="clear"></div>';
                for (var e in data.needs) {
                    var r = "";
                    if (data.needs[e] > checkRackItem(e)) {
                        r = "important";
                        c = 1;
                    }
                    m += '<div class="product" onmouseover="showDiv(\'pets_production_selection_need_product' + data.id + "_" + e + "')\" onmouseout=\"hideDiv('pets_production_selection_need_product" + data.id + "_" + e + "')\">";
                    m += '  <div class="l' + e + '" style="border-radius:5px;"></div>';
                    m += '  <div class="' + r + '" style="font-weight:bold;">' + data.needs[e] + "x</div>";
                    m += '  <div id="pets_production_selection_need_product' + data.id + "_" + e + '" class="product_tt ttbox">' + produkt_name[e] + "</div>";
                    m += "</div>";
                }
            }
            m += "  </div>";
            m += "</div>";
            if (c) {
                l.push(data.id);
            }
        }
        n++;
    }
} m += '  <div id="pets_production_selection_navi_up" class="link" onclick="pets.productionSelectionNavi(-1, ' + n + ')"></div>'; m += '  <div id="pets_production_selection_navi_down" class="link" onclick="pets.productionSelectionNavi(1, ' + n + ')"></div>'; m += '  <div class="sort">'; for (var d = 0; d < this.needs.length; d++) {
    var v = "";
    if (this.production_selection_sort == this.needs[d]) {
        v = "active";
    }
    m += '<div id="pets_production_selection_sort_' + this.needs[d] + '" class="type link ' + v + '" onclick="pets.productionSelectionSort(\'' + this.needs[d] + "')\">";
    m += '  <div class="img ' + this.needs[d] + '"></div>';
    m += "</div>";
} m += "  </div>"; m += "</div>"; globalBoxFlex(t_choose_to_produce, m, 0, 0, 1); $("globalbox").style.top = "40px"; this.productionSelectionNavi(0, n); for (var d = 0; d < l.length; d++) {
    $("pets_production_selection_slot" + l[d]).onclick = new Function("");
} };
pets.prototype.productionSelectionSort = function (a) { if (this.production_selection_sort == a) {
    this.production_selection_sort = "";
}
else {
    this.production_selection_sort = a;
} this.production_selection_page = 1; this.productionSelection(); };
pets.prototype.productionSelectionNavi = function (b, c) { var a = parseInt(Math.ceil(c / 4)); this.production_selection_page += b; if (this.production_selection_page < 1) {
    this.production_selection_page = 1;
} if (this.production_selection_page > a) {
    this.production_selection_page = a;
} if (b) {
    this.productionSelection();
} hideDiv("pets_production_selection_navi_up"); hideDiv("pets_production_selection_navi_down"); if (this.production_selection_page > 1) {
    showDiv("pets_production_selection_navi_up");
} if (this.production_selection_page < a) {
    showDiv("pets_production_selection_navi_down");
} };
pets.prototype.parts = function () { var e = '<div id="pets_parts">'; e += '  <div class="intro">' + t_pets_parts_intro + "</div>"; e += '  <div class="rarity">'; var m = 3; if (pets_addon == 1) {
    m = 4;
} for (var c = 1; c <= m; c++) {
    var n = "";
    if (this.rarity == c) {
        n = "active";
    }
    e += '<div id="pets_parts_rarity' + c + '" class="item rarity' + c + " link " + n + '" onclick="pets.rarity=' + c + '; pets.parts();" onmouseover="showDiv(\'pets_parts_rarity' + c + "_tt')\" onmouseout=\"hideDiv('pets_parts_rarity" + c + "_tt')\">";
    e += '  <div id="pets_parts_rarity' + c + '_tt" class="ttbox pets_parts_rarity_tt">' + t_pets_rarity[c] + "</div>";
    e += "</div>";
} e += "  </div>"; e += '  <div class="pets">'; for (var c in this.data.config.animals) {
    if (this.rarity == this.data.config.animals[c].rarity) {
        var h = 0;
        if (this.data.parts[c] && this.data.parts[c].complete) {
            h = parseInt(this.data.parts[c].complete);
        }
        e += '<div class="item">';
        e += '  <div class="name">' + this.data.config.animals[c].name + "</div>";
        e += '  <div class="img">';
        e += '    <div class="set">';
        var a = 0;
        var d = 0;
        for (var b = 1; b <= this.data.config.default_parts; b++) {
            if (this.data.parts[c] && this.data.parts[c][b] && parseInt(this.data.parts[c][b]) > h) {
                a = 1;
            }
        }
        for (var b = 1; b <= this.data.config.default_parts; b++) {
            var l = "shadow";
            if (h >= 1 || this.data.collected[c] || (this.data.breed && this.data.breed.animal == c)) {
                l = "grey";
            }
            if (this.data.parts[c] && this.data.parts[c][b] && ((!a && h > 0) || (a && parseInt(this.data.parts[c][b]) > h))) {
                l = "color";
            }
            e += '<div class="pets_parts_' + l + c + " pets_part pets_part" + b + '"></div>';
            if (b % 3 == 0) {
                e += '<div class="clear"></div>';
            }
            if ((h < 1 && (!this.data.parts[c] || !this.data.parts[c][b]))) {
                d++;
            }
            if (h >= 1 && parseInt(this.data.parts[c][b]) <= h) {
                d++;
            }
        }
        e += "    </div>";
        e += "  </div>";
        e += '  <div class="info" onmouseover="showDiv(\'pets_parts_item_info' + c + "_tt')\" onmouseout=\"hideDiv('pets_parts_item_info" + c + "_tt')\">i";
        e += '    <div id="pets_parts_item_info' + c + '_tt" class="ttbox tt">';
        e += "      <div>" + t_pets_multi.points + ":&nbsp;" + Math.round((this.data.config.animals[c].points_multi - 1) * 100) + "%</div>";
        e += "      <div>" + t_pets_multi.money + ":&nbsp;" + Math.round((this.data.config.animals[c].money_multi - 1) * 100) + "%</div>";
        e += "    </div>";
        e += "  </div>";
        if (this.data.config.complete[d]) {
            e += '<div class="complete link" onclick="pets.completeAnimalCommit(' + c + ", " + d + ')" onmouseover="showDiv(\'pets_parts_completebutton' + c + "')\" onmouseout=\"hideDiv('pets_parts_completebutton" + c + "')\">";
            e += '  <div id="pets_parts_completebutton' + c + '" class="ttbox">' + t_pets_buy_animal_head + "</div>";
            e += "</div>";
        }
        if (h > 0 && this.data.data && !this.data.breed && !this.data.block) {
            e += '<div class="breedbutton link" onclick="pets.startBreed(' + c + ')" onmouseover="showDiv(\'pets_parts_breedbutton' + c + "')\" onmouseout=\"hideDiv('pets_parts_breedbutton" + c + "')\">";
            e += '  <div class="bottle"></div>';
            e += '  <div id="pets_parts_breedbutton' + c + '" class="ttbox">' + t_pets_breed_doit + "</div>";
            e += "</div>";
        }
        e += '  <div class="amount">' + h + "</div>";
        e += "</div>";
    }
} e += "  </div>"; e += '  <div class="packs">'; for (var l in this.data.packs) {
    if (l > 0) {
        e += '<div class="item pets_package' + l + ' link" onclick="pets.openPack(' + l + ')">';
        e += '  <div class="amount">' + this.data.packs[l] + "</div>";
        e += "</div>";
    }
} e += '    <div class="clear"></div>'; e += '    <div class="buy link" onclick="pets.partsBuy()" onmouseover="showDiv(\'pets_parts_rarity_buy_tt\')" onmouseout="hideDiv(\'pets_parts_rarity_buy_tt\')">'; e += '      <div id="pets_parts_rarity_buy_tt" class="ttbox">' + t_pets_parts_buy_head + "</div>"; e += "    </div>"; e += "  </div>"; e += "  <div class=\"help helpbutton_blue link\" onclick=\"hideDiv('globaltransp'); hideDiv('globalbox'); openFarmersMarketHowTo('pets');\"></div>"; e += "</div>"; globalBoxFlex(t_pets_parts, e, 0, 0, 1); $("globalbox").style.top = "50px"; };
pets.prototype.completeAnimalCommit = function (l, d) { var a = this.data.config.complete[d][this.data.config.animals[l].rarity]; var h = str_replace("%ANIMAL%", this.data.config.animals[l].name, t_pets_buy_animal); h = str_replace("%COINS%", a, h); var c = '<div id="pets_complete_animal_commit">'; c += '  <div class="img pets_parts_base' + l + '"></div>'; c += "  <div>" + h + "</div>"; c += "</div>"; var e = "pets.completeAnimal(" + l + ")"; var b = "pets.parts()"; globalcommitbox(t_pets_buy_animal_head, c, e, b); };
pets.prototype.partsBuy = function () { var m = "addon"; var c = '<div id="pets_parts_buy" class="' + m + '">'; for (var b in this.data.config.parts_packages) {
    c += '<div class="item ' + m + " pets_package" + b + '">';
    c += '  <div class="info">';
    for (var a in this.data.config.parts_packages[b].content) {
        c += "<div>" + this.data.config.parts_packages[b].content[a] + "x&nbsp;" + t_pets_rarity[a] + "</div>";
        if (b == 1) {
            var l = t_pets_buy_pack1_info;
            if (!this.data.daily) {
                this.data.config.parts_packages[b].coins = this.data.config.parts_packages[b].altcoins;
                delete this.data.config.parts_packages[b].money;
            }
            c += '<div class="bonusinfo">' + l + "</div>";
        }
    }
    c += "  </div>";
    var h = "";
    var n = "pets.partsBuyCommit(" + b + ")";
    if (b == 1) {
        n = "pets.partsBuyCommit(" + b + ", 1)";
    }
    var d = "";
    if (this.data.config.parts_packages[b].coins) {
        d = this.data.config.parts_packages[b].coins[1] + " " + t_coins;
        if (user_coins < this.data.config.parts_packages[b].coins[1]) {
            n = "";
        }
    }
    if (this.data.config.parts_packages[b].money) {
        d = this.data.config.parts_packages[b].money[1] + " " + gamecurrency;
        if (user_bar < this.data.config.parts_packages[b].money[1]) {
            n = "";
        }
    }
    if (this.data.config.parts_packages[b].breedpoints) {
        d = this.data.config.parts_packages[b].breedpoints[1] + " " + t_pets_points;
        if (!this.data.data || parseInt(this.data.data.count) < this.data.config.parts_packages[b].breedpoints[1]) {
            n = "";
        }
    }
    if (n == "") {
        h = "important";
    }
    c += '<div class="buy coinsbutton_flex ' + m + " link " + h + '" onclick="' + n + '">' + str_replace("%AMOUNT%", d, t_buy_it_default) + "</div>";
    c += "</div>";
} c += "</div>"; var e = "pets.parts()"; globalBoxFlex(t_pets_parts_buy_head, c, 0, e, 1); $("globalbox").style.top = "50px"; };
pets.prototype.partsBuyCommit = function (c, d) { var m = "pets.partsBuy()"; var e = '<div id="pets_parts_buy_packages">'; e += '  <div class="item pets_package' + c + '"></div>'; if (d > 0) {
    var r = "pets.partsBuyFire(" + c + ", " + d + ")";
    if (this.data.config.parts_packages[c].coins) {
        var a = this.data.config.parts_packages[c].coins[d] + "&nbsp;" + t_coins;
    }
    if (this.data.config.parts_packages[c].money) {
        var a = this.data.config.parts_packages[c].money[d] + "&nbsp;" + gamecurrency;
    }
    if (this.data.config.parts_packages[c].breedpoints) {
        var a = this.data.config.parts_packages[c].breedpoints[d] + "&nbsp;" + t_pets_points;
    }
    e += d + "&nbsp;" + str_replace("%COST%", a, t_pets_parts_buy_body);
    e += "</div>";
    globalcommitbox(t_pets_parts_buy_head, e, r, m);
}
else {
    var h = ["coins", "breedpoints"];
    for (var b = 0; b < h.length; b++) {
        if (this.data.config.parts_packages[c][h[b]]) {
            var l = this.data.config.parts_packages[c][h[b]];
            for (var d in l) {
                var n = "";
                var r = "pets.partsBuyCommit(" + c + ", " + d + ")";
                if ((h[b] == "coins" && user_coins < l[d]) || (h[b] == "breedpoints" && (!this.data.data || parseInt(this.data.data.count) < l[d]))) {
                    r = "";
                }
                if (r == "") {
                    n = "important";
                }
                var q = str_replace("%COUNT%", d, t_pets_buy_packages);
                if (h[b] == "coins") {
                    q = str_replace("%AMOUNT%", formatNumber(l[d]) + "&nbsp" + t_coins, q);
                }
                if (h[b] == "breedpoints") {
                    q = str_replace("%AMOUNT%", formatNumber(l[d]) + "&nbsp" + t_pets_points, q);
                }
                e += '<div class="buy coinsbutton_flex link ' + n + '" onclick="' + r + '">' + q + "</div>";
            }
        }
    }
    e += "</div>";
    globalBoxFlex(t_pets_parts_buy_head, e, 0, m, 1);
} };
pets.prototype.showQuest = function () { var l = str_replace("%QUEST%", this.data.quest.questid, t_pets_quest_head); var c = '<div id="pets_quest">'; c += '  <div class="intro">' + t_pets_quest_body + "</div>"; c += '  <div id="pets_quest_data">'; c += '    <div class="need">'; for (var b in this.data.quest.products) {
    var d = 0;
    if (this.data.quest.data && this.data.quest.data[b]) {
        d = this.data.quest.data[b];
    }
    var e = ((d * 100) / this.data.quest.products[b]);
    var n = "";
    var m = "important";
    if (checkRackItem(b) > 0) {
        var n = "pets.questEntryCommit(" + b + ")";
        var m = "";
    }
    if (d >= this.data.quest.products[b]) {
        n = "";
    }
    c += '<div class="item">';
    c += '  <div class="kp' + b + '"></div>';
    c += '  <div class="bar link" onclick="' + n + '" onmouseover="showDiv(\'pets_quest_need_item' + b + "')\" onmouseout=\"hideDiv('pets_quest_need_item" + b + "')\">";
    c += '    <div class="inner" style="width:' + e + '%"></div>';
    c += '    <div id="pets_quest_need_item' + b + '" class="ttbox">' + produkt_name[b] + "</div>";
    c += "  </div>";
    c += '  <div class="amount ' + m + '">' + formatNumber(d) + "/" + formatNumber(this.data.quest.products[b]) + "</div>";
    c += "  <br>";
    c += "</div>";
} c += "    </div>"; c += "    <div>" + t_megafield_reward_basic + "</div>"; c += '    <div class="reward">'; for (var h in this.data.quest.reward) {
    if (h == "points") {
        var m = "megafield_points_icon";
        var a = formatNumber(this.data.quest.reward[h]) + "&nbsp;" + t_points;
    }
    if (h == "package") {
        var m = "package pets_package" + this.data.quest.reward[h];
        var a = "1x";
    }
    c += '<div class="img ' + m + '"></div>';
    c += '<div class="amount">' + a + "</div>";
    c += "<br>";
} c += "    </div>"; c += "  </div>"; c += '  <div id="pets_quest_timer" class="timer"></div>'; c += "</div>"; if (this.data.quest.end) {
    l = str_replace("%QUEST%.", "", t_pets_quest_head);
    c = t_pets_out_of_quests;
} globalcommitbox(l, c, 0, 0, 1); };
pets.prototype.questEntryCommit = function (c) { for (var h in this.data.quest.products) {
    if (h == c) {
        var d = this.data.quest.products[c];
        if (this.data.quest.data && this.data.quest.data[c]) {
            var d = (d - this.data.quest.data[c]);
        }
        break;
    }
} var a = checkRackItem(c); var b = "kp" + c; if (a > d) {
    a = d;
} var e = { pid: c }; globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(e), 0, 0, 1); $("dialog_entryline_number").focus(); $("dialog_entryline_number").onchange = new Function("pets.checkQuestEntry(" + c + ", " + d + ")"); $("dialog_entryline_number").onkeyup = new Function("pets.checkQuestEntry(" + c + ", " + d + ")"); checkQuestEntry(c, d); };
pets.prototype.checkQuestEntry = function (a, c) { var e = checkRackItem(a); var b = "product"; var d = { type: b, stockamount: e, rest: c, click: "pets.questEntry(" + a + ")" }; checkEntryLine(d); };
pets.prototype.showStats = function () { var a = '<div id="pets_stats">'; a += '  <div class="select_line">'; a += '    <select id="pets_stats_select" onchange="pets.stats()">'; var b = ["points", "breeds", "food", "toy", "plushy", "quests", "parts1", "parts2", "parts3"]; if (pets_addon == 1) {
    b.push("parts4");
} for (var c = 0; c < b.length; c++) {
    var d = "";
    if (this.stats_select == b[c]) {
        d = "selected";
    }
    a += '<option value="' + b[c] + '" ' + d + ">" + t_pets_stats[b[c]] + "</option>";
} a += "    </select>"; a += "  </div>"; a += '  <div class="headline">' + t_pets_stats_headlines[this.stats_select] + "</div>"; a += '  <div class="list">'; a += htmlStatsContent(this.stats_cache[this.stats_select]); a += "</div>"; globalBoxFlex("", a, 0, 0, 1); };
pets.prototype.surprise = function (c) { this.cardsFlipped = 0; this.cardsCount = 0; this.cardsFlying = c; var b = '<div id="pets_surprise">'; b += '<div class="intro">' + t_pets_surprise_body + "</div>"; for (var d in c) {
    for (var a in c[d]) {
        this.cardsCount++;
        b += '<div id="pets_surprise_slot' + this.cardsCount + '" class="slot link slot' + this.cardsCount + '" onclick="pets.surpriseFlip(' + this.cardsCount + ')">';
        b += '  <div class="front rarity' + this.data.config.animals[d].rarity + '"></div>';
        b += '  <div class="back pets_parts_color' + d + " pets_part" + a + '"></div>';
        b += '  <div id="pets_surprise_name' + this.cardsCount + '" class="name">' + this.data.config.animals[d].name + "</div>";
        b += "</div>";
    }
} b += '  <div id="pets_surprise_commit" class="commit button_yes link" onclick="pets.parts(); pets.surpriseFly()"></div>'; b += "</div>"; globalBoxFlex(t_pets_surprise_head, b, 0, 0, 1); setTimeout(function () { hideDiv("pets_surprise_confetti"); }, 1000); hideDiv("globalbox_close"); };
pets.prototype.surpriseFlip = function (a) { $("pets_surprise_slot" + a).addClassName("flipped"); setTimeout(function () { showDiv("pets_surprise_name" + a); }, 400); this.cardsFlipped++; if (this.cardsFlipped >= this.cardsCount) {
    showDiv("pets_surprise_commit");
}
else {
    hideDiv("pets_surprise_commit");
} };
pets.prototype.surpriseFly = function () { var d = '<div id="pets_surprise_fly">'; var e = 1; var c = []; for (var h in this.cardsFlying) {
    for (var b in this.cardsFlying[h]) {
        d += '<div id="pets_surprise_fly' + e + '" class="slot slot' + e + " pets_parts_color" + h + " pets_part" + b + ' idle"></div>';
        e++;
        c.push(h);
    }
} d += "</div>"; $("pets_parts").insert(d); if ($("pets_surprise_fly1")) {
    setTimeout(function () { if ($("pets_surprise_fly1")) {
        $("pets_surprise_fly1").removeClassName("idle").addClassName("fly" + pets.data.config.animals[c[0]].rarity);
    } }, 300);
    setTimeout(function () { if ($("pets_surprise_fly1")) {
        $("pets_surprise_fly1").remove();
    } }, 1200);
} if ($("pets_surprise_fly2")) {
    setTimeout(function () { if ($("pets_surprise_fly2")) {
        $("pets_surprise_fly2").removeClassName("idle").addClassName("fly" + pets.data.config.animals[c[1]].rarity);
    } }, 100);
    setTimeout(function () { if ($("pets_surprise_fly2")) {
        $("pets_surprise_fly2").remove();
    } }, 1000);
} if ($("pets_surprise_fly3")) {
    setTimeout(function () { if ($("pets_surprise_fly3")) {
        $("pets_surprise_fly3").removeClassName("idle").addClassName("fly" + pets.data.config.animals[c[2]].rarity);
    } }, 500);
    setTimeout(function () { if ($("pets_surprise_fly3")) {
        $("pets_surprise_fly3").remove();
    } }, 1400);
} setTimeout(function () { this.cardsFlying = {}; }, 1300); };
pets.prototype.toolsSort = function () { var b = {}; for (var a in this.data.config.tools) {
    this.data.config.tools[a].id = a;
    if (!b[this.data.config.tools[a].breedlevel]) {
        b[this.data.config.tools[a].breedlevel] = [];
    }
    b[this.data.config.tools[a].breedlevel].push(this.data.config.tools[a]);
} return b; };
pets.prototype.helpNavi = function (a) { hideDiv("pets_help_page1"); hideDiv("pets_help_page2"); showDiv("pets_help_page" + a); $("farmersmarket_howto_inner_pets_navi1").removeClassName("active"); $("farmersmarket_howto_inner_pets_navi2").removeClassName("active"); $("farmersmarket_howto_inner_pets_navi" + a).addClassName("active"); };
pets.prototype.reward = function (b, q) { if (!b) {
    b = this.data.breed.reward;
} if (!q) {
    this.calcHappiness();
    b.parts = {};
    var l = 0;
    for (var m in this.data.config.diamant_parts) {
        if (Math.ceil((this.data.breed.happiness * 100) / this.data.config.max_happiness) >= m) {
            l = this.data.config.diamant_parts[m];
        }
    }
    if (l > 0) {
        for (var d = 1; d <= l; d++) {
            b.parts[d] = { 1: 1 };
        }
    }
} var h = '<div id="pets_reward">'; h += "  <div>" + t_pets_reward_list + "</div>"; h += '  <div class="list">'; if (b) {
    for (var d in b) {
        var e = b[d];
        var r = "";
        if (q && in_array(d, ["money", "points"])) {
            var c = Math.ceil(e * b.happiness_multi);
            if (d == "money") {
                r = '<div class="add">' + t_pets_fav_bonus + ":&nbsp;" + formatPrice(c - e) + "</div>";
            }
            if (d == "points") {
                r = '<div class="add">' + t_pets_fav_bonus + ":&nbsp;" + formatNumber(c - e) + "</div>";
            }
            e = c;
        }
        if (d == "breedpoints") {
            h += '<div class="breedpoints_icon left"></div><div class="left2">' + formatNumber(e) + "&nbsp;" + t_pets_points + "</div><br>";
        }
        if (d == "money") {
            h += '<div class="megafield_money_icon left"></div><div class="left2">' + formatPrice(e) + "&nbsp;" + r + "</div><br>";
        }
        if (d == "points") {
            h += '<div class="megafield_points_icon left"></div><div class="left2">' + formatNumber(e) + "&nbsp;" + t_points + "&nbsp;" + r + "</div><br>";
        }
        if (d == "parts") {
            var r = "";
            if (!q) {
                r = "front";
                h += "<div>" + t_pets_reward_happiness_diamond_parts + "</div>";
            }
            h += '<div class="parts_line ' + r + '">';
            for (var a in b[d]) {
                for (var n in b[d][a]) {
                    var r = "pets_parts_color" + a + " pets_part" + n;
                    if (!q) {
                        r = "front";
                    }
                    h += '<div class="parts ' + r + '">';
                    if (q) {
                        h += '<div class="name">' + this.data.config.animals[a].name + "</div>";
                    }
                    h += "</div>";
                }
            }
            h += '  <div class="clear"></div>';
            h += "</div>";
        }
    }
} h += "  </div>"; if (!q) {
    h += '<div class="bonusinfo">' + t_pets_reward_info + "</div>";
} h += "</div>"; globalBox(t_vet_reward_head, h); };
pets.prototype.teaser = function () { var a = '<div id="pets_teaser">'; a += '  <div class="intro">' + t_pets_teaser_intro + "</div>"; a += '  <div class="block">'; a += '    <div class="head">' + t_pets_teaser_intro1 + "</div>"; a += "    <div>" + t_pets_teaser_list1_1 + "</div>"; a += "    <ul>"; a += "    <li>" + t_pets_teaser_list1_2 + "</li>"; a += "    <li>" + t_pets_teaser_list1_3 + "</li>"; a += "    <li>" + t_pets_teaser_list1_4 + "</li>"; a += "    </ul>"; a += '    <div class="bottle"></div>'; a += "  </div>"; a += '  <div class="block">'; a += '    <div class="head">' + t_pets_teaser_intro2 + "</div>"; a += "    <div>" + t_pets_teaser_list2_1 + "</div>"; a += "    <div>" + t_pets_teaser_list2_2 + "</div>"; a += "    <ul>"; a += "    <li>" + t_pets_teaser_list2_3 + "</li>"; a += "    <li>" + t_pets_teaser_list2_4 + "</li>"; a += "    </ul>"; a += '    <div class="parts"></div>'; a += "  </div>"; a += '  <div class="clear"></div>'; a += '  <div class="hedgehog"></div>'; a += '  <div class="commit link coinsbutton_flex coinsbutton_flex_link" onclick="pets.parts()">' + t_pets_teaser_commit + "</div>"; a += "</div>"; globalBoxFlex(t_pets_teaser_head, a, 0, 0, 1); hideDiv("globalbox_close"); $("globalbox").style.top = "50px"; };
pets.prototype.move = function () { if (this.page == 1) {
    if (this.data.data.pets_queue_active && this.data.data.queue_remain < 0 && !this.data.data.pharmacist_remember_box) {
        this.buyPharmacistCommit(1);
        this.data.data.pharmacist_remember_box = 1;
    }
    this.page = 2;
    $("pets_mover").removeClassName("right").addClassName("left");
}
else {
    this.page = 1;
    $("pets_mover").removeClassName("left").addClassName("right");
} $("pets").className = "move" + this.page; };
pets.prototype.close = function () { hideDiv("transp"); hideDiv("farmersmarket_pos4_inner"); };
function profilAction(c, h, e) { var a = "ajax/profil.php?"; var d = ""; if (!h) {
    h = {};
} h.action = c; h.rid = rid; if (h) {
    for (var b in h) {
        d += "&" + b + "=" + h[b];
    }
} d = d.substring(1, d.length); if (c != "init") {
    $("profil_save_info").style.display = "block";
} showGlobalWait(c); var l = createAjaxRequestObj(); l.open("GET", a + d, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { profilActionResponse(l, c, e); }; l.send(null); }
function profilActionResponse(c, d, e) { if (d != "init") {
    $("profil_save_info").fade({ duration: 2, from: 0.7, to: 0, afterFinish: function (h) { } });
} var a = _chkRequest(c, mode); if (a != 0) {
    hideGlobalWait();
    if (a[0] == 0) {
        var b = "hideDiv('globalbox'); hideDiv('globaltransp'); profilUpdate();";
        globalerrorbox(a[1], b);
    }
    else {
        hideDiv("globalbox");
        hideDiv("globaltransp");
        if (a.player) {
            profil_data = a.player;
        }
        if (d == "init") {
            profilInit();
        }
        if (d == "save") {
            profilUpdate();
        }
        if (d == "reset" || d == "delete") {
            location.href = "main.php";
        }
        if (e == 1) {
            profilCanvassInit();
        }
    }
} }
var profil_data = {};
var profil_valid = ["uname", "email", "pass", "pass2"];
var profil_valid_chkbx = ["animation", "plantinfo", "farmslide", "animalghosts", "touch_detection", "pan_privacy", "main_flyer", "disable_autologout"];
function profilInit() { profilUpdate(); showDiv("profil_main_transp"); showDiv("profil_main"); showDiv("profil_settings"); hideDiv("profil_canvass_main"); }
function profilUpdate() { $("profil_name").innerHTML = profil_data.name; $("profil_id").innerHTML = profil_data.unr; $("profil_register").innerHTML = profil_data.registerdate; $("profil_uname").value = profil_data.uname; if ($("profil_email")) {
    $("profil_email").value = profil_data.email;
} if (profil_data.animation == "1") {
    $("profil_animation").checked = true;
}
else {
    $("profil_animation").checked = false;
} if (profil_data.gardeninfo == "1") {
    $("profil_plantinfo").checked = true;
}
else {
    $("profil_plantinfo").checked = false;
} if (profil_data.tokens.NO_FARMSLIDE == "1") {
    $("profil_farmslide").checked = true;
}
else {
    $("profil_farmslide").checked = false;
} if (profil_data.tokens.ANIMALGHOSTS == "1") {
    $("profil_animalghosts").checked = true;
}
else {
    $("profil_animalghosts").checked = false;
} if (profil_data.tokens.DISABLE_AUTOLOGOUT == "1") {
    $("profil_disable_autologout").checked = true;
}
else {
    $("profil_disable_autologout").checked = false;
} if (profil_data.tokens.AUTOTOUCH == "1") {
    $("profil_touch_detection").checked = true;
}
else {
    $("profil_touch_detection").checked = false;
} if (profil_data.tokens.MAIN_FLYER == "1") {
    $("profil_main_flyer").checked = true;
}
else {
    $("profil_main_flyer").checked = false;
} if (profil_data.tokens.PAN_PRIVACY == "1") {
    $("profil_pan_privacy").checked = true;
}
else {
    $("profil_pan_privacy").checked = false;
} for (var b = 0; b < profil_valid.length; b++) {
    if (profil_valid[b] != "email") {
        hideDiv("profil_save_" + profil_valid[b]);
    }
} if ($("profil_canvass")) {
    if (profil_data.confirmed == "1") {
        showDiv("profil_canvass");
    }
    else {
        hideDiv("profil_canvass");
    }
} if (profil_data.confirmed != "1") {
    var a = profil_data.email;
    if (profil_data.tempmail != "") {
        a = profil_data.tempmail;
    }
    if (profil_data.email.indexOf(const_emailoff) > -1) {
        $add = "";
    }
    else {
        a = "<br>" + str_replace("%EMAIL%", '<span style="font-weight:bold;">' + a + "</span>", t_emailconfirm_thismail);
    }
    $("profil_email_confirm").innerHTML = a;
    showDiv("profil_email_unconfirmed");
}
else {
    hideDiv("profil_email_unconfirmed");
} if (profil_data.pkt > 20000) {
    hideDiv("profil_reset");
} }
function profilSendConfirmationMail() { profilAction("send"); }
function profilCheck(b) { for (var a = 0; a < profil_valid.length; a++) {
    if (profil_valid[a] != "email") {
        hideDiv("profil_save_" + profil_valid[a]);
    }
} if ($("profil_" + b)) {
    if (b == "pass") {
        if ($("profil_pass").value != "" && $("profil_pass2").value != "") {
            if ($("profil_pass").value == $("profil_pass2").value) {
                showDiv("profil_save_" + b);
            }
        }
    }
    else {
        if ($("profil_" + b).value != "" && $("profil_" + b).value != profil_data[b]) {
            showDiv("profil_save_" + b);
        }
    }
} }
function profilSave(d) { var c = ""; var a = t_password_info; a += '<br><br><input type="password" id="profil_secure">'; var e = "profilFire('" + d + "')"; var b = "hideDiv('globalbox'); hideDiv('globaltransp'); profilUpdate();"; globalBox(c, a, e, b); }
function profilFire(b) { var c = $("profil_secure").value; if (c != "") {
    if (b == "delete" || b == "reset") {
        var d = { secure: c };
        profilAction(b, d);
    }
    else {
        if (in_array(b, profil_valid)) {
            var d = { secure: c, key: b, value: encodeURIComponent($("profil_" + b).value) };
            profilAction("save", d);
        }
        else {
            if (in_array(b, profil_valid_chkbx)) {
                var a = 0;
                if ($("profil_" + b).checked == true) {
                    a = 1;
                }
                d = { secure: c, key: b, value: a };
                profilAction("save", d);
            }
        }
    }
} }
function profilClose() { hideDiv("profil_main_transp"); hideDiv("profil_main"); }
function profilCanvassInit() { showDiv("profil_main_transp"); showDiv("profil_main"); hideDiv("profil_settings"); showDiv("profil_canvass_main"); hideDiv("profil_canvass_error"); $("profil_canvass_email").value = ""; $("profil_canvass_message").value = ""; $("profil_canvass_letters").innerHTML = str_replace("%LETTERS%", parseInt(canvassletters), marktschreierletters); }
function profilCanvassLetters() { var a = $("profil_canvass_message").value; if (a.length > canvassletters) {
    a = a.substring(0, canvassletters);
    $("profil_canvass_message").value = a;
} $("profil_canvass_letters").innerHTML = str_replace("%LETTERS%", (parseInt(canvassletters) - parseInt(a.length)), marktschreierletters); }
function profilCanvassSend() { var a = $("profil_canvass_email").value; var b = $("profil_canvass_message").value; if (a != "" && b != "") {
    params = { mail: encodeURIComponent(a), msg: encodeURIComponent(b) };
    generalAction("sendcanvass", params);
} }
function profilCanvassSendResponse() { profilCanvassInit(); showDiv("profil_canvass_error"); $("profil_canvass_error").innerHTML = profilcanvasssend; }
var Prototype = { Version: "1.7_rc3", Browser: (function () { var b = navigator.userAgent; var a = Object.prototype.toString.call(window.opera) == "[object Opera]"; return { IE: !!window.attachEvent && !a, Opera: a, WebKit: b.indexOf("AppleWebKit/") > -1, Gecko: b.indexOf("Gecko") > -1 && b.indexOf("KHTML") === -1, MobileSafari: /Apple.*Mobile/.test(b) }; })(), BrowserFeatures: { XPath: !!document.evaluate, SelectorsAPI: !!document.querySelector, ElementExtensions: (function () { var a = window.Element || window.HTMLElement; return !!(a && a.prototype); })(), SpecificElementExtensions: (function () { if (typeof window.HTMLDivElement !== "undefined") {
            return true;
        } var c = document.createElement("div"), b = document.createElement("form"), a = false; if (c.__proto__ && (c.__proto__ !== b.__proto__)) {
            a = true;
        } c = b = null; return a; })() }, ScriptFragment: "<script[^>]*>([\\S\\s]*?)<\/script>", JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/, emptyFunction: function () { }, K: function (a) { return a; } };
if (Prototype.Browser.MobileSafari) {
    Prototype.BrowserFeatures.SpecificElementExtensions = false;
}
var Abstract = {};
var Try = { these: function () { var c; for (var b = 0, d = arguments.length; b < d; b++) {
        var a = arguments[b];
        try {
            c = a();
            break;
        }
        catch (h) { }
    } return c; } };
var Class = (function () { var d = (function () { for (var e in { toString: 1 }) {
    if (e === "toString") {
        return false;
    }
} return true; })(); function a() { } function b() { var m = null, l = $A(arguments); if (Object.isFunction(l[0])) {
    m = l.shift();
} function e() { this.initialize.apply(this, arguments); } Object.extend(e, Class.Methods); e.superclass = m; e.subclasses = []; if (m) {
    a.prototype = m.prototype;
    e.prototype = new a;
    m.subclasses.push(e);
} for (var h = 0, n = l.length; h < n; h++) {
    e.addMethods(l[h]);
} if (!e.prototype.initialize) {
    e.prototype.initialize = Prototype.emptyFunction;
} e.prototype.constructor = e; return e; } function c(r) { var l = this.superclass && this.superclass.prototype, h = Object.keys(r); if (d) {
    if (r.toString != Object.prototype.toString) {
        h.push("toString");
    }
    if (r.valueOf != Object.prototype.valueOf) {
        h.push("valueOf");
    }
} for (var e = 0, m = h.length; e < m; e++) {
    var q = h[e], n = r[q];
    if (l && Object.isFunction(n) && n.argumentNames()[0] == "$super") {
        var s = n;
        n = (function (t) { return function () { return l[t].apply(this, arguments); }; })(q).wrap(s);
        n.valueOf = s.valueOf.bind(s);
        n.toString = s.toString.bind(s);
    }
    this.prototype[q] = n;
} return this; } return { create: b, Methods: { addMethods: c } }; })();
(function () { var I = Object.prototype.toString, H = "Null", v = "Undefined", C = "Boolean", h = "Number", A = "String", M = "Object", E = "[object Boolean]", l = "[object Number]", s = "[object String]", m = "[object Array]", n = window.JSON && typeof JSON.stringify === "function" && JSON.stringify(0) === "0" && typeof JSON.stringify(Prototype.K) === "undefined"; function r(O) { switch (O) {
    case null: return H;
    case (void 0): return v;
} var N = typeof O; switch (N) {
    case "boolean": return C;
    case "number": return h;
    case "string": return A;
} return M; } function F(N, P) { for (var O in P) {
    N[O] = P[O];
} return N; } function K(N) { try {
    if (c(N)) {
        return "undefined";
    }
    if (N === null) {
        return "null";
    }
    return N.inspect ? N.inspect() : String(N);
}
catch (O) {
    if (O instanceof RangeError) {
        return "...";
    }
    throw O;
} } function J(N) { return L("", { "": N }, []); } function L(W, T, U) { var V = T[W], S = typeof V; if (r(V) === M && typeof V.toJSON === "function") {
    V = V.toJSON(W);
} var P = I.call(V); switch (P) {
    case l:
    case E:
    case s: V = V.valueOf();
} switch (V) {
    case null: return "null";
    case true: return "true";
    case false: return "false";
} S = typeof V; switch (S) {
    case "string": return V.inspect(true);
    case "number": return isFinite(V) ? String(V) : "null";
    case "object":
        for (var O = 0, N = U.length; O < N; O++) {
            if (U[O] === V) {
                throw new TypeError();
            }
        }
        U.push(V);
        var R = [];
        if (P === m) {
            for (var O = 0, N = V.length; O < N; O++) {
                var Q = L(O, V, U);
                R.push(typeof Q === "undefined" ? "null" : Q);
            }
            R = "[" + R.join(",") + "]";
        }
        else {
            var X = Object.keys(V);
            for (var O = 0, N = X.length; O < N; O++) {
                var W = X[O], Q = L(W, V, U);
                if (typeof Q !== "undefined") {
                    R.push(W.inspect(true) + ":" + Q);
                }
            }
            R = "{" + R.join(",") + "}";
        }
        U.pop();
        return R;
} } function D(N) { return JSON.stringify(N); } function q(N) { return $H(N).toQueryString(); } function w(N) { return N && N.toHTML ? N.toHTML() : String.interpret(N); } function z(N) { if (r(N) !== M) {
    throw new TypeError();
} var O = []; for (var P in N) {
    if (N.hasOwnProperty(P)) {
        O.push(P);
    }
} return O; } function d(N) { var O = []; for (var P in N) {
    O.push(N[P]);
} return O; } function G(N) { return F({}, N); } function B(N) { return !!(N && N.nodeType == 1); } function t(N) { return I.call(N) === m; } var b = (typeof Array.isArray == "function") && Array.isArray([]) && !Array.isArray({}); if (b) {
    t = Array.isArray;
} function e(N) { return N instanceof Hash; } function a(N) { return typeof N === "function"; } function u(N) { return I.call(N) === s; } function y(N) { return I.call(N) === l; } function c(N) { return typeof N === "undefined"; } F(Object, { extend: F, inspect: K, toJSON: n ? D : J, toQueryString: q, toHTML: w, keys: Object.keys || z, values: d, clone: G, isElement: B, isArray: t, isHash: e, isFunction: a, isString: u, isNumber: y, isUndefined: c }); })();
Object.extend(Function.prototype, (function () { var r = Array.prototype.slice; function d(v, s) { var u = v.length, t = s.length; while (t--) {
    v[u + t] = s[t];
} return v; } function n(t, s) { t = r.call(t, 0); return d(t, s); } function l() { var s = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, "").replace(/\s+/g, "").split(","); return s.length == 1 && !s[0] ? [] : s; } function m(u) { if (arguments.length < 2 && Object.isUndefined(arguments[0])) {
    return this;
} var s = this, t = r.call(arguments, 1); return function () { var v = n(t, arguments); return s.apply(u, v); }; } function h(u) { var s = this, t = r.call(arguments, 1); return function (w) { var v = d([w || window.event], t); return s.apply(u, v); }; } function q() { if (!arguments.length) {
    return this;
} var s = this, t = r.call(arguments, 0); return function () { var u = n(t, arguments); return s.apply(this, u); }; } function e(u) { var s = this, t = r.call(arguments, 1); u = u * 1000; return window.setTimeout(function () { return s.apply(s, t); }, u); } function a() { var s = d([0.01], arguments); return this.delay.apply(this, s); } function c(t) { var s = this; return function () { var u = d([s.bind(this)], arguments); return t.apply(this, u); }; } function b() { if (this._methodized) {
    return this._methodized;
} var s = this; return this._methodized = function () { var t = d([this], arguments); return s.apply(null, t); }; } return { argumentNames: l, bind: m, bindAsEventListener: h, curry: q, delay: e, defer: a, wrap: c, methodize: b }; })());
(function (c) { function b() { return this.getUTCFullYear() + "-" + (this.getUTCMonth() + 1).toPaddedString(2) + "-" + this.getUTCDate().toPaddedString(2) + "T" + this.getUTCHours().toPaddedString(2) + ":" + this.getUTCMinutes().toPaddedString(2) + ":" + this.getUTCSeconds().toPaddedString(2) + "Z"; } function a() { return this.toISOString(); } if (!c.toISOString) {
    c.toISOString = b;
} if (!c.toJSON) {
    c.toJSON = a;
} })(Date.prototype);
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function (a) { return String(a).replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1"); };
var PeriodicalExecuter = Class.create({ initialize: function (b, a) { this.callback = b; this.frequency = a; this.currentlyExecuting = false; this.registerCallback(); }, registerCallback: function () { this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000); }, execute: function () { this.callback(this); }, stop: function () { if (!this.timer) {
        return;
    } clearInterval(this.timer); this.timer = null; }, onTimerEvent: function () { if (!this.currentlyExecuting) {
        try {
            this.currentlyExecuting = true;
            this.execute();
            this.currentlyExecuting = false;
        }
        catch (a) {
            this.currentlyExecuting = false;
            throw a;
        }
    } } });
Object.extend(String, { interpret: function (a) { return a == null ? "" : String(a); }, specialChar: { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", "\\": "\\\\" } });
Object.extend(String.prototype, (function () { var NATIVE_JSON_PARSE_SUPPORT = window.JSON && typeof JSON.parse === "function" && JSON.parse('{"test": true}').test; function prepareReplacement(replacement) { if (Object.isFunction(replacement)) {
    return replacement;
} var template = new Template(replacement); return function (match) { return template.evaluate(match); }; } function gsub(pattern, replacement) { var result = "", source = this, match; replacement = prepareReplacement(replacement); if (Object.isString(pattern)) {
    pattern = RegExp.escape(pattern);
} if (!(pattern.length || pattern.source)) {
    replacement = replacement("");
    return replacement + source.split("").join(replacement) + replacement;
} while (source.length > 0) {
    if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source = source.slice(match.index + match[0].length);
    }
    else {
        result += source, source = "";
    }
} return result; } function sub(pattern, replacement, count) { replacement = prepareReplacement(replacement); count = Object.isUndefined(count) ? 1 : count; return this.gsub(pattern, function (match) { if (--count < 0) {
    return match[0];
} return replacement(match); }); } function scan(pattern, iterator) { this.gsub(pattern, iterator); return String(this); } function truncate(length, truncation) { length = length || 30; truncation = Object.isUndefined(truncation) ? "..." : truncation; return this.length > length ? this.slice(0, length - truncation.length) + truncation : String(this); } function strip() { return this.replace(/^\s+/, "").replace(/\s+$/, ""); } function stripTags() { return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, ""); } function stripScripts() { return this.replace(new RegExp(Prototype.ScriptFragment, "img"), ""); } function extractScripts() { var matchAll = new RegExp(Prototype.ScriptFragment, "img"), matchOne = new RegExp(Prototype.ScriptFragment, "im"); return (this.match(matchAll) || []).map(function (scriptTag) { return (scriptTag.match(matchOne) || ["", ""])[1]; }); } function evalScripts() { return this.extractScripts().map(function (script) { return eval(script); }); } function escapeHTML() { return this.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"); } function unescapeHTML() { return this.stripTags().replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&"); } function toQueryParams(separator) { var match = this.strip().match(/([^?#]*)(#.*)?$/); if (!match) {
    return {};
} return match[1].split(separator || "&").inject({}, function (hash, pair) { if ((pair = pair.split("="))[0]) {
    var key = decodeURIComponent(pair.shift()), value = pair.length > 1 ? pair.join("=") : pair[0];
    if (value != undefined) {
        value = decodeURIComponent(value);
    }
    if (key in hash) {
        if (!Object.isArray(hash[key])) {
            hash[key] = [hash[key]];
        }
        hash[key].push(value);
    }
    else {
        hash[key] = value;
    }
} return hash; }); } function toArray() { return this.split(""); } function succ() { return this.slice(0, this.length - 1) + String.fromCharCode(this.charCodeAt(this.length - 1) + 1); } function times(count) { return count < 1 ? "" : new Array(count + 1).join(this); } function camelize() { return this.replace(/-+(.)?/g, function (match, chr) { return chr ? chr.toUpperCase() : ""; }); } function capitalize() { return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase(); } function underscore() { return this.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/-/g, "_").toLowerCase(); } function dasherize() { return this.replace(/_/g, "-"); } function inspect(useDoubleQuotes) { var escapedString = this.replace(/[\x00-\x1f\\]/g, function (character) { if (character in String.specialChar) {
    return String.specialChar[character];
} return "\\u00" + character.charCodeAt().toPaddedString(2, 16); }); if (useDoubleQuotes) {
    return '"' + escapedString.replace(/"/g, '\\"') + '"';
} return "'" + escapedString.replace(/'/g, "\\'") + "'"; } function unfilterJSON(filter) { return this.replace(filter || Prototype.JSONFilter, "$1"); } function isJSON() { var str = this; if (str.blank()) {
    return false;
} str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@"); str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]"); str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, ""); return (/^[\],:{}\s]*$/).test(str); } function evalJSON(sanitize) { var json = this.unfilterJSON(), cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g; if (cx.test(json)) {
    json = json.replace(cx, function (a) { return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4); });
} try {
    if (!sanitize || json.isJSON()) {
        return eval("(" + json + ")");
    }
}
catch (e) { } throw new SyntaxError("Badly formed JSON string: " + this.inspect()); } function parseJSON() { var json = this.unfilterJSON(); return JSON.parse(json); } function include(pattern) { return this.indexOf(pattern) > -1; } function startsWith(pattern) { return this.lastIndexOf(pattern, 0) === 0; } function endsWith(pattern) { var d = this.length - pattern.length; return d >= 0 && this.indexOf(pattern, d) === d; } function empty() { return this == ""; } function blank() { return /^\s*$/.test(this); } function interpolate(object, pattern) { return new Template(this, pattern).evaluate(object); } return { gsub: gsub, sub: sub, scan: scan, truncate: truncate, strip: String.prototype.trim || strip, stripTags: stripTags, stripScripts: stripScripts, extractScripts: extractScripts, evalScripts: evalScripts, escapeHTML: escapeHTML, unescapeHTML: unescapeHTML, toQueryParams: toQueryParams, parseQuery: toQueryParams, toArray: toArray, succ: succ, times: times, camelize: camelize, capitalize: capitalize, underscore: underscore, dasherize: dasherize, inspect: inspect, unfilterJSON: unfilterJSON, isJSON: isJSON, evalJSON: NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON, include: include, startsWith: startsWith, endsWith: endsWith, empty: empty, blank: blank, interpolate: interpolate }; })());
var Template = Class.create({ initialize: function (a, b) { this.template = a.toString(); this.pattern = b || Template.Pattern; }, evaluate: function (a) { if (a && Object.isFunction(a.toTemplateReplacements)) {
        a = a.toTemplateReplacements();
    } return this.template.gsub(this.pattern, function (d) { if (a == null) {
        return (d[1] + "");
    } var h = d[1] || ""; if (h == "\\") {
        return d[2];
    } var b = a, l = d[3], e = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/; d = e.exec(l); if (d == null) {
        return h;
    } while (d != null) {
        var c = d[1].startsWith("[") ? d[2].replace(/\\\\]/g, "]") : d[1];
        b = b[c];
        if (null == b || "" == d[3]) {
            break;
        }
        l = l.substring("[" == d[3] ? d[1].length : d[0].length);
        d = e.exec(l);
    } return h + String.interpret(b); }); } });
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = {};
var Enumerable = (function () { function c(G, F) { var E = 0; try {
    this._each(function (I) { G.call(F, I, E++); });
}
catch (H) {
    if (H != $break) {
        throw H;
    }
} return this; } function z(H, G, F) { var E = -H, I = [], J = this.toArray(); if (H < 1) {
    return J;
} while ((E += H) < J.length) {
    I.push(J.slice(E, E + H));
} return I.collect(G, F); } function b(G, F) { G = G || Prototype.K; var E = true; this.each(function (I, H) { E = E && !!G.call(F, I, H); if (!E) {
    throw $break;
} }); return E; } function n(G, F) { G = G || Prototype.K; var E = false; this.each(function (I, H) { if (E = !!G.call(F, I, H)) {
    throw $break;
} }); return E; } function q(G, F) { G = G || Prototype.K; var E = []; this.each(function (I, H) { E.push(G.call(F, I, H)); }); return E; } function B(G, F) { var E; this.each(function (I, H) { if (G.call(F, I, H)) {
    E = I;
    throw $break;
} }); return E; } function m(G, F) { var E = []; this.each(function (I, H) { if (G.call(F, I, H)) {
    E.push(I);
} }); return E; } function l(H, G, F) { G = G || Prototype.K; var E = []; if (Object.isString(H)) {
    H = new RegExp(RegExp.escape(H));
} this.each(function (J, I) { if (H.match(J)) {
    E.push(G.call(F, J, I));
} }); return E; } function a(E) { if (Object.isFunction(this.indexOf)) {
    if (this.indexOf(E) != -1) {
        return true;
    }
} var F = false; this.each(function (G) { if (G == E) {
    F = true;
    throw $break;
} }); return F; } function y(F, E) { E = Object.isUndefined(E) ? null : E; return this.eachSlice(F, function (G) { while (G.length < F) {
    G.push(E);
} return G; }); } function s(E, G, F) { this.each(function (I, H) { E = G.call(F, E, I, H); }); return E; } function D(F) { var E = $A(arguments).slice(1); return this.map(function (G) { return G[F].apply(G, E); }); } function w(G, F) { G = G || Prototype.K; var E; this.each(function (I, H) { I = G.call(F, I, H); if (E == null || I >= E) {
    E = I;
} }); return E; } function u(G, F) { G = G || Prototype.K; var E; this.each(function (I, H) { I = G.call(F, I, H); if (E == null || I < E) {
    E = I;
} }); return E; } function e(H, F) { H = H || Prototype.K; var G = [], E = []; this.each(function (J, I) { (H.call(F, J, I) ? G : E).push(J); }); return [G, E]; } function h(F) { var E = []; this.each(function (G) { E.push(G[F]); }); return E; } function d(G, F) { var E = []; this.each(function (I, H) { if (!G.call(F, I, H)) {
    E.push(I);
} }); return E; } function t(F, E) { return this.map(function (H, G) { return { value: H, criteria: F.call(E, H, G) }; }).sort(function (J, I) { var H = J.criteria, G = I.criteria; return H < G ? -1 : H > G ? 1 : 0; }).pluck("value"); } function v() { return this.map(); } function A() { var F = Prototype.K, E = $A(arguments); if (Object.isFunction(E.last())) {
    F = E.pop();
} var G = [this].concat(E).map($A); return this.map(function (I, H) { return F(G.pluck(H)); }); } function r() { return this.toArray().length; } function C() { return "#<Enumerable:" + this.toArray().inspect() + ">"; } return { each: c, eachSlice: z, all: b, every: b, any: n, some: n, collect: q, map: q, detect: B, findAll: m, select: m, filter: m, grep: l, include: a, member: a, inGroupsOf: y, inject: s, invoke: D, max: w, min: u, partition: e, pluck: h, reject: d, sortBy: t, toArray: v, entries: v, zip: A, size: r, inspect: C, find: B }; })();
function $A(c) { if (!c) {
    return [];
} if ("toArray" in Object(c)) {
    return c.toArray();
} var b = c.length || 0, a = new Array(b); while (b--) {
    a[b] = c[b];
} return a; }
function $w(a) { if (!Object.isString(a)) {
    return [];
} a = a.strip(); return a ? a.split(/\s+/) : []; }
Array.from = $A;
(function () { var z = Array.prototype, t = z.slice, v = z.forEach; function b(D) { for (var C = 0, E = this.length; C < E; C++) {
    D(this[C]);
} } if (!v) {
    v = b;
} function s() { this.length = 0; return this; } function d() { return this[0]; } function l() { return this[this.length - 1]; } function n() { return this.select(function (C) { return C != null; }); } function B() { return this.inject([], function (D, C) { if (Object.isArray(C)) {
    return D.concat(C.flatten());
} D.push(C); return D; }); } function m() { var C = t.call(arguments, 0); return this.select(function (D) { return !C.include(D); }); } function h(C) { return (C === false ? this.toArray() : this)._reverse(); } function r(C) { return this.inject([], function (F, E, D) { if (0 == D || (C ? F.last() != E : !F.include(E))) {
    F.push(E);
} return F; }); } function w(C) { return this.uniq().findAll(function (D) { return C.detect(function (E) { return D === E; }); }); } function y() { return t.call(this, 0); } function q() { return this.length; } function A() { return "[" + this.map(Object.inspect).join(", ") + "]"; } function a(E, C) { C || (C = 0); var D = this.length; if (C < 0) {
    C = D + C;
} for (; C < D; C++) {
    if (this[C] === E) {
        return C;
    }
} return -1; } function u(D, C) { C = isNaN(C) ? this.length : (C < 0 ? this.length + C : C) + 1; var E = this.slice(0, C).reverse().indexOf(D); return (E < 0) ? E : C - E - 1; } function c() { var H = t.call(this, 0), F; for (var D = 0, E = arguments.length; D < E; D++) {
    F = arguments[D];
    if (Object.isArray(F) && !("callee" in F)) {
        for (var C = 0, G = F.length; C < G; C++) {
            H.push(F[C]);
        }
    }
    else {
        H.push(F);
    }
} return H; } Object.extend(z, Enumerable); if (!z._reverse) {
    z._reverse = z.reverse;
} Object.extend(z, { _each: v, clear: s, first: d, last: l, compact: n, flatten: B, without: m, reverse: h, uniq: r, intersect: w, clone: y, toArray: y, size: q, inspect: A }); var e = (function () { return [].concat(arguments)[0][0] !== 1; })(1, 2); if (e) {
    z.concat = c;
} if (!z.indexOf) {
    z.indexOf = a;
} if (!z.lastIndexOf) {
    z.lastIndexOf = u;
} })();
function $H(a) { return new Hash(a); }
var Hash = Class.create(Enumerable, (function () { function e(w) { this._object = Object.isHash(w) ? w.toObject() : Object.clone(w); } function h(y) { for (var w in this._object) {
    var z = this._object[w], A = [w, z];
    A.key = w;
    A.value = z;
    y(A);
} } function q(w, y) { return this._object[w] = y; } function c(w) { if (this._object[w] !== Object.prototype[w]) {
    return this._object[w];
} } function t(w) { var y = this._object[w]; delete this._object[w]; return y; } function v() { return Object.clone(this._object); } function u() { return this.pluck("key"); } function s() { return this.pluck("value"); } function l(y) { var w = this.detect(function (z) { return z.value === y; }); return w && w.key; } function n(w) { return this.clone().update(w); } function d(w) { return new Hash(w).inject(this, function (y, z) { y.set(z.key, z.value); return y; }); } function b(w, y) { if (Object.isUndefined(y)) {
    return w;
} return w + "=" + encodeURIComponent(String.interpret(y)); } function a() { return this.inject([], function (z, A) { var y = encodeURIComponent(A.key), w = A.value; if (w && typeof w == "object") {
    if (Object.isArray(w)) {
        return z.concat(w.map(b.curry(y)));
    }
}
else {
    z.push(b(y, w));
} return z; }).join("&"); } function r() { return "#<Hash:{" + this.map(function (w) { return w.map(Object.inspect).join(": "); }).join(", ") + "}>"; } function m() { return new Hash(this); } return { initialize: e, _each: h, set: q, get: c, unset: t, toObject: v, toTemplateReplacements: v, keys: u, values: s, index: l, merge: n, update: d, toQueryString: a, inspect: r, toJSON: v, clone: m }; })());
Hash.from = $H;
Object.extend(Number.prototype, (function () { function d() { return this.toPaddedString(2, 16); } function b() { return this + 1; } function m(q, n) { $R(0, this, true).each(q, n); return this; } function l(r, q) { var n = this.toString(q || 10); return "0".times(r - n.length) + n; } function a() { return Math.abs(this); } function c() { return Math.round(this); } function e() { return Math.ceil(this); } function h() { return Math.floor(this); } return { toColorPart: d, succ: b, times: m, toPaddedString: l, abs: a, round: c, ceil: e, floor: h }; })());
function $R(c, a, b) { return new ObjectRange(c, a, b); }
var ObjectRange = Class.create(Enumerable, (function () { function b(h, d, e) { this.start = h; this.end = d; this.exclusive = e; } function c(d) { var e = this.start; while (this.include(e)) {
    d(e);
    e = e.succ();
} } function a(d) { if (d < this.start) {
    return false;
} if (this.exclusive) {
    return d < this.end;
} return d <= this.end; } return { initialize: b, _each: c, include: a }; })());
var Ajax = { getTransport: function () { return Try.these(function () { return new XMLHttpRequest(); }, function () { return new ActiveXObject("Msxml2.XMLHTTP"); }, function () { return new ActiveXObject("Microsoft.XMLHTTP"); }) || false; }, activeRequestCount: 0 };
Ajax.Responders = { responders: [], _each: function (a) { this.responders._each(a); }, register: function (a) { if (!this.include(a)) {
        this.responders.push(a);
    } }, unregister: function (a) { this.responders = this.responders.without(a); }, dispatch: function (d, b, c, a) { this.each(function (h) { if (Object.isFunction(h[d])) {
        try {
            h[d].apply(h, [b, c, a]);
        }
        catch (l) { }
    } }); } };
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({ onCreate: function () { Ajax.activeRequestCount++; }, onComplete: function () { Ajax.activeRequestCount--; } });
Ajax.Base = Class.create({ initialize: function (a) { this.options = { method: "post", asynchronous: true, contentType: "application/x-www-form-urlencoded", encoding: "UTF-8", parameters: "", evalJSON: true, evalJS: true }; Object.extend(this.options, a || {}); this.options.method = this.options.method.toLowerCase(); if (Object.isHash(this.options.parameters)) {
        this.options.parameters = this.options.parameters.toObject();
    } } });
Ajax.Request = Class.create(Ajax.Base, { _complete: false, initialize: function ($super, b, a) { $super(a); this.transport = Ajax.getTransport(); this.request(b); }, request: function (b) { this.url = b; this.method = this.options.method; var d = Object.isString(this.options.parameters) ? this.options.parameters : Object.toQueryString(this.options.parameters); if (!["get", "post"].include(this.method)) {
        d += (d ? "&" : "") + "_method=" + this.method;
        this.method = "post";
    } if (d) {
        if (this.method == "get") {
            this.url += (this.url.include("?") ? "&" : "?") + d;
        }
        else {
            if (/Konqueror|Safari|KHTML/.test(navigator.userAgent)) {
                d += "&_=";
            }
        }
    } this.parameters = d.toQueryParams(); try {
        var a = new Ajax.Response(this);
        if (this.options.onCreate) {
            this.options.onCreate(a);
        }
        Ajax.Responders.dispatch("onCreate", this, a);
        this.transport.open(this.method.toUpperCase(), this.url, this.options.asynchronous);
        if (this.options.asynchronous) {
            this.respondToReadyState.bind(this).defer(1);
        }
        this.transport.onreadystatechange = this.onStateChange.bind(this);
        this.setRequestHeaders();
        this.body = this.method == "post" ? (this.options.postBody || d) : null;
        this.transport.send(this.body);
        if (!this.options.asynchronous && this.transport.overrideMimeType) {
            this.onStateChange();
        }
    }
    catch (c) {
        this.dispatchException(c);
    } }, onStateChange: function () { var a = this.transport.readyState; if (a > 1 && !((a == 4) && this._complete)) {
        this.respondToReadyState(this.transport.readyState);
    } }, setRequestHeaders: function () { var e = { "X-Requested-With": "XMLHttpRequest", "X-Prototype-Version": Prototype.Version, Accept: "text/javascript, text/html, application/xml, text/xml, */*" }; if (this.method == "post") {
        e["Content-type"] = this.options.contentType + (this.options.encoding ? "; charset=" + this.options.encoding : "");
        if (this.transport.overrideMimeType && (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0, 2005])[1] < 2005) {
            e.Connection = "close";
        }
    } if (typeof this.options.requestHeaders == "object") {
        var c = this.options.requestHeaders;
        if (Object.isFunction(c.push)) {
            for (var b = 0, d = c.length; b < d; b += 2) {
                e[c[b]] = c[b + 1];
            }
        }
        else {
            $H(c).each(function (h) { e[h.key] = h.value; });
        }
    } for (var a in e) {
        this.transport.setRequestHeader(a, e[a]);
    } }, success: function () { var a = this.getStatus(); return !a || (a >= 200 && a < 300); }, getStatus: function () { try {
        return this.transport.status || 0;
    }
    catch (a) {
        return 0;
    } }, respondToReadyState: function (a) { var c = Ajax.Request.Events[a], b = new Ajax.Response(this); if (c == "Complete") {
        try {
            this._complete = true;
            (this.options["on" + b.status] || this.options["on" + (this.success() ? "Success" : "Failure")] || Prototype.emptyFunction)(b, b.headerJSON);
        }
        catch (d) {
            this.dispatchException(d);
        }
        var h = b.getHeader("Content-type");
        if (this.options.evalJS == "force" || (this.options.evalJS && this.isSameOrigin() && h && h.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i))) {
            this.evalResponse();
        }
    } try {
        (this.options["on" + c] || Prototype.emptyFunction)(b, b.headerJSON);
        Ajax.Responders.dispatch("on" + c, this, b, b.headerJSON);
    }
    catch (d) {
        this.dispatchException(d);
    } if (c == "Complete") {
        this.transport.onreadystatechange = Prototype.emptyFunction;
    } }, isSameOrigin: function () { var a = this.url.match(/^\s*https?:\/\/[^\/]*/); return !a || (a[0] == "#{protocol}//#{domain}#{port}".interpolate({ protocol: location.protocol, domain: document.domain, port: location.port ? ":" + location.port : "" })); }, getHeader: function (a) { try {
        return this.transport.getResponseHeader(a) || null;
    }
    catch (b) {
        return null;
    } }, evalResponse: function () { try {
        return eval((this.transport.responseText || "").unfilterJSON());
    }
    catch (e) {
        this.dispatchException(e);
    } }, dispatchException: function (a) { (this.options.onException || Prototype.emptyFunction)(this, a); Ajax.Responders.dispatch("onException", this, a); } });
Ajax.Request.Events = ["Uninitialized", "Loading", "Loaded", "Interactive", "Complete"];
Ajax.Response = Class.create({ initialize: function (c) { this.request = c; var d = this.transport = c.transport, a = this.readyState = d.readyState; if ((a > 2 && !Prototype.Browser.IE) || a == 4) {
        this.status = this.getStatus();
        this.statusText = this.getStatusText();
        this.responseText = String.interpret(d.responseText);
        this.headerJSON = this._getHeaderJSON();
    } if (a == 4) {
        var b = d.responseXML;
        this.responseXML = Object.isUndefined(b) ? null : b;
        this.responseJSON = this._getResponseJSON();
    } }, status: 0, statusText: "", getStatus: Ajax.Request.prototype.getStatus, getStatusText: function () { try {
        return this.transport.statusText || "";
    }
    catch (a) {
        return "";
    } }, getHeader: Ajax.Request.prototype.getHeader, getAllHeaders: function () { try {
        return this.getAllResponseHeaders();
    }
    catch (a) {
        return null;
    } }, getResponseHeader: function (a) { return this.transport.getResponseHeader(a); }, getAllResponseHeaders: function () { return this.transport.getAllResponseHeaders(); }, _getHeaderJSON: function () { var a = this.getHeader("X-JSON"); if (!a) {
        return null;
    } a = decodeURIComponent(escape(a)); try {
        return a.evalJSON(this.request.options.sanitizeJSON || !this.request.isSameOrigin());
    }
    catch (b) {
        this.request.dispatchException(b);
    } }, _getResponseJSON: function () { var a = this.request.options; if (!a.evalJSON || (a.evalJSON != "force" && !(this.getHeader("Content-type") || "").include("application/json")) || this.responseText.blank()) {
        return null;
    } try {
        return this.responseText.evalJSON(a.sanitizeJSON || !this.request.isSameOrigin());
    }
    catch (b) {
        this.request.dispatchException(b);
    } } });
Ajax.Updater = Class.create(Ajax.Request, { initialize: function ($super, a, c, b) { this.container = { success: (a.success || a), failure: (a.failure || (a.success ? null : a)) }; b = Object.clone(b); var d = b.onComplete; b.onComplete = (function (e, h) { this.updateContent(e.responseText); if (Object.isFunction(d)) {
        d(e, h);
    } }).bind(this); $super(c, b); }, updateContent: function (d) { var c = this.container[this.success() ? "success" : "failure"], a = this.options; if (!a.evalScripts) {
        d = d.stripScripts();
    } if (c = $(c)) {
        if (a.insertion) {
            if (Object.isString(a.insertion)) {
                var b = {};
                b[a.insertion] = d;
                c.insert(b);
            }
            else {
                a.insertion(c, d);
            }
        }
        else {
            c.update(d);
        }
    } } });
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, { initialize: function ($super, a, c, b) { $super(b); this.onComplete = this.options.onComplete; this.frequency = (this.options.frequency || 2); this.decay = (this.options.decay || 1); this.updater = {}; this.container = a; this.url = c; this.start(); }, start: function () { this.options.onComplete = this.updateComplete.bind(this); this.onTimerEvent(); }, stop: function () { this.updater.options.onComplete = undefined; clearTimeout(this.timer); (this.onComplete || Prototype.emptyFunction).apply(this, arguments); }, updateComplete: function (a) { if (this.options.decay) {
        this.decay = (a.responseText == this.lastText ? this.decay * this.options.decay : 1);
        this.lastText = a.responseText;
    } this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency); }, onTimerEvent: function () { this.updater = new Ajax.Updater(this.container, this.url, this.options); } });
function $(b) { if (arguments.length > 1) {
    for (var a = 0, d = [], c = arguments.length; a < c; a++) {
        d.push($(arguments[a]));
    }
    return d;
} if (Object.isString(b)) {
    b = document.getElementById(b);
} return Element.extend(b); }
if (Prototype.BrowserFeatures.XPath) {
    document._getElementsByXPath = function (h, a) { var c = []; var e = document.evaluate(h, $(a) || document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); for (var b = 0, d = e.snapshotLength; b < d; b++) {
        c.push(Element.extend(e.snapshotItem(b)));
    } return c; };
}
if (!Node) {
    var Node = {};
}
if (!Node.ELEMENT_NODE) {
    Object.extend(Node, { ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5, ENTITY_NODE: 6, PROCESSING_INSTRUCTION_NODE: 7, COMMENT_NODE: 8, DOCUMENT_NODE: 9, DOCUMENT_TYPE_NODE: 10, DOCUMENT_FRAGMENT_NODE: 11, NOTATION_NODE: 12 });
}
(function (c) { var b = (function () { try {
    var d = document.createElement('<input name="x">');
    return d.tagName.toLowerCase() === "input" && d.name === "x";
}
catch (e) {
    return false;
} })(); var a = c.Element; c.Element = function (h, e) { e = e || {}; h = h.toLowerCase(); var d = Element.cache; if (b && e.name) {
    h = "<" + h + ' name="' + e.name + '">';
    delete e.name;
    return Element.writeAttribute(document.createElement(h), e);
} if (!d[h]) {
    d[h] = Element.extend(document.createElement(h));
} var l = ("type" in e) ? document.createElement(h) : d[h].cloneNode(false); return Element.writeAttribute(l, e); }; Object.extend(c.Element, a || {}); if (a) {
    c.Element.prototype = a.prototype;
} })(this);
Element.idCounter = 1;
Element.cache = {};
Element._purgeElement = function (b) { var a = b._prototypeUID; if (a) {
    Element.stopObserving(b);
    b._prototypeUID = void 0;
    delete Element.Storage[a];
} };
Element.Methods = { visible: function (a) { return $(a).style.display != "none"; }, toggle: function (a) { a = $(a); Element[Element.visible(a) ? "hide" : "show"](a); return a; }, hide: function (a) { a = $(a); a.style.display = "none"; return a; }, show: function (a) { a = $(a); a.style.display = ""; return a; }, remove: function (a) { a = $(a); a.parentNode.removeChild(a); return a; }, update: (function () { var b = (function () { var e = document.createElement("select"), h = true; e.innerHTML = '<option value="test">test</option>'; if (e.options && e.options[0]) {
        h = e.options[0].nodeName.toUpperCase() !== "OPTION";
    } e = null; return h; })(); var a = (function () { try {
        var h = document.createElement("table");
        if (h && h.tBodies) {
            h.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
            var m = typeof h.tBodies[0] == "undefined";
            h = null;
            return m;
        }
    }
    catch (l) {
        return true;
    } })(); var d = (function () { var h = document.createElement("script"), m = false; try {
        h.appendChild(document.createTextNode(""));
        m = !h.firstChild || h.firstChild && h.firstChild.nodeType !== 3;
    }
    catch (l) {
        m = true;
    } h = null; return m; })(); function c(m, n) { m = $(m); var e = Element._purgeElement; var q = m.getElementsByTagName("*"), l = q.length; while (l--) {
        e(q[l]);
    } if (n && n.toElement) {
        n = n.toElement();
    } if (Object.isElement(n)) {
        return m.update().insert(n);
    } n = Object.toHTML(n); var h = m.tagName.toUpperCase(); if (h === "SCRIPT" && d) {
        m.text = n;
        return m;
    } if (b || a) {
        if (h in Element._insertionTranslations.tags) {
            while (m.firstChild) {
                m.removeChild(m.firstChild);
            }
            Element._getContentFromAnonymousElement(h, n.stripScripts()).each(function (r) { m.appendChild(r); });
        }
        else {
            m.innerHTML = n.stripScripts();
        }
    }
    else {
        m.innerHTML = n.stripScripts();
    } n.evalScripts.bind(n).defer(); return m; } return c; })(), replace: function (b, c) { b = $(b); if (c && c.toElement) {
        c = c.toElement();
    }
    else {
        if (!Object.isElement(c)) {
            c = Object.toHTML(c);
            var a = b.ownerDocument.createRange();
            a.selectNode(b);
            c.evalScripts.bind(c).defer();
            c = a.createContextualFragment(c.stripScripts());
        }
    } b.parentNode.replaceChild(c, b); return b; }, insert: function (c, e) { c = $(c); if (Object.isString(e) || Object.isNumber(e) || Object.isElement(e) || (e && (e.toElement || e.toHTML))) {
        e = { bottom: e };
    } var d, h, b, l; for (var a in e) {
        d = e[a];
        a = a.toLowerCase();
        h = Element._insertionTranslations[a];
        if (d && d.toElement) {
            d = d.toElement();
        }
        if (Object.isElement(d)) {
            h(c, d);
            continue;
        }
        d = Object.toHTML(d);
        b = ((a == "before" || a == "after") ? c.parentNode : c).tagName.toUpperCase();
        l = Element._getContentFromAnonymousElement(b, d.stripScripts());
        if (a == "top" || a == "after") {
            l.reverse();
        }
        l.each(h.curry(c));
        d.evalScripts.bind(d).defer();
    } return c; }, wrap: function (b, c, a) { b = $(b); if (Object.isElement(c)) {
        $(c).writeAttribute(a || {});
    }
    else {
        if (Object.isString(c)) {
            c = new Element(c, a);
        }
        else {
            c = new Element("div", c);
        }
    } if (b.parentNode) {
        b.parentNode.replaceChild(c, b);
    } c.appendChild(b); return c; }, inspect: function (b) { b = $(b); var a = "<" + b.tagName.toLowerCase(); $H({ id: "id", className: "class" }).each(function (h) { var e = h.first(), c = h.last(), d = (b[e] || "").toString(); if (d) {
        a += " " + c + "=" + d.inspect(true);
    } }); return a + ">"; }, recursivelyCollect: function (a, c, d) { a = $(a); d = d || -1; var b = []; while (a = a[c]) {
        if (a.nodeType == 1) {
            b.push(Element.extend(a));
        }
        if (b.length == d) {
            break;
        }
    } return b; }, ancestors: function (a) { return Element.recursivelyCollect(a, "parentNode"); }, descendants: function (a) { return Element.select(a, "*"); }, firstDescendant: function (a) { a = $(a).firstChild; while (a && a.nodeType != 1) {
        a = a.nextSibling;
    } return $(a); }, immediateDescendants: function (b) { var a = [], c = $(b).firstChild; while (c) {
        if (c.nodeType === 1) {
            a.push(Element.extend(c));
        }
        c = c.nextSibling;
    } return a; }, previousSiblings: function (a, b) { return Element.recursivelyCollect(a, "previousSibling"); }, nextSiblings: function (a) { return Element.recursivelyCollect(a, "nextSibling"); }, siblings: function (a) { a = $(a); return Element.previousSiblings(a).reverse().concat(Element.nextSiblings(a)); }, match: function (b, a) { b = $(b); if (Object.isString(a)) {
        return Prototype.Selector.match(b, a);
    } return a.match(b); }, up: function (b, d, a) { b = $(b); if (arguments.length == 1) {
        return $(b.parentNode);
    } var c = Element.ancestors(b); return Object.isNumber(d) ? c[d] : Prototype.Selector.find(c, d, a); }, down: function (b, c, a) { b = $(b); if (arguments.length == 1) {
        return Element.firstDescendant(b);
    } return Object.isNumber(c) ? Element.descendants(b)[c] : Element.select(b, c)[a || 0]; }, previous: function (b, c, a) { b = $(b); if (Object.isNumber(c)) {
        a = c, c = false;
    } if (!Object.isNumber(a)) {
        a = 0;
    } if (c) {
        return Prototype.Selector.find(b.previousSiblings(), c, a);
    }
    else {
        return b.recursivelyCollect("previousSibling", a + 1)[a];
    } }, next: function (b, d, a) { b = $(b); if (Object.isNumber(d)) {
        a = d, d = false;
    } if (!Object.isNumber(a)) {
        a = 0;
    } if (d) {
        return Prototype.Selector.find(b.nextSiblings(), d, a);
    }
    else {
        var c = Object.isNumber(a) ? a + 1 : 1;
        return b.recursivelyCollect("nextSibling", a + 1)[a];
    } }, select: function (a) { a = $(a); var b = Array.prototype.slice.call(arguments, 1).join(", "); return Prototype.Selector.select(b, a); }, adjacent: function (a) { a = $(a); var b = Array.prototype.slice.call(arguments, 1).join(", "); return Prototype.Selector.select(b, a.parentNode).without(a); }, identify: function (a) { a = $(a); var b = Element.readAttribute(a, "id"); if (b) {
        return b;
    } do {
        b = "anonymous_element_" + Element.idCounter++;
    } while ($(b)); Element.writeAttribute(a, "id", b); return b; }, readAttribute: function (c, a) { c = $(c); if (Prototype.Browser.IE) {
        var b = Element._attributeTranslations.read;
        if (b.values[a]) {
            return b.values[a](c, a);
        }
        if (b.names[a]) {
            a = b.names[a];
        }
        if (a.include(":")) {
            return (!c.attributes || !c.attributes[a]) ? null : c.attributes[a].value;
        }
    } return c.getAttribute(a); }, writeAttribute: function (e, c, h) { e = $(e); var b = {}, d = Element._attributeTranslations.write; if (typeof c == "object") {
        b = c;
    }
    else {
        b[c] = Object.isUndefined(h) ? true : h;
    } for (var a in b) {
        c = d.names[a] || a;
        h = b[a];
        if (d.values[a]) {
            c = d.values[a](e, h);
        }
        if (h === false || h === null) {
            e.removeAttribute(c);
        }
        else {
            if (h === true) {
                e.setAttribute(c, c);
            }
            else {
                e.setAttribute(c, h);
            }
        }
    } return e; }, getHeight: function (a) { return Element.getDimensions(a).height; }, getWidth: function (a) { return Element.getDimensions(a).width; }, classNames: function (a) { return new Element.ClassNames(a); }, hasClassName: function (a, b) { if (!(a = $(a))) {
        return;
    } var c = a.className; return (c.length > 0 && (c == b || new RegExp("(^|\\s)" + b + "(\\s|$)").test(c))); }, addClassName: function (a, b) { if (!(a = $(a))) {
        return;
    } if (!Element.hasClassName(a, b)) {
        a.className += (a.className ? " " : "") + b;
    } return a; }, removeClassName: function (a, b) { if (!(a = $(a))) {
        return;
    } a.className = a.className.replace(new RegExp("(^|\\s+)" + b + "(\\s+|$)"), " ").strip(); return a; }, toggleClassName: function (a, b) { if (!(a = $(a))) {
        return;
    } return Element[Element.hasClassName(a, b) ? "removeClassName" : "addClassName"](a, b); }, cleanWhitespace: function (b) { b = $(b); var c = b.firstChild; while (c) {
        var a = c.nextSibling;
        if (c.nodeType == 3 && !/\S/.test(c.nodeValue)) {
            b.removeChild(c);
        }
        c = a;
    } return b; }, empty: function (a) { return $(a).innerHTML.blank(); }, descendantOf: function (b, a) { b = $(b), a = $(a); if (b.compareDocumentPosition) {
        return (b.compareDocumentPosition(a) & 8) === 8;
    } if (a.contains) {
        return a.contains(b) && a !== b;
    } while (b = b.parentNode) {
        if (b == a) {
            return true;
        }
    } return false; }, scrollTo: function (a) { a = $(a); var b = Element.cumulativeOffset(a); window.scrollTo(b[0], b[1]); return a; }, getStyle: function (b, c) { b = $(b); c = c == "float" ? "cssFloat" : c.camelize(); var d = b.style[c]; if (!d || d == "auto") {
        var a = document.defaultView.getComputedStyle(b, null);
        d = a ? a[c] : null;
    } if (c == "opacity") {
        return d ? parseFloat(d) : 1;
    } return d == "auto" ? null : d; }, getOpacity: function (a) { return $(a).getStyle("opacity"); }, setStyle: function (b, c) { b = $(b); var e = b.style, a; if (Object.isString(c)) {
        b.style.cssText += ";" + c;
        return c.include("opacity") ? b.setOpacity(c.match(/opacity:\s*(\d?\.?\d*)/)[1]) : b;
    } for (var d in c) {
        if (d == "opacity") {
            b.setOpacity(c[d]);
        }
        else {
            e[(d == "float" || d == "cssFloat") ? (Object.isUndefined(e.styleFloat) ? "cssFloat" : "styleFloat") : d] = c[d];
        }
    } return b; }, setOpacity: function (a, b) { a = $(a); a.style.opacity = (b == 1 || b === "") ? "" : (b < 0.00001) ? 0 : b; return a; }, makePositioned: function (a) { a = $(a); var b = Element.getStyle(a, "position"); if (b == "static" || !b) {
        a._madePositioned = true;
        a.style.position = "relative";
        if (Prototype.Browser.Opera) {
            a.style.top = 0;
            a.style.left = 0;
        }
    } return a; }, undoPositioned: function (a) { a = $(a); if (a._madePositioned) {
        a._madePositioned = undefined;
        a.style.position = a.style.top = a.style.left = a.style.bottom = a.style.right = "";
    } return a; }, makeClipping: function (a) { a = $(a); if (a._overflow) {
        return a;
    } a._overflow = Element.getStyle(a, "overflow") || "auto"; if (a._overflow !== "hidden") {
        a.style.overflow = "hidden";
    } return a; }, undoClipping: function (a) { a = $(a); if (!a._overflow) {
        return a;
    } a.style.overflow = a._overflow == "auto" ? "" : a._overflow; a._overflow = null; return a; }, clonePosition: function (b, d) { var a = Object.extend({ setLeft: true, setTop: true, setWidth: true, setHeight: true, offsetTop: 0, offsetLeft: 0 }, arguments[2] || {}); d = $(d); var e = Element.viewportOffset(d), h = [0, 0], c = null; b = $(b); if (Element.getStyle(b, "position") == "absolute") {
        c = Element.getOffsetParent(b);
        h = Element.viewportOffset(c);
    } if (c == document.body) {
        h[0] -= document.body.offsetLeft;
        h[1] -= document.body.offsetTop;
    } if (a.setLeft) {
        b.style.left = (e[0] - h[0] + a.offsetLeft) + "px";
    } if (a.setTop) {
        b.style.top = (e[1] - h[1] + a.offsetTop) + "px";
    } if (a.setWidth) {
        b.style.width = d.offsetWidth + "px";
    } if (a.setHeight) {
        b.style.height = d.offsetHeight + "px";
    } return b; } };
Object.extend(Element.Methods, { getElementsBySelector: Element.Methods.select, childElements: Element.Methods.immediateDescendants });
Element._attributeTranslations = { write: { names: { className: "class", htmlFor: "for" }, values: {} } };
if (Prototype.Browser.Opera) {
    Element.Methods.getStyle = Element.Methods.getStyle.wrap(function (d, b, c) { switch (c) {
        case "left":
        case "top":
        case "right":
        case "bottom": if (d(b, "position") === "static") {
            return null;
        }
        case "height":
        case "width":
            if (!Element.visible(b)) {
                return null;
            }
            var e = parseInt(d(b, c), 10);
            if (e !== b["offset" + c.capitalize()]) {
                return e + "px";
            }
            var a;
            if (c === "height") {
                a = ["border-top-width", "padding-top", "padding-bottom", "border-bottom-width"];
            }
            else {
                a = ["border-left-width", "padding-left", "padding-right", "border-right-width"];
            }
            return a.inject(e, function (h, l) { var m = d(b, l); return m === null ? h : h - parseInt(m, 10); }) + "px";
        default: return d(b, c);
    } });
    Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(function (c, a, b) { if (b === "title") {
        return a.title;
    } return c(a, b); });
}
else {
    if (Prototype.Browser.IE) {
        Element.Methods.getStyle = function (a, b) { a = $(a); b = (b == "float" || b == "cssFloat") ? "styleFloat" : b.camelize(); var c = a.style[b]; if (!c && a.currentStyle) {
            c = a.currentStyle[b];
        } if (b == "opacity") {
            if (c = (a.getStyle("filter") || "").match(/alpha\(opacity=(.*)\)/)) {
                if (c[1]) {
                    return parseFloat(c[1]) / 100;
                }
            }
            return 1;
        } if (c == "auto") {
            if ((b == "width" || b == "height") && (a.getStyle("display") != "none")) {
                return a["offset" + b.capitalize()] + "px";
            }
            return null;
        } return c; };
        Element.Methods.setOpacity = function (b, e) { function h(l) { return l.replace(/alpha\([^\)]*\)/gi, ""); } b = $(b); var a = b.currentStyle; if ((a && !a.hasLayout) || (!a && b.style.zoom == "normal")) {
            b.style.zoom = 1;
        } var d = b.getStyle("filter"), c = b.style; if (e == 1 || e === "") {
            (d = h(d)) ? c.filter = d : c.removeAttribute("filter");
            return b;
        }
        else {
            if (e < 0.00001) {
                e = 0;
            }
        } c.filter = h(d) + "alpha(opacity=" + (e * 100) + ")"; return b; };
        Element._attributeTranslations = (function () { var b = "className", a = "for", c = document.createElement("div"); c.setAttribute(b, "x"); if (c.className !== "x") {
            c.setAttribute("class", "x");
            if (c.className === "x") {
                b = "class";
            }
        } c = null; c = document.createElement("label"); c.setAttribute(a, "x"); if (c.htmlFor !== "x") {
            c.setAttribute("htmlFor", "x");
            if (c.htmlFor === "x") {
                a = "htmlFor";
            }
        } c = null; return { read: { names: { "class": b, className: b, "for": a, htmlFor: a }, values: { _getAttr: function (d, e) { return d.getAttribute(e); }, _getAttr2: function (d, e) { return d.getAttribute(e, 2); }, _getAttrNode: function (d, h) { var e = d.getAttributeNode(h); return e ? e.value : ""; }, _getEv: (function () { var d = document.createElement("div"), h; d.onclick = Prototype.emptyFunction; var e = d.getAttribute("onclick"); if (String(e).indexOf("{") > -1) {
                        h = function (l, m) { m = l.getAttribute(m); if (!m) {
                            return null;
                        } m = m.toString(); m = m.split("{")[1]; m = m.split("}")[0]; return m.strip(); };
                    }
                    else {
                        if (e === "") {
                            h = function (l, m) { m = l.getAttribute(m); if (!m) {
                                return null;
                            } return m.strip(); };
                        }
                    } d = null; return h; })(), _flag: function (d, e) { return $(d).hasAttribute(e) ? e : null; }, style: function (d) { return d.style.cssText.toLowerCase(); }, title: function (d) { return d.title; } } } }; })();
        Element._attributeTranslations.write = { names: Object.extend({ cellpadding: "cellPadding", cellspacing: "cellSpacing" }, Element._attributeTranslations.read.names), values: { checked: function (a, b) { a.checked = !!b; }, style: function (a, b) { a.style.cssText = b ? b : ""; } } };
        Element._attributeTranslations.has = {};
        $w("colSpan rowSpan vAlign dateTime accessKey tabIndex encType maxLength readOnly longDesc frameBorder").each(function (a) { Element._attributeTranslations.write.names[a.toLowerCase()] = a; Element._attributeTranslations.has[a.toLowerCase()] = a; });
        (function (a) { Object.extend(a, { href: a._getAttr2, src: a._getAttr2, type: a._getAttr, action: a._getAttrNode, disabled: a._flag, checked: a._flag, readonly: a._flag, multiple: a._flag, onload: a._getEv, onunload: a._getEv, onclick: a._getEv, ondblclick: a._getEv, onmousedown: a._getEv, onmouseup: a._getEv, onmouseover: a._getEv, onmousemove: a._getEv, onmouseout: a._getEv, onfocus: a._getEv, onblur: a._getEv, onkeypress: a._getEv, onkeydown: a._getEv, onkeyup: a._getEv, onsubmit: a._getEv, onreset: a._getEv, onselect: a._getEv, onchange: a._getEv }); })(Element._attributeTranslations.read.values);
        if (Prototype.BrowserFeatures.ElementExtensions) {
            (function () { function a(e) { var b = e.getElementsByTagName("*"), d = []; for (var c = 0, h; h = b[c]; c++) {
                if (h.tagName !== "!") {
                    d.push(h);
                }
            } return d; } Element.Methods.down = function (c, d, b) { c = $(c); if (arguments.length == 1) {
                return c.firstDescendant();
            } return Object.isNumber(d) ? a(c)[d] : Element.select(c, d)[b || 0]; }; })();
        }
    }
    else {
        if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
            Element.Methods.setOpacity = function (a, b) { a = $(a); a.style.opacity = (b == 1) ? 0.999999 : (b === "") ? "" : (b < 0.00001) ? 0 : b; return a; };
        }
        else {
            if (Prototype.Browser.WebKit) {
                Element.Methods.setOpacity = function (a, b) { a = $(a); a.style.opacity = (b == 1 || b === "") ? "" : (b < 0.00001) ? 0 : b; if (b == 1) {
                    if (a.tagName.toUpperCase() == "IMG" && a.width) {
                        a.width++;
                        a.width--;
                    }
                    else {
                        try {
                            var d = document.createTextNode(" ");
                            a.appendChild(d);
                            a.removeChild(d);
                        }
                        catch (c) { }
                    }
                } return a; };
            }
        }
    }
}
if ("outerHTML" in document.documentElement) {
    Element.Methods.replace = function (c, e) { c = $(c); if (e && e.toElement) {
        e = e.toElement();
    } if (Object.isElement(e)) {
        c.parentNode.replaceChild(e, c);
        return c;
    } e = Object.toHTML(e); var d = c.parentNode, b = d.tagName.toUpperCase(); if (Element._insertionTranslations.tags[b]) {
        var h = c.next(), a = Element._getContentFromAnonymousElement(b, e.stripScripts());
        d.removeChild(c);
        if (h) {
            a.each(function (l) { d.insertBefore(l, h); });
        }
        else {
            a.each(function (l) { d.appendChild(l); });
        }
    }
    else {
        c.outerHTML = e.stripScripts();
    } e.evalScripts.bind(e).defer(); return c; };
}
Element._returnOffset = function (b, c) { var a = [b, c]; a.left = b; a.top = c; return a; };
Element._getContentFromAnonymousElement = function (d, c) { var e = new Element("div"), b = Element._insertionTranslations.tags[d]; if (b) {
    e.innerHTML = b[0] + c + b[1];
    for (var a = b[2]; a--;) {
        e = e.firstChild;
    }
}
else {
    e.innerHTML = c;
} return $A(e.childNodes); };
Element._insertionTranslations = { before: function (a, b) { a.parentNode.insertBefore(b, a); }, top: function (a, b) { a.insertBefore(b, a.firstChild); }, bottom: function (a, b) { a.appendChild(b); }, after: function (a, b) { a.parentNode.insertBefore(b, a.nextSibling); }, tags: { TABLE: ["<table>", "</table>", 1], TBODY: ["<table><tbody>", "</tbody></table>", 2], TR: ["<table><tbody><tr>", "</tr></tbody></table>", 3], TD: ["<table><tbody><tr><td>", "</td></tr></tbody></table>", 4], SELECT: ["<select>", "</select>", 1] } };
(function () { var a = Element._insertionTranslations.tags; Object.extend(a, { THEAD: a.TBODY, TFOOT: a.TBODY, TH: a.TD }); })();
Element.Methods.Simulated = { hasAttribute: function (a, c) { c = Element._attributeTranslations.has[c] || c; var b = $(a).getAttributeNode(c); return !!(b && b.specified); } };
Element.Methods.ByTag = {};
Object.extend(Element, Element.Methods);
(function (a) { if (!Prototype.BrowserFeatures.ElementExtensions && a.__proto__) {
    window.HTMLElement = {};
    window.HTMLElement.prototype = a.__proto__;
    Prototype.BrowserFeatures.ElementExtensions = true;
} a = null; })(document.createElement("div"));
Element.extend = (function () { function c(l) { if (typeof window.Element != "undefined") {
    var n = window.Element.prototype;
    if (n) {
        var r = "_" + (Math.random() + "").slice(2), m = document.createElement(l);
        n[r] = "x";
        var q = (m[r] !== "x");
        delete n[r];
        m = null;
        return q;
    }
} return false; } function b(m, l) { for (var q in l) {
    var n = l[q];
    if (Object.isFunction(n) && !(q in m)) {
        m[q] = n.methodize();
    }
} } var d = c("object"); if (Prototype.BrowserFeatures.SpecificElementExtensions) {
    if (d) {
        return function (m) { if (m && typeof m._extendedByPrototype == "undefined") {
            var l = m.tagName;
            if (l && (/^(?:object|applet|embed)$/i.test(l))) {
                b(m, Element.Methods);
                b(m, Element.Methods.Simulated);
                b(m, Element.Methods.ByTag[l.toUpperCase()]);
            }
        } return m; };
    }
    return Prototype.K;
} var a = {}, e = Element.Methods.ByTag; var h = Object.extend(function (n) { if (!n || typeof n._extendedByPrototype != "undefined" || n.nodeType != 1 || n == window) {
    return n;
} var l = Object.clone(a), m = n.tagName.toUpperCase(); if (e[m]) {
    Object.extend(l, e[m]);
} b(n, l); n._extendedByPrototype = Prototype.emptyFunction; return n; }, { refresh: function () { if (!Prototype.BrowserFeatures.ElementExtensions) {
        Object.extend(a, Element.Methods);
        Object.extend(a, Element.Methods.Simulated);
    } } }); h.refresh(); return h; })();
if (document.documentElement.hasAttribute) {
    Element.hasAttribute = function (a, b) { return a.hasAttribute(b); };
}
else {
    Element.hasAttribute = Element.Methods.Simulated.hasAttribute;
}
Element.addMethods = function (c) { var n = Prototype.BrowserFeatures, d = Element.Methods.ByTag; if (!c) {
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, { FORM: Object.clone(Form.Methods), INPUT: Object.clone(Form.Element.Methods), SELECT: Object.clone(Form.Element.Methods), TEXTAREA: Object.clone(Form.Element.Methods) });
} if (arguments.length == 2) {
    var b = c;
    c = arguments[1];
} if (!b) {
    Object.extend(Element.Methods, c || {});
}
else {
    if (Object.isArray(b)) {
        b.each(l);
    }
    else {
        l(b);
    }
} function l(r) { r = r.toUpperCase(); if (!Element.Methods.ByTag[r]) {
    Element.Methods.ByTag[r] = {};
} Object.extend(Element.Methods.ByTag[r], c); } function a(t, s, r) { r = r || false; for (var v in t) {
    var u = t[v];
    if (!Object.isFunction(u)) {
        continue;
    }
    if (!r || !(v in s)) {
        s[v] = u.methodize();
    }
} } function e(u) { var r; var t = { OPTGROUP: "OptGroup", TEXTAREA: "TextArea", P: "Paragraph", FIELDSET: "FieldSet", UL: "UList", OL: "OList", DL: "DList", DIR: "Directory", H1: "Heading", H2: "Heading", H3: "Heading", H4: "Heading", H5: "Heading", H6: "Heading", Q: "Quote", INS: "Mod", DEL: "Mod", A: "Anchor", IMG: "Image", CAPTION: "TableCaption", COL: "TableCol", COLGROUP: "TableCol", THEAD: "TableSection", TFOOT: "TableSection", TBODY: "TableSection", TR: "TableRow", TH: "TableCell", TD: "TableCell", FRAMESET: "FrameSet", IFRAME: "IFrame" }; if (t[u]) {
    r = "HTML" + t[u] + "Element";
} if (window[r]) {
    return window[r];
} r = "HTML" + u + "Element"; if (window[r]) {
    return window[r];
} r = "HTML" + u.capitalize() + "Element"; if (window[r]) {
    return window[r];
} var s = document.createElement(u), v = s.__proto__ || s.constructor.prototype; s = null; return v; } var m = window.HTMLElement ? HTMLElement.prototype : Element.prototype; if (n.ElementExtensions) {
    a(Element.Methods, m);
    a(Element.Methods.Simulated, m, true);
} if (n.SpecificElementExtensions) {
    for (var q in Element.Methods.ByTag) {
        var h = e(q);
        if (Object.isUndefined(h)) {
            continue;
        }
        a(d[q], h.prototype);
    }
} Object.extend(Element, Element.Methods); delete Element.ByTag; if (Element.extend.refresh) {
    Element.extend.refresh();
} Element.cache = {}; };
document.viewport = { getDimensions: function () { return { width: this.getWidth(), height: this.getHeight() }; }, getScrollOffsets: function () { return Element._returnOffset(window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop); } };
(function (b) { var l = Prototype.Browser, e = document, c, d = {}; function a() { if (l.WebKit && !e.evaluate) {
    return document;
} if (l.Opera && window.parseFloat(window.opera.version()) < 9.5) {
    return document.body;
} return document.documentElement; } function h(m) { if (!c) {
    c = a();
} d[m] = "client" + m; b["get" + m] = function () { return c[d[m]]; }; return b["get" + m](); } b.getWidth = h.curry("Width"); b.getHeight = h.curry("Height"); })(document.viewport);
Element.Storage = { UID: 1 };
Element.addMethods({ getStorage: function (b) { if (!(b = $(b))) {
        return;
    } var a; if (b === window) {
        a = 0;
    }
    else {
        if (typeof b._prototypeUID === "undefined") {
            b._prototypeUID = Element.Storage.UID++;
        }
        a = b._prototypeUID;
    } if (!Element.Storage[a]) {
        Element.Storage[a] = $H();
    } return Element.Storage[a]; }, store: function (b, a, c) { if (!(b = $(b))) {
        return;
    } if (arguments.length === 2) {
        Element.getStorage(b).update(a);
    }
    else {
        Element.getStorage(b).set(a, c);
    } return b; }, retrieve: function (c, b, a) { if (!(c = $(c))) {
        return;
    } var e = Element.getStorage(c), d = e.get(b); if (Object.isUndefined(d)) {
        e.set(b, a);
        d = a;
    } return d; }, clone: function (c, a) { if (!(c = $(c))) {
        return;
    } var e = c.cloneNode(a); e._prototypeUID = void 0; if (a) {
        var d = Element.select(e, "*"), b = d.length;
        while (b--) {
            d[b]._prototypeUID = void 0;
        }
    } return Element.extend(e); }, purge: function (c) { if (!(c = $(c))) {
        return;
    } var a = Element._purgeElement; a(c); var d = c.getElementsByTagName("*"), b = d.length; while (b--) {
        a(d[b]);
    } return null; } });
(function () { function l(B) { var A = B.match(/^(\d+)%?$/i); if (!A) {
    return null;
} return (Number(A[1]) / 100); } function t(L, M, B) { var E = null; if (Object.isElement(L)) {
    E = L;
    L = E.getStyle(M);
} if (L === null) {
    return null;
} if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(L)) {
    return window.parseFloat(L);
} var G = L.include("%"), C = (B === document.viewport); if (/\d/.test(L) && E && E.runtimeStyle && !(G && C)) {
    var A = E.style.left, K = E.runtimeStyle.left;
    E.runtimeStyle.left = E.currentStyle.left;
    E.style.left = L || 0;
    L = E.style.pixelLeft;
    E.style.left = A;
    E.runtimeStyle.left = K;
    return L;
} if (E && G) {
    B = B || E.parentNode;
    var D = l(L);
    var H = null;
    var F = E.getStyle("position");
    var J = M.include("left") || M.include("right") || M.include("width");
    var I = M.include("top") || M.include("bottom") || M.include("height");
    if (B === document.viewport) {
        if (J) {
            H = document.viewport.getWidth();
        }
        else {
            if (I) {
                H = document.viewport.getHeight();
            }
        }
    }
    else {
        if (J) {
            H = $(B).measure("width");
        }
        else {
            if (I) {
                H = $(B).measure("height");
            }
        }
    }
    return (H === null) ? 0 : H * D;
} return 0; } function h(A) { if (Object.isString(A) && A.endsWith("px")) {
    return A;
} return A + "px"; } function n(B) { var A = B; while (B && B.parentNode) {
    var C = B.getStyle("display");
    if (C === "none") {
        return false;
    }
    B = $(B.parentNode);
} return true; } var d = Prototype.K; if ("currentStyle" in document.documentElement) {
    d = function (A) { if (!A.currentStyle.hasLayout) {
        A.style.zoom = 1;
    } return A; };
} function e(A) { if (A.include("border")) {
    A = A + "-width";
} return A.camelize(); } Element.Layout = Class.create(Hash, { initialize: function ($super, B, A) { $super(); this.element = $(B); Element.Layout.PROPERTIES.each(function (C) { this._set(C, null); }, this); if (A) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each(this._compute, this);
        this._end();
        this._preComputing = false;
    } }, _set: function (B, A) { return Hash.prototype.set.call(this, B, A); }, set: function (B, A) { throw "Properties of Element.Layout are read-only."; }, get: function ($super, B) { var A = $super(B); return A === null ? this._compute(B) : A; }, _begin: function () { if (this._prepared) {
        return;
    } var E = this.element; if (n(E)) {
        this._prepared = true;
        return;
    } var G = { position: E.style.position || "", width: E.style.width || "", visibility: E.style.visibility || "", display: E.style.display || "" }; E.store("prototype_original_styles", G); var H = E.getStyle("position"), A = E.getStyle("width"); var B = (H === "fixed") ? document.viewport : E.parentNode; E.setStyle({ position: "absolute", visibility: "hidden", display: "block" }); var C = E.getStyle("width"); var D; if (A && (C === A)) {
        D = t(E, "width", B);
    }
    else {
        if (H === "absolute" || H === "fixed") {
            D = t(E, "width", B);
        }
        else {
            var I = E.parentNode, F = $(I).getLayout();
            D = F.get("width") - this.get("margin-left") - this.get("border-left") - this.get("padding-left") - this.get("padding-right") - this.get("border-right") - this.get("margin-right");
        }
    } E.setStyle({ width: D + "px" }); this._prepared = true; }, _end: function () { var B = this.element; var A = B.retrieve("prototype_original_styles"); B.store("prototype_original_styles", null); B.setStyle(A); this._prepared = false; }, _compute: function (B) { var A = Element.Layout.COMPUTATIONS; if (!(B in A)) {
        throw "Property not found.";
    } return this._set(B, A[B].call(this, this.element)); }, toObject: function () { var A = $A(arguments); var B = (A.length === 0) ? Element.Layout.PROPERTIES : A.join(" ").split(" "); var C = {}; B.each(function (D) { if (!Element.Layout.PROPERTIES.include(D)) {
        return;
    } var E = this.get(D); if (E != null) {
        C[D] = E;
    } }, this); return C; }, toHash: function () { var A = this.toObject.apply(this, arguments); return new Hash(A); }, toCSS: function () { var A = $A(arguments); var C = (A.length === 0) ? Element.Layout.PROPERTIES : A.join(" ").split(" "); var B = {}; C.each(function (D) { if (!Element.Layout.PROPERTIES.include(D)) {
        return;
    } if (Element.Layout.COMPOSITE_PROPERTIES.include(D)) {
        return;
    } var E = this.get(D); if (E != null) {
        B[e(D)] = E + "px";
    } }, this); return B; }, inspect: function () { return "#<Element.Layout>"; } }); Object.extend(Element.Layout, { PROPERTIES: $w("height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height"), COMPOSITE_PROPERTIES: $w("padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height"), COMPUTATIONS: { height: function (C) { if (!this._preComputing) {
            this._begin();
        } var A = this.get("border-box-height"); if (A <= 0) {
            if (!this._preComputing) {
                this._end();
            }
            return 0;
        } var D = this.get("border-top"), B = this.get("border-bottom"); var F = this.get("padding-top"), E = this.get("padding-bottom"); if (!this._preComputing) {
            this._end();
        } return A - D - B - F - E; }, width: function (C) { if (!this._preComputing) {
            this._begin();
        } var B = this.get("border-box-width"); if (B <= 0) {
            if (!this._preComputing) {
                this._end();
            }
            return 0;
        } var F = this.get("border-left"), A = this.get("border-right"); var D = this.get("padding-left"), E = this.get("padding-right"); if (!this._preComputing) {
            this._end();
        } return B - F - A - D - E; }, "padding-box-height": function (B) { var A = this.get("height"), D = this.get("padding-top"), C = this.get("padding-bottom"); return A + D + C; }, "padding-box-width": function (A) { var B = this.get("width"), C = this.get("padding-left"), D = this.get("padding-right"); return B + C + D; }, "border-box-height": function (B) { if (!this._preComputing) {
            this._begin();
        } var A = B.offsetHeight; if (!this._preComputing) {
            this._end();
        } return A; }, "border-box-width": function (A) { if (!this._preComputing) {
            this._begin();
        } var B = A.offsetWidth; if (!this._preComputing) {
            this._end();
        } return B; }, "margin-box-height": function (B) { var A = this.get("border-box-height"), C = this.get("margin-top"), D = this.get("margin-bottom"); if (A <= 0) {
            return 0;
        } return A + C + D; }, "margin-box-width": function (C) { var B = this.get("border-box-width"), D = this.get("margin-left"), A = this.get("margin-right"); if (B <= 0) {
            return 0;
        } return B + D + A; }, top: function (A) { var B = A.positionedOffset(); return B.top; }, bottom: function (A) { var D = A.positionedOffset(), B = A.getOffsetParent(), C = B.measure("height"); var E = this.get("border-box-height"); return C - E - D.top; }, left: function (A) { var B = A.positionedOffset(); return B.left; }, right: function (C) { var E = C.positionedOffset(), D = C.getOffsetParent(), A = D.measure("width"); var B = this.get("border-box-width"); return A - B - E.left; }, "padding-top": function (A) { return t(A, "paddingTop"); }, "padding-bottom": function (A) { return t(A, "paddingBottom"); }, "padding-left": function (A) { return t(A, "paddingLeft"); }, "padding-right": function (A) { return t(A, "paddingRight"); }, "border-top": function (A) { return t(A, "borderTopWidth"); }, "border-bottom": function (A) { return t(A, "borderBottomWidth"); }, "border-left": function (A) { return t(A, "borderLeftWidth"); }, "border-right": function (A) { return t(A, "borderRightWidth"); }, "margin-top": function (A) { return t(A, "marginTop"); }, "margin-bottom": function (A) { return t(A, "marginBottom"); }, "margin-left": function (A) { return t(A, "marginLeft"); }, "margin-right": function (A) { return t(A, "marginRight"); } } }); if ("getBoundingClientRect" in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, { right: function (B) { var C = d(B.getOffsetParent()); var D = B.getBoundingClientRect(), A = C.getBoundingClientRect(); return (A.right - D.right).round(); }, bottom: function (B) { var C = d(B.getOffsetParent()); var D = B.getBoundingClientRect(), A = C.getBoundingClientRect(); return (A.bottom - D.bottom).round(); } });
} Element.Offset = Class.create({ initialize: function (B, A) { this.left = B.round(); this.top = A.round(); this[0] = this.left; this[1] = this.top; }, relativeTo: function (A) { return new Element.Offset(this.left - A.left, this.top - A.top); }, inspect: function () { return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this); }, toString: function () { return "[#{left}, #{top}]".interpolate(this); }, toArray: function () { return [this.left, this.top]; } }); function w(B, A) { return new Element.Layout(B, A); } function b(A, B) { return $(A).getLayout().get(B); } function s(B) { B = $(B); var F = Element.getStyle(B, "display"); if (F && F !== "none") {
    return { width: B.offsetWidth, height: B.offsetHeight };
} var C = B.style; var A = { visibility: C.visibility, position: C.position, display: C.display }; var E = { visibility: "hidden", display: "block" }; if (A.position !== "fixed") {
    E.position = "absolute";
} Element.setStyle(B, E); var D = { width: B.offsetWidth, height: B.offsetHeight }; Element.setStyle(B, A); return D; } function q(A) { if (c(A)) {
    return $(document.body);
} var B = (Element.getStyle(A, "display") === "inline"); if (!B && A.offsetParent) {
    return $(A.offsetParent);
} if (A === document.body) {
    return $(A);
} while ((A = A.parentNode) && A !== document.body) {
    if (Element.getStyle(A, "position") !== "static") {
        return (A.nodeName === "HTML") ? $(document.body) : $(A);
    }
} return $(document.body); } function z(B) { var A = 0, C = 0; if (B.parentNode) {
    do {
        A += B.offsetTop || 0;
        C += B.offsetLeft || 0;
        B = B.offsetParent;
    } while (B);
} return new Element.Offset(C, A); } function u(B) { var C = B.getLayout(); var A = 0, E = 0; do {
    A += B.offsetTop || 0;
    E += B.offsetLeft || 0;
    B = B.offsetParent;
    if (B) {
        if (r(B)) {
            break;
        }
        var D = Element.getStyle(B, "position");
        if (D !== "static") {
            break;
        }
    }
} while (B); E -= C.get("margin-top"); A -= C.get("margin-left"); return new Element.Offset(E, A); } function a(B) { var A = 0, C = 0; do {
    A += B.scrollTop || 0;
    C += B.scrollLeft || 0;
    B = B.parentNode;
} while (B); return new Element.Offset(C, A); } function y(E) { var A = 0, D = 0, C = document.body; var B = E; do {
    A += B.offsetTop || 0;
    D += B.offsetLeft || 0;
    if (B.offsetParent == C && Element.getStyle(B, "position") == "absolute") {
        break;
    }
} while (B = B.offsetParent); B = E; do {
    if (B != C) {
        A -= B.scrollTop || 0;
        D -= B.scrollLeft || 0;
    }
} while (B = B.parentNode); return new Element.Offset(D, A); } function v(A) { A = $(A); if (Element.getStyle(A, "position") === "absolute") {
    return A;
} var E = q(A); var D = A.viewportOffset(), B = E.viewportOffset(); var F = D.relativeTo(B); var C = A.getLayout(); A.store("prototype_absolutize_original_styles", { left: A.getStyle("left"), top: A.getStyle("top"), width: A.getStyle("width"), height: A.getStyle("height") }); A.setStyle({ position: "absolute", top: F.top + "px", left: F.left + "px", width: C.get("width") + "px", height: C.get("height") + "px" }); return A; } function m(B) { B = $(B); if (Element.getStyle(B, "position") === "relative") {
    return B;
} var A = B.retrieve("prototype_absolutize_original_styles"); if (A) {
    B.setStyle(A);
} return B; } if (Prototype.Browser.IE) {
    q = q.wrap(function (C, B) { B = $(B); if (c(B)) {
        return $(document.body);
    } var A = B.getStyle("position"); if (A !== "static") {
        return C(B);
    } B.setStyle({ position: "relative" }); var D = C(B); B.setStyle({ position: A }); return D; });
    u = u.wrap(function (D, B) { B = $(B); if (!B.parentNode) {
        return new Element.Offset(0, 0);
    } var A = B.getStyle("position"); if (A !== "static") {
        return D(B);
    } var C = B.getOffsetParent(); if (C && C.getStyle("position") === "fixed") {
        d(C);
    } B.setStyle({ position: "relative" }); var E = D(B); B.setStyle({ position: A }); return E; });
}
else {
    if (Prototype.Browser.Webkit) {
        z = function (B) { var A = 0, C = 0; do {
            A += B.offsetTop || 0;
            C += B.offsetLeft || 0;
            if (B.offsetParent == document.body) {
                if (Element.getStyle(B, "position") == "absolute") {
                    break;
                }
            }
            B = B.offsetParent;
        } while (B); return new Element.Offset(C, A); };
    }
} Element.addMethods({ getLayout: w, measure: b, getDimensions: s, getOffsetParent: q, cumulativeOffset: z, positionedOffset: u, cumulativeScrollOffset: a, viewportOffset: y, absolutize: v, relativize: m }); function r(A) { return A.nodeName.toUpperCase() === "BODY"; } function c(A) { return A !== document.body && !Element.descendantOf(A, document.body); } if ("getBoundingClientRect" in document.documentElement) {
    Element.addMethods({ viewportOffset: function (A) { A = $(A); if (c(A)) {
            return new Element.Offset(0, 0);
        } var B = A.getBoundingClientRect(), C = document.documentElement; return new Element.Offset(B.left - C.clientLeft, B.top - C.clientTop); } });
} })();
window.$$ = function () { var a = $A(arguments).join(", "); return Prototype.Selector.select(a, document); };
Prototype.Selector = (function () { function a() { throw new Error('Method "Prototype.Selector.select" must be defined.'); } function c() { throw new Error('Method "Prototype.Selector.match" must be defined.'); } function d(r, s, m) { m = m || 0; var l = Prototype.Selector.match, q = r.length, h = 0, n; for (n = 0; n < q; n++) {
    if (l(r[n], s) && m == h++) {
        return Element.extend(r[n]);
    }
} } function e(m) { for (var h = 0, l = m.length; h < l; h++) {
    Element.extend(m[h]);
} return m; } var b = Prototype.K; return { select: a, match: c, find: d, extendElements: (Element.extend === b) ? b : e, extendElement: Element.extend }; })();
Prototype._original_property = window.Sizzle;
/*
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function () { var y = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, q = 0, d = Object.prototype.toString, v = false, n = true; [0, 0].sort(function () { n = false; return 0; }); var b = function (M, C, J, E) { J = J || []; var e = C = C || document; if (C.nodeType !== 1 && C.nodeType !== 9) {
    return [];
} if (!M || typeof M !== "string") {
    return J;
} var K = [], L, H, Q, P, I, B, A = true, F = w(C), O = M; while ((y.exec(""), L = y.exec(O)) !== null) {
    O = L[3];
    K.push(L[1]);
    if (L[2]) {
        B = L[3];
        break;
    }
} if (K.length > 1 && r.exec(M)) {
    if (K.length === 2 && h.relative[K[0]]) {
        H = l(K[0] + K[1], C);
    }
    else {
        H = h.relative[K[0]] ? [C] : b(K.shift(), C);
        while (K.length) {
            M = K.shift();
            if (h.relative[M]) {
                M += K.shift();
            }
            H = l(M, H);
        }
    }
}
else {
    if (!E && K.length > 1 && C.nodeType === 9 && !F && h.match.ID.test(K[0]) && !h.match.ID.test(K[K.length - 1])) {
        var R = b.find(K.shift(), C, F);
        C = R.expr ? b.filter(R.expr, R.set)[0] : R.set[0];
    }
    if (C) {
        var R = E ? { expr: K.pop(), set: a(E) } : b.find(K.pop(), K.length === 1 && (K[0] === "~" || K[0] === "+") && C.parentNode ? C.parentNode : C, F);
        H = R.expr ? b.filter(R.expr, R.set) : R.set;
        if (K.length > 0) {
            Q = a(H);
        }
        else {
            A = false;
        }
        while (K.length) {
            var D = K.pop(), G = D;
            if (!h.relative[D]) {
                D = "";
            }
            else {
                G = K.pop();
            }
            if (G == null) {
                G = C;
            }
            h.relative[D](Q, G, F);
        }
    }
    else {
        Q = K = [];
    }
} if (!Q) {
    Q = H;
} if (!Q) {
    throw "Syntax error, unrecognized expression: " + (D || M);
} if (d.call(Q) === "[object Array]") {
    if (!A) {
        J.push.apply(J, Q);
    }
    else {
        if (C && C.nodeType === 1) {
            for (var N = 0; Q[N] != null; N++) {
                if (Q[N] && (Q[N] === true || Q[N].nodeType === 1 && m(C, Q[N]))) {
                    J.push(H[N]);
                }
            }
        }
        else {
            for (var N = 0; Q[N] != null; N++) {
                if (Q[N] && Q[N].nodeType === 1) {
                    J.push(H[N]);
                }
            }
        }
    }
}
else {
    a(Q, J);
} if (B) {
    b(B, e, J, E);
    b.uniqueSort(J);
} return J; }; b.uniqueSort = function (A) { if (c) {
    v = n;
    A.sort(c);
    if (v) {
        for (var e = 1; e < A.length; e++) {
            if (A[e] === A[e - 1]) {
                A.splice(e--, 1);
            }
        }
    }
} return A; }; b.matches = function (e, A) { return b(e, null, null, A); }; b.find = function (G, e, H) { var F, D; if (!G) {
    return [];
} for (var C = 0, B = h.order.length; C < B; C++) {
    var E = h.order[C], D;
    if ((D = h.leftMatch[E].exec(G))) {
        var A = D[1];
        D.splice(1, 1);
        if (A.substr(A.length - 1) !== "\\") {
            D[1] = (D[1] || "").replace(/\\/g, "");
            F = h.find[E](D, e, H);
            if (F != null) {
                G = G.replace(h.match[E], "");
                break;
            }
        }
    }
} if (!F) {
    F = e.getElementsByTagName("*");
} return { set: F, expr: G }; }; b.filter = function (J, I, M, C) { var B = J, O = [], G = I, E, e, F = I && I[0] && w(I[0]); while (J && I.length) {
    for (var H in h.filter) {
        if ((E = h.match[H].exec(J)) != null) {
            var A = h.filter[H], N, L;
            e = false;
            if (G == O) {
                O = [];
            }
            if (h.preFilter[H]) {
                E = h.preFilter[H](E, G, M, O, C, F);
                if (!E) {
                    e = N = true;
                }
                else {
                    if (E === true) {
                        continue;
                    }
                }
            }
            if (E) {
                for (var D = 0; (L = G[D]) != null; D++) {
                    if (L) {
                        N = A(L, E, D, G);
                        var K = C ^ !!N;
                        if (M && N != null) {
                            if (K) {
                                e = true;
                            }
                            else {
                                G[D] = false;
                            }
                        }
                        else {
                            if (K) {
                                O.push(L);
                                e = true;
                            }
                        }
                    }
                }
            }
            if (N !== undefined) {
                if (!M) {
                    G = O;
                }
                J = J.replace(h.match[H], "");
                if (!e) {
                    return [];
                }
                break;
            }
        }
    }
    if (J == B) {
        if (e == null) {
            throw "Syntax error, unrecognized expression: " + J;
        }
        else {
            break;
        }
    }
    B = J;
} return G; }; var h = b.selectors = { order: ["ID", "NAME", "TAG"], match: { ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/, CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/, NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/, ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/, TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/, CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/, POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/, PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/ }, leftMatch: {}, attrMap: { "class": "className", "for": "htmlFor" }, attrHandle: { href: function (e) { return e.getAttribute("href"); } }, relative: { "+": function (G, e, F) { var D = typeof e === "string", H = D && !/\W/.test(e), E = D && !H; if (H && !F) {
            e = e.toUpperCase();
        } for (var C = 0, B = G.length, A; C < B; C++) {
            if ((A = G[C])) {
                while ((A = A.previousSibling) && A.nodeType !== 1) { }
                G[C] = E || A && A.nodeName === e ? A || false : A === e;
            }
        } if (E) {
            b.filter(e, G, true);
        } }, ">": function (F, A, G) { var D = typeof A === "string"; if (D && !/\W/.test(A)) {
            A = G ? A : A.toUpperCase();
            for (var B = 0, e = F.length; B < e; B++) {
                var E = F[B];
                if (E) {
                    var C = E.parentNode;
                    F[B] = C.nodeName === A ? C : false;
                }
            }
        }
        else {
            for (var B = 0, e = F.length; B < e; B++) {
                var E = F[B];
                if (E) {
                    F[B] = D ? E.parentNode : E.parentNode === A;
                }
            }
            if (D) {
                b.filter(A, F, true);
            }
        } }, "": function (C, A, E) { var B = q++, e = z; if (!/\W/.test(A)) {
            var D = A = E ? A : A.toUpperCase();
            e = u;
        } e("parentNode", A, B, C, D, E); }, "~": function (C, A, E) { var B = q++, e = z; if (typeof A === "string" && !/\W/.test(A)) {
            var D = A = E ? A : A.toUpperCase();
            e = u;
        } e("previousSibling", A, B, C, D, E); } }, find: { ID: function (A, B, C) { if (typeof B.getElementById !== "undefined" && !C) {
            var e = B.getElementById(A[1]);
            return e ? [e] : [];
        } }, NAME: function (B, E, F) { if (typeof E.getElementsByName !== "undefined") {
            var A = [], D = E.getElementsByName(B[1]);
            for (var C = 0, e = D.length; C < e; C++) {
                if (D[C].getAttribute("name") === B[1]) {
                    A.push(D[C]);
                }
            }
            return A.length === 0 ? null : A;
        } }, TAG: function (e, A) { return A.getElementsByTagName(e[1]); } }, preFilter: { CLASS: function (C, A, B, e, F, G) { C = " " + C[1].replace(/\\/g, "") + " "; if (G) {
            return C;
        } for (var D = 0, E; (E = A[D]) != null; D++) {
            if (E) {
                if (F ^ (E.className && (" " + E.className + " ").indexOf(C) >= 0)) {
                    if (!B) {
                        e.push(E);
                    }
                }
                else {
                    if (B) {
                        A[D] = false;
                    }
                }
            }
        } return false; }, ID: function (e) { return e[1].replace(/\\/g, ""); }, TAG: function (A, e) { for (var B = 0; e[B] === false; B++) { } return e[B] && w(e[B]) ? A[1] : A[1].toUpperCase(); }, CHILD: function (e) { if (e[1] == "nth") {
            var A = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(e[2] == "even" && "2n" || e[2] == "odd" && "2n+1" || !/\D/.test(e[2]) && "0n+" + e[2] || e[2]);
            e[2] = (A[1] + (A[2] || 1)) - 0;
            e[3] = A[3] - 0;
        } e[0] = q++; return e; }, ATTR: function (D, A, B, e, E, F) { var C = D[1].replace(/\\/g, ""); if (!F && h.attrMap[C]) {
            D[1] = h.attrMap[C];
        } if (D[2] === "~=") {
            D[4] = " " + D[4] + " ";
        } return D; }, PSEUDO: function (D, A, B, e, E) { if (D[1] === "not") {
            if ((y.exec(D[3]) || "").length > 1 || /^\w/.test(D[3])) {
                D[3] = b(D[3], null, null, A);
            }
            else {
                var C = b.filter(D[3], A, B, true ^ E);
                if (!B) {
                    e.push.apply(e, C);
                }
                return false;
            }
        }
        else {
            if (h.match.POS.test(D[0]) || h.match.CHILD.test(D[0])) {
                return true;
            }
        } return D; }, POS: function (e) { e.unshift(true); return e; } }, filters: { enabled: function (e) { return e.disabled === false && e.type !== "hidden"; }, disabled: function (e) { return e.disabled === true; }, checked: function (e) { return e.checked === true; }, selected: function (e) { e.parentNode.selectedIndex; return e.selected === true; }, parent: function (e) { return !!e.firstChild; }, empty: function (e) { return !e.firstChild; }, has: function (B, A, e) { return !!b(e[3], B).length; }, header: function (e) { return /h\d/i.test(e.nodeName); }, text: function (e) { return "text" === e.type; }, radio: function (e) { return "radio" === e.type; }, checkbox: function (e) { return "checkbox" === e.type; }, file: function (e) { return "file" === e.type; }, password: function (e) { return "password" === e.type; }, submit: function (e) { return "submit" === e.type; }, image: function (e) { return "image" === e.type; }, reset: function (e) { return "reset" === e.type; }, button: function (e) { return "button" === e.type || e.nodeName.toUpperCase() === "BUTTON"; }, input: function (e) { return /input|select|textarea|button/i.test(e.nodeName); } }, setFilters: { first: function (A, e) { return e === 0; }, last: function (B, A, e, C) { return A === C.length - 1; }, even: function (A, e) { return e % 2 === 0; }, odd: function (A, e) { return e % 2 === 1; }, lt: function (B, A, e) { return A < e[3] - 0; }, gt: function (B, A, e) { return A > e[3] - 0; }, nth: function (B, A, e) { return e[3] - 0 == A; }, eq: function (B, A, e) { return e[3] - 0 == A; } }, filter: { PSEUDO: function (F, B, C, G) { var A = B[1], D = h.filters[A]; if (D) {
            return D(F, C, B, G);
        }
        else {
            if (A === "contains") {
                return (F.textContent || F.innerText || "").indexOf(B[3]) >= 0;
            }
            else {
                if (A === "not") {
                    var E = B[3];
                    for (var C = 0, e = E.length; C < e; C++) {
                        if (E[C] === F) {
                            return false;
                        }
                    }
                    return true;
                }
            }
        } }, CHILD: function (e, C) { var F = C[1], A = e; switch (F) {
            case "only":
            case "first":
                while ((A = A.previousSibling)) {
                    if (A.nodeType === 1) {
                        return false;
                    }
                }
                if (F == "first") {
                    return true;
                }
                A = e;
            case "last":
                while ((A = A.nextSibling)) {
                    if (A.nodeType === 1) {
                        return false;
                    }
                }
                return true;
            case "nth":
                var B = C[2], I = C[3];
                if (B == 1 && I == 0) {
                    return true;
                }
                var E = C[0], H = e.parentNode;
                if (H && (H.sizcache !== E || !e.nodeIndex)) {
                    var D = 0;
                    for (A = H.firstChild; A; A = A.nextSibling) {
                        if (A.nodeType === 1) {
                            A.nodeIndex = ++D;
                        }
                    }
                    H.sizcache = E;
                }
                var G = e.nodeIndex - I;
                if (B == 0) {
                    return G == 0;
                }
                else {
                    return (G % B == 0 && G / B >= 0);
                }
        } }, ID: function (A, e) { return A.nodeType === 1 && A.getAttribute("id") === e; }, TAG: function (A, e) { return (e === "*" && A.nodeType === 1) || A.nodeName === e; }, CLASS: function (A, e) { return (" " + (A.className || A.getAttribute("class")) + " ").indexOf(e) > -1; }, ATTR: function (E, C) { var B = C[1], e = h.attrHandle[B] ? h.attrHandle[B](E) : E[B] != null ? E[B] : E.getAttribute(B), F = e + "", D = C[2], A = C[4]; return e == null ? D === "!=" : D === "=" ? F === A : D === "*=" ? F.indexOf(A) >= 0 : D === "~=" ? (" " + F + " ").indexOf(A) >= 0 : !A ? F && e !== false : D === "!=" ? F != A : D === "^=" ? F.indexOf(A) === 0 : D === "$=" ? F.substr(F.length - A.length) === A : D === "|=" ? F === A || F.substr(0, A.length + 1) === A + "-" : false; }, POS: function (D, A, B, E) { var e = A[2], C = h.setFilters[e]; if (C) {
            return C(D, B, A, E);
        } } } }; var r = h.match.POS; for (var t in h.match) {
    h.match[t] = new RegExp(h.match[t].source + /(?![^\[]*\])(?![^\(]*\))/.source);
    h.leftMatch[t] = new RegExp(/(^(?:.|\r|\n)*?)/.source + h.match[t].source);
} var a = function (A, e) { A = Array.prototype.slice.call(A, 0); if (e) {
    e.push.apply(e, A);
    return e;
} return A; }; try {
    Array.prototype.slice.call(document.documentElement.childNodes, 0);
}
catch (s) {
    a = function (D, C) { var A = C || []; if (d.call(D) === "[object Array]") {
        Array.prototype.push.apply(A, D);
    }
    else {
        if (typeof D.length === "number") {
            for (var B = 0, e = D.length; B < e; B++) {
                A.push(D[B]);
            }
        }
        else {
            for (var B = 0; D[B]; B++) {
                A.push(D[B]);
            }
        }
    } return A; };
} var c; if (document.documentElement.compareDocumentPosition) {
    c = function (A, e) { if (!A.compareDocumentPosition || !e.compareDocumentPosition) {
        if (A == e) {
            v = true;
        }
        return 0;
    } var B = A.compareDocumentPosition(e) & 4 ? -1 : A === e ? 0 : 1; if (B === 0) {
        v = true;
    } return B; };
}
else {
    if ("sourceIndex" in document.documentElement) {
        c = function (A, e) { if (!A.sourceIndex || !e.sourceIndex) {
            if (A == e) {
                v = true;
            }
            return 0;
        } var B = A.sourceIndex - e.sourceIndex; if (B === 0) {
            v = true;
        } return B; };
    }
    else {
        if (document.createRange) {
            c = function (C, A) { if (!C.ownerDocument || !A.ownerDocument) {
                if (C == A) {
                    v = true;
                }
                return 0;
            } var B = C.ownerDocument.createRange(), e = A.ownerDocument.createRange(); B.setStart(C, 0); B.setEnd(C, 0); e.setStart(A, 0); e.setEnd(A, 0); var D = B.compareBoundaryPoints(Range.START_TO_END, e); if (D === 0) {
                v = true;
            } return D; };
        }
    }
} (function () { var A = document.createElement("div"), B = "script" + (new Date).getTime(); A.innerHTML = "<a name='" + B + "'/>"; var e = document.documentElement; e.insertBefore(A, e.firstChild); if (!!document.getElementById(B)) {
    h.find.ID = function (D, E, F) { if (typeof E.getElementById !== "undefined" && !F) {
        var C = E.getElementById(D[1]);
        return C ? C.id === D[1] || typeof C.getAttributeNode !== "undefined" && C.getAttributeNode("id").nodeValue === D[1] ? [C] : undefined : [];
    } };
    h.filter.ID = function (E, C) { var D = typeof E.getAttributeNode !== "undefined" && E.getAttributeNode("id"); return E.nodeType === 1 && D && D.nodeValue === C; };
} e.removeChild(A); e = A = null; })(); (function () { var e = document.createElement("div"); e.appendChild(document.createComment("")); if (e.getElementsByTagName("*").length > 0) {
    h.find.TAG = function (A, E) { var D = E.getElementsByTagName(A[1]); if (A[1] === "*") {
        var C = [];
        for (var B = 0; D[B]; B++) {
            if (D[B].nodeType === 1) {
                C.push(D[B]);
            }
        }
        D = C;
    } return D; };
} e.innerHTML = "<a href='#'></a>"; if (e.firstChild && typeof e.firstChild.getAttribute !== "undefined" && e.firstChild.getAttribute("href") !== "#") {
    h.attrHandle.href = function (A) { return A.getAttribute("href", 2); };
} e = null; })(); if (document.querySelectorAll) {
    (function () { var e = b, B = document.createElement("div"); B.innerHTML = "<p class='TEST'></p>"; if (B.querySelectorAll && B.querySelectorAll(".TEST").length === 0) {
        return;
    } b = function (F, E, C, D) { E = E || document; if (!D && E.nodeType === 9 && !w(E)) {
        try {
            return a(E.querySelectorAll(F), C);
        }
        catch (G) { }
    } return e(F, E, C, D); }; for (var A in e) {
        b[A] = e[A];
    } B = null; })();
} if (document.getElementsByClassName && document.documentElement.getElementsByClassName) {
    (function () { var e = document.createElement("div"); e.innerHTML = "<div class='test e'></div><div class='test'></div>"; if (e.getElementsByClassName("e").length === 0) {
        return;
    } e.lastChild.className = "e"; if (e.getElementsByClassName("e").length === 1) {
        return;
    } h.order.splice(1, 0, "CLASS"); h.find.CLASS = function (A, B, C) { if (typeof B.getElementsByClassName !== "undefined" && !C) {
        return B.getElementsByClassName(A[1]);
    } }; e = null; })();
} function u(A, F, E, J, G, I) { var H = A == "previousSibling" && !I; for (var C = 0, B = J.length; C < B; C++) {
    var e = J[C];
    if (e) {
        if (H && e.nodeType === 1) {
            e.sizcache = E;
            e.sizset = C;
        }
        e = e[A];
        var D = false;
        while (e) {
            if (e.sizcache === E) {
                D = J[e.sizset];
                break;
            }
            if (e.nodeType === 1 && !I) {
                e.sizcache = E;
                e.sizset = C;
            }
            if (e.nodeName === F) {
                D = e;
                break;
            }
            e = e[A];
        }
        J[C] = D;
    }
} } function z(A, F, E, J, G, I) { var H = A == "previousSibling" && !I; for (var C = 0, B = J.length; C < B; C++) {
    var e = J[C];
    if (e) {
        if (H && e.nodeType === 1) {
            e.sizcache = E;
            e.sizset = C;
        }
        e = e[A];
        var D = false;
        while (e) {
            if (e.sizcache === E) {
                D = J[e.sizset];
                break;
            }
            if (e.nodeType === 1) {
                if (!I) {
                    e.sizcache = E;
                    e.sizset = C;
                }
                if (typeof F !== "string") {
                    if (e === F) {
                        D = true;
                        break;
                    }
                }
                else {
                    if (b.filter(F, [e]).length > 0) {
                        D = e;
                        break;
                    }
                }
            }
            e = e[A];
        }
        J[C] = D;
    }
} } var m = document.compareDocumentPosition ? function (A, e) { return A.compareDocumentPosition(e) & 16; } : function (A, e) { return A !== e && (A.contains ? A.contains(e) : true); }; var w = function (e) { return e.nodeType === 9 && e.documentElement.nodeName !== "HTML" || !!e.ownerDocument && e.ownerDocument.documentElement.nodeName !== "HTML"; }; var l = function (e, G) { var C = [], D = "", E, B = G.nodeType ? [G] : G; while ((E = h.match.PSEUDO.exec(e))) {
    D += E[0];
    e = e.replace(h.match.PSEUDO, "");
} e = h.relative[e] ? e + "*" : e; for (var F = 0, A = B.length; F < A; F++) {
    b(e, B[F], C);
} return b.filter(D, C); }; window.Sizzle = b; })();
(function (c) { var d = Prototype.Selector.extendElements; function a(e, h) { return d(c(e, h || document)); } function b(h, e) { return c.matches(e, [h]).length == 1; } Prototype.Selector.engine = c; Prototype.Selector.select = a; Prototype.Selector.match = b; })(Sizzle);
window.Sizzle = Prototype._original_property;
delete Prototype._original_property;
var Form = { reset: function (a) { a = $(a); a.reset(); return a; }, serializeElements: function (m, d) { if (typeof d != "object") {
        d = { hash: !!d };
    }
    else {
        if (Object.isUndefined(d.hash)) {
            d.hash = true;
        }
    } var e, l, a = false, h = d.submit, b, c; if (d.hash) {
        c = {};
        b = function (n, q, r) { if (q in n) {
            if (!Object.isArray(n[q])) {
                n[q] = [n[q]];
            }
            n[q].push(r);
        }
        else {
            n[q] = r;
        } return n; };
    }
    else {
        c = "";
        b = function (n, q, r) { return n + (n ? "&" : "") + encodeURIComponent(q) + "=" + encodeURIComponent(r); };
    } return m.inject(c, function (n, q) { if (!q.disabled && q.name) {
        e = q.name;
        l = $(q).getValue();
        if (l != null && q.type != "file" && (q.type != "submit" || (!a && h !== false && (!h || e == h) && (a = true)))) {
            n = b(n, e, l);
        }
    } return n; }); } };
Form.Methods = { serialize: function (b, a) { return Form.serializeElements(Form.getElements(b), a); }, getElements: function (e) { var h = $(e).getElementsByTagName("*"), d, a = [], c = Form.Element.Serializers; for (var b = 0; d = h[b]; b++) {
        a.push(d);
    } return a.inject([], function (l, m) { if (c[m.tagName.toLowerCase()]) {
        l.push(Element.extend(m));
    } return l; }); }, getInputs: function (l, c, d) { l = $(l); var a = l.getElementsByTagName("input"); if (!c && !d) {
        return $A(a).map(Element.extend);
    } for (var e = 0, m = [], h = a.length; e < h; e++) {
        var b = a[e];
        if ((c && b.type != c) || (d && b.name != d)) {
            continue;
        }
        m.push(Element.extend(b));
    } return m; }, disable: function (a) { a = $(a); Form.getElements(a).invoke("disable"); return a; }, enable: function (a) { a = $(a); Form.getElements(a).invoke("enable"); return a; }, findFirstElement: function (b) { var c = $(b).getElements().findAll(function (d) { return "hidden" != d.type && !d.disabled; }); var a = c.findAll(function (d) { return d.hasAttribute("tabIndex") && d.tabIndex >= 0; }).sortBy(function (d) { return d.tabIndex; }).first(); return a ? a : c.find(function (d) { return /^(?:input|select|textarea)$/i.test(d.tagName); }); }, focusFirstElement: function (a) { a = $(a); a.findFirstElement().activate(); return a; }, request: function (b, a) { b = $(b), a = Object.clone(a || {}); var d = a.parameters, c = b.readAttribute("action") || ""; if (c.blank()) {
        c = window.location.href;
    } a.parameters = b.serialize(true); if (d) {
        if (Object.isString(d)) {
            d = d.toQueryParams();
        }
        Object.extend(a.parameters, d);
    } if (b.hasAttribute("method") && !a.method) {
        a.method = b.method;
    } return new Ajax.Request(c, a); } };
Form.Element = { focus: function (a) { $(a).focus(); return a; }, select: function (a) { $(a).select(); return a; } };
Form.Element.Methods = { serialize: function (a) { a = $(a); if (!a.disabled && a.name) {
        var b = a.getValue();
        if (b != undefined) {
            var c = {};
            c[a.name] = b;
            return Object.toQueryString(c);
        }
    } return ""; }, getValue: function (a) { a = $(a); var b = a.tagName.toLowerCase(); return Form.Element.Serializers[b](a); }, setValue: function (a, b) { a = $(a); var c = a.tagName.toLowerCase(); Form.Element.Serializers[c](a, b); return a; }, clear: function (a) { $(a).value = ""; return a; }, present: function (a) { return $(a).value != ""; }, activate: function (a) { a = $(a); try {
        a.focus();
        if (a.select && (a.tagName.toLowerCase() != "input" || !(/^(?:button|reset|submit)$/i.test(a.type)))) {
            a.select();
        }
    }
    catch (b) { } return a; }, disable: function (a) { a = $(a); a.disabled = true; return a; }, enable: function (a) { a = $(a); a.disabled = false; return a; } };
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
Form.Element.Serializers = { input: function (a, b) { switch (a.type.toLowerCase()) {
        case "checkbox":
        case "radio": return Form.Element.Serializers.inputSelector(a, b);
        default: return Form.Element.Serializers.textarea(a, b);
    } }, inputSelector: function (a, b) { if (Object.isUndefined(b)) {
        return a.checked ? a.value : null;
    }
    else {
        a.checked = !!b;
    } }, textarea: function (a, b) { if (Object.isUndefined(b)) {
        return a.value;
    }
    else {
        a.value = b;
    } }, select: function (c, h) { if (Object.isUndefined(h)) {
        return this[c.type == "select-one" ? "selectOne" : "selectMany"](c);
    }
    else {
        var b, d, l = !Object.isArray(h);
        for (var a = 0, e = c.length; a < e; a++) {
            b = c.options[a];
            d = this.optionValue(b);
            if (l) {
                if (d == h) {
                    b.selected = true;
                    return;
                }
            }
            else {
                b.selected = h.include(d);
            }
        }
    } }, selectOne: function (b) { var a = b.selectedIndex; return a >= 0 ? this.optionValue(b.options[a]) : null; }, selectMany: function (d) { var a, e = d.length; if (!e) {
        return null;
    } for (var c = 0, a = []; c < e; c++) {
        var b = d.options[c];
        if (b.selected) {
            a.push(this.optionValue(b));
        }
    } return a; }, optionValue: function (a) { return Element.extend(a).hasAttribute("value") ? a.value : a.text; } };
Abstract.TimedObserver = Class.create(PeriodicalExecuter, { initialize: function ($super, a, b, c) { $super(c, b); this.element = $(a); this.lastValue = this.getValue(); }, execute: function () { var a = this.getValue(); if (Object.isString(this.lastValue) && Object.isString(a) ? this.lastValue != a : String(this.lastValue) != String(a)) {
        this.callback(this.element, a);
        this.lastValue = a;
    } } });
Form.Element.Observer = Class.create(Abstract.TimedObserver, { getValue: function () { return Form.Element.getValue(this.element); } });
Form.Observer = Class.create(Abstract.TimedObserver, { getValue: function () { return Form.serialize(this.element); } });
Abstract.EventObserver = Class.create({ initialize: function (a, b) { this.element = $(a); this.callback = b; this.lastValue = this.getValue(); if (this.element.tagName.toLowerCase() == "form") {
        this.registerFormCallbacks();
    }
    else {
        this.registerCallback(this.element);
    } }, onElementEvent: function () { var a = this.getValue(); if (this.lastValue != a) {
        this.callback(this.element, a);
        this.lastValue = a;
    } }, registerFormCallbacks: function () { Form.getElements(this.element).each(this.registerCallback, this); }, registerCallback: function (a) { if (a.type) {
        switch (a.type.toLowerCase()) {
            case "checkbox":
            case "radio":
                Event.observe(a, "click", this.onElementEvent.bind(this));
                break;
            default:
                Event.observe(a, "change", this.onElementEvent.bind(this));
                break;
        }
    } } });
Form.Element.EventObserver = Class.create(Abstract.EventObserver, { getValue: function () { return Form.Element.getValue(this.element); } });
Form.EventObserver = Class.create(Abstract.EventObserver, { getValue: function () { return Form.serialize(this.element); } });
(function () { var G = { KEY_BACKSPACE: 8, KEY_TAB: 9, KEY_RETURN: 13, KEY_ESC: 27, KEY_LEFT: 37, KEY_UP: 38, KEY_RIGHT: 39, KEY_DOWN: 40, KEY_DELETE: 46, KEY_HOME: 36, KEY_END: 35, KEY_PAGEUP: 33, KEY_PAGEDOWN: 34, KEY_INSERT: 45, cache: {} }; var e = document.documentElement; var H = "onmouseenter" in e && "onmouseleave" in e; var v = (window.attachEvent && !window.addEventListener); var z; if (v) {
    var n = { 0: 1, 1: 4, 2: 2 };
    z = function (J, I) { return J.button === n[I]; };
}
else {
    if (Prototype.Browser.WebKit) {
        z = function (J, I) { switch (I) {
            case 0: return J.which == 1 && !J.metaKey;
            case 1: return J.which == 1 && J.metaKey;
            default: return false;
        } };
    }
    else {
        z = function (J, I) { return J.which ? (J.which === I + 1) : (J.button === I); };
    }
} function C(I) { return z(I, 0); } function B(I) { return z(I, 1); } function u(I) { return z(I, 2); } function c(K) { K = G.extend(K); var J = K.target, I = K.type, L = K.currentTarget; if (L && L.tagName) {
    if (I === "load" || I === "error" || (I === "click" && L.tagName.toLowerCase() === "input" && L.type === "radio")) {
        J = L;
    }
} if (J.nodeType == Node.TEXT_NODE) {
    J = J.parentNode;
} return Element.extend(J); } function w(J, K) { var I = G.element(J); if (!K) {
    return I;
} while (I) {
    if (Object.isElement(I) && Prototype.Selector.match(I, K)) {
        return Element.extend(I);
    }
    I = I.parentNode;
} } function A(I) { return { x: b(I), y: a(I) }; } function b(K) { var J = document.documentElement, I = document.body || { scrollLeft: 0 }; return K.pageX || (K.clientX + (J.scrollLeft || I.scrollLeft) - (J.clientLeft || 0)); } function a(K) { var J = document.documentElement, I = document.body || { scrollTop: 0 }; return K.pageY || (K.clientY + (J.scrollTop || I.scrollTop) - (J.clientTop || 0)); } function y(I) { G.extend(I); I.preventDefault(); I.stopPropagation(); I.stopped = true; } G.Methods = { isLeftClick: C, isMiddleClick: B, isRightClick: u, element: c, findElement: w, pointer: A, pointerX: b, pointerY: a, stop: y }; var E = Object.keys(G.Methods).inject({}, function (I, J) { I[J] = G.Methods[J].methodize(); return I; }); if (v) {
    function m(J) { var I; switch (J.type) {
        case "mouseover":
            I = J.fromElement;
            break;
        case "mouseout":
            I = J.toElement;
            break;
        default: return null;
    } return Element.extend(I); }
    Object.extend(E, { stopPropagation: function () { this.cancelBubble = true; }, preventDefault: function () { this.returnValue = false; }, inspect: function () { return "[object Event]"; } });
    G.extend = function (J, I) { if (!J) {
        return false;
    } if (J._extendedByPrototype) {
        return J;
    } J._extendedByPrototype = Prototype.emptyFunction; var K = G.pointer(J); Object.extend(J, { target: J.srcElement || I, relatedTarget: m(J), pageX: K.x, pageY: K.y }); return Object.extend(J, E); };
}
else {
    G.prototype = window.Event.prototype || document.createEvent("HTMLEvents").__proto__;
    Object.extend(G.prototype, E);
    G.extend = Prototype.K;
} function t(M, L, N) { var K = Element.retrieve(M, "prototype_event_registry"); if (Object.isUndefined(K)) {
    d.push(M);
    K = Element.retrieve(M, "prototype_event_registry", $H());
} var I = K.get(L); if (Object.isUndefined(I)) {
    I = [];
    K.set(L, I);
} if (I.pluck("handler").include(N)) {
    return false;
} var J; if (L.include(":")) {
    J = function (O) { if (Object.isUndefined(O.eventName)) {
        return false;
    } if (O.eventName !== L) {
        return false;
    } G.extend(O, M); N.call(M, O); };
}
else {
    if (!H && (L === "mouseenter" || L === "mouseleave")) {
        if (L === "mouseenter" || L === "mouseleave") {
            J = function (P) { G.extend(P, M); var O = P.relatedTarget; while (O && O !== M) {
                try {
                    O = O.parentNode;
                }
                catch (Q) {
                    O = M;
                }
            } if (O === M) {
                return;
            } N.call(M, P); };
        }
    }
    else {
        J = function (O) { G.extend(O, M); N.call(M, O); };
    }
} J.handler = N; I.push(J); return J; } function l() { for (var I = 0, J = d.length; I < J; I++) {
    G.stopObserving(d[I]);
    d[I] = null;
} } var d = []; if (Prototype.Browser.IE) {
    window.attachEvent("onunload", l);
} if (Prototype.Browser.WebKit) {
    window.addEventListener("unload", Prototype.emptyFunction, false);
} var s = Prototype.K, h = { mouseenter: "mouseover", mouseleave: "mouseout" }; if (!H) {
    s = function (I) { return (h[I] || I); };
} function D(L, K, M) { L = $(L); var J = t(L, K, M); if (!J) {
    return L;
} if (K.include(":")) {
    if (L.addEventListener) {
        L.addEventListener("dataavailable", J, false);
    }
    else {
        L.attachEvent("ondataavailable", J);
        L.attachEvent("onlosecapture", J);
    }
}
else {
    var I = s(K);
    if (L.addEventListener) {
        L.addEventListener(I, J, false);
    }
    else {
        L.attachEvent("on" + I, J);
    }
} return L; } function r(N, L, O) { N = $(N); var K = Element.retrieve(N, "prototype_event_registry"); if (!K) {
    return N;
} if (!L) {
    K.each(function (Q) { var P = Q.key; r(N, P); });
    return N;
} var M = K.get(L); if (!M) {
    return N;
} if (!O) {
    M.each(function (P) { r(N, L, P.handler); });
    return N;
} var J = M.find(function (P) { return P.handler === O; }); if (!J) {
    return N;
} if (L.include(":")) {
    if (N.removeEventListener) {
        N.removeEventListener("dataavailable", J, false);
    }
    else {
        N.detachEvent("ondataavailable", J);
        N.detachEvent("onlosecapture", J);
    }
}
else {
    var I = s(L);
    if (N.removeEventListener) {
        N.removeEventListener(I, J, false);
    }
    else {
        N.detachEvent("on" + I, J);
    }
} K.set(L, M.without(J)); return N; } function F(L, K, J, I) { L = $(L); if (Object.isUndefined(I)) {
    I = true;
} if (L == document && document.createEvent && !L.dispatchEvent) {
    L = document.documentElement;
} var M; if (document.createEvent) {
    M = document.createEvent("HTMLEvents");
    M.initEvent("dataavailable", I, true);
}
else {
    M = document.createEventObject();
    M.eventType = I ? "ondataavailable" : "onlosecapture";
} M.eventName = K; M.memo = J || {}; if (document.createEvent) {
    L.dispatchEvent(M);
}
else {
    L.fireEvent(M.eventType, M);
} return G.extend(M); } G.Handler = Class.create({ initialize: function (K, J, I, L) { this.element = $(K); this.eventName = J; this.selector = I; this.callback = L; this.handler = this.handleEvent.bind(this); }, start: function () { G.observe(this.element, this.eventName, this.handler); return this; }, stop: function () { G.stopObserving(this.element, this.eventName, this.handler); return this; }, handleEvent: function (J) { var I = J.findElement(this.selector); if (I) {
        this.callback.call(this.element, J, I);
    } } }); function q(K, J, I, L) { K = $(K); if (Object.isFunction(I) && Object.isUndefined(L)) {
    L = I, I = null;
} return new G.Handler(K, J, I, L).start(); } Object.extend(G, G.Methods); Object.extend(G, { fire: F, observe: D, stopObserving: r, on: q }); Element.addMethods({ fire: F, observe: D, stopObserving: r, on: q }); Object.extend(document, { fire: F.methodize(), observe: D.methodize(), stopObserving: r.methodize(), on: q.methodize(), loaded: false }); if (window.Event) {
    Object.extend(window.Event, G);
}
else {
    window.Event = G;
} })();
(function () { var d; function a() { if (document.loaded) {
    return;
} if (d) {
    window.clearTimeout(d);
} document.loaded = true; document.fire("dom:loaded"); } function c() { if (document.readyState === "complete") {
    document.stopObserving("readystatechange", c);
    a();
} } function b() { try {
    document.documentElement.doScroll("left");
}
catch (h) {
    d = b.defer();
    return;
} a(); } if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", a, false);
}
else {
    document.observe("readystatechange", c);
    if (window == top) {
        d = b.defer();
    }
} Event.observe(window, "load", a); })();
Element.addMethods();
Hash.toQueryString = Object.toQueryString;
var Toggle = { display: Element.toggle };
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = { Before: function (a, b) { return Element.insert(a, { before: b }); }, Top: function (a, b) { return Element.insert(a, { top: b }); }, Bottom: function (a, b) { return Element.insert(a, { bottom: b }); }, After: function (a, b) { return Element.insert(a, { after: b }); } };
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = { includeScrollOffsets: false, prepare: function () { this.deltaX = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0; this.deltaY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; }, within: function (b, a, c) { if (this.includeScrollOffsets) {
        return this.withinIncludingScrolloffsets(b, a, c);
    } this.xcomp = a; this.ycomp = c; this.offset = Element.cumulativeOffset(b); return (c >= this.offset[1] && c < this.offset[1] + b.offsetHeight && a >= this.offset[0] && a < this.offset[0] + b.offsetWidth); }, withinIncludingScrolloffsets: function (b, a, d) { var c = Element.cumulativeScrollOffset(b); this.xcomp = a + c[0] - this.deltaX; this.ycomp = d + c[1] - this.deltaY; this.offset = Element.cumulativeOffset(b); return (this.ycomp >= this.offset[1] && this.ycomp < this.offset[1] + b.offsetHeight && this.xcomp >= this.offset[0] && this.xcomp < this.offset[0] + b.offsetWidth); }, overlap: function (b, a) { if (!b) {
        return 0;
    } if (b == "vertical") {
        return ((this.offset[1] + a.offsetHeight) - this.ycomp) / a.offsetHeight;
    } if (b == "horizontal") {
        return ((this.offset[0] + a.offsetWidth) - this.xcomp) / a.offsetWidth;
    } }, cumulativeOffset: Element.Methods.cumulativeOffset, positionedOffset: Element.Methods.positionedOffset, absolutize: function (a) { Position.prepare(); return Element.absolutize(a); }, relativize: function (a) { Position.prepare(); return Element.relativize(a); }, realOffset: Element.Methods.cumulativeScrollOffset, offsetParent: Element.Methods.getOffsetParent, page: Element.Methods.viewportOffset, clone: function (b, c, a) { a = a || {}; return Element.clonePosition(c, b, a); } };
if (!document.getElementsByClassName) {
    document.getElementsByClassName = function (b) { function a(c) { return c.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + c + " ')]"; } b.getElementsByClassName = Prototype.BrowserFeatures.XPath ? function (c, e) { e = e.toString().strip(); var d = /\s/.test(e) ? $w(e).map(a).join("") : a(e); return d ? document._getElementsByXPath(".//*" + d, c) : []; } : function (e, h) { h = h.toString().strip(); var l = [], m = (/\s/.test(h) ? $w(h) : null); if (!m && !h) {
        return l;
    } var c = $(e).getElementsByTagName("*"); h = " " + h + " "; for (var d = 0, q, n; q = c[d]; d++) {
        if (q.className && (n = " " + q.className + " ") && (n.include(h) || (m && m.all(function (r) { return !r.toString().blank() && n.include(" " + r + " "); })))) {
            l.push(Element.extend(q));
        }
    } return l; }; return function (d, c) { return $(c || document.body).getElementsByClassName(d); }; }(Element.Methods);
}
Element.ClassNames = Class.create();
Element.ClassNames.prototype = { initialize: function (a) { this.element = $(a); }, _each: function (a) { this.element.className.split(/\s+/).select(function (b) { return b.length > 0; })._each(a); }, set: function (a) { this.element.className = a; }, add: function (a) { if (this.include(a)) {
        return;
    } this.set($A(this).concat(a).join(" ")); }, remove: function (a) { if (!this.include(a)) {
        return;
    } this.set($A(this).without(a).join(" ")); }, toString: function () { return $A(this).join(" "); } };
Object.extend(Element.ClassNames.prototype, Enumerable);
(function () { window.Selector = Class.create({ initialize: function (a) { this.expression = a.strip(); }, findElements: function (a) { return Prototype.Selector.select(this.expression, a); }, match: function (a) { return Prototype.Selector.match(a, this.expression); }, toString: function () { return this.expression; }, inspect: function () { return "#<Selector: " + this.expression + ">"; } }); Object.extend(Selector, { matchElements: function (h, l) { var a = Prototype.Selector.match, d = []; for (var c = 0, e = h.length; c < e; c++) {
        var b = h[c];
        if (a(b, l)) {
            d.push(Element.extend(b));
        }
    } return d; }, findElement: function (h, l, b) { b = b || 0; var a = 0, d; for (var c = 0, e = h.length; c < e; c++) {
        d = h[c];
        if (Prototype.Selector.match(d, l) && b === a++) {
            return Element.extend(d);
        }
    } }, findChildElements: function (b, c) { var a = c.toArray().join(", "); return Prototype.Selector.select(a, b || document); } }); })();
function questAction(d, c, b, a, h, m) { var e = "&campaign=" + h; if (c) {
    e += "&product=" + c;
} if (b) {
    e += "&amount=" + b;
} if (!farm) {
    farm = 1;
} e += "&farm=" + farm; if (d == "insert") {
    $("dialog_entryline_number").value = 0;
} showGlobalWait(d); var l = createAjaxRequestObj(); l.open("GET", "ajax/quest.php?rid=" + rid + "&action=" + d + e, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { questInitResponse(l, d, a, h, m); }; l.send(null); }
function questInitResponse(c, d, b, e, h) { var a = _chkRequest(c); if (a != 0) {
    hideGlobalWait();
    if (a[0] == 0) {
        globalerrorbox(a[1]);
    }
    else {
        questInitGo(a, d, b, e, h);
    }
} }
function questInitGo(q, d, l, b, a) { if (q[1]) {
    questdata = q[1];
    var n = 1;
    for (var h in questdata) {
        if (!questdata[h]["end"]) {
            n = 0;
        }
    }
    if (q[1][1].levelup && q[1][1].levelup.level) {
        levelupAlert(q[1][1].levelup.level, q[1][1].levelup.leveltitle);
    }
    if (n == 1) {
        closeQuestBox();
        hideDiv("questboxline");
        return false;
    }
    else {
        showQuestBoxLine();
        hideDiv("globalbox");
        hideDiv("globaltransp");
        if (d == "insert" || l == 1) {
            if (farm > 4 && farm != 99) {
                mapGo2Location("farm", 1, 1);
            }
            showQuestBox(b);
            farmAction("rackupdate", farm);
        }
        else {
            if (d == "init") {
                for (var h in questdata) {
                    if (questdata[h]["remain"] > 0) {
                        var m = "nextquest" + h;
                        startQuestTimer(m, setQuestRemain.bind(h));
                    }
                }
            }
        }
    }
    if ((q[2] && q[2].pid > 0 && q[2].farm > 0 && q[2].amount > 0) || (q[3] && q[3] > 0)) {
        var e = "";
        if (q[2] && q[2].pid > 0 && q[2].farm > 0 && q[2].amount > 0) {
            e += '<div style="margin:0 auto;" class="market_pframe">';
            e += '  <div style="top:7px; left:7px;" class="tt' + q[2].pid + '"></div>';
            e += "</div>";
            e += '<div style="margin-bottom:5px;">' + q[2].amount + "x " + produkt_name[q[2].pid] + "</div>";
            e += '<div style="margin-bottom:15px;">' + str_replace("%PRODUCT%", produkt_name[q[2].pid], t_quests_unlock_product) + "</div>";
            e = str_replace("%FARM%", q[2].farm, e);
        }
        if (q[3] && q[3] > 0) {
            e += '<img src="' + imgpath + "building" + q[3] + '.gif" style="position:relative; width:64px; height:64px; margin:0 auto;">';
            e += '<div style="margin-top:5px;">' + t_quest_reward_building.replace("%NAME%", buildinginfos[0][q[3]][10]) + "</div>";
        }
        globalerrorbox(e);
    }
}
else {
    hideDiv("questbarcontrol");
    hideDiv("questboxline");
} }
function showQuestBoxLine() { hideDiv("questboxline"); return false; }
function setQuestRemain(d) { var b = str_replace("nextquest", "", d); var a = "nextquest" + b; if (questdata[b]["remain"]) {
    questdata[b]["remain"]--;
    if ($("questline_remain" + b)) {
        $("questline_remain" + b).innerHTML = formatTime(questdata[b]["remain"]);
    }
    if (questdata[b]["remain"] < 1) {
        questClearTimer[a];
        if ($("peoplezones")) {
            $("peoplezones").innerHTML = "";
        }
        showQuestBoxLine();
    }
} }
function showQuestBox(z) { if (questdata[z]["end"] == 1) {
    closeQuestBox();
    return false;
}
else {
    if (questdata[z]["remain"] > 0) {
        closeQuestBox();
        var B = "nextquest" + z;
        startQuestTimer(B, setQuestRemain.bind(z));
        return false;
    }
    else {
        $("questboxtitle").innerHTML = questdata[z].questid + ".&nbsp;" + questdata[z]["data"][6];
        $("questboxcontent").innerHTML = questdata[z]["data"][7];
        var n = "";
        var u = new Array;
        var e = 0;
        for (var s in questdata[z]["data"][1][0]) {
            if (typeof questdata[z]["data"][1][0][s] == "object") {
                var A = new Array;
                var l = 1;
                for (var w in questdata[z]["data"][1][0][s]) {
                    var r = "";
                    if (l == 2) {
                        r = questbox_product_alternative;
                    }
                    n += '<div class="questboxobj questboxalternative" id="questboxobj' + w + '">';
                    n += '<div class="main_float_left kp' + w + '" style="width:15px;"></div>';
                    n += '<div id="questboxobj_bar' + w + '" class="main_float_left" style="position:relative;" onmouseover="showDiv(\'questboxtip' + w + "')\" onmouseout=\"hideDiv('questboxtip" + w + "')\">";
                    n += '<div class="blackbox" id="questboxtip' + w + '" style="display:none; position:absolute; top:-25px; left:5px;">' + r + produkt_name[w] + "</div>";
                    n += '<div class="questboxbarout">';
                    n += '<div class="questboxbarin" id="questboxbarin' + w + '"></div>';
                    n += "</div>";
                    n += '<div id="questboxobj_notavailable' + w + '" class="important" style="display:none; margin-left:5px;">' + product_notavailable_info + "</div>";
                    n += "</div>";
                    n += '<div class="main_float_left" style="margin-left:5px;" id="questboxobj' + w + '_current">0</div>';
                    n += '<div class="main_float_left">/</div>';
                    n += '<div class="main_float_left">' + formatNumber(questdata[z]["data"][1][0][s][w]) + '<span id="questboxobj' + w + '_need" style="display:none;">' + questdata[z]["data"][1][0][s][w] + "</span></div>";
                    n += '<div class="clear"></div>';
                    if (l == 1) {
                        n += '<div id="questbox_alternative_info" class="link" onclick="showQuestboxInfo()"></div>';
                    }
                    n += "</div>";
                    u.push(w);
                    A.push(w);
                    l++;
                    e++;
                }
            }
            else {
                if (isNumeric(s)) {
                    hideDiv("questbox_info");
                    hideDiv("questbox_info_transp");
                    n += '<div class="questboxobj" id="questboxobj' + s + '">';
                    n += '<div class="main_float_left kp' + s + '" style="width:15px;"></div>';
                    n += '<div id="questboxobj_bar' + s + '" class="main_float_left" style="position:relative;" onmouseover="showDiv(\'questboxtip' + s + "')\" onmouseout=\"hideDiv('questboxtip" + s + "')\">";
                    n += '<div class="blackbox" id="questboxtip' + s + '" style="display:none; position:absolute; top:-25px; left:5px;">' + produkt_name[s] + "</div>";
                    n += '<div class="questboxbarout">';
                    n += '<div class="questboxbarin" id="questboxbarin' + s + '"></div>';
                    n += "</div>";
                    n += '<div id="questboxobj_notavailable' + s + '" class="important" style="display:none; margin-left:5px;">' + product_notavailable_info + "</div>";
                    n += "</div>";
                    n += '<div class="main_float_left" style="margin-left:5px;" id="questboxobj' + s + '_current">0</div>';
                    n += '<div class="main_float_left">/</div>';
                    n += '<div class="main_float_left">' + formatNumber(questdata[z]["data"][1][0][s]) + '<span id="questboxobj' + s + '_need" style="display:none;">' + questdata[z]["data"][1][0][s] + "</span></div>";
                    n += '<div class="clear"></div>';
                    n += "</div>";
                    u.push(s);
                    e++;
                }
            }
        }
        $("questboxobjects").innerHTML = n;
        for (var y = 0; y < u.length; y++) {
            var s = u[y];
            var d = checkRackItem(s);
            if (d) {
                if (d > 0 && $("questboxobj" + s) && $("questboxobj_notavailable" + s)) {
                    hideDiv("questboxobj_notavailable" + s);
                    $("questboxobj_bar" + s).addClassName("link");
                    $("questboxobj_bar" + s).onclick = new Function("buildQuestBoxEntry(" + s + ", " + z + ")");
                }
                else {
                    showDiv("questboxobj_notavailable" + s);
                    e++;
                }
            }
            else {
                showDiv("questboxobj_notavailable" + s);
                e++;
            }
        }
        var t = 0;
        for (var s in questdata[z]["entries"]) {
            if ($("questboxobj" + s)) {
                if (A) {
                    if (in_array(s, A) && !t) {
                        for (var y = 0; y < A.length; y++) {
                            hideDiv("questboxobj" + A[y]);
                            $("questboxobj" + A[y]).removeClassName("questboxalternative");
                            hideDiv("questbox_alternative_info");
                        }
                        e--;
                        showDiv("questboxobj" + s);
                        t = 1;
                    }
                }
                var m = parseInt($("questboxobj" + s + "_need").innerHTML);
                var v = (200 / 100);
                var b = (((questdata[z]["entries"][s] * 100) / m));
                b = (200 - Math.floor(v * b));
                $("questboxbarin" + s).style.left = "-" + b + "px";
                $("questboxobj" + s + "_current").innerHTML = formatNumber(questdata[z]["entries"][s]);
            }
        }
        if (e == 2) {
            $("questboxinfos").style.height = "309px";
        }
        else {
            if (e == 3) {
                $("questboxinfos").style.height = "295px";
            }
            else {
                if (e == 4) {
                    $("questboxinfos").style.height = "282px";
                }
                else {
                    $("questboxinfos").style.height = "289px";
                }
            }
        }
        var a = "";
        for (var y = 0; y < questdata[z]["data"][2].length; y++) {
            if (questdata[z]["data"][2][y]) {
                a += "";
                if (y == 0) {
                    a += '<div class="questreward_obj"><img height="15" src="' + imgpath + 'points.gif">&nbsp;' + formatNumber(questdata[z]["data"][2][y]) + "&nbsp;" + t_points + "</div>";
                }
                if (y == 1) {
                    a += '<div class="questreward_obj"><img height="15" src="' + imgpath + 'money.gif">&nbsp;' + questdata[z]["data"][2][y] + "&nbsp;" + gamecurrency + "</div>";
                }
                if (y == 3) {
                    if (questdata[z]["questid"] == 1 || questdata[z]["questid"] == 18) {
                        var q = quest_2te_rack;
                    }
                    if (questdata[z]["questid"] == 31) {
                        var q = quest_3te_rack;
                    }
                    a += '<div class="questreward_obj">' + q + "</div>";
                }
                if (y == 4) {
                    if (z == 1) {
                        if (questdata[z]["questid"] == 1 || questdata[z]["questid"] == 23) {
                            var q = quest_2te_farm;
                        }
                        if (questdata[z]["questid"] == 35) {
                            var q = quest_3te_farm;
                        }
                    }
                    else {
                        if (z == 2) {
                            var q = quest_unlock_4th_farm;
                        }
                    }
                    a += '<div class="questreward_obj">' + q + "</div>";
                }
                if (y == 5) {
                    a += '<div class="questreward_obj">';
                    a += '<div style="float:left;" class="kp' + questdata[z]["data"][2][y] + '"></div>';
                    a += '<div style="float:left;">&nbsp;' + produkt_name[questdata[z]["data"][2][y]] + "</div>";
                    a += '<div style="clear:both;"></div>';
                    a += "</div>";
                }
                if (y == 6) {
                    a += '<div class="questreward_obj">';
                    a += '<div style="float:left;"><img src="' + imgpath + "farmhouse/thumbs/" + questdata[z]["data"][2][y] + '.jpg"></div>';
                    a += '<div style="float:left; margin-top:12px;">&nbsp;' + quest_reward_6 + "</div>";
                    a += '<div style="clear:both;"></div>';
                    a += "</div>";
                }
                if (y == 7) {
                    a += '<div class="questreward_obj">';
                    a += '<div style="float:left;" class="kp' + questdata[z]["data"][2][y] + '"></div>';
                    a += '<div style="float:left;">&nbsp;' + str_replace("%PRODUCT%", produkt_name[questdata[z]["data"][2][y]], quest_unlock_product) + "</div>";
                    a += '<div style="clear:both;"></div>';
                    a += "</div>";
                }
                if (y == 8) {
                    a += '<div class="questreward_obj">' + str_replace("%POSITION%", questdata[z]["data"][2][y][1], quest_unlock_position) + "</div>";
                }
                if (y == 9) {
                    a += '<div class="questreward_obj">' + decorack_unlock + "</div>";
                }
                if (y == 10) {
                    a += '<div class="questreward_obj">' + t_quest_reward_building.replace("%NAME%", buildinginfos[0][questdata[z]["data"][2][y]][10]) + "</div>";
                }
            }
        }
        if (questdata[z]["data"][10]) {
            a += '<div class="questreward_obj">';
            a += '<div style="float:left;" class="kp' + questdata[z]["data"][10][0] + '"></div>';
            a += '<div style="float:left;">&nbsp;' + formatTime(questdata[z]["data"][10][1]) + "&nbsp;" + quest_producttimebonus + "</div>";
            a += '<div style="clear:both;"></div>';
            a += "</div>";
        }
        if (questdata[z]["data"][11]) {
            a += '<div class="questreward_obj">';
            var s = questdata[z]["data"][11].pid;
            var h = questdata[z]["data"][11].amount;
            a += htmlProductBody(s, h);
        }
        if (questdata[z]["data"][9]) {
            a += '<div class="questreward_obj">' + quest_hq_deko + "</div>";
        }
        if (questdata[z]["farmi"]) {
            a += '<div class="questreward_obj">' + str_replace("%AMOUNT%", 1, quest_addfarmi_singular) + "</div>";
        }
        $("questboxrewards_inner").innerHTML = a;
        showDiv("questboxtransp");
        showDiv("questbox");
    }
} }
function buildQuestBoxEntry(a, d) { var b = parseInt($("questboxobj" + a + "_need").innerHTML); if (questdata[d]["entries"] && questdata[d]["entries"][a]) {
    b = (b - questdata[d]["entries"][a]);
} var c = { pid: a }; globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(c), 0, 0, 1); $("dialog_entryline_number").focus(); $("dialog_entryline_number").onchange = new Function("chkQuestBoxEntry(" + a + ", " + b + ", " + d + ")"); $("dialog_entryline_number").onkeyup = new Function("chkQuestBoxEntry(" + a + ", " + b + ", " + d + ")"); chkQuestBoxEntry(a, b, d); }
function chkQuestBoxEntry(a, b, d) { var c = { stockamount: checkRackItem(a), rest: b, click: "questBoxEntry(" + a + ", " + d + ")" }; checkEntryLine(c); }
function questBoxEntry(a, b) { if (a && $("dialog_entryline_number").value) {
    amount = parseInt($("dialog_entryline_number").value);
    if (amount > 0) {
        questAction("insert", a, amount, 0, b);
    }
} }
function closeQuestBox() { hideDiv("questbox"); hideDiv("questboxtransp"); }
function showQuestboxInfo() { showDiv("questbox_info"); showDiv("questbox_info_transp"); }
function closeQuestboxInfo() { hideDiv("questbox_info"); hideDiv("questbox_info_transp"); }
function startQuestTimer(a, b) { if (!qtimer[a]) {
    if (typeof b == "function") {
        qtimer[a] = window.setInterval(function () { b(a); }, 1000);
    }
} }
function questClearTimer(a) { if (qtimer[a]) {
    window.clearInterval(qtimer[a]);
    qtimer[a] = 0;
} }
var racksort = 1;
var rackobj = new Object;
var racklocks = new Object;
var rackbonis = {};
var racktemp = {};
var rackfarm = 1;
var racksubsort = "";
var racksort_previous = 0;
var rackCache = {};
function updateRack(b, a) { if (b) {
    racksort = b;
} generalAction("rackupdate", 0, a); }
function updateRackGo(h) { rackElement = new Object; if (!farm) {
    var d = 1;
}
else {
    var d = farm;
} for (var e in rackCache[d]) {
    for (var b = 1; b <= 100; b++) {
        if (rackCache[d][e][b]) {
            var c = rackCache[d][e][b];
            setRackItem(c.pid, c.amount, d);
        }
    }
} produkt_ernte_bonus = {}; if (rackbonis) {
    for (var a in rackbonis) {
        if (rackbonis[a].cropbonus) {
            if (!produkt_ernte_bonus[a]) {
                produkt_ernte_bonus[a] = 0;
            }
            produkt_ernte_bonus[a] = rackbonis[a].cropbonus;
        }
    }
} if ($("foodworld") && foodworld_quicknavi) {
    createFoodworldFarmis();
} sortRackNew(0, h); }
function sortRackNew(W, Q) { if (!W) {
    W = racksort;
}
else {
    racksort = W;
} var h = 0; var N = "left"; var t = "left"; if (setarab == 1) {
    t = "right";
} var B = ""; var v = [1, 2, 3, 4, 5, 6, 7, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35]; if (!farm) {
    var I = rackCache[1];
}
else {
    var I = rackCache[farm];
} if (I[W]) {
    if (in_array(W, v) && racksubsort != "") {
        var F = 0;
        var E = 0;
        var L = new Array;
        var u = 20;
        if (racksubsort == "z") {
            u = 10;
        }
        for (var M = 0; M < v.length; M++) {
            var S = v[M];
            for (var R = 1; R <= 20; R++) {
                if (I[S] && I[S][R]) {
                    var e = 0;
                    if (produkt_category[I[S][R]["pid"]] == racksubsort) {
                        e = 1;
                    }
                    if (racksubsort == "alpin" && in_array(produkt_category[I[S][R]["pid"]], ["alpin", "tea"])) {
                        e = 1;
                    }
                    if (racksubsort.indexOf("fw") > -1) {
                        if (foodworld_categories[I[S][R]["pid"]] == parseInt(str_replace("fw", "", racksubsort))) {
                            e = 1;
                        }
                    }
                    if (e == 1) {
                        F++;
                        var s = W;
                        if (in_array(W, [25, 30])) {
                            s = 1;
                        }
                        if (in_array(W, [26, 31])) {
                            s = 2;
                        }
                        if (in_array(W, [27, 32])) {
                            s = 3;
                        }
                        if (in_array(W, [28, 34])) {
                            s = 4;
                        }
                        if (in_array(W, [29, 35])) {
                            s = 5;
                        }
                        var l = (((s - 1) * u) + 1);
                        var V = (s * u);
                        if (F >= l && F <= V) {
                            E++;
                            L[E] = I[S][R];
                        }
                    }
                }
            }
        }
        J = L;
    }
    else {
        var J = I[W];
    }
    var K = 0;
    for (var S = 1; S <= 20; S++) {
        if (J[S] && J[S]["pid"]) {
            if (S == 1) {
                h = J[S]["pid"];
            }
            var C = "sack";
            if (produkt_category[J[S]["pid"]] == "z") {
                C = "karton";
            }
            else {
                if (produkt_category[J[S]["pid"]] == "e") {
                    C = "box";
                }
                else {
                    if (produkt_category[J[S]["pid"]] == "o") {
                        C = "bottle";
                    }
                    else {
                        if (produkt_category[J[S]["pid"]] == "fw") {
                            C = "tupper";
                        }
                        else {
                            if (produkt_category[J[S]["pid"]] == "fl") {
                                C = "sack";
                            }
                            else {
                                if (produkt_category[J[S]["pid"]] == "fla") {
                                    C = "box";
                                }
                                else {
                                    if (produkt_category[J[S]["pid"]] == "md") {
                                        C = "flask";
                                    }
                                    else {
                                        if (produkt_category[J[S]["pid"]] == "breed") {
                                            C = "box";
                                        }
                                        else {
                                            if (produkt_category[J[S]["pid"]] == "tea") {
                                                C = "box";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (J[S]["pid"] == fuel_product) {
                C = "barrel";
            }
            var H = "";
            if (S > 16) {
                var H = "rackitem_tt_bottom";
            }
            B += '<div id="rackitem' + J[S]["pid"] + '" class="' + C + ' link" style="position:relative; float:' + N + '; margin-right:5px; margin-bottom:24px;" onmouseover="showDiv(\'rackitem' + J[S]["pid"] + "_tt')\" onmouseout=\"hideDiv('rackitem" + J[S]["pid"] + "_tt')\" ";
            B += 'onclick="selectRackItem(' + J[S]["pid"] + ')"';
            B += ">";
            B += '  <div class="e' + J[S]["pid"] + " img_" + C + '"></div>';
            B += '  <div class="tklein2 counter_' + C + '">' + J[S]["amount"] + "</div>";
            B += '  <div id="rackitem' + J[S]["pid"] + '_tt" class="rackitem_tt_' + C + " " + H + '">';
            B += '	 <div class="headline">' + produkt_name[J[S]["pid"]] + "</div>";
            B += '    <div style="float:' + t + ';" class="l' + J[S]["pid"] + '"></div>';
            B += '    <div style="float:' + N + '">';
            if (J[S]["duration"] > 0 && J[S]["pid"] != fuel_product) {
                produkt_zeit[J[S]["pid"]] = J[S]["duration"];
                var c = formatTime(J[S]["duration"]);
                if (farms_data.weather && farms_data.weather.today) {
                    if (in_array(J[S]["pid"], farms_data.weather.today.set)) {
                        c = formatTime(J[S]["oldtime"]);
                        c += '<br><span class="rack_cropbonus" style="font-size:10px;">' + formatTime(J[S]["duration"]) + '<br><span style="font-size:10px;">(-' + farms_data.weather.constants.reduction + "%&nbsp;" + t_weather_link + ")</span></span>";
                    }
                }
                B += '<div id="lager_wachsezeit"></div>';
                B += '<div id="lager_ist1" class="tnormal">=</div>';
                B += '<div id="lager_zeit" class="tnormal">' + c + "</div>";
                B += '<div style="clear:both;"></div>';
            }
            if (produkt_ernte[J[S]["pid"]] > 0 && J[S]["pid"] != fuel_product) {
                B += '<div id="lager_ertrag"></div>';
                B += '<div id="lager_ist2" class="tnormal">=</div>';
                B += '<div id="lager_ernte" class="tnormal">' + produkt_ernte[J[S]["pid"]];
                if (J[S]["cropbonus"]) {
                    B += '&nbsp;<span class="rack_cropbonus">+' + J[S]["cropbonus"] + "</span>";
                }
                B += "</div>";
                B += '<div style="clear:both;"></div>';
            }
            if (J[S]["points"]) {
                B += '<img src="' + imgpath + 'points.gif" style="float:' + t + '; height:15px; width:15px; margin:4px 0 0 5px;">';
                B += '<div id="lager_ist2" class="tnormal">=</div>';
                B += '<div id="lager_zeit" class="tnormal">' + J[S]["points"];
                if (J[S]["pointbonus"]) {
                    B += '&nbsp;<span class="rack_cropbonus">+' + J[S]["pointbonus"] + "</span>";
                }
                B += "</div>";
                B += '<div style="clear:both;"></div>';
            }
            B += "    </div>";
            B += '    <div style="clear:both;"></div>';
            var a = ["e", "fw", "fla", "md", "breed"];
            if (!in_array(produkt_category[J[S]["pid"]], a) && !in_array(J[S]["pid"], flowerarea_dropitems)) {
                B += '  <div style="margin-top:10px;">' + t_felder + "&nbsp;" + (produkt_x[J[S]["pid"]] * produkt_y[J[S]["pid"]]) + "</div>";
            }
            if (in_array(J[S]["pid"], flowerarea_dropitems)) {
                B += "<div>" + t_info_unique_flower + "</div>";
            }
            if (J[S]["need"]) {
                B += '<div style="margin-top:5px; margin-bottom:5px;">';
                B += "  <div>" + t_rack_need_products + "</div>";
                for (var G = 0; G < J[S].need.length; G++) {
                    B += '<div style="margin-top:2px;">';
                    B += '  <div class="kp' + J[S].need[G].pid + '" style="float:left; margin-right:4px;"></div>';
                    B += '  <div style="float:left; margin-right:10px;">' + J[S].need[G].amount + "&nbsp;" + produkt_name[J[S].need[G].pid] + "</div>";
                    B += '  <div class="clear"></div>';
                    B += "</div>";
                }
                B += "</div>";
            }
            if (produkt_category[J[S]["pid"]] == "fla" && nursery_products[J[S]["pid"]]) {
                B += '<div style="margin-bottom:2px;">' + t_fla_lifetime + formatTime(nursery_products[J[S]["pid"]].lifetime) + "</div>";
                if (nursery_products[J[S]["pid"]].watertime > 0) {
                    var n = formatTime(nursery_products[J[S]["pid"]].watertime);
                }
                else {
                    var n = t_none;
                }
                B += '<div style="margin-bottom:2px;">' + t_fla_watertime + n + "</div>";
                B += "<div>" + t_fla_farmipoints + formatNumber((nursery_products[J[S]["pid"]].farmipoints * 12)) + "</div>";
            }
            if (farm >= 5 && (farm != 99 && farm != 100)) {
                B += '<div style="margin-top:10px; text-decoration:underline;" class="link" onclick="openMap(); mapRackTransfer();">' + t_map_rack_transfer_info + "</div>";
            }
            else {
                if (!J[S]["block"] && premium) {
                    B += '<div style="margin-top:10px; text-decoration:underline;" class="link" onclick="openMarketFromRack(' + J[S]["pid"] + ')">' + product2market + "</div>";
                    if (in_array(produkt_category[J[S]["pid"]], ["v", "fl", "hr"]) && !in_array(J[S]["pid"], flowerarea_dropitems)) {
                        B += '<div style="margin-top:10px; text-decoration:underline;" class="link" onclick="shopFillForm(' + J[S]["pid"] + ')">' + t_buyshoplink + "</div>";
                    }
                }
                if (produkt_category[J[S]["pid"]] == "ex") {
                    B += '<div style="margin-top:10px;" class="bonusinfo">' + str_replace("%FARM%", 5, t_rack_info_only_farm) + "</div>";
                }
                if (produkt_category[J[S]["pid"]] == "alpin") {
                    B += '<div style="margin-top:10px;" class="bonusinfo">' + str_replace("%FARM%", 6, t_rack_info_only_farm) + "</div>";
                }
            }
            B += "  </div>";
            B += "</div>";
        }
        K++;
        if (K % 4 == 0) {
            B += '<div style="clear:both"></div>';
        }
    }
}
else {
    hideDiv("lager_info");
} var m = '<div style="z-index:100; position:absolute; top:-65px; left:-43px; width:265px;">'; var t = "left:-50px;"; if (setarab == 1) {
    t = "right:0px;";
} var b = '<div style="z-index:100; position:absolute; top:-25px; ' + t + '">'; if (farm > 4 && (farm != 99 && farm != 100)) {
    var q = { "1": { name: rack_normal, pages: [1, 2, 3, 4, 5, 6, 7] }, "10": { name: rack_oil, pages: [10, 11, 12] } };
}
else {
    var q = { "1": { name: rack_normal, pages: [1, 2, 3, 4, 5, 6, 7] }, "10": { name: rack_oil, pages: [10, 11, 12] }, "15": { name: rack_deco, pages: [15, 16, 17, 18, 19, 20, 21] }, "25": { name: rack_foodworld, pages: [25, 26, 27, 28] }, "30": { name: rack_flower, pages: [30, 31, 32, 33, 34, 35, 36] } };
} for (var S in q) {
    m += '<div id="rackcat' + S + '" style="position:relative; width:53px; height:39px; float:' + N + ';">';
    if (S == 1) {
        m += '<div id="invisible_rack_info"></div>';
    }
    m += '  <div id="rackcat' + S + '_img">';
    m += '    <div id="rackcat' + S + '_lock" class="rack_lock link" style="height:48px;"></div>';
    m += "  </div>";
    var t = "left";
    if (setarab == 1) {
        t = "right";
    }
    m += '  <div id="rackcat' + S + '_tt" class="ttbox" style="z-index:100; display:none; position:absolute; top:40px; ' + t + ':25px; min-width:120px; max-width:250px;"></div>';
    m += "</div>";
    if (in_array(W, q[S].pages)) {
        for (var R = 0; R < q[S].pages.length; R++) {
            var O = (parseInt(S) + parseInt(R));
            if (S == 1 || I[O]) {
                b += '<div id="rackswitch' + O + '" class="rackswitch_box">';
                b += '  <div id="rackswitch' + O + '_img" class="rackswitch">';
                b += '    <div style="padding:15px; color:#000; font-weight:bold;">' + (R + 1) + "</div>";
                b += '    <div id="rackswitch' + O + '_lock" class="rack_lock_page link" style="z-index:100; position:absolute; top:0px; left:0px;"></div>';
                b += "  </div>";
                b += '  <div id="rackswitch' + O + '_tt" class="ttbox" style="z-index:100; display:none; position:absolute; bottom:50px; ' + t + ':0px; width:150px;"></div>';
                b += "</div>";
            }
        }
    }
} b += "</div>"; m += '</div><div style="clear:both;"></div>'; var d = ""; if (in_array(W, v)) {
    var y = new Object;
    for (var M = 0; M < v.length; M++) {
        var S = v[M];
        if (I[S]) {
            for (var R = 1; R <= 20; R++) {
                if (I[S][R]) {
                    if (W <= 7) {
                        if (produkt_category[I[S][R]["pid"]] == "v") {
                            y.v = 1;
                        }
                        if (produkt_category[I[S][R]["pid"]] == "e") {
                            y.e = 1;
                        }
                        if (produkt_category[I[S][R]["pid"]] == "z") {
                            y.z = 1;
                        }
                        if (produkt_category[I[S][R]["pid"]] == "hr") {
                            y.hr = 1;
                        }
                        if (produkt_category[I[S][R]["pid"]] == "ex") {
                            y.ex = 1;
                        }
                        if (produkt_category[I[S][R]["pid"]] == "alpin") {
                            y.alpin = 1;
                            y.tea = 1;
                        }
                    }
                    else {
                        if (W >= 25 && W <= 28) {
                            if (foodworld_categories[I[S][R]["pid"]] == 1) {
                                y.fw1 = 1;
                            }
                            if (foodworld_categories[I[S][R]["pid"]] == 2) {
                                y.fw2 = 1;
                            }
                            if (foodworld_categories[I[S][R]["pid"]] == 3) {
                                y.fw3 = 1;
                            }
                            if (foodworld_categories[I[S][R]["pid"]] == 4) {
                                y.fw4 = 1;
                            }
                        }
                        else {
                            if (produkt_category[I[S][R]["pid"]] == "fl") {
                                y.fl = 1;
                            }
                            if (produkt_category[I[S][R]["pid"]] == "fla") {
                                y.fla = 1;
                            }
                            if (produkt_category[I[S][R]["pid"]] == "md") {
                                y.md = 1;
                            }
                            if (produkt_category[I[S][R]["pid"]] == "breed") {
                                y.breed = 1;
                            }
                        }
                    }
                }
            }
        }
    }
    var t = "left:-53px;";
    var w = "left:50px;";
    if (setarab == 1) {
        t = "right:-26px;";
        w = "right:40px;";
    }
    d += '<div style="z-index:100; position:absolute; top:235px; ' + t + ' width:47px;">';
    var D = 0;
    for (var O in y) {
        D++;
    }
    if (D > 1) {
        for (var O in y) {
            var U = racksort_v;
            if (O == "e") {
                U = racksort_e;
            }
            if (O == "z") {
                U = racksort_z;
            }
            if (O == "hr") {
                U = racksort_hr;
            }
            if (O == "fl") {
                U = racksort_fl;
            }
            if (O == "fla") {
                U = racksort_fla;
            }
            if (O == "breed") {
                U = racksort_breed;
            }
            if (O == "md") {
                U = racksort_md;
            }
            if (O == "ex") {
                U = racksort_ex;
            }
            if (O == "alpin") {
                U = racksort_alpin;
            }
            if (O == "tea") {
                continue;
            }
            if (O == "fw1") {
                U = t_foodworld_pos1;
            }
            if (O == "fw2") {
                U = t_foodworld_pos2;
            }
            if (O == "fw3") {
                U = t_foodworld_pos4;
            }
            if (O == "fw4") {
                U = t_foodworld_pos3;
            }
            d += '<div style="position:relative;" class="racksort_' + O;
            if (racksubsort == O) {
                d += "_active ";
            }
            d += ' link" onclick="racksubsort=\'' + O + "'; sortRackNew();\" onmouseover=\"showDiv('racksort_" + O + "_tt')\" onmouseout=\"hideDiv('racksort_" + O + "_tt')\">";
            d += '  <div id="racksort_' + O + '_tt" class="ttbox" style="z-index:100; display:none; position:absolute; top:10px; ' + w + ' width:150px;">' + U + "</div>";
            d += "</div>";
        }
    }
    d += "</div>";
} $("rackItems").innerHTML = B + m + b + d; for (var S in q) {
    $("rackcat" + S).onmouseover = new Function("showDiv('rackcat" + S + "_tt')");
    $("rackcat" + S).onmouseout = new Function("hideDiv('rackcat" + S + "_tt')");
    $("rackcat" + S + "_tt").innerHTML = q[S].name;
    $("rackcat" + S + "_img").className = "link rackcat" + S;
    hideDiv("rackcat" + S + "_lock");
    if (in_array(W, q[S].pages)) {
        $("rackcat" + S + "_img").className = "link rackcat" + S + "_active";
    }
    if (racklocks && racklocks[S]) {
        $("rackcat" + S + "_tt").innerHTML += "<br><br>" + racklocks[S].text;
        showDiv("rackcat" + S + "_lock");
        if (racklocks[S].house == 1) {
            var P = 0;
            if (S == 15) {
                P = 1;
            }
            $("rackcat" + S).onclick = new Function("buyRackCommit(" + S + ", " + P + ")");
            $("rackcat" + S + "_img").addClassName("maketransp");
            $("rackcat" + S + "_lock").removeClassName("rack_lock").addClassName("unlocked");
        }
    }
    else {
        $("rackcat" + S).onclick = new Function("racksubsort=''; sortRackNew(" + S + ");");
    }
    for (var R = 0; R < q[S].pages.length; R++) {
        var O = (parseInt(S) + parseInt(R));
        if ($("rackswitch" + O)) {
            hideDiv("rackswitch" + O);
            if (I[O] || in_array(W, q[1].pages)) {
                if (in_array(W, q[S].pages)) {
                    if (W == O) {
                        $("rackswitch" + O + "_img").className = "rackswitch_active";
                    }
                    if (racklocks && racklocks[O]) {
                        $("rackswitch" + O).onmouseover = new Function("showDiv('rackswitch" + O + "_tt')");
                        $("rackswitch" + O).onmouseout = new Function("hideDiv('rackswitch" + O + "_tt')");
                        $("rackswitch" + O + "_tt").innerHTML += racklocks[O].text;
                        showDiv("rackswitch" + O + "_lock");
                        if (racklocks[O].house == 1) {
                            $("rackswitch" + O).onclick = new Function("buyRackCommit(" + O + ", 0)");
                            $("rackswitch" + O + "_img").addClassName("maketransp");
                            $("rackswitch" + O + "_lock").removeClassName("rack_lock_page").addClassName("unlocked");
                        }
                        else {
                            $("rackswitch" + O).onclick = new Function("");
                        }
                    }
                    else {
                        $("rackswitch" + O + "_img").addClassName("link");
                        $("rackswitch" + O).onclick = new Function("sortRackNew(" + O + ");");
                        hideDiv("rackswitch" + O + "_lock");
                    }
                    showDiv("rackswitch" + O);
                }
            }
        }
    }
} if (!h) {
    selectMode(-1);
}
else {
    if (selected) {
        if (!checkRackItem(selected, farm)) {
            selectMode(1);
        }
    }
    else {
        if (Q && h) {
            selectRackItem(h, 1);
        }
        else {
            if (tutorial) {
                selectRackItem(h);
            }
            else {
                hideDiv("lager_info");
            }
        }
    }
} if (I[99] && I[99].length > 0) {
    var B = '<div style="position:absolute; top:0; right:0; width:27px; height:43px; background:url(' + imgpath + 'stock_warning2.png);" onmouseover="showDiv(\'invisible_rack_info_tt\')" onmouseout="hideDiv(\'invisible_rack_info_tt\')">';
    B += '  <div id="invisible_rack_info_tt" style="z-index:200; left:15px; top:15px;" class="ttbox">';
    B += '    <div style="margin-bottom:5px;">' + t_invisiblestock + "</div>";
    for (var S = 0; S < I[99].length; S++) {
        B += '<div style="margin-bottom:2px; width:240px;">';
        B += '  <div style="float:left; margin-right:5px;" class="kp' + I[99][S].pid + '"></div>';
        B += '  <div style="float:left; width:220px;">' + I[99][S].amount + " " + produkt_name[I[99][S].pid] + "</div>";
        B += '  <div class="clear"></div>';
        B += "</div>";
    }
    B += "</div>";
    $("invisible_rack_info").innerHTML = B;
} if (!farm) {
    var T = 1;
}
else {
    var T = farm;
} var A = farmname + T; if (T < 5 || T == 99 || T == 100) {
    A = t_map_stock_overview_mainstock;
} if ($("rackBottomRackInfo")) {
    $("rackBottomRackInfo").innerHTML = A;
} if (T == 5) {
    $("lager").className = "lager_ex";
}
else {
    $("lager").className = "lager_normal";
} }
function buyRackCommit(e, d) { var b = infoheadquarterbuyrack; var a = racklocks[e].text; var c = "farmAction('createnewrack', " + farm + ", 0, " + d + ")"; globalcommitbox(b, a, c); }
function openMarketFromRack(a) { if (!city || city > 1) {
    mapGo2Location("city", 1);
} market_filter_pid = a; marketAction("marketfilter", a, 1); }
function selectRackItem(c, b) { hideDiv("erntewasserpic"); showDiv("lager_pic"); $("bedientext").innerHTML = t_setzen; $("lager_pic").className = "l" + c; $("lager_name").innerHTML = "<b>" + produkt_name[c] + "</b>"; if (produkt_category[c] != "v" && produkt_category[c] != "ex" && produkt_category[c] != "alpin" && produkt_category[c] != "fl" && produkt_category[c] != "hr") {
    hideDiv("lager_info");
}
else {
    if (produkt_category[c] != "e") {
        showDiv("lager_info");
    }
    $("lager_zeit").innerHTML = formatTime(produkt_zeit[c]);
    var a = produkt_ernte[c];
    if (produkt_ernte_bonus[c]) {
        a += '&nbsp;<span class="rack_cropbonus">+' + produkt_ernte_bonus[c] + "</span>";
    }
    $("lager_ernte").innerHTML = a;
} if (!b) {
    mode = 0;
    selected = c;
    flowerarea_modus = "plant";
    autoplantselected = c;
    if (autoplantposition > 0 && $("autoplantselectbox")) {
        autoPlantCommit(autoplantposition);
    }
    if (!in_array(c, flowerarea_dropitems)) {
        flowerarea_autoplant_select = c;
    }
    if ($("flowerarea_autoplantselector")) {
        dialogFlowerArea("autoplant", 1);
    }
    regal_leer = 0;
    global_x = produkt_x[c];
    global_y = produkt_y[c];
    iKategorie = produkt_category[c];
    kategorie = iKategorie;
} }
var Scriptaculous = { Version: "1.9.0", require: function (b) { return; try {
        document.write('<script type="text/javascript" src="' + b + '"><\/script>');
    }
    catch (c) {
        var a = document.createElement("script");
        a.type = "text/javascript";
        a.src = b;
        document.getElementsByTagName("head")[0].appendChild(a);
    } }, REQUIRED_PROTOTYPE: "1.6.0.3", load: function () { function a(c) { var d = c.replace(/_.*|\./g, ""); d = parseInt(d + "0".times(4 - d.length)); return c.indexOf("_") > -1 ? d - 1 : d; } if ((typeof Prototype == "undefined") || (typeof Element == "undefined") || (typeof Element.Methods == "undefined") || (a(Prototype.Version) < a(Scriptaculous.REQUIRED_PROTOTYPE))) {
        throw ("script.aculo.us requires the Prototype JavaScript framework >= " + Scriptaculous.REQUIRED_PROTOTYPE);
    } var b = /scriptaculous\.js(\?.*)?$/; $$("script[src]").findAll(function (c) { return c.src.match(b); }).each(function (d) { var e = d.src.replace(b, ""), c = d.src.match(/\?.*load=([a-z,]*)/); (c ? c[1] : "builder,effects,dragdrop,controls,slider,sound").split(",").each(function (h) { Scriptaculous.require(e + h + ".js"); }); }); } };
Scriptaculous.load();
String.prototype.parseColor = function () { var a = "#"; if (this.slice(0, 4) == "rgb(") {
    var c = this.slice(4, this.length - 1).split(",");
    var b = 0;
    do {
        a += parseInt(c[b]).toColorPart();
    } while (++b < 3);
}
else {
    if (this.slice(0, 1) == "#") {
        if (this.length == 4) {
            for (var b = 1; b < 4; b++) {
                a += (this.charAt(b) + this.charAt(b)).toLowerCase();
            }
        }
        if (this.length == 7) {
            a = this.toLowerCase();
        }
    }
} return (a.length == 7 ? a : (arguments[0] || this)); };
Element.collectTextNodes = function (a) { return $A($(a).childNodes).collect(function (b) { return (b.nodeType == 3 ? b.nodeValue : (b.hasChildNodes() ? Element.collectTextNodes(b) : "")); }).flatten().join(""); };
Element.collectTextNodesIgnoreClass = function (a, b) { return $A($(a).childNodes).collect(function (c) { return (c.nodeType == 3 ? c.nodeValue : ((c.hasChildNodes() && !Element.hasClassName(c, b)) ? Element.collectTextNodesIgnoreClass(c, b) : "")); }).flatten().join(""); };
Element.setContentZoom = function (a, b) { a = $(a); a.setStyle({ fontSize: (b / 100) + "em" }); if (Prototype.Browser.WebKit) {
    window.scrollBy(0, 0);
} return a; };
Element.getInlineOpacity = function (a) { return $(a).style.opacity || ""; };
Element.forceRerendering = function (a) { try {
    a = $(a);
    var c = document.createTextNode(" ");
    a.appendChild(c);
    a.removeChild(c);
}
catch (b) { } };
var Effect = { _elementDoesNotExistError: { name: "ElementDoesNotExistError", message: "The specified DOM element does not exist, but is required for this effect to operate" }, Transitions: { linear: Prototype.K, sinoidal: function (a) { return (-Math.cos(a * Math.PI) / 2) + 0.5; }, reverse: function (a) { return 1 - a; }, flicker: function (a) { var a = ((-Math.cos(a * Math.PI) / 4) + 0.75) + Math.random() / 4; return a > 1 ? 1 : a; }, wobble: function (a) { return (-Math.cos(a * Math.PI * (9 * a)) / 2) + 0.5; }, pulse: function (b, a) { return (-Math.cos((b * ((a || 5) - 0.5) * 2) * Math.PI) / 2) + 0.5; }, spring: function (a) { return 1 - (Math.cos(a * 4.5 * Math.PI) * Math.exp(-a * 6)); }, none: function (a) { return 0; }, full: function (a) { return 1; } }, DefaultOptions: { duration: 1, fps: 100, sync: false, from: 0, to: 1, delay: 0, queue: "parallel" }, tagifyText: function (a) { var b = "position:relative"; if (Prototype.Browser.IE) {
        b += ";zoom:1";
    } a = $(a); $A(a.childNodes).each(function (c) { if (c.nodeType == 3) {
        c.nodeValue.toArray().each(function (d) { a.insertBefore(new Element("span", { style: b }).update(d == " " ? String.fromCharCode(160) : d), c); });
        Element.remove(c);
    } }); }, multiple: function (b, c) { var e; if (((typeof b == "object") || Object.isFunction(b)) && (b.length)) {
        e = b;
    }
    else {
        e = $(b).childNodes;
    } var a = Object.extend({ speed: 0.1, delay: 0 }, arguments[2] || {}); var d = a.delay; $A(e).each(function (l, h) { new c(l, Object.extend(a, { delay: h * a.speed + d })); }); }, PAIRS: { slide: ["SlideDown", "SlideUp"], blind: ["BlindDown", "BlindUp"], appear: ["Appear", "Fade"] }, toggle: function (b, c, a) { b = $(b); c = (c || "appear").toLowerCase(); return Effect[Effect.PAIRS[c][b.visible() ? 1 : 0]](b, Object.extend({ queue: { position: "end", scope: (b.id || "global"), limit: 1 } }, a || {})); } };
Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;
Effect.ScopedQueue = Class.create(Enumerable, { initialize: function () { this.effects = []; this.interval = null; }, _each: function (a) { this.effects._each(a); }, add: function (b) { var c = new Date().getTime(); var a = Object.isString(b.options.queue) ? b.options.queue : b.options.queue.position; switch (a) {
        case "front":
            this.effects.findAll(function (d) { return d.state == "idle"; }).each(function (d) { d.startOn += b.finishOn; d.finishOn += b.finishOn; });
            break;
        case "with-last":
            c = this.effects.pluck("startOn").max() || c;
            break;
        case "end":
            c = this.effects.pluck("finishOn").max() || c;
            break;
    } b.startOn += c; b.finishOn += c; if (!b.options.queue.limit || (this.effects.length < b.options.queue.limit)) {
        this.effects.push(b);
    } if (!this.interval) {
        this.interval = setInterval(this.loop.bind(this), 15);
    } }, remove: function (a) { this.effects = this.effects.reject(function (b) { return b == a; }); if (this.effects.length == 0) {
        clearInterval(this.interval);
        this.interval = null;
    } }, loop: function () { var c = new Date().getTime(); for (var b = 0, a = this.effects.length; b < a; b++) {
        this.effects[b] && this.effects[b].loop(c);
    } } });
Effect.Queues = { instances: $H(), get: function (a) { if (!Object.isString(a)) {
        return a;
    } return this.instances.get(a) || this.instances.set(a, new Effect.ScopedQueue()); } };
Effect.Queue = Effect.Queues.get("global");
Effect.Base = Class.create({ position: null, start: function (a) { if (a && a.transition === false) {
        a.transition = Effect.Transitions.linear;
    } this.options = Object.extend(Object.extend({}, Effect.DefaultOptions), a || {}); this.currentFrame = 0; this.state = "idle"; this.startOn = this.options.delay * 1000; this.finishOn = this.startOn + (this.options.duration * 1000); this.fromToDelta = this.options.to - this.options.from; this.totalTime = this.finishOn - this.startOn; this.totalFrames = this.options.fps * this.options.duration; this.render = (function () { function b(d, c) { if (d.options[c + "Internal"]) {
        d.options[c + "Internal"](d);
    } if (d.options[c]) {
        d.options[c](d);
    } } return function (c) { if (this.state === "idle") {
        this.state = "running";
        b(this, "beforeSetup");
        if (this.setup) {
            this.setup();
        }
        b(this, "afterSetup");
    } if (this.state === "running") {
        c = (this.options.transition(c) * this.fromToDelta) + this.options.from;
        this.position = c;
        b(this, "beforeUpdate");
        if (this.update) {
            this.update(c);
        }
        b(this, "afterUpdate");
    } }; })(); this.event("beforeStart"); if (!this.options.sync) {
        Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).add(this);
    } }, loop: function (c) { if (c >= this.startOn) {
        if (c >= this.finishOn) {
            this.render(1);
            this.cancel();
            this.event("beforeFinish");
            if (this.finish) {
                this.finish();
            }
            this.event("afterFinish");
            return;
        }
        var b = (c - this.startOn) / this.totalTime, a = (b * this.totalFrames).round();
        if (a > this.currentFrame) {
            this.render(b);
            this.currentFrame = a;
        }
    } }, cancel: function () { if (!this.options.sync) {
        Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).remove(this);
    } this.state = "finished"; }, event: function (a) { if (this.options[a + "Internal"]) {
        this.options[a + "Internal"](this);
    } if (this.options[a]) {
        this.options[a](this);
    } }, inspect: function () { var a = $H(); for (property in this) {
        if (!Object.isFunction(this[property])) {
            a.set(property, this[property]);
        }
    } return "#<Effect:" + a.inspect() + ",options:" + $H(this.options).inspect() + ">"; } });
Effect.Parallel = Class.create(Effect.Base, { initialize: function (a) { this.effects = a || []; this.start(arguments[1]); }, update: function (a) { this.effects.invoke("render", a); }, finish: function (a) { this.effects.each(function (b) { b.render(1); b.cancel(); b.event("beforeFinish"); if (b.finish) {
        b.finish(a);
    } b.event("afterFinish"); }); } });
Effect.Tween = Class.create(Effect.Base, { initialize: function (c, h, e) { c = Object.isString(c) ? $(c) : c; var b = $A(arguments), d = b.last(), a = b.length == 5 ? b[3] : null; this.method = Object.isFunction(d) ? d.bind(c) : Object.isFunction(c[d]) ? c[d].bind(c) : function (l) { c[d] = l; }; this.start(Object.extend({ from: h, to: e }, a || {})); }, update: function (a) { this.method(a); } });
Effect.Event = Class.create(Effect.Base, { initialize: function () { this.start(Object.extend({ duration: 0 }, arguments[0] || {})); }, update: Prototype.emptyFunction });
Effect.Opacity = Class.create(Effect.Base, { initialize: function (b) { this.element = $(b); if (!this.element) {
        throw (Effect._elementDoesNotExistError);
    } if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout)) {
        this.element.setStyle({ zoom: 1 });
    } var a = Object.extend({ from: this.element.getOpacity() || 0, to: 1 }, arguments[1] || {}); this.start(a); }, update: function (a) { this.element.setOpacity(a); } });
Effect.Move = Class.create(Effect.Base, { initialize: function (b) { this.element = $(b); if (!this.element) {
        throw (Effect._elementDoesNotExistError);
    } var a = Object.extend({ x: 0, y: 0, mode: "relative" }, arguments[1] || {}); this.start(a); }, setup: function () { this.element.makePositioned(); this.originalLeft = parseFloat(this.element.getStyle("left") || "0"); this.originalTop = parseFloat(this.element.getStyle("top") || "0"); if (this.options.mode == "absolute") {
        this.options.x = this.options.x - this.originalLeft;
        this.options.y = this.options.y - this.originalTop;
    } }, update: function (a) { this.element.setStyle({ left: (this.options.x * a + this.originalLeft).round() + "px", top: (this.options.y * a + this.originalTop).round() + "px" }); } });
Effect.MoveBy = function (b, a, c) { return new Effect.Move(b, Object.extend({ x: c, y: a }, arguments[3] || {})); };
Effect.Scale = Class.create(Effect.Base, { initialize: function (b, c) { this.element = $(b); if (!this.element) {
        throw (Effect._elementDoesNotExistError);
    } var a = Object.extend({ scaleX: true, scaleY: true, scaleContent: true, scaleFromCenter: false, scaleMode: "box", scaleFrom: 100, scaleTo: c }, arguments[2] || {}); this.start(a); }, setup: function () { this.restoreAfterFinish = this.options.restoreAfterFinish || false; this.elementPositioning = this.element.getStyle("position"); this.originalStyle = {}; ["top", "left", "width", "height", "fontSize"].each(function (b) { this.originalStyle[b] = this.element.style[b]; }.bind(this)); this.originalTop = this.element.offsetTop; this.originalLeft = this.element.offsetLeft; var a = this.element.getStyle("font-size") || "100%"; ["em", "px", "%", "pt"].each(function (b) { if (a.indexOf(b) > 0) {
        this.fontSize = parseFloat(a);
        this.fontSizeType = b;
    } }.bind(this)); this.factor = (this.options.scaleTo - this.options.scaleFrom) / 100; this.dims = null; if (this.options.scaleMode == "box") {
        this.dims = [this.element.offsetHeight, this.element.offsetWidth];
    } if (/^content/.test(this.options.scaleMode)) {
        this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    } if (!this.dims) {
        this.dims = [this.options.scaleMode.originalHeight, this.options.scaleMode.originalWidth];
    } }, update: function (a) { var b = (this.options.scaleFrom / 100) + (this.factor * a); if (this.options.scaleContent && this.fontSize) {
        this.element.setStyle({ fontSize: this.fontSize * b + this.fontSizeType });
    } this.setDimensions(this.dims[0] * b, this.dims[1] * b); }, finish: function (a) { if (this.restoreAfterFinish) {
        this.element.setStyle(this.originalStyle);
    } }, setDimensions: function (a, e) { var h = {}; if (this.options.scaleX) {
        h.width = e.round() + "px";
    } if (this.options.scaleY) {
        h.height = a.round() + "px";
    } if (this.options.scaleFromCenter) {
        var c = (a - this.dims[0]) / 2;
        var b = (e - this.dims[1]) / 2;
        if (this.elementPositioning == "absolute") {
            if (this.options.scaleY) {
                h.top = this.originalTop - c + "px";
            }
            if (this.options.scaleX) {
                h.left = this.originalLeft - b + "px";
            }
        }
        else {
            if (this.options.scaleY) {
                h.top = -c + "px";
            }
            if (this.options.scaleX) {
                h.left = -b + "px";
            }
        }
    } this.element.setStyle(h); } });
Effect.Highlight = Class.create(Effect.Base, { initialize: function (b) { this.element = $(b); if (!this.element) {
        throw (Effect._elementDoesNotExistError);
    } var a = Object.extend({ startcolor: "#ffff99" }, arguments[1] || {}); this.start(a); }, setup: function () { if (this.element.getStyle("display") == "none") {
        this.cancel();
        return;
    } this.oldStyle = {}; if (!this.options.keepBackgroundImage) {
        this.oldStyle.backgroundImage = this.element.getStyle("background-image");
        this.element.setStyle({ backgroundImage: "none" });
    } if (!this.options.endcolor) {
        this.options.endcolor = this.element.getStyle("background-color").parseColor("#ffffff");
    } if (!this.options.restorecolor) {
        this.options.restorecolor = this.element.getStyle("background-color");
    } this._base = $R(0, 2).map(function (a) { return parseInt(this.options.startcolor.slice(a * 2 + 1, a * 2 + 3), 16); }.bind(this)); this._delta = $R(0, 2).map(function (a) { return parseInt(this.options.endcolor.slice(a * 2 + 1, a * 2 + 3), 16) - this._base[a]; }.bind(this)); }, update: function (a) { this.element.setStyle({ backgroundColor: $R(0, 2).inject("#", function (b, c, d) { return b + ((this._base[d] + (this._delta[d] * a)).round().toColorPart()); }.bind(this)) }); }, finish: function () { this.element.setStyle(Object.extend(this.oldStyle, { backgroundColor: this.options.restorecolor })); } });
Effect.ScrollTo = function (c) { var b = arguments[1] || {}, a = document.viewport.getScrollOffsets(), d = $(c).cumulativeOffset(); if (b.offset) {
    d[1] += b.offset;
} return new Effect.Tween(null, a.top, d[1], b, function (e) { scrollTo(a.left, e.round()); }); };
Effect.Fade = function (c) { c = $(c); var a = c.getInlineOpacity(); var b = Object.extend({ from: c.getOpacity() || 1, to: 0, afterFinishInternal: function (d) { if (d.options.to != 0) {
        return;
    } d.element.hide().setStyle({ opacity: a }); } }, arguments[1] || {}); return new Effect.Opacity(c, b); };
Effect.Appear = function (b) { b = $(b); var a = Object.extend({ from: (b.getStyle("display") == "none" ? 0 : b.getOpacity() || 0), to: 1, afterFinishInternal: function (c) { c.element.forceRerendering(); }, beforeSetup: function (c) { c.element.setOpacity(c.options.from).show(); } }, arguments[1] || {}); return new Effect.Opacity(b, a); };
Effect.Puff = function (b) { b = $(b); var a = { opacity: b.getInlineOpacity(), position: b.getStyle("position"), top: b.style.top, left: b.style.left, width: b.style.width, height: b.style.height }; return new Effect.Parallel([new Effect.Scale(b, 200, { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }), new Effect.Opacity(b, { sync: true, to: 0 })], Object.extend({ duration: 1, beforeSetupInternal: function (c) { Position.absolutize(c.effects[0].element); }, afterFinishInternal: function (c) { c.effects[0].element.hide().setStyle(a); } }, arguments[1] || {})); };
Effect.BlindUp = function (a) { a = $(a); a.makeClipping(); return new Effect.Scale(a, 0, Object.extend({ scaleContent: false, scaleX: false, restoreAfterFinish: true, afterFinishInternal: function (b) { b.element.hide().undoClipping(); } }, arguments[1] || {})); };
Effect.BlindDown = function (b) { b = $(b); var a = b.getDimensions(); return new Effect.Scale(b, 100, Object.extend({ scaleContent: false, scaleX: false, scaleFrom: 0, scaleMode: { originalHeight: a.height, originalWidth: a.width }, restoreAfterFinish: true, afterSetup: function (c) { c.element.makeClipping().setStyle({ height: "0px" }).show(); }, afterFinishInternal: function (c) { c.element.undoClipping(); } }, arguments[1] || {})); };
Effect.SwitchOff = function (b) { b = $(b); var a = b.getInlineOpacity(); return new Effect.Appear(b, Object.extend({ duration: 0.4, from: 0, transition: Effect.Transitions.flicker, afterFinishInternal: function (c) { new Effect.Scale(c.element, 1, { duration: 0.3, scaleFromCenter: true, scaleX: false, scaleContent: false, restoreAfterFinish: true, beforeSetup: function (d) { d.element.makePositioned().makeClipping(); }, afterFinishInternal: function (d) { d.element.hide().undoClipping().undoPositioned().setStyle({ opacity: a }); } }); } }, arguments[1] || {})); };
Effect.DropOut = function (b) { b = $(b); var a = { top: b.getStyle("top"), left: b.getStyle("left"), opacity: b.getInlineOpacity() }; return new Effect.Parallel([new Effect.Move(b, { x: 0, y: 100, sync: true }), new Effect.Opacity(b, { sync: true, to: 0 })], Object.extend({ duration: 0.5, beforeSetup: function (c) { c.effects[0].element.makePositioned(); }, afterFinishInternal: function (c) { c.effects[0].element.hide().undoPositioned().setStyle(a); } }, arguments[1] || {})); };
Effect.Shake = function (d) { d = $(d); var b = Object.extend({ distance: 20, duration: 0.5 }, arguments[1] || {}); var e = parseFloat(b.distance); var c = parseFloat(b.duration) / 10; var a = { top: d.getStyle("top"), left: d.getStyle("left") }; return new Effect.Move(d, { x: e, y: 0, duration: c, afterFinishInternal: function (h) { new Effect.Move(h.element, { x: -e * 2, y: 0, duration: c * 2, afterFinishInternal: function (l) { new Effect.Move(l.element, { x: e * 2, y: 0, duration: c * 2, afterFinishInternal: function (m) { new Effect.Move(m.element, { x: -e * 2, y: 0, duration: c * 2, afterFinishInternal: function (n) { new Effect.Move(n.element, { x: e * 2, y: 0, duration: c * 2, afterFinishInternal: function (q) { new Effect.Move(q.element, { x: -e, y: 0, duration: c, afterFinishInternal: function (r) { r.element.undoPositioned().setStyle(a); } }); } }); } }); } }); } }); } }); };
Effect.SlideDown = function (c) { c = $(c).cleanWhitespace(); var a = c.down().getStyle("bottom"); var b = c.getDimensions(); return new Effect.Scale(c, 100, Object.extend({ scaleContent: false, scaleX: false, scaleFrom: window.opera ? 0 : 1, scaleMode: { originalHeight: b.height, originalWidth: b.width }, restoreAfterFinish: true, afterSetup: function (d) { d.element.makePositioned(); d.element.down().makePositioned(); if (window.opera) {
        d.element.setStyle({ top: "" });
    } d.element.makeClipping().setStyle({ height: "0px" }).show(); }, afterUpdateInternal: function (d) { d.element.down().setStyle({ bottom: (d.dims[0] - d.element.clientHeight) + "px" }); }, afterFinishInternal: function (d) { d.element.undoClipping().undoPositioned(); d.element.down().undoPositioned().setStyle({ bottom: a }); } }, arguments[1] || {})); };
Effect.SlideUp = function (c) { c = $(c).cleanWhitespace(); var a = c.down().getStyle("bottom"); var b = c.getDimensions(); return new Effect.Scale(c, window.opera ? 0 : 1, Object.extend({ scaleContent: false, scaleX: false, scaleMode: "box", scaleFrom: 100, scaleMode: { originalHeight: b.height, originalWidth: b.width }, restoreAfterFinish: true, afterSetup: function (d) { d.element.makePositioned(); d.element.down().makePositioned(); if (window.opera) {
        d.element.setStyle({ top: "" });
    } d.element.makeClipping().show(); }, afterUpdateInternal: function (d) { d.element.down().setStyle({ bottom: (d.dims[0] - d.element.clientHeight) + "px" }); }, afterFinishInternal: function (d) { d.element.hide().undoClipping().undoPositioned(); d.element.down().undoPositioned().setStyle({ bottom: a }); } }, arguments[1] || {})); };
Effect.Squish = function (a) { return new Effect.Scale(a, window.opera ? 1 : 0, { restoreAfterFinish: true, beforeSetup: function (b) { b.element.makeClipping(); }, afterFinishInternal: function (b) { b.element.hide().undoClipping(); } }); };
Effect.Grow = function (c) { c = $(c); var b = Object.extend({ direction: "center", moveTransition: Effect.Transitions.sinoidal, scaleTransition: Effect.Transitions.sinoidal, opacityTransition: Effect.Transitions.full }, arguments[1] || {}); var a = { top: c.style.top, left: c.style.left, height: c.style.height, width: c.style.width, opacity: c.getInlineOpacity() }; var l = c.getDimensions(); var m, h; var e, d; switch (b.direction) {
    case "top-left":
        m = h = e = d = 0;
        break;
    case "top-right":
        m = l.width;
        h = d = 0;
        e = -l.width;
        break;
    case "bottom-left":
        m = e = 0;
        h = l.height;
        d = -l.height;
        break;
    case "bottom-right":
        m = l.width;
        h = l.height;
        e = -l.width;
        d = -l.height;
        break;
    case "center":
        m = l.width / 2;
        h = l.height / 2;
        e = -l.width / 2;
        d = -l.height / 2;
        break;
} return new Effect.Move(c, { x: m, y: h, duration: 0.01, beforeSetup: function (n) { n.element.hide().makeClipping().makePositioned(); }, afterFinishInternal: function (n) { new Effect.Parallel([new Effect.Opacity(n.element, { sync: true, to: 1, from: 0, transition: b.opacityTransition }), new Effect.Move(n.element, { x: e, y: d, sync: true, transition: b.moveTransition }), new Effect.Scale(n.element, 100, { scaleMode: { originalHeight: l.height, originalWidth: l.width }, sync: true, scaleFrom: window.opera ? 1 : 0, transition: b.scaleTransition, restoreAfterFinish: true })], Object.extend({ beforeSetup: function (q) { q.effects[0].element.setStyle({ height: "0px" }).show(); }, afterFinishInternal: function (q) { q.effects[0].element.undoClipping().undoPositioned().setStyle(a); } }, b)); } }); };
Effect.Shrink = function (c) { c = $(c); var b = Object.extend({ direction: "center", moveTransition: Effect.Transitions.sinoidal, scaleTransition: Effect.Transitions.sinoidal, opacityTransition: Effect.Transitions.none }, arguments[1] || {}); var a = { top: c.style.top, left: c.style.left, height: c.style.height, width: c.style.width, opacity: c.getInlineOpacity() }; var h = c.getDimensions(); var e, d; switch (b.direction) {
    case "top-left":
        e = d = 0;
        break;
    case "top-right":
        e = h.width;
        d = 0;
        break;
    case "bottom-left":
        e = 0;
        d = h.height;
        break;
    case "bottom-right":
        e = h.width;
        d = h.height;
        break;
    case "center":
        e = h.width / 2;
        d = h.height / 2;
        break;
} return new Effect.Parallel([new Effect.Opacity(c, { sync: true, to: 0, from: 1, transition: b.opacityTransition }), new Effect.Scale(c, window.opera ? 1 : 0, { sync: true, transition: b.scaleTransition, restoreAfterFinish: true }), new Effect.Move(c, { x: e, y: d, sync: true, transition: b.moveTransition })], Object.extend({ beforeStartInternal: function (l) { l.effects[0].element.makePositioned().makeClipping(); }, afterFinishInternal: function (l) { l.effects[0].element.hide().undoClipping().undoPositioned().setStyle(a); } }, b)); };
Effect.Pulsate = function (c) { c = $(c); var b = arguments[1] || {}, a = c.getInlineOpacity(), e = b.transition || Effect.Transitions.linear, d = function (h) { return 1 - e((-Math.cos((h * (b.pulses || 5) * 2) * Math.PI) / 2) + 0.5); }; return new Effect.Opacity(c, Object.extend(Object.extend({ duration: 2, from: 0, afterFinishInternal: function (h) { h.element.setStyle({ opacity: a }); } }, b), { transition: d })); };
Effect.Fold = function (b) { b = $(b); var a = { top: b.style.top, left: b.style.left, width: b.style.width, height: b.style.height }; b.makeClipping(); return new Effect.Scale(b, 5, Object.extend({ scaleContent: false, scaleX: false, afterFinishInternal: function (c) { new Effect.Scale(b, 1, { scaleContent: false, scaleY: false, afterFinishInternal: function (d) { d.element.hide().undoClipping().setStyle(a); } }); } }, arguments[1] || {})); };
Effect.Morph = Class.create(Effect.Base, { initialize: function (c) { this.element = $(c); if (!this.element) {
        throw (Effect._elementDoesNotExistError);
    } var a = Object.extend({ style: {} }, arguments[1] || {}); if (!Object.isString(a.style)) {
        this.style = $H(a.style);
    }
    else {
        if (a.style.include(":")) {
            this.style = a.style.parseStyle();
        }
        else {
            this.element.addClassName(a.style);
            this.style = $H(this.element.getStyles());
            this.element.removeClassName(a.style);
            var b = this.element.getStyles();
            this.style = this.style.reject(function (d) { return d.value == b[d.key]; });
            a.afterFinishInternal = function (d) { d.element.addClassName(d.options.style); d.transforms.each(function (e) { d.element.style[e.style] = ""; }); };
        }
    } this.start(a); }, setup: function () { function a(b) { if (!b || ["rgba(0, 0, 0, 0)", "transparent"].include(b)) {
        b = "#ffffff";
    } b = b.parseColor(); return $R(0, 2).map(function (c) { return parseInt(b.slice(c * 2 + 1, c * 2 + 3), 16); }); } this.transforms = this.style.map(function (l) { var h = l[0], e = l[1], d = null; if (e.parseColor("#zzzzzz") != "#zzzzzz") {
        e = e.parseColor();
        d = "color";
    }
    else {
        if (h == "opacity") {
            e = parseFloat(e);
            if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout)) {
                this.element.setStyle({ zoom: 1 });
            }
        }
        else {
            if (Element.CSS_LENGTH.test(e)) {
                var c = e.match(/^([\+\-]?[0-9\.]+)(.*)$/);
                e = parseFloat(c[1]);
                d = (c.length == 3) ? c[2] : null;
            }
        }
    } var b = this.element.getStyle(h); return { style: h.camelize(), originalValue: d == "color" ? a(b) : parseFloat(b || 0), targetValue: d == "color" ? a(e) : e, unit: d }; }.bind(this)).reject(function (b) { return ((b.originalValue == b.targetValue) || (b.unit != "color" && (isNaN(b.originalValue) || isNaN(b.targetValue)))); }); }, update: function (a) { var d = {}, b, c = this.transforms.length; while (c--) {
        d[(b = this.transforms[c]).style] = b.unit == "color" ? "#" + (Math.round(b.originalValue[0] + (b.targetValue[0] - b.originalValue[0]) * a)).toColorPart() + (Math.round(b.originalValue[1] + (b.targetValue[1] - b.originalValue[1]) * a)).toColorPart() + (Math.round(b.originalValue[2] + (b.targetValue[2] - b.originalValue[2]) * a)).toColorPart() : (b.originalValue + (b.targetValue - b.originalValue) * a).toFixed(3) + (b.unit === null ? "" : b.unit);
    } this.element.setStyle(d, true); } });
Effect.Transform = Class.create({ initialize: function (a) { this.tracks = []; this.options = arguments[1] || {}; this.addTracks(a); }, addTracks: function (a) { a.each(function (b) { b = $H(b); var c = b.values().first(); this.tracks.push($H({ ids: b.keys().first(), effect: Effect.Morph, options: { style: c } })); }.bind(this)); return this; }, play: function () { return new Effect.Parallel(this.tracks.map(function (a) { var d = a.get("ids"), c = a.get("effect"), b = a.get("options"); var e = [$(d) || $$(d)].flatten(); return e.map(function (h) { return new c(h, Object.extend({ sync: true }, b)); }); }).flatten(), this.options); } });
Element.CSS_PROPERTIES = $w("backgroundColor backgroundPosition borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderSpacing borderTopColor borderTopStyle borderTopWidth bottom clip color fontSize fontWeight height left letterSpacing lineHeight marginBottom marginLeft marginRight marginTop markerOffset maxHeight maxWidth minHeight minWidth opacity outlineColor outlineOffset outlineWidth paddingBottom paddingLeft paddingRight paddingTop right textIndent top width wordSpacing zIndex");
Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;
String.__parseStyleElement = document.createElement("div");
String.prototype.parseStyle = function () { var b, a = $H(); if (Prototype.Browser.WebKit) {
    b = new Element("div", { style: this }).style;
}
else {
    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
    b = String.__parseStyleElement.childNodes[0].style;
} Element.CSS_PROPERTIES.each(function (c) { if (b[c]) {
    a.set(c, b[c]);
} }); if (Prototype.Browser.IE && this.include("opacity")) {
    a.set("opacity", this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);
} return a; };
if (document.defaultView && document.defaultView.getComputedStyle) {
    Element.getStyles = function (b) { var a = document.defaultView.getComputedStyle($(b), null); return Element.CSS_PROPERTIES.inject({}, function (c, d) { c[d] = a[d]; return c; }); };
}
else {
    Element.getStyles = function (b) { b = $(b); var a = b.currentStyle, c; c = Element.CSS_PROPERTIES.inject({}, function (d, e) { d[e] = a[e]; return d; }); if (!c.opacity) {
        c.opacity = b.getOpacity();
    } return c; };
}
Effect.Methods = { morph: function (a, b) { a = $(a); new Effect.Morph(a, Object.extend({ style: b }, arguments[2] || {})); return a; }, visualEffect: function (c, e, b) { c = $(c); var d = e.dasherize().camelize(), a = d.charAt(0).toUpperCase() + d.substring(1); new Effect[a](c, b); return c; }, highlight: function (b, a) { b = $(b); new Effect.Highlight(b, a); return b; } };
$w("fade appear grow shrink fold blindUp blindDown slideUp slideDown pulsate shake puff squish switchOff dropOut").each(function (a) { Effect.Methods[a] = function (c, b) { c = $(c); Effect[a.charAt(0).toUpperCase() + a.substring(1)](c, b); return c; }; });
$w("getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles").each(function (a) { Effect.Methods[a] = Element[a]; });
Element.addMethods(Effect.Methods);
if (typeof Effect == "undefined") {
    throw ("controls.js requires including script.aculo.us' effects.js library");
}
var Autocompleter = {};
Autocompleter.Base = Class.create({ baseInitialize: function (b, c, a) { b = $(b); this.element = b; this.update = $(c); this.hasFocus = false; this.changed = false; this.active = false; this.index = 0; this.entryCount = 0; this.oldElementValue = this.element.value; if (this.setOptions) {
        this.setOptions(a);
    }
    else {
        this.options = a || {};
    } this.options.paramName = this.options.paramName || this.element.name; this.options.tokens = this.options.tokens || []; this.options.frequency = this.options.frequency || 0.4; this.options.minChars = this.options.minChars || 1; this.options.onShow = this.options.onShow || function (d, e) { if (!e.style.position || e.style.position == "absolute") {
        e.style.position = "absolute";
        Position.clone(d, e, { setHeight: false, offsetTop: d.offsetHeight });
    } Effect.Appear(e, { duration: 0.15 }); }; this.options.onHide = this.options.onHide || function (d, e) { new Effect.Fade(e, { duration: 0.15 }); }; if (typeof (this.options.tokens) == "string") {
        this.options.tokens = new Array(this.options.tokens);
    } if (!this.options.tokens.include("\n")) {
        this.options.tokens.push("\n");
    } this.observer = null; this.element.setAttribute("autocomplete", "off"); Element.hide(this.update); Event.observe(this.element, "blur", this.onBlur.bindAsEventListener(this)); Event.observe(this.element, "keydown", this.onKeyPress.bindAsEventListener(this)); }, show: function () { if (Element.getStyle(this.update, "display") == "none") {
        this.options.onShow(this.element, this.update);
    } if (!this.iefix && (Prototype.Browser.IE) && (Element.getStyle(this.update, "position") == "absolute")) {
        new Insertion.After(this.update, '<iframe id="' + this.update.id + '_iefix" style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" src="javascript:false;" frameborder="0" scrolling="no"></iframe>');
        this.iefix = $(this.update.id + "_iefix");
    } if (this.iefix) {
        setTimeout(this.fixIEOverlapping.bind(this), 50);
    } }, fixIEOverlapping: function () { Position.clone(this.update, this.iefix, { setTop: (!this.update.style.height) }); this.iefix.style.zIndex = 1; this.update.style.zIndex = 2; Element.show(this.iefix); }, hide: function () { this.stopIndicator(); if (Element.getStyle(this.update, "display") != "none") {
        this.options.onHide(this.element, this.update);
    } if (this.iefix) {
        Element.hide(this.iefix);
    } }, startIndicator: function () { if (this.options.indicator) {
        Element.show(this.options.indicator);
    } }, stopIndicator: function () { if (this.options.indicator) {
        Element.hide(this.options.indicator);
    } }, onKeyPress: function (a) { if (this.active) {
        switch (a.keyCode) {
            case Event.KEY_TAB:
            case Event.KEY_RETURN:
                this.selectEntry();
                Event.stop(a);
            case Event.KEY_ESC:
                this.hide();
                this.active = false;
                Event.stop(a);
                return;
            case Event.KEY_LEFT:
            case Event.KEY_RIGHT: return;
            case Event.KEY_UP:
                this.markPrevious();
                this.render();
                Event.stop(a);
                return;
            case Event.KEY_DOWN:
                this.markNext();
                this.render();
                Event.stop(a);
                return;
        }
    }
    else {
        if (a.keyCode == Event.KEY_TAB || a.keyCode == Event.KEY_RETURN || (Prototype.Browser.WebKit > 0 && a.keyCode == 0)) {
            return;
        }
    } this.changed = true; this.hasFocus = true; if (this.observer) {
        clearTimeout(this.observer);
    } this.observer = setTimeout(this.onObserverEvent.bind(this), this.options.frequency * 1000); }, activate: function () { this.changed = false; this.hasFocus = true; this.getUpdatedChoices(); }, onHover: function (b) { var a = Event.findElement(b, "LI"); if (this.index != a.autocompleteIndex) {
        this.index = a.autocompleteIndex;
        this.render();
    } Event.stop(b); }, onClick: function (b) { var a = Event.findElement(b, "LI"); this.index = a.autocompleteIndex; this.selectEntry(); this.hide(); }, onBlur: function (a) { setTimeout(this.hide.bind(this), 250); this.hasFocus = false; this.active = false; }, render: function () { if (this.entryCount > 0) {
        for (var a = 0; a < this.entryCount; a++) {
            this.index == a ? Element.addClassName(this.getEntry(a), "selected") : Element.removeClassName(this.getEntry(a), "selected");
        }
        if (this.hasFocus) {
            this.show();
            this.active = true;
        }
    }
    else {
        this.active = false;
        this.hide();
    } }, markPrevious: function () { if (this.index > 0) {
        this.index--;
    }
    else {
        this.index = this.entryCount - 1;
    } this.getEntry(this.index).scrollIntoView(true); }, markNext: function () { if (this.index < this.entryCount - 1) {
        this.index++;
    }
    else {
        this.index = 0;
    } this.getEntry(this.index).scrollIntoView(false); }, getEntry: function (a) { return this.update.firstChild.childNodes[a]; }, getCurrentEntry: function () { return this.getEntry(this.index); }, selectEntry: function () { this.active = false; this.updateElement(this.getCurrentEntry()); }, updateElement: function (h) { if (this.options.updateElement) {
        this.options.updateElement(h);
        return;
    } var d = ""; if (this.options.select) {
        var a = $(h).select("." + this.options.select) || [];
        if (a.length > 0) {
            d = Element.collectTextNodes(a[0], this.options.select);
        }
    }
    else {
        d = Element.collectTextNodesIgnoreClass(h, "informal");
    } var c = this.getTokenBounds(); if (c[0] != -1) {
        var e = this.element.value.substr(0, c[0]);
        var b = this.element.value.substr(c[0]).match(/^\s+/);
        if (b) {
            e += b[0];
        }
        this.element.value = e + d + this.element.value.substr(c[1]);
    }
    else {
        this.element.value = d;
    } this.oldElementValue = this.element.value; this.element.focus(); if (this.options.afterUpdateElement) {
        this.options.afterUpdateElement(this.element, h);
    } }, updateChoices: function (c) { if (!this.changed && this.hasFocus) {
        this.update.innerHTML = c;
        Element.cleanWhitespace(this.update);
        Element.cleanWhitespace(this.update.down());
        if (this.update.firstChild && this.update.down().childNodes) {
            this.entryCount = this.update.down().childNodes.length;
            for (var a = 0; a < this.entryCount; a++) {
                var b = this.getEntry(a);
                b.autocompleteIndex = a;
                this.addObservers(b);
            }
        }
        else {
            this.entryCount = 0;
        }
        this.stopIndicator();
        this.index = 0;
        if (this.entryCount == 1 && this.options.autoSelect) {
            this.selectEntry();
            this.hide();
        }
        else {
            this.render();
        }
    } }, addObservers: function (a) { Event.observe(a, "mouseover", this.onHover.bindAsEventListener(this)); Event.observe(a, "click", this.onClick.bindAsEventListener(this)); }, onObserverEvent: function () { this.changed = false; this.tokenBounds = null; if (this.getToken().length >= this.options.minChars) {
        this.getUpdatedChoices();
    }
    else {
        this.active = false;
        this.hide();
    } this.oldElementValue = this.element.value; }, getToken: function () { var a = this.getTokenBounds(); return this.element.value.substring(a[0], a[1]).strip(); }, getTokenBounds: function () { if (null != this.tokenBounds) {
        return this.tokenBounds;
    } var e = this.element.value; if (e.strip().empty()) {
        return [-1, 0];
    } var h = arguments.callee.getFirstDifferencePos(e, this.oldElementValue); var n = (h == this.oldElementValue.length ? 1 : 0); var d = -1, c = e.length; var m; for (var b = 0, a = this.options.tokens.length; b < a; ++b) {
        m = e.lastIndexOf(this.options.tokens[b], h + n - 1);
        if (m > d) {
            d = m;
        }
        m = e.indexOf(this.options.tokens[b], h + n);
        if (-1 != m && m < c) {
            c = m;
        }
    } return (this.tokenBounds = [d + 1, c]); } });
Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function (c, a) { var d = Math.min(c.length, a.length); for (var b = 0; b < d; ++b) {
    if (c[b] != a[b]) {
        return b;
    }
} return d; };
Ajax.Autocompleter = Class.create(Autocompleter.Base, { initialize: function (c, d, b, a) { this.baseInitialize(c, d, a); this.options.asynchronous = true; this.options.onComplete = this.onComplete.bind(this); this.options.defaultParams = this.options.parameters || null; this.url = b; }, getUpdatedChoices: function () { this.startIndicator(); var a = encodeURIComponent(this.options.paramName) + "=" + encodeURIComponent(this.getToken()); this.options.parameters = this.options.callback ? this.options.callback(this.element, a) : a; if (this.options.defaultParams) {
        this.options.parameters += "&" + this.options.defaultParams;
    } new Ajax.Request(this.url, this.options); }, onComplete: function (a) { this.updateChoices(a.responseText); } });
Autocompleter.Local = Class.create(Autocompleter.Base, { initialize: function (b, d, c, a) { this.baseInitialize(b, d, a); this.options.array = c; }, getUpdatedChoices: function () { this.updateChoices(this.options.selector(this)); }, setOptions: function (a) { this.options = Object.extend({ choices: 10, partialSearch: true, partialChars: 2, ignoreCase: true, fullSearch: false, selector: function (b) { var d = []; var c = []; var m = b.getToken(); var l = 0; for (var e = 0; e < b.options.array.length && d.length < b.options.choices; e++) {
            var h = b.options.array[e];
            var n = b.options.ignoreCase ? h.toLowerCase().indexOf(m.toLowerCase()) : h.indexOf(m);
            while (n != -1) {
                if (n == 0 && h.length != m.length) {
                    d.push("<li><strong>" + h.substr(0, m.length) + "</strong>" + h.substr(m.length) + "</li>");
                    break;
                }
                else {
                    if (m.length >= b.options.partialChars && b.options.partialSearch && n != -1) {
                        if (b.options.fullSearch || /\s/.test(h.substr(n - 1, 1))) {
                            c.push("<li>" + h.substr(0, n) + "<strong>" + h.substr(n, m.length) + "</strong>" + h.substr(n + m.length) + "</li>");
                            break;
                        }
                    }
                }
                n = b.options.ignoreCase ? h.toLowerCase().indexOf(m.toLowerCase(), n + 1) : h.indexOf(m, n + 1);
            }
        } if (c.length) {
            d = d.concat(c.slice(0, b.options.choices - d.length));
        } return "<ul>" + d.join("") + "</ul>"; } }, a || {}); } });
Field.scrollFreeActivate = function (a) { setTimeout(function () { Field.activate(a); }, 1); };
Ajax.InPlaceEditor = Class.create({ initialize: function (c, b, a) { this.url = b; this.element = c = $(c); this.prepareOptions(); this._controls = {}; arguments.callee.dealWithDeprecatedOptions(a); Object.extend(this.options, a || {}); if (!this.options.formId && this.element.id) {
        this.options.formId = this.element.id + "-inplaceeditor";
        if ($(this.options.formId)) {
            this.options.formId = "";
        }
    } if (this.options.externalControl) {
        this.options.externalControl = $(this.options.externalControl);
    } if (!this.options.externalControl) {
        this.options.externalControlOnly = false;
    } this._originalBackground = this.element.getStyle("background-color") || "transparent"; this.element.title = this.options.clickToEditText; this._boundCancelHandler = this.handleFormCancellation.bind(this); this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this); this._boundFailureHandler = this.handleAJAXFailure.bind(this); this._boundSubmitHandler = this.handleFormSubmission.bind(this); this._boundWrapperHandler = this.wrapUp.bind(this); this.registerListeners(); }, checkForEscapeOrReturn: function (a) { if (!this._editing || a.ctrlKey || a.altKey || a.shiftKey) {
        return;
    } if (Event.KEY_ESC == a.keyCode) {
        this.handleFormCancellation(a);
    }
    else {
        if (Event.KEY_RETURN == a.keyCode) {
            this.handleFormSubmission(a);
        }
    } }, createControl: function (l, c, b) { var e = this.options[l + "Control"]; var h = this.options[l + "Text"]; if ("button" == e) {
        var a = document.createElement("input");
        a.type = "submit";
        a.value = h;
        a.className = "editor_" + l + "_button";
        if ("cancel" == l) {
            a.onclick = this._boundCancelHandler;
        }
        this._form.appendChild(a);
        this._controls[l] = a;
    }
    else {
        if ("link" == e) {
            var d = document.createElement("a");
            d.href = "#";
            d.appendChild(document.createTextNode(h));
            d.onclick = "cancel" == l ? this._boundCancelHandler : this._boundSubmitHandler;
            d.className = "editor_" + l + "_link";
            if (b) {
                d.className += " " + b;
            }
            this._form.appendChild(d);
            this._controls[l] = d;
        }
    } }, createEditField: function () { var c = (this.options.loadTextURL ? this.options.loadingText : this.getText()); var b; if (1 >= this.options.rows && !/\r|\n/.test(this.getText())) {
        b = document.createElement("input");
        b.type = "text";
        var a = this.options.size || this.options.cols || 0;
        if (0 < a) {
            b.size = a;
        }
    }
    else {
        b = document.createElement("textarea");
        b.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
        b.cols = this.options.cols || 40;
    } b.name = this.options.paramName; b.value = c; b.className = "editor_field"; if (this.options.submitOnBlur) {
        b.onblur = this._boundSubmitHandler;
    } this._controls.editor = b; if (this.options.loadTextURL) {
        this.loadExternalText();
    } this._form.appendChild(this._controls.editor); }, createForm: function () { var b = this; function a(d, e) { var c = b.options["text" + d + "Controls"]; if (!c || e === false) {
        return;
    } b._form.appendChild(document.createTextNode(c)); } this._form = $(document.createElement("form")); this._form.id = this.options.formId; this._form.addClassName(this.options.formClassName); this._form.onsubmit = this._boundSubmitHandler; this.createEditField(); if ("textarea" == this._controls.editor.tagName.toLowerCase()) {
        this._form.appendChild(document.createElement("br"));
    } if (this.options.onFormCustomization) {
        this.options.onFormCustomization(this, this._form);
    } a("Before", this.options.okControl || this.options.cancelControl); this.createControl("ok", this._boundSubmitHandler); a("Between", this.options.okControl && this.options.cancelControl); this.createControl("cancel", this._boundCancelHandler, "editor_cancel"); a("After", this.options.okControl || this.options.cancelControl); }, destroy: function () { if (this._oldInnerHTML) {
        this.element.innerHTML = this._oldInnerHTML;
    } this.leaveEditMode(); this.unregisterListeners(); }, enterEditMode: function (a) { if (this._saving || this._editing) {
        return;
    } this._editing = true; this.triggerCallback("onEnterEditMode"); if (this.options.externalControl) {
        this.options.externalControl.hide();
    } this.element.hide(); this.createForm(); this.element.parentNode.insertBefore(this._form, this.element); if (!this.options.loadTextURL) {
        this.postProcessEditField();
    } if (a) {
        Event.stop(a);
    } }, enterHover: function (a) { if (this.options.hoverClassName) {
        this.element.addClassName(this.options.hoverClassName);
    } if (this._saving) {
        return;
    } this.triggerCallback("onEnterHover"); }, getText: function () { return this.element.innerHTML.unescapeHTML(); }, handleAJAXFailure: function (a) { this.triggerCallback("onFailure", a); if (this._oldInnerHTML) {
        this.element.innerHTML = this._oldInnerHTML;
        this._oldInnerHTML = null;
    } }, handleFormCancellation: function (a) { this.wrapUp(); if (a) {
        Event.stop(a);
    } }, handleFormSubmission: function (d) { var b = this._form; var c = $F(this._controls.editor); this.prepareSubmission(); var h = this.options.callback(b, c) || ""; if (Object.isString(h)) {
        h = h.toQueryParams();
    } h.editorId = this.element.id; if (this.options.htmlResponse) {
        var a = Object.extend({ evalScripts: true }, this.options.ajaxOptions);
        Object.extend(a, { parameters: h, onComplete: this._boundWrapperHandler, onFailure: this._boundFailureHandler });
        new Ajax.Updater({ success: this.element }, this.url, a);
    }
    else {
        var a = Object.extend({ method: "get" }, this.options.ajaxOptions);
        Object.extend(a, { parameters: h, onComplete: this._boundWrapperHandler, onFailure: this._boundFailureHandler });
        new Ajax.Request(this.url, a);
    } if (d) {
        Event.stop(d);
    } }, leaveEditMode: function () { this.element.removeClassName(this.options.savingClassName); this.removeForm(); this.leaveHover(); this.element.style.backgroundColor = this._originalBackground; this.element.show(); if (this.options.externalControl) {
        this.options.externalControl.show();
    } this._saving = false; this._editing = false; this._oldInnerHTML = null; this.triggerCallback("onLeaveEditMode"); }, leaveHover: function (a) { if (this.options.hoverClassName) {
        this.element.removeClassName(this.options.hoverClassName);
    } if (this._saving) {
        return;
    } this.triggerCallback("onLeaveHover"); }, loadExternalText: function () { this._form.addClassName(this.options.loadingClassName); this._controls.editor.disabled = true; var a = Object.extend({ method: "get" }, this.options.ajaxOptions); Object.extend(a, { parameters: "editorId=" + encodeURIComponent(this.element.id), onComplete: Prototype.emptyFunction, onSuccess: function (c) { this._form.removeClassName(this.options.loadingClassName); var b = c.responseText; if (this.options.stripLoadedTextTags) {
            b = b.stripTags();
        } this._controls.editor.value = b; this._controls.editor.disabled = false; this.postProcessEditField(); }.bind(this), onFailure: this._boundFailureHandler }); new Ajax.Request(this.options.loadTextURL, a); }, postProcessEditField: function () { var a = this.options.fieldPostCreation; if (a) {
        $(this._controls.editor)["focus" == a ? "focus" : "activate"]();
    } }, prepareOptions: function () { this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions); Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks); [this._extraDefaultOptions].flatten().compact().each(function (a) { Object.extend(this.options, a); }.bind(this)); }, prepareSubmission: function () { this._saving = true; this.removeForm(); this.leaveHover(); this.showSaving(); }, registerListeners: function () { this._listeners = {}; var a; $H(Ajax.InPlaceEditor.Listeners).each(function (b) { a = this[b.value].bind(this); this._listeners[b.key] = a; if (!this.options.externalControlOnly) {
        this.element.observe(b.key, a);
    } if (this.options.externalControl) {
        this.options.externalControl.observe(b.key, a);
    } }.bind(this)); }, removeForm: function () { if (!this._form) {
        return;
    } this._form.remove(); this._form = null; this._controls = {}; }, showSaving: function () { this._oldInnerHTML = this.element.innerHTML; this.element.innerHTML = this.options.savingText; this.element.addClassName(this.options.savingClassName); this.element.style.backgroundColor = this._originalBackground; this.element.show(); }, triggerCallback: function (b, a) { if ("function" == typeof this.options[b]) {
        this.options[b](this, a);
    } }, unregisterListeners: function () { $H(this._listeners).each(function (a) { if (!this.options.externalControlOnly) {
        this.element.stopObserving(a.key, a.value);
    } if (this.options.externalControl) {
        this.options.externalControl.stopObserving(a.key, a.value);
    } }.bind(this)); }, wrapUp: function (a) { this.leaveEditMode(); this._boundComplete(a, this.element); } });
Object.extend(Ajax.InPlaceEditor.prototype, { dispose: Ajax.InPlaceEditor.prototype.destroy });
Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, { initialize: function ($super, c, b, a) { this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions; $super(c, b, a); }, createEditField: function () { var a = document.createElement("select"); a.name = this.options.paramName; a.size = 1; this._controls.editor = a; this._collection = this.options.collection || []; if (this.options.loadCollectionURL) {
        this.loadCollection();
    }
    else {
        this.checkForExternalText();
    } this._form.appendChild(this._controls.editor); }, loadCollection: function () { this._form.addClassName(this.options.loadingClassName); this.showLoadingText(this.options.loadingCollectionText); var options = Object.extend({ method: "get" }, this.options.ajaxOptions); Object.extend(options, { parameters: "editorId=" + encodeURIComponent(this.element.id), onComplete: Prototype.emptyFunction, onSuccess: function (transport) { var js = transport.responseText.strip(); if (!/^\[.*\]$/.test(js)) {
            throw ("Server returned an invalid collection representation.");
        } this._collection = eval(js); this.checkForExternalText(); }.bind(this), onFailure: this.onFailure }); new Ajax.Request(this.options.loadCollectionURL, options); }, showLoadingText: function (b) { this._controls.editor.disabled = true; var a = this._controls.editor.firstChild; if (!a) {
        a = document.createElement("option");
        a.value = "";
        this._controls.editor.appendChild(a);
        a.selected = true;
    } a.update((b || "").stripScripts().stripTags()); }, checkForExternalText: function () { this._text = this.getText(); if (this.options.loadTextURL) {
        this.loadExternalText();
    }
    else {
        this.buildOptionList();
    } }, loadExternalText: function () { this.showLoadingText(this.options.loadingText); var a = Object.extend({ method: "get" }, this.options.ajaxOptions); Object.extend(a, { parameters: "editorId=" + encodeURIComponent(this.element.id), onComplete: Prototype.emptyFunction, onSuccess: function (b) { this._text = b.responseText.strip(); this.buildOptionList(); }.bind(this), onFailure: this.onFailure }); new Ajax.Request(this.options.loadTextURL, a); }, buildOptionList: function () { this._form.removeClassName(this.options.loadingClassName); this._collection = this._collection.map(function (d) { return 2 === d.length ? d : [d, d].flatten(); }); var b = ("value" in this.options) ? this.options.value : this._text; var a = this._collection.any(function (d) { return d[0] == b; }.bind(this)); this._controls.editor.update(""); var c; this._collection.each(function (e, d) { c = document.createElement("option"); c.value = e[0]; c.selected = a ? e[0] == b : 0 == d; c.appendChild(document.createTextNode(e[1])); this._controls.editor.appendChild(c); }.bind(this)); this._controls.editor.disabled = false; Field.scrollFreeActivate(this._controls.editor); } });
Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function (a) { if (!a) {
    return;
} function b(c, d) { if (c in a || d === undefined) {
    return;
} a[c] = d; } b("cancelControl", (a.cancelLink ? "link" : (a.cancelButton ? "button" : a.cancelLink == a.cancelButton == false ? false : undefined))); b("okControl", (a.okLink ? "link" : (a.okButton ? "button" : a.okLink == a.okButton == false ? false : undefined))); b("highlightColor", a.highlightcolor); b("highlightEndColor", a.highlightendcolor); };
Object.extend(Ajax.InPlaceEditor, { DefaultOptions: { ajaxOptions: {}, autoRows: 3, cancelControl: "link", cancelText: "cancel", clickToEditText: "Click to edit", externalControl: null, externalControlOnly: false, fieldPostCreation: "activate", formClassName: "inplaceeditor-form", formId: null, highlightColor: "#ffff99", highlightEndColor: "#ffffff", hoverClassName: "", htmlResponse: true, loadingClassName: "inplaceeditor-loading", loadingText: "Loading...", okControl: "button", okText: "ok", paramName: "value", rows: 1, savingClassName: "inplaceeditor-saving", savingText: "Saving...", size: 0, stripLoadedTextTags: false, submitOnBlur: false, textAfterControls: "", textBeforeControls: "", textBetweenControls: "" }, DefaultCallbacks: { callback: function (a) { return Form.serialize(a); }, onComplete: function (b, a) { new Effect.Highlight(a, { startcolor: this.options.highlightColor, keepBackgroundImage: true }); }, onEnterEditMode: null, onEnterHover: function (a) { a.element.style.backgroundColor = a.options.highlightColor; if (a._effect) {
            a._effect.cancel();
        } }, onFailure: function (b, a) { alert("Error communication with the server: " + b.responseText.stripTags()); }, onFormCustomization: null, onLeaveEditMode: null, onLeaveHover: function (a) { a._effect = new Effect.Highlight(a.element, { startcolor: a.options.highlightColor, endcolor: a.options.highlightEndColor, restorecolor: a._originalBackground, keepBackgroundImage: true }); } }, Listeners: { click: "enterEditMode", keydown: "checkForEscapeOrReturn", mouseover: "enterHover", mouseout: "leaveHover" } });
Ajax.InPlaceCollectionEditor.DefaultOptions = { loadingCollectionText: "Loading options..." };
Form.Element.DelayedObserver = Class.create({ initialize: function (b, a, c) { this.delay = a || 0.5; this.element = $(b); this.callback = c; this.timer = null; this.lastValue = $F(this.element); Event.observe(this.element, "keyup", this.delayedListener.bindAsEventListener(this)); }, delayedListener: function (a) { if (this.lastValue == $F(this.element)) {
        return;
    } if (this.timer) {
        clearTimeout(this.timer);
    } this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000); this.lastValue = $F(this.element); }, onTimerEvent: function () { this.timer = null; this.callback(this.element, $F(this.element)); } });
if (!Control) {
    var Control = {};
}
Control.Slider = Class.create({ initialize: function (d, a, b) { var c = this; if (Object.isArray(d)) {
        this.handles = d.collect(function (h) { return $(h); });
    }
    else {
        this.handles = [$(d)];
    } this.track = $(a); this.options = b || {}; this.axis = this.options.axis || "horizontal"; this.increment = this.options.increment || 1; this.step = parseInt(this.options.step || "1"); this.range = this.options.range || $R(0, 1); this.value = 0; this.values = this.handles.map(function () { return 0; }); this.spans = this.options.spans ? this.options.spans.map(function (e) { return $(e); }) : false; this.options.startSpan = $(this.options.startSpan || null); this.options.endSpan = $(this.options.endSpan || null); this.restricted = this.options.restricted || false; this.maximum = this.options.maximum || this.range.end; this.minimum = this.options.minimum || this.range.start; this.alignX = parseInt(this.options.alignX || "0"); this.alignY = parseInt(this.options.alignY || "0"); this.trackLength = this.maximumOffset() - this.minimumOffset(); this.handleLength = this.isVertical() ? (this.handles[0].offsetHeight != 0 ? this.handles[0].offsetHeight : this.handles[0].style.height.replace(/px$/, "")) : (this.handles[0].offsetWidth != 0 ? this.handles[0].offsetWidth : this.handles[0].style.width.replace(/px$/, "")); this.active = false; this.dragging = false; this.disabled = false; if (this.options.disabled) {
        this.setDisabled();
    } this.allowedValues = this.options.values ? this.options.values.sortBy(Prototype.K) : false; if (this.allowedValues) {
        this.minimum = this.allowedValues.min();
        this.maximum = this.allowedValues.max();
    } this.eventMouseDown = this.startDrag.bindAsEventListener(this); this.eventMouseUp = this.endDrag.bindAsEventListener(this); this.eventMouseMove = this.update.bindAsEventListener(this); this.handles.each(function (l, e) { e = c.handles.length - 1 - e; c.setValue(parseFloat((Object.isArray(c.options.sliderValue) ? c.options.sliderValue[e] : c.options.sliderValue) || c.range.start), e); l.makePositioned().observe("mousedown", c.eventMouseDown); }); this.track.observe("mousedown", this.eventMouseDown); document.observe("mouseup", this.eventMouseUp); document.observe("mousemove", this.eventMouseMove); this.initialized = true; }, dispose: function () { var a = this; Event.stopObserving(this.track, "mousedown", this.eventMouseDown); Event.stopObserving(document, "mouseup", this.eventMouseUp); Event.stopObserving(document, "mousemove", this.eventMouseMove); this.handles.each(function (b) { Event.stopObserving(b, "mousedown", a.eventMouseDown); }); }, setDisabled: function () { this.disabled = true; }, setEnabled: function () { this.disabled = false; }, getNearestValue: function (a) { if (this.allowedValues) {
        if (a >= this.allowedValues.max()) {
            return (this.allowedValues.max());
        }
        if (a <= this.allowedValues.min()) {
            return (this.allowedValues.min());
        }
        var c = Math.abs(this.allowedValues[0] - a);
        var b = this.allowedValues[0];
        this.allowedValues.each(function (d) { var e = Math.abs(d - a); if (e <= c) {
            b = d;
            c = e;
        } });
        return b;
    } if (a > this.range.end) {
        return this.range.end;
    } if (a < this.range.start) {
        return this.range.start;
    } return a; }, setValue: function (b, a) { if (!this.active) {
        this.activeHandleIdx = a || 0;
        this.activeHandle = this.handles[this.activeHandleIdx];
        this.updateStyles();
    } a = a || this.activeHandleIdx || 0; if (this.initialized && this.restricted) {
        if ((a > 0) && (b < this.values[a - 1])) {
            b = this.values[a - 1];
        }
        if ((a < (this.handles.length - 1)) && (b > this.values[a + 1])) {
            b = this.values[a + 1];
        }
    } b = this.getNearestValue(b); this.values[a] = b; this.value = this.values[0]; this.handles[a].style[this.isVertical() ? "top" : "left"] = this.translateToPx(b); this.drawSpans(); if (!this.dragging || !this.event) {
        this.updateFinished();
    } }, setValueBy: function (b, a) { this.setValue(this.values[a || this.activeHandleIdx || 0] + b, a || this.activeHandleIdx || 0); }, translateToPx: function (a) { return Math.round(((this.trackLength - this.handleLength) / (this.range.end - this.range.start)) * (a - this.range.start)) + "px"; }, translateToValue: function (a) { return ((a / (this.trackLength - this.handleLength) * (this.range.end - this.range.start)) + this.range.start); }, getRange: function (b) { var a = this.values.sortBy(Prototype.K); b = b || 0; return $R(a[b], a[b + 1]); }, minimumOffset: function () { return (this.isVertical() ? this.alignY : this.alignX); }, maximumOffset: function () { return (this.isVertical() ? (this.track.offsetHeight != 0 ? this.track.offsetHeight : this.track.style.height.replace(/px$/, "")) - this.alignY : (this.track.offsetWidth != 0 ? this.track.offsetWidth : this.track.style.width.replace(/px$/, "")) - this.alignX); }, isVertical: function () { return (this.axis == "vertical"); }, drawSpans: function () { var a = this; if (this.spans) {
        $R(0, this.spans.length - 1).each(function (b) { a.setSpan(a.spans[b], a.getRange(b)); });
    } if (this.options.startSpan) {
        this.setSpan(this.options.startSpan, $R(0, this.values.length > 1 ? this.getRange(0).min() : this.value));
    } if (this.options.endSpan) {
        this.setSpan(this.options.endSpan, $R(this.values.length > 1 ? this.getRange(this.spans.length - 1).max() : this.value, this.maximum));
    } }, setSpan: function (b, a) { if (this.isVertical()) {
        b.style.top = this.translateToPx(a.start);
        b.style.height = this.translateToPx(a.end - a.start + this.range.start);
    }
    else {
        b.style.left = this.translateToPx(a.start);
        b.style.width = this.translateToPx(a.end - a.start + this.range.start);
    } }, updateStyles: function () { this.handles.each(function (a) { Element.removeClassName(a, "selected"); }); Element.addClassName(this.activeHandle, "selected"); }, startDrag: function (c) { if (Event.isLeftClick(c)) {
        if (!this.disabled) {
            this.active = true;
            var d = Event.element(c);
            var e = [Event.pointerX(c), Event.pointerY(c)];
            var a = d;
            if (a == this.track) {
                var b = this.track.cumulativeOffset();
                this.event = c;
                this.setValue(this.translateToValue((this.isVertical() ? e[1] - b[1] : e[0] - b[0]) - (this.handleLength / 2)));
                var b = this.activeHandle.cumulativeOffset();
                this.offsetX = (e[0] - b[0]);
                this.offsetY = (e[1] - b[1]);
            }
            else {
                while ((this.handles.indexOf(d) == -1) && d.parentNode) {
                    d = d.parentNode;
                }
                if (this.handles.indexOf(d) != -1) {
                    this.activeHandle = d;
                    this.activeHandleIdx = this.handles.indexOf(this.activeHandle);
                    this.updateStyles();
                    var b = this.activeHandle.cumulativeOffset();
                    this.offsetX = (e[0] - b[0]);
                    this.offsetY = (e[1] - b[1]);
                }
            }
        }
        Event.stop(c);
    } }, update: function (a) { if (this.active) {
        if (!this.dragging) {
            this.dragging = true;
        }
        this.draw(a);
        if (Prototype.Browser.WebKit) {
            window.scrollBy(0, 0);
        }
        Event.stop(a);
    } }, draw: function (b) { var c = [Event.pointerX(b), Event.pointerY(b)]; var a = this.track.cumulativeOffset(); c[0] -= this.offsetX + a[0]; c[1] -= this.offsetY + a[1]; this.event = b; this.setValue(this.translateToValue(this.isVertical() ? c[1] : c[0])); if (this.initialized && this.options.onSlide) {
        this.options.onSlide(this.values.length > 1 ? this.values : this.value, this);
    } }, endDrag: function (a) { if (this.active && this.dragging) {
        this.finishDrag(a, true);
        Event.stop(a);
    } this.active = false; this.dragging = false; }, finishDrag: function (a, b) { this.active = false; this.dragging = false; this.updateFinished(); }, updateFinished: function () { if (this.initialized && this.options.onChange) {
        this.options.onChange(this.values.length > 1 ? this.values : this.value, this);
    } this.event = null; } });
if (Object.isUndefined(Effect)) {
    throw ("dragdrop.js requires including script.aculo.us' effects.js library");
}
var Droppables = { drops: [], remove: function (a) { this.drops = this.drops.reject(function (b) { return b.element == $(a); }); }, add: function (b) { b = $(b); var a = Object.extend({ greedy: true, hoverclass: null, tree: false }, arguments[1] || {}); if (a.containment) {
        a._containers = [];
        var c = a.containment;
        if (Object.isArray(c)) {
            c.each(function (d) { a._containers.push($(d)); });
        }
        else {
            a._containers.push($(c));
        }
    } if (a.accept) {
        a.accept = [a.accept].flatten();
    } Element.makePositioned(b); a.element = b; this.drops.push(a); }, findDeepestChild: function (a) { deepest = a[0]; for (i = 1; i < a.length; ++i) {
        if (Element.isParent(a[i].element, deepest.element)) {
            deepest = a[i];
        }
    } return deepest; }, isContained: function (b, a) { var c; if (a.tree) {
        c = b.treeNode;
    }
    else {
        c = b.parentNode;
    } return a._containers.detect(function (d) { return c == d; }); }, isAffected: function (a, c, b) { return ((b.element != c) && ((!b._containers) || this.isContained(c, b)) && ((!b.accept) || (Element.classNames(c).detect(function (d) { return b.accept.include(d); }))) && Position.within(b.element, a[0], a[1])); }, deactivate: function (a) { if (a.hoverclass) {
        Element.removeClassName(a.element, a.hoverclass);
    } this.last_active = null; }, activate: function (a) { if (a.hoverclass) {
        Element.addClassName(a.element, a.hoverclass);
    } this.last_active = a; }, show: function (a, c) { if (!this.drops.length) {
        return;
    } var b, d = []; this.drops.each(function (e) { if (Droppables.isAffected(a, c, e)) {
        d.push(e);
    } }); if (d.length > 0) {
        b = Droppables.findDeepestChild(d);
    } if (this.last_active && this.last_active != b) {
        this.deactivate(this.last_active);
    } if (b) {
        Position.within(b.element, a[0], a[1]);
        if (b.onHover) {
            b.onHover(c, b.element, Position.overlap(b.overlap, b.element));
        }
        if (b != this.last_active) {
            Droppables.activate(b);
        }
    } }, fire: function (b, a) { if (!this.last_active) {
        return;
    } Position.prepare(); if (this.isAffected([Event.pointerX(b), Event.pointerY(b)], a, this.last_active)) {
        if (this.last_active.onDrop) {
            this.last_active.onDrop(a, this.last_active.element, b);
            return true;
        }
    } }, reset: function () { if (this.last_active) {
        this.deactivate(this.last_active);
    } } };
var Draggables = { drags: [], observers: [], register: function (a) { if (this.drags.length == 0) {
        this.eventMouseUp = this.endDrag.bindAsEventListener(this);
        this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
        this.eventKeypress = this.keyPress.bindAsEventListener(this);
        Event.observe(document, "mouseup", this.eventMouseUp);
        Event.observe(document, "mousemove", this.eventMouseMove);
        Event.observe(document, "keypress", this.eventKeypress);
    } this.drags.push(a); }, unregister: function (a) { this.drags = this.drags.reject(function (b) { return b == a; }); if (this.drags.length == 0) {
        Event.stopObserving(document, "mouseup", this.eventMouseUp);
        Event.stopObserving(document, "mousemove", this.eventMouseMove);
        Event.stopObserving(document, "keypress", this.eventKeypress);
    } }, activate: function (a) { if (a.options.delay) {
        this._timeout = setTimeout(function () { Draggables._timeout = null; window.focus(); Draggables.activeDraggable = a; }.bind(this), a.options.delay);
    }
    else {
        window.focus();
        this.activeDraggable = a;
    } }, deactivate: function () { this.activeDraggable = null; }, updateDrag: function (a) { if (!this.activeDraggable) {
        return;
    } var b = [Event.pointerX(a), Event.pointerY(a)]; if (this._lastPointer && (this._lastPointer.inspect() == b.inspect())) {
        return;
    } this._lastPointer = b; this.activeDraggable.updateDrag(a, b); }, endDrag: function (a) { if (this._timeout) {
        clearTimeout(this._timeout);
        this._timeout = null;
    } if (!this.activeDraggable) {
        return;
    } this._lastPointer = null; this.activeDraggable.endDrag(a); this.activeDraggable = null; }, keyPress: function (a) { if (this.activeDraggable) {
        this.activeDraggable.keyPress(a);
    } }, addObserver: function (a) { this.observers.push(a); this._cacheObserverCallbacks(); }, removeObserver: function (a) { this.observers = this.observers.reject(function (b) { return b.element == a; }); this._cacheObserverCallbacks(); }, notify: function (b, a, c) { if (this[b + "Count"] > 0) {
        this.observers.each(function (d) { if (d[b]) {
            d[b](b, a, c);
        } });
    } if (a.options[b]) {
        a.options[b](a, c);
    } }, _cacheObserverCallbacks: function () { ["onStart", "onEnd", "onDrag"].each(function (a) { Draggables[a + "Count"] = Draggables.observers.select(function (b) { return b[a]; }).length; }); } };
var Draggable = Class.create({ initialize: function (b) { var c = { handle: false, reverteffect: function (h, e, d) { var l = Math.sqrt(Math.abs(e ^ 2) + Math.abs(d ^ 2)) * 0.02; new Effect.Move(h, { x: -d, y: -e, duration: l, queue: { scope: "_draggable", position: "end" } }); }, endeffect: function (e) { var d = Object.isNumber(e._opacity) ? e._opacity : 1; new Effect.Opacity(e, { duration: 0.2, from: 0.7, to: d, queue: { scope: "_draggable", position: "end" }, afterFinish: function () { Draggable._dragging[e] = false; } }); }, zindex: 1000, revert: false, quiet: false, scroll: false, scrollSensitivity: 20, scrollSpeed: 15, snap: false, delay: 0 }; if (!arguments[1] || Object.isUndefined(arguments[1].endeffect)) {
        Object.extend(c, { starteffect: function (d) { d._opacity = Element.getOpacity(d); Draggable._dragging[d] = true; new Effect.Opacity(d, { duration: 0.2, from: d._opacity, to: 0.7 }); } });
    } var a = Object.extend(c, arguments[1] || {}); this.element = $(b); if (a.handle && Object.isString(a.handle)) {
        this.handle = this.element.down("." + a.handle, 0);
    } if (!this.handle) {
        this.handle = $(a.handle);
    } if (!this.handle) {
        this.handle = this.element;
    } if (a.scroll && !a.scroll.scrollTo && !a.scroll.outerHTML) {
        a.scroll = $(a.scroll);
        this._isScrollChild = Element.childOf(this.element, a.scroll);
    } Element.makePositioned(this.element); this.options = a; this.dragging = false; this.eventMouseDown = this.initDrag.bindAsEventListener(this); Event.observe(this.handle, "mousedown", this.eventMouseDown); Draggables.register(this); }, destroy: function () { Event.stopObserving(this.handle, "mousedown", this.eventMouseDown); Draggables.unregister(this); }, currentDelta: function () { return ([parseInt(Element.getStyle(this.element, "left") || "0"), parseInt(Element.getStyle(this.element, "top") || "0")]); }, initDrag: function (a) { if (!Object.isUndefined(Draggable._dragging[this.element]) && Draggable._dragging[this.element]) {
        return;
    } if (Event.isLeftClick(a)) {
        var c = Event.element(a);
        if ((tag_name = c.tagName.toUpperCase()) && (tag_name == "INPUT" || tag_name == "SELECT" || tag_name == "OPTION" || tag_name == "BUTTON" || tag_name == "TEXTAREA")) {
            return;
        }
        var b = [Event.pointerX(a), Event.pointerY(a)];
        var d = this.element.cumulativeOffset();
        this.offset = [0, 1].map(function (e) { return (b[e] - d[e]); });
        Draggables.activate(this);
        Event.stop(a);
    } }, startDrag: function (b) { this.dragging = true; if (!this.delta) {
        this.delta = this.currentDelta();
    } if (this.options.zindex) {
        this.originalZ = parseInt(Element.getStyle(this.element, "z-index") || 0);
        this.element.style.zIndex = this.options.zindex;
    } if (this.options.ghosting) {
        this._clone = this.element.cloneNode(true);
        this._originallyAbsolute = (this.element.getStyle("position") == "absolute");
        if (!this._originallyAbsolute) {
            Position.absolutize(this.element);
        }
        this.element.parentNode.insertBefore(this._clone, this.element);
    } if (this.options.scroll) {
        if (this.options.scroll == window) {
            var a = this._getWindowScroll(this.options.scroll);
            this.originalScrollLeft = a.left;
            this.originalScrollTop = a.top;
        }
        else {
            this.originalScrollLeft = this.options.scroll.scrollLeft;
            this.originalScrollTop = this.options.scroll.scrollTop;
        }
    } Draggables.notify("onStart", this, b); if (this.options.starteffect) {
        this.options.starteffect(this.element);
    } }, updateDrag: function (event, pointer) { if (!this.dragging) {
        this.startDrag(event);
    } if (!this.options.quiet) {
        Position.prepare();
        Droppables.show(pointer, this.element);
    } Draggables.notify("onDrag", this, event); this.draw(pointer); if (this.options.change) {
        this.options.change(this);
    } if (this.options.scroll) {
        this.stopScrolling();
        var p;
        if (this.options.scroll == window) {
            with (this._getWindowScroll(this.options.scroll)) {
                p = [left, top, left + width, top + height];
            }
        }
        else {
            p = Position.page(this.options.scroll).toArray();
            p[0] += this.options.scroll.scrollLeft + Position.deltaX;
            p[1] += this.options.scroll.scrollTop + Position.deltaY;
            p.push(p[0] + this.options.scroll.offsetWidth);
            p.push(p[1] + this.options.scroll.offsetHeight);
        }
        var speed = [0, 0];
        if (pointer[0] < (p[0] + this.options.scrollSensitivity)) {
            speed[0] = pointer[0] - (p[0] + this.options.scrollSensitivity);
        }
        if (pointer[1] < (p[1] + this.options.scrollSensitivity)) {
            speed[1] = pointer[1] - (p[1] + this.options.scrollSensitivity);
        }
        if (pointer[0] > (p[2] - this.options.scrollSensitivity)) {
            speed[0] = pointer[0] - (p[2] - this.options.scrollSensitivity);
        }
        if (pointer[1] > (p[3] - this.options.scrollSensitivity)) {
            speed[1] = pointer[1] - (p[3] - this.options.scrollSensitivity);
        }
        this.startScrolling(speed);
    } if (Prototype.Browser.WebKit) {
        window.scrollBy(0, 0);
    } Event.stop(event); }, finishDrag: function (b, h) { this.dragging = false; if (this.options.quiet) {
        Position.prepare();
        var e = [Event.pointerX(b), Event.pointerY(b)];
        Droppables.show(e, this.element);
    } if (this.options.ghosting) {
        if (!this._originallyAbsolute) {
            Position.relativize(this.element);
        }
        delete this._originallyAbsolute;
        Element.remove(this._clone);
        this._clone = null;
    } var l = false; if (h) {
        l = Droppables.fire(b, this.element);
        if (!l) {
            l = false;
        }
    } if (l && this.options.onDropped) {
        this.options.onDropped(this.element);
    } Draggables.notify("onEnd", this, b); var a = this.options.revert; if (a && Object.isFunction(a)) {
        a = a(this.element);
    } var c = this.currentDelta(); if (a && this.options.reverteffect) {
        if (l == 0 || a != "failure") {
            this.options.reverteffect(this.element, c[1] - this.delta[1], c[0] - this.delta[0]);
        }
    }
    else {
        this.delta = c;
    } if (this.options.zindex) {
        this.element.style.zIndex = this.originalZ;
    } if (this.options.endeffect) {
        this.options.endeffect(this.element);
    } Draggables.deactivate(this); Droppables.reset(); }, keyPress: function (a) { if (a.keyCode != Event.KEY_ESC) {
        return;
    } this.finishDrag(a, false); Event.stop(a); }, endDrag: function (a) { if (!this.dragging) {
        return;
    } this.stopScrolling(); this.finishDrag(a, true); Event.stop(a); }, draw: function (a) { var l = this.element.cumulativeOffset(); if (this.options.ghosting) {
        var c = Position.realOffset(this.element);
        l[0] += c[0] - Position.deltaX;
        l[1] += c[1] - Position.deltaY;
    } var h = this.currentDelta(); l[0] -= h[0]; l[1] -= h[1]; if (this.options.scroll && (this.options.scroll != window && this._isScrollChild)) {
        l[0] -= this.options.scroll.scrollLeft - this.originalScrollLeft;
        l[1] -= this.options.scroll.scrollTop - this.originalScrollTop;
    } var e = [0, 1].map(function (d) { return (a[d] - l[d] - this.offset[d]); }.bind(this)); if (this.options.snap) {
        if (Object.isFunction(this.options.snap)) {
            e = this.options.snap(e[0], e[1], this);
        }
        else {
            if (Object.isArray(this.options.snap)) {
                e = e.map(function (d, m) { return (d / this.options.snap[m]).round() * this.options.snap[m]; }.bind(this));
            }
            else {
                e = e.map(function (d) { return (d / this.options.snap).round() * this.options.snap; }.bind(this));
            }
        }
    } var b = this.element.style; if ((!this.options.constraint) || (this.options.constraint == "horizontal")) {
        b.left = e[0] + "px";
    } if ((!this.options.constraint) || (this.options.constraint == "vertical")) {
        b.top = e[1] + "px";
    } if (b.visibility == "hidden") {
        b.visibility = "";
    } }, stopScrolling: function () { if (this.scrollInterval) {
        clearInterval(this.scrollInterval);
        this.scrollInterval = null;
        Draggables._lastScrollPointer = null;
    } }, startScrolling: function (a) { if (!(a[0] || a[1])) {
        return;
    } this.scrollSpeed = [a[0] * this.options.scrollSpeed, a[1] * this.options.scrollSpeed]; this.lastScrolled = new Date(); this.scrollInterval = setInterval(this.scroll.bind(this), 10); }, scroll: function () { var current = new Date(); var delta = current - this.lastScrolled; this.lastScrolled = current; if (this.options.scroll == window) {
        with (this._getWindowScroll(this.options.scroll)) {
            if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
                var d = delta / 1000;
                this.options.scroll.scrollTo(left + d * this.scrollSpeed[0], top + d * this.scrollSpeed[1]);
            }
        }
    }
    else {
        this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
        this.options.scroll.scrollTop += this.scrollSpeed[1] * delta / 1000;
    } Position.prepare(); Droppables.show(Draggables._lastPointer, this.element); Draggables.notify("onDrag", this); if (this._isScrollChild) {
        Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
        Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
        Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
        if (Draggables._lastScrollPointer[0] < 0) {
            Draggables._lastScrollPointer[0] = 0;
        }
        if (Draggables._lastScrollPointer[1] < 0) {
            Draggables._lastScrollPointer[1] = 0;
        }
        this.draw(Draggables._lastScrollPointer);
    } if (this.options.change) {
        this.options.change(this);
    } }, _getWindowScroll: function (w) { var T, L, W, H; with (w.document) {
        if (w.document.documentElement && documentElement.scrollTop) {
            T = documentElement.scrollTop;
            L = documentElement.scrollLeft;
        }
        else {
            if (w.document.body) {
                T = body.scrollTop;
                L = body.scrollLeft;
            }
        }
        if (w.innerWidth) {
            W = w.innerWidth;
            H = w.innerHeight;
        }
        else {
            if (w.document.documentElement && documentElement.clientWidth) {
                W = documentElement.clientWidth;
                H = documentElement.clientHeight;
            }
            else {
                W = body.offsetWidth;
                H = body.offsetHeight;
            }
        }
    } return { top: T, left: L, width: W, height: H }; } });
Draggable._dragging = {};
var SortableObserver = Class.create({ initialize: function (b, a) { this.element = $(b); this.observer = a; this.lastValue = Sortable.serialize(this.element); }, onStart: function () { this.lastValue = Sortable.serialize(this.element); }, onEnd: function () { Sortable.unmark(); if (this.lastValue != Sortable.serialize(this.element)) {
        this.observer(this.element);
    } } });
var Sortable = { SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/, sortables: {}, _findRootElement: function (a) { while (a.tagName.toUpperCase() != "BODY") {
        if (a.id && Sortable.sortables[a.id]) {
            return a;
        }
        a = a.parentNode;
    } }, options: function (a) { a = Sortable._findRootElement($(a)); if (!a) {
        return;
    } return Sortable.sortables[a.id]; }, destroy: function (a) { a = $(a); var b = Sortable.sortables[a.id]; if (b) {
        Draggables.removeObserver(b.element);
        b.droppables.each(function (c) { Droppables.remove(c); });
        b.draggables.invoke("destroy");
        delete Sortable.sortables[b.element.id];
    } }, create: function (c) { c = $(c); var b = Object.extend({ element: c, tag: "li", dropOnEmpty: false, tree: false, treeTag: "ul", overlap: "vertical", constraint: "vertical", containment: c, handle: false, only: false, delay: 0, hoverclass: null, ghosting: false, quiet: false, scroll: false, scrollSensitivity: 20, scrollSpeed: 15, format: this.SERIALIZE_RULE, elements: false, handles: false, onChange: Prototype.emptyFunction, onUpdate: Prototype.emptyFunction }, arguments[1] || {}); this.destroy(c); var a = { revert: true, quiet: b.quiet, scroll: b.scroll, scrollSpeed: b.scrollSpeed, scrollSensitivity: b.scrollSensitivity, delay: b.delay, ghosting: b.ghosting, constraint: b.constraint, handle: b.handle }; if (b.starteffect) {
        a.starteffect = b.starteffect;
    } if (b.reverteffect) {
        a.reverteffect = b.reverteffect;
    }
    else {
        if (b.ghosting) {
            a.reverteffect = function (h) { h.style.top = 0; h.style.left = 0; };
        }
    } if (b.endeffect) {
        a.endeffect = b.endeffect;
    } if (b.zindex) {
        a.zindex = b.zindex;
    } var d = { overlap: b.overlap, containment: b.containment, tree: b.tree, hoverclass: b.hoverclass, onHover: Sortable.onHover }; var e = { onHover: Sortable.onEmptyHover, overlap: b.overlap, containment: b.containment, hoverclass: b.hoverclass }; Element.cleanWhitespace(c); b.draggables = []; b.droppables = []; if (b.dropOnEmpty || b.tree) {
        Droppables.add(c, e);
        b.droppables.push(c);
    } (b.elements || this.findElements(c, b) || []).each(function (m, h) { var l = b.handles ? $(b.handles[h]) : (b.handle ? $(m).select("." + b.handle)[0] : m); b.draggables.push(new Draggable(m, Object.extend(a, { handle: l }))); Droppables.add(m, d); if (b.tree) {
        m.treeNode = c;
    } b.droppables.push(m); }); if (b.tree) {
        (Sortable.findTreeElements(c, b) || []).each(function (h) { Droppables.add(h, e); h.treeNode = c; b.droppables.push(h); });
    } this.sortables[c.identify()] = b; Draggables.addObserver(new SortableObserver(c, b.onUpdate)); }, findElements: function (b, a) { return Element.findChildren(b, a.only, a.tree ? true : false, a.tag); }, findTreeElements: function (b, a) { return Element.findChildren(b, a.only, a.tree ? true : false, a.treeTag); }, onHover: function (e, d, a) { if (Element.isParent(d, e)) {
        return;
    } if (a > 0.33 && a < 0.66 && Sortable.options(d).tree) {
        return;
    }
    else {
        if (a > 0.5) {
            Sortable.mark(d, "before");
            if (d.previousSibling != e) {
                var b = e.parentNode;
                e.style.visibility = "hidden";
                d.parentNode.insertBefore(e, d);
                if (d.parentNode != b) {
                    Sortable.options(b).onChange(e);
                }
                Sortable.options(d.parentNode).onChange(e);
            }
        }
        else {
            Sortable.mark(d, "after");
            var c = d.nextSibling || null;
            if (c != e) {
                var b = e.parentNode;
                e.style.visibility = "hidden";
                d.parentNode.insertBefore(e, c);
                if (d.parentNode != b) {
                    Sortable.options(b).onChange(e);
                }
                Sortable.options(d.parentNode).onChange(e);
            }
        }
    } }, onEmptyHover: function (e, l, m) { var n = e.parentNode; var a = Sortable.options(l); if (!Element.isParent(l, e)) {
        var h;
        var c = Sortable.findElements(l, { tag: a.tag, only: a.only });
        var b = null;
        if (c) {
            var d = Element.offsetSize(l, a.overlap) * (1 - m);
            for (h = 0; h < c.length; h += 1) {
                if (d - Element.offsetSize(c[h], a.overlap) >= 0) {
                    d -= Element.offsetSize(c[h], a.overlap);
                }
                else {
                    if (d - (Element.offsetSize(c[h], a.overlap) / 2) >= 0) {
                        b = h + 1 < c.length ? c[h + 1] : null;
                        break;
                    }
                    else {
                        b = c[h];
                        break;
                    }
                }
            }
        }
        l.insertBefore(e, b);
        Sortable.options(n).onChange(e);
        a.onChange(e);
    } }, unmark: function () { if (Sortable._marker) {
        Sortable._marker.hide();
    } }, mark: function (b, a) { var d = Sortable.options(b.parentNode); if (d && !d.ghosting) {
        return;
    } if (!Sortable._marker) {
        Sortable._marker = ($("dropmarker") || Element.extend(document.createElement("DIV"))).hide().addClassName("dropmarker").setStyle({ position: "absolute" });
        document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
    } var c = b.cumulativeOffset(); Sortable._marker.setStyle({ left: c[0] + "px", top: c[1] + "px" }); if (a == "after") {
        if (d.overlap == "horizontal") {
            Sortable._marker.setStyle({ left: (c[0] + b.clientWidth) + "px" });
        }
        else {
            Sortable._marker.setStyle({ top: (c[1] + b.clientHeight) + "px" });
        }
    } Sortable._marker.show(); }, _tree: function (e, b, h) { var d = Sortable.findElements(e, b) || []; for (var c = 0; c < d.length; ++c) {
        var a = d[c].id.match(b.format);
        if (!a) {
            continue;
        }
        var l = { id: encodeURIComponent(a ? a[1] : null), element: e, parent: h, children: [], position: h.children.length, container: $(d[c]).down(b.treeTag) };
        if (l.container) {
            this._tree(l.container, b, l);
        }
        h.children.push(l);
    } return h; }, tree: function (d) { d = $(d); var c = this.options(d); var b = Object.extend({ tag: c.tag, treeTag: c.treeTag, only: c.only, name: d.id, format: c.format }, arguments[1] || {}); var a = { id: null, parent: null, children: [], container: d, position: 0 }; return Sortable._tree(d, b, a); }, _constructIndex: function (b) { var a = ""; do {
        if (b.id) {
            a = "[" + b.position + "]" + a;
        }
    } while ((b = b.parent) != null); return a; }, sequence: function (b) { b = $(b); var a = Object.extend(this.options(b), arguments[1] || {}); return $(this.findElements(b, a) || []).map(function (c) { return c.id.match(a.format) ? c.id.match(a.format)[1] : ""; }); }, setSequence: function (b, c) { b = $(b); var a = Object.extend(this.options(b), arguments[2] || {}); var d = {}; this.findElements(b, a).each(function (e) { if (e.id.match(a.format)) {
        d[e.id.match(a.format)[1]] = [e, e.parentNode];
    } e.parentNode.removeChild(e); }); c.each(function (e) { var h = d[e]; if (h) {
        h[1].appendChild(h[0]);
        delete d[e];
    } }); }, serialize: function (c) { c = $(c); var b = Object.extend(Sortable.options(c), arguments[1] || {}); var a = encodeURIComponent((arguments[1] && arguments[1].name) ? arguments[1].name : c.id); if (b.tree) {
        return Sortable.tree(c, arguments[1]).children.map(function (d) { return [a + Sortable._constructIndex(d) + "[id]=" + encodeURIComponent(d.id)].concat(d.children.map(arguments.callee)); }).flatten().join("&");
    }
    else {
        return Sortable.sequence(c, arguments[1]).map(function (d) { return a + "[]=" + encodeURIComponent(d); }).join("&");
    } } };
Element.isParent = function (b, a) { if (!b.parentNode || b == a) {
    return false;
} if (b.parentNode == a) {
    return true;
} return Element.isParent(b.parentNode, a); };
Element.findChildren = function (d, b, a, c) { if (!d.hasChildNodes()) {
    return null;
} c = c.toUpperCase(); if (b) {
    b = [b].flatten();
} var e = []; $A(d.childNodes).each(function (l) { if (l.tagName && l.tagName.toUpperCase() == c && (!b || (Element.classNames(l).detect(function (m) { return b.include(m); })))) {
    e.push(l);
} if (a) {
    var h = Element.findChildren(l, b, a, c);
    if (h) {
        e.push(h);
    }
} }); return (e.length > 0 ? e.flatten() : []); };
Element.offsetSize = function (a, b) { return a["offset" + ((b == "vertical" || b == "height") ? "Height" : "Width")]; };
var shop_id = 1;
var shop_bar = 0;
var shop_coins = 0;
var shop_cart = {};
var shop_products = [];
var shop_side = 1;
var shop_block = 0;
var shop_sort = "v";
function shopAction(h, a, b) { if (shop_block == 1) {
    return false;
} var e = ""; if (a) {
    shop_id = a;
} if (h == "shopfire") {
    var d = "";
    for (var c in shop_cart) {
        d += c + "," + shop_cart[c] + ";";
    }
    if (d == "") {
        return false;
    }
    d = d.substring(0, (d.length - 1));
    e += "&cart=" + encodeURIComponent(d);
    shop_block = 1;
    hideDiv("shop_cart_sum_button");
    shop_cart = {};
    $("shop_cart").innerHTML = "";
    $("shop_cart_sum").innerHTML = formatPrice(0);
} showGlobalWait(h); var l = createAjaxRequestObj(); l.open("GET", "ajax/city.php?rid=" + rid + "&shopid=" + shop_id + "&mode=" + h + e, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { shopActionResponse(l, h, b); }; l.send(null); }
function shopActionResponse(c, d, b) { var a = _chkRequest(c); if (a != 0) {
    hideGlobalWait();
    shop_block = 0;
    if (a[0] == 0) {
        shopBuild();
        globalerrorbox(a[1]);
    }
    else {
        if (a[1].products) {
            shop_products = a[1].products;
        }
        if (a[1].bar) {
            shop_bar = a[1].bar;
        }
        if (a[1].coins) {
            shop_coins = a[1].coins;
        }
        if (a[1].tutorial) {
            tutorial = a[1].tutorial;
        }
        if (d == "shopinit") {
            shop_side = 1;
            if (a[1].first == 1) {
                globalerrorbox(t_shopfirststep);
            }
            if (tutorial == 5) {
                $("t_step1").className = "nope";
                $("t_step2").className = "highlight_tutorial_step";
                showTutorial("8_1", 1);
            }
            if (b) {
                shopDialog("amount", b);
            }
        }
        if (d == "shopfire") {
            shop_cart = {};
            if (tutorial == 6) {
                closeShop();
                showTutorial(9, 1);
                return false;
            }
        }
        shopBuild();
    }
} }
function shopBuild() { $("shop").className = "shop_back" + shop_id; $("shop_intro").className = "shop_intro" + shop_id; $("shop_intro").innerHTML = t_shop_intro[shop_id]; $("shop_products").className = "shop_products" + shop_id; $("shop_cart_sum").className = "shop_cart_sum" + shop_id; $("shoparrow_left").className = "link shoparrow_left" + shop_id; $("shoparrow_right").className = "link shoparrow_right" + shop_id; $("shop_cart").className = "shop_cart" + shop_id; $("shop_cart_sum_button").className = "link shop_cart_sum_button" + shop_id; if (shop_id == 2) {
    n = 15;
    shop_sort = "z";
    hideDiv("shop_categories");
    var c = ["z"];
    var m = shop_products;
}
else {
    var n = 18;
    if (shop_sort == "z") {
        shop_sort = "v";
    }
    showDiv("shop_categories");
    if (shop_sort == "v") {
        var c = ["v"];
        $("shop_category_v").removeClassName("shop_category_v");
        $("shop_category_v").addClassName("shop_category_v_active");
        $("shop_category_fl").addClassName("shop_category_fl");
        $("shop_category_fl").removeClassName("shop_category_fl_active");
        $("shop_category_hr").addClassName("shop_category_hr");
        $("shop_category_hr").removeClassName("shop_category_hr_active");
    }
    if (shop_sort == "hr") {
        var c = ["hr"];
        $("shop_category_v").addClassName("shop_category_v");
        $("shop_category_v").removeClassName("shop_category_v_active");
        $("shop_category_fl").addClassName("shop_category_fl");
        $("shop_category_fl").removeClassName("shop_category_fl_active");
        $("shop_category_hr").removeClassName("shop_category_hr");
        $("shop_category_hr").addClassName("shop_category_hr_active");
    }
    else {
        if (shop_sort == "fl") {
            var c = ["fl"];
            $("shop_category_v").addClassName("shop_category_v");
            $("shop_category_v").removeClassName("shop_category_v_active");
            $("shop_category_fl").removeClassName("shop_category_fl");
            $("shop_category_fl").addClassName("shop_category_fl_active");
            $("shop_category_hr").addClassName("shop_category_hr");
            $("shop_category_hr").removeClassName("shop_category_hr_active");
        }
    }
    var m = [];
    for (var b = 1; b <= shop_products.length; b++) {
        if (in_array(produkt_category[shop_products[(b - 1)].pid], c)) {
            m.push(shop_products[(b - 1)]);
        }
    }
} var s = 1; if (shop_side > 1) {
    s = ((shop_side - 1) * n) + 1;
} var t = (shop_side * n); var e = ""; var l = 1; for (var b = 1; b <= m.length; b++) {
    if (in_array(produkt_category[m[(b - 1)].pid], c)) {
        if (l >= s && l <= t) {
            addclass = "";
            if (shop_cart[m[(b - 1)].pid]) {
                addclass = "shop_item_inactive";
            }
            e += '<div class="' + addclass + " shop_item" + shop_id + " link s" + m[(b - 1)].pid + "\" onclick=\"shopDialog('amount', " + m[(b - 1)].pid + ')" onmouseover="showDiv(\'shop_item' + m[(b - 1)].pid + "_tt')\" onmouseout=\"hideDiv('shop_item" + m[(b - 1)].pid + "_tt')\">";
            e += '  <div id="shop_item' + m[(b - 1)].pid + '_tt" class="shop_item_tt' + shop_id + ' ttbox">';
            e += '    <div class="bold">' + produkt_name[m[(b - 1)].pid] + "</div>";
            var r = "";
            if (m[(b - 1)].coins > 0) {
                if (m[(b - 1)].coins > shop_coins) {
                    r = "important";
                }
                e += '<div class="' + r + '">' + m[(b - 1)].coins + "&nbsp;" + t_coins + "</div>";
            }
            else {
                if (m[(b - 1)].price > shop_bar) {
                    r = "important";
                }
                e += '<div class="' + r + '">' + formatPrice(m[(b - 1)].price) + "</div>";
            }
            e += "    <div>" + t_felder + "&nbsp;" + m[(b - 1)].fields + "</div>";
            e += '    <div class="bonusinfo">' + t_addcart + "</div>";
            e += "  </div>";
            e += '  <div id="shop_item_amount' + m[(b - 1)].pid + '" class="shop_item_amount"></div>';
            e += "</div>";
        }
        l++;
    }
} $("shop_products").innerHTML = e; var h = 0; var a = 0; e = ""; for (var d in shop_cart) {
    if ($("shop_item_amount" + d)) {
        showDiv("shop_item_amount" + d);
        $("shop_item_amount" + d).innerHTML = shop_cart[d];
    }
    e += '<div class="shop_cart_item">';
    e += '  <div class="link s' + d + "\" onclick=\"shopDialog('amount', " + d + ')"></div>';
    e += '  <div class="shop_cart_item_del link" onclick="shopRemoveCart(' + d + ')"></div>';
    e += "</div>";
    for (var b = 0; b < shop_products.length; b++) {
        if (shop_products[b].pid == d) {
            if (shop_products[b].coins > 0) {
                a += (shop_cart[d] * shop_products[b].coins);
            }
            else {
                h += (shop_cart[d] * shop_products[b].price);
            }
            break;
        }
    }
} $("shop_cart").innerHTML = e; var q = formatPrice(h); if (a > 0) {
    q += "<br>" + a + "&nbsp;" + t_coins;
} $("shop_cart_sum").innerHTML = q; if (h > 0 || a > 0) {
    showDiv("shop_cart_sum_button");
}
else {
    hideDiv("shop_cart_sum_button");
} if (h > 0 || a > 0) {
    if (tutorial == 5) {
        $("t_step1").className = "nope";
        $("t_step2").className = "nope";
        $("t_step3").className = "highlight_tutorial_step";
    }
}
else {
    if (tutorial == 5) {
        $("t_step1").className = "nope";
        $("t_step2").className = "highlight_tutorial_step";
        $("t_step3").className = "nope";
    }
} n = Math.ceil(m.length / n); hideDiv("shoparrow_left"); hideDiv("shoparrow_right"); if (shop_side > 1) {
    showDiv("shoparrow_left");
} if (shop_side < n) {
    showDiv("shoparrow_right");
} hideDiv("shop_category_v"); hideDiv("shop_category_fl"); hideDiv("shop_category_hr"); if (currentuserlevel >= farmersmarket_access_level) {
    showDiv("shop_category_v");
    showDiv("shop_category_fl");
    showDiv("shop_category_hr");
} if (tutorial == 5 || tutorial == 6) {
    hideDiv("shop_close");
}
else {
    showDiv("shop_close");
} showDiv("transp3"); showDiv("shop"); }
function setShopCategory(a) { shop_sort = a; shop_side = 1; shopBuild(); }
function shopDialog(e, d) { var l = ""; var c = ""; var n = ""; if (e == "amount") {
    var h = 0;
    for (var a in shop_cart) {
        if (d != a) {
            h++;
        }
    }
    var m = 12;
    if (shop_id == 2) {
        m = 6;
    }
    if (h >= m) {
        globalerrorbox(t_cartfull);
        return false;
    }
    else {
        l = t_cartbuyhead;
        for (var a = 0; a < shop_products.length; a++) {
            if (shop_products[a].pid == d) {
                var b = 1;
                if (shop_cart[d]) {
                    b = shop_cart[d];
                }
                c += '<div class="shopdialog_line" style="margin-bottom:10px;">';
                c += '  <div class="tt' + shop_products[a].pid + '" style="width:50px; margin:0 auto;"></div>';
                c += '  <div class="bold">' + produkt_name[shop_products[a].pid] + "</div>";
                if (shop_products[a].coins > 0) {
                    c += "<div>" + shop_products[a].coins + "&nbsp;" + t_coins + "</div>";
                }
                else {
                    c += "<div>" + formatPrice(shop_products[a].price) + "</div>";
                }
                c += "</div>";
                c += '<div class="shopdialog_line">' + t_cartquestion + "</div>";
                c += '<div id="shopdialog_amount_back" class="shopdialog_line">';
                c += '  <input type="number" maxlength="7" id="shopdialog_amount" value="' + b + '" onchange="calcShopdialogPrice(' + shop_products[a].pid + ')" onkeyup="calcShopdialogPrice(' + shop_products[a].pid + ')">&nbsp;';
                c += '  <button type="button" class="button_new link" onclick="shopAddCart(' + shop_products[a].pid + ')">' + t_cartbutton + "</button>";
                c += "</div>";
                c += "<div>" + farmcartsum + '&nbsp;<span id="shopdialog_calc"></span></div>';
                break;
            }
        }
    }
} globalcommitbox(l, c, n); if ($("shopdialog_amount")) {
    $("shopdialog_amount").select();
    calcShopdialogPrice(d);
} }
function shopAddCart(a) { var b = $("shopdialog_amount").value; b = parseInt(b); if (b < 0) {
    return false;
} shop_cart[a] = parseInt(b); hideDiv("globaltransp"); hideDiv("globalbox"); shopBuild(); }
function shopRemoveCart(a) { if (shop_cart[a]) {
    delete shop_cart[a];
} shopBuild(); }
function calcShopdialogPrice(a) { if (!$("shopdialog_amount")) {
    return false;
} var d = 0; var e = 0; for (var c = 0; c < shop_products.length; c++) {
    if (shop_products[c].pid == a) {
        e = shop_products[c].price;
        var b = $("shopdialog_amount").value;
        b = parseInt(b);
        d = (b * e);
        if (isNaN(d)) {
            d = 0;
        }
        if (shop_products[c].coins > 0) {
            $("shopdialog_calc").innerHTML = d + "&nbsp;" + t_coins;
        }
        else {
            $("shopdialog_calc").innerHTML = formatPrice(d);
        }
        break;
    }
} }
function shopFillForm(a) { if (!city || city != 1) {
    mapGo2Location("city", 1);
} shopAction("shopinit", 1, a); }
function closeShop() { shop_cart = {}; shop_block = 0; hideDiv("transp3"); hideDiv("shop"); }
var specialbonus = function () { this.data = {}; };
specialbonus.prototype.timer = function () { hideDiv("specialbonus_link"); this.data.remain--; if (this.data.remain > 0) {
    showDiv("specialbonus_link");
    var b = "";
    if (this.data.vet && this.data.vet.points) {
        b = str_replace("%BONUS%", (this.data.vet.points * 100), t_specialbonus_vet_points);
    }
    if (this.data.foodworld && this.data.foodworld.harvest) {
        b = str_replace("%AMOUNT%", this.data.foodworld.harvest, t_specialbonus_foodworld_harvest);
    }
    if (this.data.foodworld && this.data.foodworld.farmis) {
        b = str_replace("%AMOUNT%", (this.data.foodworld.farmis * 100), t_specialbonus_foodworld_farmis);
    }
    if (this.data.forestry && this.data.forestry.harvest) {
        b = str_replace("%AMOUNT%", this.data.forestry.harvest, t_specialbonus_forestry_harvest);
    }
    if (this.data.megafruit && this.data.megafruit.points) {
        b = str_replace("%BONUS%", (this.data.megafruit.points * 100), t_specialbonus_megafruit_points);
    }
    if (this.data.pets && this.data.pets.production_harvest) {
        b = str_replace("%BONUS%", this.data.pets.production_harvest, t_specialbonus_pets_production_harvest);
    }
    if (this.data.guild && this.data.guild.products_reduction_animal) {
        b = str_replace("%BONUS%", (this.data.guild.products_reduction_animal * 100), t_specialbonus_guild_products_reduction_animal);
    }
    if (this.data.production && this.data.production.harvest) {
        b = t_specialbonus_production_harvest.replace("%BONUS%", this.data.production.harvest);
        if (this.data.production.buildings) {
            b += '<div class="bonusinfo">';
            for (var a = 0; a < this.data.production.buildings.length; a++) {
                if (a > 0) {
                    b += ", ";
                }
                b += buildinginfos[0][this.data.production.buildings[a]][10];
            }
            b += "</div>";
        }
    }
    b += '<div style="margin-top:5px;">' + formatTime(this.data.remain) + "</div>";
    $("specialbonus_link_tt").innerHTML = b;
} };
var specialoffer = function () { this.config = {}; this.data = {}; };
specialoffer.prototype.buy = function () { this.action("specialoffer_buy"); };
specialoffer.prototype.daily = function () { this.action("specialoffer_daily"); };
specialoffer.prototype.action = function (a, b) { ajaxAction("main", a, b, specialoffer.response); };
specialoffer.prototype.response = function (b, a, c) { if (a == "specialoffer_buy") {
    hideDiv("specialoffer_link");
    globalcommitbox(t_specialoffer_success_head, t_specialoffer_success_body);
} };
specialoffer.prototype.init = function (b) { var a = '<div id="specialoffer">'; a += '  <div class="ufodeco"></div>'; a += '  <div id="specialoffer_img"></div>'; a += '  <div id="specialoffer_content">'; for (var d in this.config.content) {
    if (d == "decoration") {
        a += '<div class="specialoffer_item">';
        for (j = 0; j < this.config.content[d].length; j++) {
            a += '<div class="item" style="float:left; margin-right:5px;"></div>';
            a += '<div style="float:left; width:100px;">' + str_replace("%NAME%", produkt_name[this.config.content[d][j]], t_specialoffer_item.deco) + "</div>";
        }
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (d == "housedesign") {
        a += '<div class="specialoffer_item">';
        a += '  <div class="headquarter_design' + this.config.content[d] + '_preview" style="float:left; margin-right:5px; width:50px; height:50px; background-size:100%;"></div>';
        a += '  <div style="float:left; width:100px;">' + t_specialoffer_item.housedesign + "</div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (d == "farmhouse") {
        a += '<div class="specialoffer_item">';
        for (j = 0; j < this.config.content[d].length; j++) {
            a += '<div class="farmhouse" style="float:left; margin-right:5px;"></div>';
            a += '<div style="float:left; width:100px;">' + t_specialoffer_item.farmhouse + "</div>";
        }
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (in_array(d, ["acai", "chocolate", "ice", "candy"])) {
        a += '<div class="specialoffer_item">';
        a += '  <div class="olympia_' + d + '_berry_mini" style="float:left; margin-right:5px; width:50px; height:50px;"></div>';
        a += '  <div style="float:left; width:100px;">' + str_replace("%AMOUNT%", this.config.content[d], t_specialoffer_item[d]) + "</div>";
        a += '  <div class="clear"></div>';
        a += "</div>";
    }
    if (d == "ammo") {
        for (var e in this.config.content[d]) {
            a += '<div class="specialoffer_item">';
            a += '  <div class="ammo' + e + '" style="float:left; margin-right:5px; width:50px; height:50px;"></div>';
            a += '  <div style="float:left; width:100px;">' + this.config.content[d][e] + "x " + t_specialoffer_item[d] + "</div>";
            a += '  <div class="clear"></div>';
            a += "</div>";
        }
    }
} a += '    <div class="clear"></div>'; a += "  </div>"; a += '  <div class="link coinsbutton_flex" onclick="specialoffer.buyCommit()">' + str_replace("%COINS%", this.config.coins, t_buy_offer) + "</div>"; a += '  <div id="specialoffer_timer"></div>'; a += "</div>"; var c = 0; if (b) {
    c = "specialoffer.daily()";
} globalBoxFlex(t_specialoffer_head, a, 0, c, 1); $("globalbox").style.top = 65 + "px"; };
specialoffer.prototype.buyCommit = function () { var a = str_replace("%COINS%", this.config.coins, t_specialoffer_body); globalcommitbox(t_specialoffer_head, a, "specialoffer.buy()"); };
specialoffer.prototype.timer = function () { this.data.remain--; if (this.data.remain > 0) {
    if ($("specialoffer")) {
        $("specialoffer_timer").innerHTML = t_offer_ends + "&nbsp;" + formatTime(this.data.remain);
    }
}
else {
    if ($("specialoffer")) {
        hideDiv("globaltransp");
        hideDiv("globalbox");
        hideDiv("specialoffer_link");
    }
} };
var teaser = function () { this.data = {}; this.key = {}; };
teaser.prototype.ignore = function () { teaser.action("teaser_ignore", { key: this.key }); };
teaser.prototype.action = function (a, b) { ajaxAction("main", a, b, teaser.response); };
teaser.prototype.response = function (b, a, c) { teaser.data = b; teaser.build(); };
teaser.prototype.build = function () { showDiv("teaser_links"); $$("#teaser_links .item").each(function (b) { hideDiv(b.id); }); for (var a in this.data) {
    showDiv("teaser_link_" + a);
} };
teaser.prototype.show = function (c) { this.key = c; var a = '<div id="teaser_box" class="' + c + '">'; if (c == "farm5") {
    a += '<div class="bubble farm5_bubble1">' + t_level40_info_head + "</div>";
    a += '<div class="bubble farm5_bubble2">' + t_level40_info_body1 + "</div>";
    a += '<div class="bubble farm5_bubble3">' + t_level40_info_body2 + "</div>";
    a += '<div class="bubble farm5_bubble4">' + t_level40_info_body3 + "</div>";
} if (c == "farm6") {
    a += '<div class="bubble farm6_bubble1">' + t_level42_info_head + "</div>";
    a += '<div class="bubble farm6_bubble2">' + t_level42_info_body1 + "</div>";
    a += '<div class="bubble farm6_bubble3">' + t_level42_info_body2 + "</div>";
    a += '<div class="bubble farm6_bubble4">' + t_level42_info_body3 + "</div>";
    a += '<div class="bubble farm6_bubble5">' + t_level42_info_body3 + "</div>";
} a += '  <div class="ignore ' + c + '">'; a += '    <input id="teaser_box_ignore" type="checkbox">'; a += "    <div>" + t_dont_show_it_again + "</div>"; a += '    <div class="clear"></div>'; a += "  </div>"; a += "</div>"; var b = "teaser.hide()"; globalBoxFlex("", a, 0, b, 1); $("globalbox").style.top = "50px"; };
teaser.prototype.hide = function () { if ($("teaser_box_ignore").checked == true) {
    this.ignore();
} hideDiv("globaltransp"); hideDiv("globalbox"); };
var teaser = new teaser();
var vet_data = {};
var vet_animal_queue_select = 0;
var vet_position = "left";
var vet_selected_drugs = {};
var vet_stats_select = "points";
var vet_stats_cache = {};
var vet_stats_cache_delay = {};
var vet_production_select_page = 1;
var vet_production_select_filter_id = 0;
var vet_production_select_filter_pos = 0;
var vet_wait_checkrole = 0;
var vet_role_reward_block = 0;
function initVet() { var a = ""; a += '<div id="vet_back" class="vet_back_left">'; a += '<div id="vet_pharmacist" class="link" onmouseover="showDiv(\'vet_pharmacist_tt\')" onmouseout="hideDiv(\'vet_pharmacist_tt\')">'; a += '  <div id="vet_pharmacist_timer"></div>'; a += '  <div id="vet_pharmacist_tt" class="ttbox"><div>' + t_pharmacist_buy_head + '</div><div class="bonusinfo">' + t_pharmacist_info + "</div></div>"; a += '  <div class="vet_pharmacist"></div>'; a += '  <div id="vet_pharmacist_unlocked" class="unlocked"></div>'; a += "</div>"; a += '  <div id="vet_production_slots" class="vet_production_slots_normal"></div>'; a += '  <div id="vet_animal_slots"></div>'; a += '  <div id="vet_animal_queue"></div>'; a += '  <div id="vet_sroller" class="link megafield_carpool_right" onclick="moveVet()"></div>'; a += "</div>"; a += htmlLevelBar("vet"); a += htmlCountBar("vet"); a += '<div id="vet_stats" class="link" onclick="vetStats()"></div>'; a += '<div id="vet_quest_button" class="link" onclick="vetQuests()"></div>'; a += '<div id="vet_reward_button" class="link" onclick="vetReward()"></div>'; a += '<div id="vet_help_button" class="helpbutton_blue link" onclick="openFarmersMarketHowTo(\'vet\', 1);"></div>'; a += '<div id="vet_timerbar" class="main_timerbar">'; a += '  <div id="vet_timerbar_innerbar" class="main_timerbar_innerbar"></div>'; a += '  <div id="vet_timerbar_info" class="main_timerbar_info"></div>'; a += "</div>"; a += '<div id="vet_flyer"></div>'; a += '<div id="vet_transp" class="transp"></div>'; a += '<div id="vet_animal_record"></div>'; a += '<div id="vet_stats_box"></div>'; a += '<div class="mini_close link" onclick="closeVet()"></div>'; $("farmersmarket_pos5_inner").innerHTML = a; showDiv("transp"); showDiv("farmersmarket_pos5_inner"); vet_position = "left"; updateVet(); }
function updateVet() { updateVetAnimalSlots(); updateVetAnimalQueue(); updateVetLevel(); updateVetProductionSlot(); timerVet(); }
function updateVetLevel() { $("vet_levelbar_number").innerHTML = vet_data.info.level; if (vet_data.info.next_level_points) {
    var e = (vet_data.info.points - vet_data.info.current_level_points);
    var d = (vet_data.info.next_level_points - vet_data.info.current_level_points);
    var h = Math.floor((e * 100) / d);
    $("vet_levelbar_inner").style.width = h + "%";
    var l = (vet_data.info.next_level_points - vet_data.info.points);
    $("vet_levelbar_tt").innerHTML = str_replace("%POINTS%", formatNumber(l), t_vet_level_tt);
}
else {
    $("vet_levelbar_tt").innerHTML = t_reached_maxlevel;
    $("vet_levelbar_inner").style.width = "100%";
} $("vet_levelbar_plus").onclick = new Function("vetDialog('add_level')"); $("vet_levelbar_plus_tt").innerHTML = t_vet_leveladd_tt; $("vet_countbar_inner").innerHTML = '<div style="float:left; margin:-4px 5px 0 0;" class="vet_leveladd_item"></div><div style="float:left;">' + vet_data.info.count + '</div><div class="clear"></div>'; $("vet_countbar_plus").onclick = new Function("vetDialog('buy_addlevel')"); $("vet_countbar_plus_tt").innerHTML = t_vet_levelitem_buy; }
function showVetMedicalRecord(h) { if (vet_data.animals.slots && vet_data.animals.slots[h]) {
    var q = vet_data.animals.slots[h];
    var e = vet_data.animals.queue[q.id];
    var d = "";
    d += '<div id="vet_medicalrecord_info' + h + '" class="vet_medicalrecord_info">' + t_vet_medicalrecord_clickdrug + "</div>";
    d += '<div style="position:absolute; top:85px; left:50%; width:340px; margin-left:-170px;">';
    for (var c = 0; c < e.diseases.length; c++) {
        var b = e.diseases[c].id;
        d += '<div class="vet_medicalrecord_line">';
        d += '  <div style="float:left; margin:9px 5px 0 0;">' + showDiseaseIcon(b, "medicalrecord", 0, "big") + "</div>";
        d += '  <div style="position:absolute; top:5px; left:45px; background-color:#fff; border-radius:20px; height:17px; width:20px; text-align:center; padding-top:2px; font-weight:bold;">' + e.diseases[c].phase + "</div>";
        d += '  <div class="square_slot link" style="float:left; position:relative;" onclick="vetDrugSelect(' + h + ", " + b + ')">';
        d += '  <div id="vet_medicalrecord_square' + h + "_" + b + '" style="position:absolute; top:11px; left:20px;"></div>';
        d += "  </div>";
        d += '  <div id="drugSelect' + h + "_" + b + '" class="drug_select">';
        for (var m in vet_data.drugs) {
            if (in_array(b, vet_data.drugs[m].diseases) && vet_data.drugs[m].level <= vet_data.info.level) {
                var l = "<div>" + produkt_name[m] + "</div>";
                l += "<div>" + t_heal_time + "&nbsp;" + formatTime(vet_data.drugs[m].times[b]) + "</div>";
                var n = "vetDiseaseSetDrug(" + h + ", " + b + ", " + m + ")";
                if (!(checkRackItem(m) >= e.diseases[c].phase)) { }
                d += '<div style="float:left; position:relative; padding:5px; margin-right:10px;">';
                d += '  <div id="vet_animal_disease_option' + h + "_" + b + "_" + m + '" class="vet_animal_disease_option_drug tt' + m + ' link" onclick="' + n + '" onmouseover="showDiv(vet_animal_disease_option_tt' + h + "_" + e.diseases[c].id + "_" + m + ')" onmouseout="hideDiv(vet_animal_disease_option_tt' + h + "_" + e.diseases[c].id + "_" + m + ')">';
                d += '    <div id="vet_animal_disease_option_tt' + h + "_" + b + "_" + m + '" class="vet_animal_disease_option_tt ttbox">' + l + "</div>";
                d += '    <div id="vet_animal_disease_option_select' + h + "_" + b + "_" + m + '" class="vet_animal_disease_option_drug_active"></div>';
                d += '    <div class="vet_animal_disease_option_phase">' + e.diseases[c].phase + "x</div>";
                d += "  </div>";
                d += "</div>";
            }
        }
        d += '    <div class="clear"></div>';
        d += "  </div>";
        d += '  <div class="clear"></div>';
        d += "</div>";
    }
    d += "</div>";
    d += '<div id="vet_medicalrecord_missing_products"></div>';
    d += '<div class="vet_medicalrecord_rewardblock">';
    d += '  <div style="float:left;"><img src="' + imgpath + 'vet_role2_icon.png" style="width:40px; float:left;"><div style="float:left; margin:13px 0 0 3px; width:120px;" id="vet_medicalrecord_duration' + h + '" class="vet_medicalrecord_duration">' + formatTime(0) + '</div><div class="clear"></div></div>';
    d += '  <div style="float:left;"><div class="megafield_points_icon" style="float:left;"></div><div style="float:left; margin:13px 0 0 3px; width:120px;" class="vet_animal_queue_item_tt_reward_item" id="vet_medicalrecord_points">0&nbsp;' + t_points + '</div><div class="clear"></div></div>';
    d += '  <div style="float:left;"><img src="' + imgpath + 'vet_patch50x50.png" style="width:40px; float:left;"><div style="float:left; margin:13px 0 0 3px; width:120px;" class="vet_animal_queue_item_tt_reward_item" id="vet_medicalrecord_vet_points">0&nbsp;' + t_vet_points + '</div><div class="clear"></div></div>';
    d += '  <div style="float:left;"><div class="megafield_money_icon" style="float:left;"></div><div style="float:left; margin:13px 0 0 3px; width:120px;" class="vet_animal_queue_item_tt_reward_item" id="vet_medicalrecord_money">' + formatPrice(0) + '</div><div class="clear"></div></div>';
    d += '  <div class="clear"></div>';
    d += "</div>";
    d += '<div class="vet_medicalrecord_reward_info">' + t_vet_medicalrecord_reward_info + "</div>";
    d += '<button id="vet_animal_disease_start' + h + '" class="button_new vet_animal_disease_start link" onclick="vetStartTreatment(' + h + ');">' + t_vet_medicalrecord_start + "</button>";
    d += '<button id="vet_animal_disease_end' + h + '" class="button_new vet_animal_disease_end link" onclick="vetEndTreatment(' + h + ');">' + t_vet_medicalrecord_harvest + "</button>";
    if (devserver == 1) {
        d += '<button id="vet_animal_disease_speedup' + h + '" class="button_new vet_animal_disease_speedup link" onclick="vetDialog(\'disease_speedup\', ' + h + ');">' + t_vet_medicalrecord_speedup + "</button>";
    }
    d += "<div class=\"link mini_close\" onclick=\"hideDiv('vet_animal_record'); hideDiv('vet_transp'); vet_selected_drugs={}\"></div>";
    $("vet_animal_record").innerHTML = d;
    showDiv("vet_transp");
    showDiv("vet_animal_record");
    controlVetMedicalRecord(h);
} }
function vetDrugSelect(h, d) { if (vet_data.animals.slots && vet_data.animals.slots[h]) {
    var b = vet_data.animals.queue[vet_data.animals.slots[h].id];
    for (var c = 0; c < b.diseases.length; c++) {
        var e = b.diseases[c].id;
        if (e != d) {
            hideDiv("drugSelect" + h + "_" + e);
        }
    }
} toogleDiv("drugSelect" + h + "_" + d); }
function updateVetMedicalRecord(q, h) { var c = 0; var r = 0; var t = 0; var b = 0; var w = vet_data.animals.slots[q]; var n = vet_data.animals.queue[w.id]; for (var e in h) {
    var l = 1;
    for (var d = 0; d < n.diseases.length; d++) {
        if (n.diseases[d].id == e) {
            l = n.diseases[d].phase;
            break;
        }
    }
    var u = h[e];
    c += vet_data.drugs[u].times[e];
    b += l * vet_data.drugs[u].reward[e].money;
    r += l * vet_data.drugs[u].reward[e].points;
    t += l * vet_data.drugs[u].reward[e].vet_points;
    showDiv("vet_animal_disease_option_select" + q + "_" + e + "_" + u);
    if ($("vet_medicalrecord_square" + q + "_" + e)) {
        $("vet_medicalrecord_square" + q + "_" + e).className = "tt" + u;
    }
} if ($("vet_medicalrecord_duration" + q)) {
    if (c > 0) {
        var v = "";
        if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.treatment_reduce) {
            v = "&nbsp;(-" + vet_data.quest.bonus_all.treatment_reduce + "%)";
            c = Math.ceil(c - ((c / 100) * vet_data.quest.bonus_all.treatment_reduce));
        }
        $("vet_medicalrecord_duration" + q).innerHTML = formatTime(c) + v;
    }
    else {
        $("vet_medicalrecord_duration" + q).innerHTML = formatTime(0);
    }
    var v = "";
    if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.pat_bandage) {
        v = "&nbsp;(+" + vet_data.quest.bonus_all.pat_bandage + "%)";
        t = Math.ceil(t * ((100 + vet_data.quest.bonus_all.pat_bandage) / 100));
    }
    $("vet_medicalrecord_vet_points").innerHTML = formatNumber(t) + "&nbsp;" + t_vet_points + v;
    var v = "";
    if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.pat_money) {
        v = "&nbsp;(+" + vet_data.quest.bonus_all.pat_money + "%)";
        b = Math.ceil(b * ((100 + vet_data.quest.bonus_all.pat_money) / 100));
    }
    $("vet_medicalrecord_money").innerHTML = formatPrice(b) + v;
    var v = "";
    var m = 0;
    if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.pat_points) {
        var m = vet_data.quest.bonus_all.pat_points;
        v = "&nbsp;(+" + m + "%)";
    }
    if (specialbonus && specialbonus.data && specialbonus.data.vet && specialbonus.data.vet.points && specialbonus.data.remain > 0) {
        v += '<br><span style="color:green;">(+' + (specialbonus.data.vet.points * 100) + "% " + t_specialbonus_vet_points_info + ")</span>";
        m += (specialbonus.data.vet.points * 100);
    }
    r = Math.ceil(r * ((100 + m) / 100));
    $("vet_medicalrecord_points").innerHTML = formatNumber(r) + "&nbsp;" + t_points + v;
} }
function updateVetAnimalSlots() { var d = ""; for (var h = 1; h <= 3; h++) {
    var e = 0;
    if (vet_data.animals.slots && vet_data.animals.slots[h]) {
        e = vet_data.animals.slots[h];
    }
    d += '<div id="vet_animal_slot' + h + '" class="vet_animal_slot link">';
    if (e && e.id && vet_data.animals.queue[e.id]) {
        var b = vet_data.animals.queue[e.id];
        d += '<div id="vet_animal_queue_animal_img' + h + '" onmouseover="showDiv(\'vet_animal_queue_animal_timer' + h + "')\" onmouseout=\"hideDiv('vet_animal_queue_animal_timer" + h + "')\"></div>";
        d += '<div id="vet_animal_queue_animal_timer' + h + '" class="ttbox vet_animal_queue_animal_timer"><div class="bonusinfo">' + t_vet_open_medicalrecord + "</div></div>";
        d += '<div id="vet_animal_queue_animal' + e.id + '_tt" class="vet_animal_queue_animal_tt ttbox">';
        if (b.reward.player_points) {
            d += '<div class="vet_animal_queue_item_tt_reward_item">' + b.reward.player_points + "&nbsp;" + t_points + "</div>";
        }
        if (b.reward.vet_points) {
            d += '<div class="vet_animal_queue_item_tt_reward_item">' + b.reward.vet_points + "&nbsp;" + t_vet_points + "</div>";
        }
        if (b.reward.money) {
            d += '<div class="vet_animal_queue_item_tt_reward_item">' + formatPrice(b.reward.vet_points) + "</div>";
        }
        d += "</div>";
    }
    d += '  <div id="vet_animal_disease_healani' + h + '" class="vet_animal_disease_healani">';
    for (var c = 1; c <= 3; c++) {
        d += '<div id="vet_heal_plus' + c + '" class="vet_heal_plus"></div>';
    }
    d += "  </div>";
    d += '  <div id="vet_animal_slot_block' + h + '" class="vet_animal_slot_block" style="left:50%; top:50%; margin-left:-40px; margin-top:-63px;" onmouseover="showDiv(\'vet_animal_slot_block' + h + "_tt')\" onmouseout=\"hideDiv('vet_animal_slot_block" + h + "_tt')\">";
    d += '    <div id="vet_animal_slot_block' + h + '_tt" class="vet_animal_slot_block_tt ttbox"></div>';
    d += "  </div>";
    d += '  <div id="vet_animal_slot_rent_timer' + h + '" class="vet_animal_slot_rent_timer"></div>';
    d += "</div>";
    d += '<div id="vet_animal_flyer' + h + '" class="vet_animal_flyer"></div>';
    d += '<div id="vet_animal_cashup' + h + '" class="vet_cashup link" onclick="vetEndTreatment(' + h + ');" onmouseover="showDiv(\'vet_animal_cashup' + h + "_tt')\" onmouseout=\"hideDiv('vet_animal_cashup" + h + "_tt')\">";
    d += '  <div id="vet_animal_cashup' + h + '_tt" class="ttbox vet_animal_cashup_tt">' + t_vet_medicalrecord_harvest + "</div>";
    d += "</div>";
} $("vet_animal_slots").innerHTML = d; for (var h in vet_data.animals.slots) {
    vetCheckDiseaseStart(h);
} }
function updateVetAnimalQueue() { var h = 0; for (var u = 1; u <= 3; u++) {
    var r = 1;
    if (vet_data.animals.slots && vet_data.animals.slots[u] && (vet_data.animals.slots[u].id || vet_data.animals.slots[u].block)) {
        r = 0;
        h++;
    }
    if (vet_animal_queue_select && r == 1) {
        $("vet_animal_slot" + u).addClassName("vet_animal_slot_hover");
    }
    else {
        $("vet_animal_slot" + u).removeClassName("vet_animal_slot_hover");
    }
} var m = ""; var q = 0; for (var b in vet_data.animals.queue) {
    var t = vet_data.animals.queue[b];
    if (t.status == 0) {
        var v = "";
        if (vet_animal_queue_select == b) {
            v = "vet_animal_queue_active";
        }
        var d = "left";
        var c = "";
        if (!vet_animal_queue_select) {
            c = t_vet_queue_tut1;
            if (h == 3) {
                c = t_vet_queue_tut3;
            }
        }
        if (vet_animal_queue_select == b) {
            c = t_vet_queue_tut2;
        }
        var w = "setVetAnimalQueueSelect(" + b + ")";
        if (h == 3) {
            w = "";
        }
        m += '<div id="vet_animal_queue' + b + '" class="vet_animal_queue_item" onclick="' + w + '" onmouseover="showDiv(\'vet_animal_queue_item_tt' + b + "')\" onmouseout=\"hideDiv('vet_animal_queue_item_tt" + b + "')\">";
        m += '  <div class="' + v + '"></div>';
        var n = "sick";
        if (t.verysick) {
            n = "verysick";
        }
        m += '  <div class="vet_animal_queue_animal_img' + t.animalid + "_" + n + '_queue"></div>';
        m += '  <div id="vet_animal_queue_item_tt' + b + '" class="vet_animal_queue_item_tt_' + d + ' ttbox">';
        for (var l = 0; l < t.diseases.length; l++) {
            var e = 0;
            var v = "";
            for (var s in vet_data.drugs) {
                if (in_array(t.diseases[l].id, vet_data.drugs[s].diseases)) {
                    if (checkRackItem(s) >= t.diseases[l].phase) {
                        e = 1;
                    }
                }
            }
            if (!e) {
                v = "important";
            }
            m += '<div style="margin-bottom:2px; width:150px;">';
            m += '  <div class="vet_animal_disease vet_animal_disease' + t.diseases[l].id + '" style="float:left; margin-right:5px;"></div>';
            m += '  <div class="' + v + '" style="float:left; width:95px; margin-top:3px;">' + vet_data.diseases[t.diseases[l].id].name + " (" + t_vet_phase + "&nbsp;" + t.diseases[l].phase + ")</div>";
            m += '  <div class="clear"></div>';
            m += "</div>";
        }
        m += '     <div class="vet_animal_queue_item_tt_reward">';
        if (t.reward.player_points) {
            m += '<div class="vet_animal_queue_item_tt_reward_item">' + t.reward.player_points + "&nbsp;" + t_points + "</div>";
        }
        if (t.reward.vet_points) {
            m += '<div class="vet_animal_queue_item_tt_reward_item">' + t.reward.vet_points + "&nbsp;" + t_vet_points + "</div>";
        }
        if (t.reward.money) {
            m += '<div class="vet_animal_queue_item_tt_reward_item">' + formatPrice(t.reward.money) + "</div>";
        }
        m += '       <div class="clear"></div>';
        m += "     </div>";
        if (c != "") {
            m += '<div class="bonusinfo">' + c + "</div>";
        }
        m += "  </div>";
        m += '  <div id="vet_animal_queue_flyer' + b + '" class="vet_animal_queue_flyer"></div>';
        m += "</div>";
        q++;
    }
} $("vet_animal_queue").innerHTML = m; }
function updateVetProductionSlot() { var c = ""; for (var b = 1; b <= 4; b++) {
    c += '<div id="vet_production_slot' + b + '" class="vet_production_slot vet_production_slot_normal">';
    c += '  <div id="vet_production_slot_flask' + b + '" class="flask_big" style="position:absolute; left:5px; display:none;"></div>';
    c += '  <div id="vet_production_slot_img' + b + '" class="vet_production_slot_img"></div>';
    c += '  <div id="vet_production_slot_info' + b + '" class="vet_production_slot_info"></div>';
    c += '  <div id="vet_production_slot_click' + b + '" class="link" style="position:absolute; left:0px; top:0px; width:100%; height:100%;"></div>';
    c += '  <div id="vet_pharmacist_slots' + b + '" class="vet_pharmacist_slots">';
    for (var a = 1; a <= 3; a++) {
        c += '<div id="vet_pharmacist_slot' + b + "_" + a + '" class="link vet_pharmacist_slot" onmouseover="showDiv(\'vet_pharmacist_slot_tt' + b + "_" + a + "')\" onmouseout=\"hideDiv('vet_pharmacist_slot_tt" + b + "_" + a + "')\">";
        c += '  <div id="vet_pharmacist_slot_img' + b + "_" + a + '" class="vet_pharmacist_slot_img"></div>';
        c += '  <div id="vet_pharmacist_slot_status' + b + "_" + a + '" class="vet_pharmacist_slot_status"></div>';
        c += '  <div id="vet_pharmacist_slot_tt' + b + "_" + a + '" class="ttbox vet_pharmacist_slot_tt"></div>';
        c += "</div>";
    }
    c += "  </div>";
    c += '  <div id="vet_production_slot_speedup' + b + '" class="vet_production_slot_speedup speedupgardenbutton link" onclick="vetDialog(\'production_slot_speedup\', ' + b + ');" onmouseover="showDiv(\'vet_production_slot_speedup' + b + "_tt')\" onmouseout=\"hideDiv('vet_production_slot_speedup" + b + "_tt')\">";
    c += '    <div id="vet_production_slot_speedup' + b + '_tt" class="ttbox vet_production_slot_speedup_tt">' + building_speeduptext + "</div>";
    c += "  </div>";
    c += '  <div id="vet_production_slot_rent_timer' + b + '" class="vet_production_slot_rent_timer"></div>';
    c += '  <div id="vet_production_slot_block' + b + '" class="link vet_production_slot_block"></div>';
    c += "</div>";
} $("vet_production_slots").innerHTML = c; }
function vetProductionSlot(e, a) { if ($("vet_production_slot" + e)) {
    var c = "vetDialog('production_select', " + e + ", 1)";
    hideDiv("vet_production_slot_speedup" + e);
    hideDiv("vet_production_slot_img" + e);
    hideDiv("vet_production_slot_flask" + e);
    $("vet_production_slot_img" + e).className = "vet_production_slot_img";
    $("vet_production_slot_info" + e).innerHTML = t_start_production;
    if (vet_data.production[e] && vet_data.production[e][a]) {
        var d = vet_data.production[e][a];
        c = "";
        if (vet_data.info.queue_remain > 0) {
            for (var b = 1; b <= 3; b++) {
                if (!vet_data.production[e][b]) {
                    c = "vetDialog('production_select', " + e + ", " + b + ")";
                    break;
                }
            }
        }
        $("vet_production_slot_img" + e).addClassName("tt" + d.pid);
        $("vet_production_slot_info" + e).innerHTML = '<div style="font-weight:bold;">' + d.amount + "x&nbsp;" + produkt_name[d.pid] + "</div>";
        showDiv("vet_production_slot_img" + e);
        showDiv("vet_production_slot_flask" + e);
        if (d.remain && d.remain > 0) {
            $("vet_production_slot_info" + e).innerHTML += "<div>" + formatTime(d.remain) + "</div>";
            showDiv("vet_production_slot_speedup" + e);
        }
        else {
            if (vet_data.production[e]["gone"] >= vet_data.production[e]["duration"]) {
                c = "vetHarvestProduction(" + e + ", " + a + ")";
                $("vet_production_slot_info" + e).innerHTML += '<div style="position:absolute; bottom:0px;">' + click4products + "</div>";
            }
        }
    }
    $("vet_production_slot_click" + e).onclick = new Function(c);
} }
function checkVetProductionSlotBlock(d, a) { if ($("vet_production_slot" + d)) {
    var b = "";
    hideDiv("vet_production_slot_block" + d);
    if (vet_data.animals.slots2 && vet_data.animals.slots2[d] && vet_data.animals.slots2[d].block) {
        var c = "";
        if (vet_data.production[d] && vet_data.production[d][a] && vet_data.production[d][a].pid) {
            c = '<div style="font-weight:bold;">' + vet_data.production[d][a].amount + "x&nbsp;" + produkt_name[vet_data.production[d][a].pid] + "</div>";
        }
        showDiv("vet_production_slot_block" + d);
        hideDiv("vet_production_slot_speedup" + d);
        if (vet_data.animals.slots2[d].rent_duration) {
            var c = str_replace("%TIME%", formatTime(vet_data.animals.slots2[d].rent_duration), t_rent_slot);
            c = str_replace("%COINS%", vet_data.animals.slots2[d].coins + "&nbsp;" + t_coins, c);
            b = "vetDialog('rent_production_slot', " + d + ")";
            hideDiv("vet_pharmacist_slots" + d);
        }
        else {
            if (vet_data.animals.slots2[d].money) {
                var c = str_replace("%MONEY%", formatPrice(vet_data.animals.slots2[d].money), t_buy_slot);
            }
            if (vet_data.animals.slots2[d].coins) {
                var c = str_replace("%MONEY%", vet_data.animals.slots2[d].coins + "&nbsp;" + t_coins, t_buy_slot);
            }
            b = "vetDialog('buy_production_slot', " + d + ")";
            hideDiv("vet_pharmacist_slots" + d);
        }
        $("vet_production_slot_info" + d).innerHTML = '<div style="position:absolute; bottom:0px;">' + c + "</div>";
    }
    if (b != "") {
        $("vet_production_slot_click" + d).onclick = new Function(b);
        $("vet_production_slot_block" + d).onclick = new Function(b);
    }
} }
function showVetProductionDisplay(m) { var h = 0; var e = 0; var b = 0; var l = 0; for (var m = 1; m <= 4; m++) {
    for (var a = 1; a <= 3; a++) {
        if (vet_data.production && vet_data.production[m] && vet_data.production[m][a]) {
            if (vet_data.production[m][a].remain > 1) {
                if (!b) {
                    b = m;
                    l = a;
                }
                if (vet_data.production[m][a].remain < vet_data.production[b][l].remain) {
                    b = m;
                    l = a;
                }
            }
            else {
                if (!h) {
                    h = m;
                    e = a;
                }
            }
        }
    }
} if (h > 0) {
    showDiv("farmersmarket_pos5_progress");
    $("farmersmarket_pos5_progress").removeClassName("farmersmarket_pos5_progress_active");
    $("farmersmarket_pos5_progress").addClassName("farmersmarket_pos5_progress_ready");
    showFarmersmarketPosTimer(5, vet_data.production[h][e].pid, statusProductionComplete);
    found = 0;
    for (var d = 0; d < farm_checker.length; d++) {
        if (farm_checker[d].farm == 99 && farm_checker[d].position == 5) {
            found++;
        }
    }
    if (!found) {
        var c = { pid: vet_data.production[h][e].pid, farm: 99, position: 5 };
        farm_checker.push(c);
    }
}
else {
    if (b > 0) {
        showDiv("farmersmarket_pos5_progress");
        $("farmersmarket_pos5_progress").addClassName("farmersmarket_pos5_progress_active");
        $("farmersmarket_pos5_progress").removeClassName("farmersmarket_pos5_progress_ready");
        showFarmersmarketPosTimer(5, vet_data.production[b][l].pid, formatTime(vet_data.production[b][l].remain));
    }
    else {
        hideDiv("farmersmarket_pos5_progress");
        showFarmersmarketPosTimer(5, 0);
    }
} }
function getVetCurrentProductionPos(d) { var b = 0; if (vet_data.production[d]) {
    if (vet_data.production[d]["gone"] >= vet_data.production[d]["duration"]) {
        for (var a = 1; a <= 3; a++) {
            if (vet_data.production[d][a]) {
                b = a;
            }
        }
    }
    else {
        var c = 0;
        for (var a = 1; a <= 3; a++) {
            if (vet_data.production[d][a]) {
                c += parseInt(vet_data.production[d][a].duration);
                if (c > vet_data.production[d]["gone"]) {
                    b = a;
                    break;
                }
            }
        }
    }
} return b; }
function timerVet() { if (vet_data.currenttime) {
    vet_data.currenttime++;
} if (vet_data.animals) {
    for (var d = 1; d <= 3; d++) {
        var m = 1;
        var s = "setVetAnimalSlot(" + d + ")";
        if (vet_data.animals.slots && vet_data.animals.slots[d]) {
            if (vet_data.animals.slots[d].id) {
                vet_data.animals.slots[d].remain--;
                m = 0;
            }
            if (vet_data.animals.slots[d].rent_duration) {
                vet_data.animals.slots[d].rent_remain--;
            }
            if ($("vet_animal_slot" + d)) {
                if ($("vet_animal_queue_animal_img" + d)) {
                    $("vet_animal_queue_animal_img" + d).className = "";
                    if (vet_data.animals.slots[d].id) {
                        var z = vet_data.animals.queue[vet_data.animals.slots[d].id].animalid;
                        var l = "sick";
                        if (vet_data.animals.queue[vet_data.animals.slots[d].id].verysick) {
                            l = "verysick";
                        }
                        $("vet_animal_queue_animal_img" + d).className = "vet_animal_queue_animal_img" + z + "_" + l;
                    }
                }
                hideDiv("vet_animal_slot_block" + d);
                if (vet_data.animals.slots[d].id) {
                    s = "showVetMedicalRecord(" + d + ")";
                }
                if (vet_data.animals.slots[d].rent_duration) {
                    if (vet_data.animals.slots[d].rent_remain > 0) {
                        if ($("vet_animal_slot_rent_timer" + d)) {
                            $("vet_animal_slot_rent_timer" + d).innerHTML = formatTime(vet_data.animals.slots[d].rent_remain);
                            showDiv("vet_animal_slot_rent_timer" + d);
                        }
                    }
                    else {
                        vet_data.animals.slots[d].block = 1;
                        if ($("vet_animal_slot_rent_timer" + d)) {
                            hideDiv("vet_animal_slot_rent_timer" + d);
                        }
                    }
                }
                if (vet_data.animals.slots[d].block) {
                    m = 0;
                    showDiv("vet_animal_slot_block" + d);
                    if (vet_data.animals.slots[d].rent_duration) {
                        var n = str_replace("%TIME%", formatTime(vet_data.animals.slots[d].rent_duration), t_vet_animal_slot_rent);
                        n = str_replace("%COINS%", vet_data.animals.slots[d].coins + "&nbsp;" + t_coins, n);
                        s = "vetDialog('rent_animal_slot', " + d + ")";
                    }
                    else {
                        var n = str_replace("%MONEY%", formatPrice(vet_data.animals.slots[d].money), t_vet_animal_slot_buy);
                        s = "vetDialog('buy_animal_slot', " + d + ")";
                    }
                    $("vet_animal_slot_block" + d + "_tt").innerHTML = n;
                }
            }
        }
        if ($("vet_animal_slot" + d)) {
            $("vet_animal_slot" + d).onclick = new Function(s);
        }
        controlVetMedicalRecord(d);
    }
    for (var d = 1; d <= 4; d++) {
        if (vet_data.animals.slots2 && vet_data.animals.slots2[d]) {
            if (vet_data.animals.slots2[d].rent_duration) {
                if (vet_data.animals.slots2[d].rent_remain > 0) {
                    vet_data.animals.slots2[d].rent_remain--;
                    if ($("vet_production_slot_rent_timer" + d)) {
                        $("vet_production_slot_rent_timer" + d).innerHTML = formatTime(vet_data.animals.slots2[d].rent_remain);
                        showDiv("vet_production_slot_rent_timer" + d);
                    }
                }
                else {
                    vet_data.animals.slots2[d].block = 1;
                    if ($("vet_production_slot_rent_timer" + d)) {
                        hideDiv("vet_production_slot_rent_timer" + d);
                    }
                }
            }
        }
    }
    if ($("vet_pharmacist")) {
        vet_data.info.queue_remain--;
        var u = "vetDialog('buy_pharmacist')";
        if (vet_data.info.queue_remain > 0) {
            $("vet_pharmacist_timer").innerHTML = formatTime(vet_data.info.queue_remain);
            showDiv("vet_pharmacist_timer");
            hideDiv("vet_pharmacist_unlocked");
            u = "";
        }
        else {
            hideDiv("vet_pharmacist_timer");
            showDiv("vet_pharmacist_unlocked");
        }
        var e = 0;
        for (var w = 1; w <= 4; w++) {
            var c = 0;
            var h = 0;
            for (var v = 1; v <= 3; v++) {
                if (vet_data.production[w] && vet_data.production[w][v]) {
                    h++;
                }
            }
            if (vet_data.info.queue_remain <= 0 && (!h || h <= 1)) {
                hideDiv("vet_pharmacist_slots" + w);
            }
            else {
                e++;
                showDiv("vet_pharmacist_slots" + w);
            }
            for (var v = 1; v <= 3; v++) {
                if (vet_data.production[w] && vet_data.production[w][v]) {
                    var r = getVetCurrentProductionPos(w);
                    c += parseInt(vet_data.production[w][v].duration);
                    var t = "harvest";
                    var s = "vetHarvestProduction(" + w + ", " + v + ")";
                    if (vet_data.production[w]["gone"] < c) {
                        t = "next";
                        var s = "";
                    }
                    if (r == v && vet_data.production[w]["gone"] < c) {
                        t = "running";
                        var s = "";
                    }
                    $("vet_pharmacist_slot_img" + w + "_" + v).className = "vet_pharmacist_slot_img tt" + vet_data.production[w][v].pid;
                    $("vet_pharmacist_slot_status" + w + "_" + v).className = "vet_pharmacist_slot_status " + t;
                    var a = produkt_name[vet_data.production[w][v].pid];
                }
                else {
                    if (vet_data.info.queue_remain > 0) {
                        var s = "vetDialog('production_select', " + w + ", " + v + ")";
                        var a = t_pharmacist_free_slot;
                    }
                    else {
                        var s = "";
                        var a = t_pharmacist_free_slot_block;
                    }
                }
                $("vet_pharmacist_slot_tt" + w + "_" + v).innerHTML = a;
                $("vet_pharmacist_slot" + w + "_" + v).onclick = new Function(s);
            }
        }
        if (e > 0) {
            $("vet_production_slots").className = "vet_production_slots_spacer";
            for (var y = 1; y <= 4; y++) {
                $("vet_production_slot" + y).className = "vet_production_slot vet_production_slot_spacer";
            }
        }
        else {
            $("vet_production_slots").className = "vet_production_slots_normal";
        }
        $("vet_pharmacist").onclick = new Function(u);
    }
    if (vet_data.production) {
        for (var d = 1; d <= 4; d++) {
            if (vet_data.production[d]) {
                vet_data.production[d]["gone"]++;
            }
            var r = getVetCurrentProductionPos(d);
            if (vet_data.production[d] && vet_data.production[d][r]) {
                vet_data.production[d][r].remain--;
            }
            vetProductionSlot(d, r);
            checkVetProductionSlotBlock(d, r);
        }
        showVetProductionDisplay();
    }
    for (var q in vet_data.animals.queue) {
        if ($("vet_animal_queue_flyer" + q)) {
            var A = getRandom(1, 30);
            if (A == 20) {
                if ($("vet_animal_queue_flyer" + q).style.display != "block") {
                    var A = getRandom(1, vet_queue_animal_sound.length);
                    showFeedback("vet_animal_queue_flyer" + q, vet_queue_animal_sound[(A - 1)]);
                }
            }
            if (A == 10 || A == 30) {
                new Effect.Shake("vet_animal_queue" + q, { duration: 0.2, distance: 4 });
            }
        }
    }
    for (var y in vet_stats_cache_delay) {
        vet_stats_cache_delay[y]--;
    }
} if (vet_data.info && vet_data.info.role_remain) {
    vet_data.info.role_remain--;
} if ($("vet_timerbar") && $("farmersmarket_pos5_inner").style.display == "block") {
    if (vet_data.info.role > 0) {
        showDiv("vet_timerbar");
        if (vet_data.info.role_remain > 0) {
            $("vet_timerbar_info").innerHTML = formatTime(vet_data.info.role_remain) + "&nbsp;|&nbsp;" + t_vet_role_name[vet_data.info.role] + "&nbsp;|&nbsp;" + t_vet_role_countinfo + "<b>" + vet_data.info.role_count + "/" + vet_data.info.role_count_max + "</b>";
            var b = 100 - ((vet_data.info.role_remain * 100) / vet_data.constants.role_duration);
            $("vet_timerbar_innerbar").style.width = b + "%";
            $("vet_timerbar");
        }
        else {
            $("vet_timerbar_info").innerHTML = t_vet_role_end;
            $("vet_timerbar_innerbar").style.width = "100%";
            if (!vet_wait_checkrole && !vet_role_reward_block) {
                vetCheckRole();
            }
        }
    }
    else {
        hideDiv("vet_timerbar");
        if ($("farmersmarket_pos5_inner").style.display == "block" && !vet_role_reward_block) {
            if (vet_position == "left") {
                vetDialog("selectrole");
            }
        }
    }
} if (vet_data.quest) {
    if (vet_data.quest.remain) {
        vet_data.quest.remain--;
    }
    checkVetQuestTimer();
} }
function checkVetQuestTimer() { if (vet_data.quest && $("vet_questentry_info")) {
    showDiv("vet_questentry_info");
    hideDiv("vet_questentry_warning");
    var a = "";
    if (vet_data.quest.remain > 0) {
        hideDiv("vet_questentry_info");
        showDiv("vet_questentry_warning");
        $("vet_questentry_warning").innerHTML = formatTime(vet_data.quest.remain);
    }
    if (vet_data.quest.levelblock == 1) {
        hideDiv("vet_questentry_info");
        showDiv("vet_questentry_warning");
        $("vet_questentry_warning").innerHTML = '<div style="margin-top:20px;" class="important">' + str_replace("%LEVEL%", vet_data.quest.level, t_vet_level_required) + "</div>";
    }
} }
function controlVetMedicalRecord(h) { if (vet_data.animals.slots && vet_data.animals.slots[h] && vet_data.animals.slots[h].remain) {
    var b = vet_data.animals.queue[vet_data.animals.slots[h].id].animalid;
    updateVetMedicalRecord(h, vet_data.animals.queue[vet_data.animals.slots[h].id].drugs);
    var c = '<div class="bonusinfo">' + t_vet_open_medicalrecord + "</div>";
    if (vet_data.animals.slots[h].remain > 0) {
        var e = "";
        var d = vet_data.animals.slots[h].remain;
        if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.treatment_reduce) {
            e = "&nbsp;(-" + vet_data.quest.bonus_all.treatment_reduce + "%)";
        }
        showDiv("vet_medicalrecord_duration" + h);
        if ($("vet_animal_disease_speedup" + h)) {
            showDiv("vet_animal_disease_speedup" + h);
        }
        showDiv("vet_animal_disease_healani" + h);
        var a = "sick";
        if (vet_data.animals.queue[vet_data.animals.slots[h].id].verysick) {
            a = "verysick";
        }
        if ($("vet_animal_queue_animal_img" + h)) {
            $("vet_animal_queue_animal_img" + h).className = "vet_animal_queue_animal_img" + b + "_" + a;
        }
        if ($("vet_medicalrecord_duration" + h)) {
            $("vet_medicalrecord_duration" + h).innerHTML = formatTime(d) + e;
        }
        if ($("vet_animal_queue_animal_timer" + h)) {
            $("vet_animal_queue_animal_timer" + h).innerHTML = formatTime(vet_data.animals.slots[h].remain) + c;
        }
    }
    else {
        showDiv("vet_animal_disease_end" + h);
        showDiv("vet_animal_cashup" + h);
        if ($("vet_animal_disease_speedup" + h)) {
            hideDiv("vet_animal_disease_speedup" + h);
        }
        hideDiv("vet_animal_disease_healani" + h);
        if ($("vet_animal_queue_animal_img" + h)) {
            $("vet_animal_queue_animal_img" + h).className = "vet_animal_queue_animal_img" + b;
        }
        if ($("vet_medicalrecord_duration" + h)) {
            $("vet_medicalrecord_duration" + h).innerHTML = formatTime(0);
        }
        if ($("vet_animal_queue_animal_timer" + h)) {
            $("vet_animal_queue_animal_timer" + h).innerHTML = statusProductionComplete + c;
        }
    }
} }
function setVetAnimalQueueSelect(a) { if (vet_animal_queue_select == a) {
    vet_animal_queue_select = 0;
}
else {
    vet_animal_queue_select = a;
} updateVetAnimalQueue(); }
function setVetAnimalSlot(a) { if (vet_animal_queue_select > 0) {
    farmAction("vet_setslot", 1, 1, a, vet_animal_queue_select);
    vet_animal_queue_select = 0;
} }
function vetDiseaseShowDrugs(b, a) { if ($("vet_animal_disease_option" + b + "_" + a).style.display == "block") {
    hideDiv("vet_animal_disease_option" + b + "_" + a);
}
else {
    showDiv("vet_animal_disease_option" + b + "_" + a);
} }
function vetDiseaseSetDrug(c, b, a) { if (vet_data.animals.slots[c].remain) {
    return false;
} if (vet_selected_drugs[c] && vet_selected_drugs[c][b] && vet_selected_drugs[c][b] == a) {
    delete vet_selected_drugs[c][b];
}
else {
    if (!vet_selected_drugs[c]) {
        vet_selected_drugs[c] = {};
    }
    vet_selected_drugs[c][b] = a;
} showVetMedicalRecord(c); updateVetMedicalRecord(c, vet_selected_drugs[c]); vetCheckDiseaseStart(c); }
function vetCheckDiseaseStart(u) { var b = 0; var y = vet_data.animals.slots[u]; if (y.id) {
    var t = vet_data.animals.queue[y.id];
    b = 1;
    for (var d = 0; d < t.diseases.length; d++) {
        if (!vet_selected_drugs[u] || !vet_selected_drugs[u][t.diseases[d].id]) {
            b = 0;
        }
    }
    var e = {};
    for (var d = 0; d < t.diseases.length; d++) {
        if (!e[t.diseases[d].id]) {
            e[t.diseases[d].id] = 0;
        }
        e[t.diseases[d].id] += t.diseases[d].phase;
    }
    var m = {};
    if (vet_selected_drugs[u]) {
        for (var q in vet_selected_drugs[u]) {
            if (e[q]) {
                var l = e[q];
            }
            if (!m[vet_selected_drugs[u][q]]) {
                m[vet_selected_drugs[u][q]] = 0;
            }
            m[vet_selected_drugs[u][q]] += l;
        }
    }
    var c = 0;
    var h = "";
    for (var w in m) {
        var r = m[w];
        var n = checkRackItem(w);
        if (!(n >= m[w])) {
            if (n) {
                r = (m[w] - n);
            }
            var v = str_replace("%PRODUCT%", produkt_name[w], windmill_missedproducts);
            h += '<div style="float:left; margin-right:5px;" class="kp' + w + '"></div>';
            h += '<div style="float:left;">' + str_replace("%AMOUNT%", r, v) + "</div>";
            h += '<div class="clear"></div>';
            c++;
        }
    }
    if ($("vet_medicalrecord_missing_products")) {
        $("vet_medicalrecord_missing_products").innerHTML = h;
    }
} if (b == 1 && !c) {
    showDiv("vet_animal_disease_start" + u);
}
else {
    hideDiv("vet_animal_disease_start" + u);
} }
function vetSetProductionSelectFilter(c, b, a) { vet_production_select_filter_id = b; vet_production_select_filter_pos = a; vet_production_select_page = 1; vetDialog("production_select", c); }
function vetDialog(c, r, O, L) { if (c == "buy_pharmacist") {
    if (r == 1) {
        var s = t_pharmacist_buy_head2;
    }
    else {
        var s = t_pharmacist_buy_head;
    }
    var B = str_replace("%TIME%", formatTime(vet_data.constants.queue_duration), t_pharmacist_buy_body);
    var z = '<div style="margin-bottom:10px;">' + t_pharmacist_info + "</div><div>" + str_replace("%COINS%", vet_data.constants.queue_coins, B) + "</div>";
    var H = "farmAction('vet_buypharmacist', 1, 1)";
    var N = 0;
    if (!vet_data.info.vet_pharmacist_remember_box) {
        N = "farmAction('vet_pharmacist_remember', 1, 1); hideDiv('globaltransp'); hideDiv('globalbox')";
    }
    globalcommitbox(s, z, H, N);
} if (c == "buy_production_slot") {
    var s = "";
    if (vet_data.animals.slots2[r].money) {
        $cost = formatPrice(vet_data.animals.slots2[r].money);
    }
    else {
        if (vet_data.animals.slots2[r].coins) {
            $cost = vet_data.animals.slots2[r].coins + "&nbsp;" + t_coins;
        }
    }
    var z = str_replace("%MONEY%", $cost, slot_buy);
    var H = "farmAction('vet_buyproductionslot', 1, 1, " + r + ")";
    globalcommitbox(s, z, H);
} if (c == "rent_production_slot") {
    var s = "";
    var z = str_replace("%TIME%", formatTime(vet_data.animals.slots2[r].rent_duration), slot_rent);
    z = str_replace("%COINS%", vet_data.animals.slots2[r].coins + "&nbsp;" + t_coins, z);
    var H = "farmAction('vet_rentproductionslot', 1, 1, " + r + ")";
    globalcommitbox(s, z, H);
} if (c == "buy_animal_slot") {
    var s = "";
    var z = $("vet_animal_slot_block" + r + "_tt").innerHTML;
    var H = "farmAction('vet_buyanimalslot', 1, 1, " + r + ")";
    globalcommitbox(s, z, H);
} if (c == "rent_animal_slot") {
    var s = "";
    var z = $("vet_animal_slot_block" + r + "_tt").innerHTML;
    var H = "farmAction('vet_rentanimalslot', 1, 1, " + r + ")";
    globalcommitbox(s, z, H);
} if (c == "disease_speedup") {
    globalSpeedupBox("vet_disease_speedup", 1, r);
} if (c == "production_slot_speedup") {
    globalSpeedupBox("vet_production_slot_speedup", 1, r);
} if (c == "stats") {
    var C = "";
    C += '<div id="vet_stats_select_line">';
    C += ' <select id="vet_stats_select" onchange="vetStats()">';
    var A = ["points", "treatments", "orders", "drugs"];
    for (var V = 0; V < A.length; V++) {
        var d = "";
        if (vet_stats_select == A[V]) {
            d = "selected";
        }
        C += '<option value="' + A[V] + '" ' + d + ">" + t_vet_stats[A[V]] + "</option>";
    }
    C += " </select>";
    C += "</div>";
    C += '<div class="headline">' + t_vet_stats_headlines[vet_stats_select] + "</div>";
    C += '<div class="vet_stats_list">';
    C += htmlStatsContent(vet_stats_cache[vet_stats_select]);
    C += "<div class=\"mini_close link\" onclick=\"hideDiv('vet_stats_box'); hideDiv('vet_transp');\"></div>";
    $("vet_stats_box").innerHTML = C;
    showDiv("vet_transp");
    showDiv("vet_stats_box");
} if (c == "production_select") {
    var t = ((vet_production_select_page - 1) * 4);
    var aa = (vet_production_select_page * 4);
    var s = t_vet_production_select_head;
    var z = "";
    z += '<div class="vet_production_selection">';
    z += '  <div id="vet_production_filter_icon" class="link vet_animal_disease vet_animal_disease' + vet_production_select_filter_id + '" onclick="toogleDiv(\'vet_production_filter_box\')" onmouseover="showDiv(\'vet_production_filter_icon_tt\')" onmouseout="hideDiv(\'vet_production_filter_icon_tt\')">';
    z += '    <div class="ttbox" id="vet_production_filter_icon_tt">' + t_vet_disease_filter + "</div>";
    z += "  </div>";
    z += '  <div id="vet_production_filter_box">';
    z += '    <div class="link vet_animal_disease_big vet_animal_disease0_big" onclick="vetSetProductionSelectFilter(' + r + ', 0, 0)" onmouseover="showDiv(\'vet_production_filter0\')" onmouseout="hideDiv(\'vet_production_filter0\')">';
    z += '      <div id="vet_production_filter0" class="ttbox vet_animal_disease_tt_right">' + t_vet_disease_filter_all + "</div>";
    z += "    </div>";
    var F = 1;
    for (var U in vet_data.diseases) {
        z += '<div class="link" style="float:left;" onclick="vetSetProductionSelectFilter(' + r + ", " + U + ", " + F + ')">';
        z += showDiseaseIcon(U, "filter", 0, "big");
        z += "</div>";
        F++;
    }
    z += "  </div>";
    var R = 0;
    for (var n in vet_data.drugs) {
        var q = 0;
        if (vet_production_select_filter_id > 0) {
            for (var V = 0; V < vet_data.drugs[n].diseases.length; V++) {
                if (vet_production_select_filter_id == vet_data.drugs[n].diseases[V]) {
                    q = 1;
                }
            }
        }
        else {
            if ((R + 1) > t && (R + 1) <= aa) {
                q = 1;
            }
        }
        if (q == 1) {
            var e = "vetDialog('production_select_confirm'," + r + "," + n + "," + O + ")";
            for (var V in vet_data.drugs[n].needs) {
                if (checkRackItem(V) < vet_data.drugs[n].needs[V]) {
                    e = "";
                }
            }
            var Q = 0;
            if (vet_data.drugs[n].level > vet_data.info.level) {
                e = "";
                Q = 1;
            }
            z += '<div class="vet_production_select_item link" onclick=' + e + ">";
            z += '  <div class="tt' + n + '" style="float:left; margin:5px; border-radius:5px;"></div>';
            z += '  <div style="float:left; text-align:left; margin-top:5px; width:140px;">';
            z += '    <div title="' + produkt_name[n] + '" style="font-weight:bold; margin-bottom:2px; height:12px; overflow:hidden; white-space:nowrap;">' + vet_data.drugs[n].amount + "x&nbsp;" + produkt_name[n] + "</div>";
            z += '    <div style="margin-bottom:2px;">' + formatNumber(produkt_points[n]) + "&nbsp;" + t_points + "</div>";
            z += '    <div style="margin-bottom:2px;">' + vet_data.drugs[n].vet_points + "&nbsp;" + t_vet_points + "</div>";
            if (Q == 1) {
                z += '<div class="important">' + str_replace("%LEVEL%", vet_data.drugs[n].level, t_vet_level_required) + "</div>";
            }
            else {
                z += '<div style="margin:5px 0px; text-align:left; font-style:italic">' + production_require + "</div>";
                var d = "";
                if (vet_data.quest && vet_data.quest.bonus_all && vet_data.quest.bonus_all.prod_time_reduce) {
                    d = "&nbsp;(-" + vet_data.quest.bonus_all.prod_time_reduce + "%)";
                }
                z += '<div style="margin-bottom:2px;">' + formatTime(vet_data.drugs[n].duration) + d + "</div>";
                if (vet_data.drugs[n].money) {
                    z += "<div>" + formatPrice(vet_data.drugs[n].money) + "</div>";
                }
                if (vet_data.drugs[n].coins) {
                    z += "<div>" + vet_data.drugs[n].coins + "&nbsp;" + t_coins + "</div>";
                }
                z += '<div style="margin-top:2px;">';
                for (var V in vet_data.drugs[n].needs) {
                    var M = "";
                    if (checkRackItem(V) < vet_data.drugs[n].needs[V]) {
                        M = "important";
                    }
                    z += '<div style="margin-bottom:2px; width:140px;">';
                    z += '  <div style="float:left; margin-right:5px;" class="kp' + V + '"></div>';
                    z += '  <div style="float:left; width:120px;" class="' + M + '">' + vet_data.drugs[n].needs[V] + "x&nbsp;" + produkt_name[V] + "</div>";
                    z += '  <div class="clear"></div>';
                    z += "</div>";
                }
                z += "</div>";
            }
            z += "  </div>";
            z += '  <div class="clear"></div>';
            z += '  <div class="vet_production_select_item_diseases">';
            z += '    <div style="margin:0px 5px 2px 0px; text-align:left; width:55px; font-size:10px; font-style:italic; float:left;">' + t_vet_diseases_list + "</div>";
            for (var V = 0; V < vet_data.drugs[n].diseases.length; V++) {
                var U = vet_data.drugs[n].diseases[V];
                z += showDiseaseIcon(U, "selection", n);
            }
            z += '    <div class="clear"></div>';
            z += "  </div>";
            z += "</div>";
        }
        R++;
    }
    var y = Math.ceil(R / 4);
    if (vet_production_select_page > 1) {
        z += "<div onclick=\"vet_production_select_page--; vetDialog('production_select', " + r + ');" class="link vet_production_select_navi_up"></div>';
    }
    if (!vet_production_select_filter_id && vet_production_select_page < y) {
        z += "<div onclick=\"vet_production_select_page++; vetDialog('production_select', " + r + "," + O + ');" class="link vet_production_select_navi_down"></div>';
    }
    z += '  <div class="clear"></div>';
    z += "</div>";
} if (c == "production_select_confirm") {
    var s = t_start_production;
    var z = "";
    z += '<div class="tt' + O + '" style="margin:0 auto; border-radius:5px;"></div>';
    z += '<div style="margin-top:5px;">' + produkt_name[O] + "</div>";
    if (vet_data.drugs[O].money) {
        z += '<div style="margin-top:5px;">' + cityadcost + formatPrice(vet_data.drugs[O].money) + "</div>";
    }
    if (vet_data.drugs[O].coins) {
        z += '<div style="margin-top:5px;">' + cityadcost + vet_data.drugs[O].coins + "&nbsp;" + t_coins + "</div>";
    }
    var H = "vetStartProduction(" + r + "," + O + "," + L + ")";
    var N = "vetDialog('production_select'," + r + "," + L + ")";
    globalcommitbox(s, z, H, N);
} if (c == "quests") {
    var W = t_vet_quest_head;
    if (vet_data.quest.campaign == 2) {
        W = t_vet_quest_head2;
    }
    var s = str_replace("%QUEST%", vet_data.quest.quest_id, W);
    if (vet_data.quest.need_bandage) {
        var z = "";
    }
    else {
        var z = '<div style="margin-top:-10px; margin-bottom:10px;">' + t_vet_quest_body + "</div>";
    }
    z += '<div id="vet_questentry_info">';
    if (vet_data.quest.need_bandage) {
        var w = 0;
        if (vet_data.quest.data && vet_data.quest.data.amount) {
            w = vet_data.quest.data.amount;
        }
        var M = "";
        var e = "";
        if (w < vet_data.quest.need_bandage) {
            e = "vetDialog('quest_entry', 0)";
        }
        if (vet_data.info.count <= 0) {
            M = "important";
            e = "";
        }
        var a = parseInt((w * 100) / vet_data.quest.need_bandage) * 2;
        z += '<div style="position:relative; margin-bottom:4px;" onmouseover="showDiv(\'vet_quest_bar_tt_bandage\')" onmouseout="hideDiv(\'vet_quest_bar_tt_bandage\')">';
        z += '  <div id="vet_quest_bar_tt_bandage" class="ttbox" style="top:17px; left:20px;">' + t_vet_points + "</div>";
        z += '  <div style="float:left; margin-right:4px;" class="vet_leveladd_item"></div>';
        z += '  <div style="float:left; margin-right:4px;" class="questboxbarout link" onclick="' + e + '">';
        z += '    <div class="questboxbarin" style="left:-' + (200 - a) + 'px"></div>';
        z += "  </div>";
        z += '  <div style="float:left;" class="' + M + '">' + w + "/" + vet_data.quest.need_bandage + "</div>";
        z += '  <div class="clear"></div>';
        z += "</div>";
    }
    if (vet_data.quest.need) {
        for (var J in vet_data.quest.need) {
            w = 0;
            if (vet_data.quest.data && vet_data.quest.data[J]) {
                w = vet_data.quest.data[J];
            }
            var M = "important";
            var e = "";
            if (checkRackItem(J) > 0) {
                M = "";
                if (w < vet_data.quest.need[J]) {
                    e = "vetDialog('quest_entry', " + J + ")";
                }
            }
            var a = parseInt((w * 100) / vet_data.quest.need[J]) * 2;
            z += '<div style="position:relative; margin-bottom:4px;" onmouseover="showDiv(\'vet_quest_bar_tt' + J + "')\" onmouseout=\"hideDiv('vet_quest_bar_tt" + J + "')\">";
            z += '  <div id="vet_quest_bar_tt' + J + '" class="ttbox" style="top:17px; left:20px;">' + produkt_name[J] + "</div>";
            z += '  <div style="float:left; margin-right:4px;" class="kp' + J + '"></div>';
            z += '  <div style="float:left; margin-right:4px;" class="questboxbarout link" onclick="' + e + '">';
            z += '    <div class="questboxbarin" style="left:-' + (200 - a) + 'px"></div>';
            z += "  </div>";
            z += '  <div style="float:left;" class="' + M + '">' + w + "/" + vet_data.quest.need[J] + "</div>";
            z += '  <div class="clear"></div>';
            z += "</div>";
        }
    }
    z += '  <div style="margin-top:10px;">' + t_megafield_reward_basic + "</div>";
    z += '  <div style="position:relative; margin-top:5px; width:97%; background:#C3A75E; border-radius:5px; padding:4px;">';
    for (var ab in vet_data.quest.reward) {
        if (vet_data.quest.reward[ab] > 0) {
            if (ab == "vet_points") {
                z += '<img src="' + imgpath + 'vet_patch50x50.png" style="width:40px; float:left;"><div style="float:left; margin:13px 0 4px 4px;">' + vet_data.quest.reward[ab] + "&nbsp;" + t_vet_points + '</div><div class="clear"></div>';
            }
            if (ab == "player_points") {
                z += '<div class="megafield_points_icon" style="float:left;"></div><div style="float:left; margin:13px 0 4px 4px;">' + formatNumber(vet_data.quest.reward[ab]) + "&nbsp;" + t_points + '</div><div class="clear"></div>';
            }
            if (ab == "money") {
                z += '<div class="megafield_money_icon" style="float:left;"></div><div style="float:left; margin:13px 0 4px 4px;">' + formatPrice(vet_data.quest.reward[ab]) + '</div><div class="clear"></div>';
            }
        }
    }
    for (var G in vet_data.quest.bonus) {
        z += "<div>" + str_replace("%PERCENT%", vet_data.quest.bonus[G], t_vet_quest_bonus[G]) + "</div>";
    }
    z += "  </div>";
    z += "</div>";
    z += '<div id="vet_questentry_warning"></div>';
} if (c == "quest_entry") {
    var J = r;
    if (vet_data.quest.need_bandage) {
        var v = vet_data.quest.need_bandage;
        if (vet_data.quest.data && vet_data.quest.data.amount) {
            v = (v - vet_data.quest.data.amount);
        }
        var l = "vet_leveladd_item";
        var y = vet_data.info.count;
        var J = 0;
    }
    if (vet_data.quest.need) {
        for (var I in vet_data.quest.need) {
            if (I == J) {
                var v = vet_data.quest.need[J];
                if (vet_data.quest.data && vet_data.quest.data[J]) {
                    var v = (v - vet_data.quest.data[J]);
                }
                break;
            }
        }
        var y = checkRackItem(J);
        var l = "kp" + J;
    }
    if (y > v) {
        y = v;
    }
    var b = { pid: J };
    globalcommitbox(forestry_questentry_dialog_head, htmlEntryLine(b), 0, 0, 1);
    $("dialog_entryline_number").focus();
    $("dialog_entryline_number").onchange = new Function("checkQuestEntry(" + J + ", " + v + ")");
    $("dialog_entryline_number").onkeyup = new Function("checkQuestEntry(" + J + ", " + v + ")");
    checkQuestEntry(J, v);
} if (c == "add_level") {
    var s = t_vet_dialog_leveladd_head;
    var z = htmlLevelAddDialog("vet");
    globalcommitbox(s, z, 0, 0, 1);
} if (c == "buy_addlevel" || c == "buy_addlevel_confirm") {
    var s = t_vet_levelitem_buy;
    var m = str_replace("%COINS%", vet_data.info.exchangecoins, t_vet_levelitem_buy_dialog);
    m = str_replace("%AMOUNT%", (vet_data.info.exchangeamount), m);
    if (c == "buy_addlevel") {
        var z = '<div id="megafruit_buy_button" style="font-weight:bold; padding-top:16px; height:33px;" class="link" onclick="vetDialog(\'buy_addlevel_confirm\')">' + m + "</div>";
        globalcommitbox(s, z, 0, 0, 1);
    }
    else {
        var z = m;
        var H = "farmAction('vet_buyleveladd', 1, 1);";
        globalcommitbox(s, z, H);
    }
} if (c == "production_select" || c == "quests") {
    globalBoxFlex(s, z, 0, 0, 1);
    $("globalbox").style.top = "50px";
    if (c == "quests") {
        checkVetQuestTimer();
    }
} if (c == "selectrole") {
    var s = t_vet_role_select_head;
    var z = '<div style="width:360px;">';
    z += '<div style="position:relative; margin-bottom:10px;">' + str_replace("%TIME%", formatTime(vet_data.constants.role_duration), t_vet_role_select_body) + "</div>";
    z += '<div style="position:relative; margin-bottom:10px;">';
    for (var V in vet_data.role) {
        var d = "";
        var H = "vetSetRole(" + V + ")";
        if (vet_data.role[V].level > vet_data.info.level) {
            H = "";
            d = '<div class="important" style="margin-top:10px;">' + str_replace("%LEVEL%", vet_data.role[V].level, t_vet_level_required) + "</div>";
        }
        z += '<div class="vet_role_select_item link" onclick="' + H + '">';
        z += '  <div class="vet_role_icon' + V + '"></div>';
        z += "  <div>" + t_vet_role_name[V] + d + "</div>";
        if (d == "") {
            z += '  <div style="margin:10px 0px 5px 0px;">' + t_vet_role_count + "</div>";
            z += '  <div style="font-size:24px; font-weight:bold; color:#6C441D;">' + vet_data.info.role_counts[V] + "</div>";
        }
        z += "</div>";
    }
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += '<div style="position:relative;">' + str_replace("%TIME%", formatTime(vet_data.constants.role_duration), t_vet_role_info) + "</div>";
    z += "</div>";
    var N = "goVetDrugScreen(); hideDiv('globalbox'); hideDiv('globaltransp')";
    globalBoxFlex(s, z, 0, N, 1);
} if (c == "role_reward" || c == "show_reward") {
    if (c == "role_reward") {
        var Y = O;
        var S = L;
        var s = t_vet_reward_head2;
    }
    if (c == "show_reward") {
        var Y = vet_data.info.reward_pool;
        var S = 0;
        var s = t_vet_reward_head;
    }
    var z = '<div style="margin-bottom:10px; width:350px;">' + t_vet_reward_body + "</div>";
    z += '<div style="position:relative; margin-top:5px; width:97%; background:#C3A75E; border-radius:5px; padding:4px;">';
    var K = 0;
    var D = 0;
    var P = 0;
    var u = 0;
    for (var V in Y) {
        if (V == "player_points") {
            K += Y.player_points;
        }
        if (V == "vet_points") {
            D += Y.vet_points;
        }
        if (V == "money") {
            P += Y.money;
        }
        if (V == "package") {
            u = Y["package"];
        }
    }
    var X = 0;
    var E = 0;
    var Z = 0;
    if (!S) {
        if (vet_data.quest && vet_data.quest.bonus_all) {
            if (vet_data.quest.bonus_all.pat_bandage) {
                D = Math.ceil(D * ((100 + vet_data.quest.bonus_all.pat_bandage) / 100));
            }
            if (vet_data.quest.bonus_all.pat_money) {
                P = Math.ceil(P * ((100 + vet_data.quest.bonus_all.pat_money) / 100));
            }
            if (vet_data.quest.bonus_all.pat_points) {
                K = Math.ceil(K * ((100 + vet_data.quest.bonus_all.pat_points) / 100));
            }
        }
    }
    if (c == "role_reward") {
        z += "<div>";
        z += '  <div style="float:left; width:155px; font-weight:bold; padding-left:45px; text-align:left;">' + t_megafield_reward_sum + "</div>";
        z += '  <div style="float:left; width:135px; font-weight:bold;">' + t_megafield_reward_bonus + "</div>";
        z += '  <div class="clear"></div>';
        z += "</div>";
    }
    z += '<div style="float:left; width:200px;">';
    z += '  <div class="megafield_points_icon" style="float:left;"></div>';
    z += '  <div style="float:left; margin:12px 25px 0 5px;">' + formatNumber(K) + "&nbsp;" + t_points + "</div>";
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += '<div style="float:left; width:135px; margin:12px 0px;">';
    if (S.time_points) {
        z += "+" + S.time_points;
    }
    if (S.difficulty_points) {
        z += "&nbsp;&nbsp;&nbsp;+" + S.difficulty_points;
    }
    z += "</div>";
    z += '<div class="clear"></div>';
    z += '<div style="float:left; width:200px;">';
    z += '  <img src="' + imgpath + 'vet_patch50x50.png" style="width:40px; float:left;">';
    z += '  <div style="float:left; margin:12px 25px 0 5px;">' + formatNumber(D) + "&nbsp;" + t_vet_points + "</div>";
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += '<div style="float:left; width:135px; margin:12px 0px;">';
    if (S.time_bandage) {
        z += "+" + S.time_bandage;
    }
    if (S.difficulty_bandage) {
        z += "&nbsp;&nbsp;&nbsp;+" + S.difficulty_bandage;
    }
    z += "</div>";
    z += '<div class="clear"></div>';
    z += '<div style="float:left; width:200px;">';
    z += '  <div class="megafield_money_icon" style="float:left;"></div>';
    z += '  <div style="float:left; margin:12px 25px 0 5px;">' + formatPrice(P) + "</div>";
    z += '  <div class="clear"></div>';
    z += "</div>";
    z += '<div style="float:left; width:135px; margin:12px 0px;">';
    if (S.time_money) {
        z += "+" + S.time_money;
    }
    if (S.difficulty_money) {
        z += "&nbsp;&nbsp;&nbsp;+" + S.difficulty_money;
    }
    z += "</div>";
    z += '<div class="clear"></div>';
    z += "</div>";
    if (c == "show_reward") {
        z += '<div style="margin-top:10px; width:350px;">' + t_vet_medicalrecord_reward_info + "</div>";
    }
    var q = 1;
    if (c == "role_reward" && !u) {
        q = 0;
    }
    if (q == 1) {
        pack_id = 0;
        if (u > 0) {
            pack_id = u;
        }
        else {
            for (var T in pets.data.config.reward_packs.vet) {
                if (pets.data.config.reward_packs.vet[T].amount == vet_data.info.role) {
                    pack_id = pets.data.config.reward_packs.vet[T]["package"];
                }
            }
        }
        if (pack_id > 0) {
            z += '<div style="position:relative; margin-top:10px; width:97%; background:#C3A75E; border-radius:5px; padding:4px;">';
            z += '  <div class="pets_package' + pack_id + '" style="width:50px; height:50px; background-size:100%; float:left;"></div>';
            var d = "";
            if (c == "show_reward") {
                d = "&nbsp;" + str_replace("%TYPE%", t_vet_role_name[vet_data.info.role], t_pets_reward_vet);
            }
            z += '  <div style="float:left; width:270px; margin-top:10px; text-align:left; margin-left:5px;">1x' + d + "</div>";
            z += '  <div class="clear"></div>';
            z += "</div>";
        }
    }
    if (c == "role_reward") {
        vet_data.info.role = 1;
        vet_role_reward_block = 1;
        if (vet_position == "right") {
            var H = "vet_data.info.role=0; vet_role_reward_block=0; hideDiv('globaltransp'); hideDiv('globalbox');";
            var N = H;
        }
        else {
            var H = "vet_data.info.role=0; vet_role_reward_block=0;";
            var N = H;
        }
        globalcommitbox(s, z, H, N);
    }
    else {
        globalcommitbox(s, z, 0, 0, 1);
    }
} }
function goVetDrugScreen() { if (vet_position == "left") {
    moveVet();
} }
function vetCheckLevelAdd() { var a = $("vet_dialog_leveladd_insert").value; a = parseInt(a); if (isNaN(a)) {
    a = 0;
} if (a > vet_data.info.count) {
    a = vet_data.info.count;
} $("vet_dialog_leveladd_insert").value = a; }
function checkQuestEntry(a, c) { if (vet_data.quest.need_bandage) {
    var e = vet_data.info.count;
    var b = "bandage";
} if (vet_data.quest.need) {
    var e = checkRackItem(a);
    var b = "product";
} var d = { type: b, stockamount: e, rest: c, click: "vetQuestEntry(" + a + ")" }; checkEntryLine(d); }
function showDiseaseIcon(c, l, m, q) { if (!q) {
    var n = "";
}
else {
    var n = "_" + q;
} if (!m) {
    m = 0;
} var h = "vet_animal_disease_tt"; var b = "left"; var e = ""; if (l == "filter") {
    b = "right";
} if (l == "selection") {
    e = "font-weight:bold;";
    h = "vet_animal_disease_tt_bottom";
} var a = ""; if (vet_data.diseases[c].level > vet_data.info.level) {
    a = "opacity:0.5;";
} var d = ""; d += '<div style="margin-right:5px;" class="vet_animal_disease' + n + '" onmouseover="showDiv(\'vet_animal_disease_icon_' + l + "_tt" + m + "_" + c + "')\" onmouseout=\"hideDiv('vet_animal_disease_icon_" + l + "_tt" + m + "_" + c + "')\">"; d += '  <div class="vet_animal_disease' + c + n + '" style="width:100%; height:100%; ' + a + '"></div>'; d += '  <div id="vet_animal_disease_icon_' + l + "_tt" + m + "_" + c + '" class="ttbox ' + h + "_" + b + '">'; d += '    <div style="' + e + ' margin-bottom:2px;">' + vet_data.diseases[c].name + "</div>"; if (l == "filter" && vet_data.diseases_log[c]) {
    d += '<div class="bonusinfo" style="min-width:100px;">' + str_replace("%AMOUNT%", vet_data.diseases_log[c], t_vet_disease_healed_sum) + "</div>";
} if (l == "selection") {
    d += "<div>" + t_heal_time + "&nbsp;" + formatTime(vet_data.drugs[m].times[c]) + "</div>";
} d += "  </div>"; d += "</div>"; return d; }
function vetCheckRole() { vet_wait_checkrole = 1; farmAction("vet_checkrole", 1, 1); }
function vetSetRole(a) { farmAction("vet_setrole", 1, 1, a); }
function vetStartTreatment(a) { farmAction("vet_starttreatment", 1, 1, a); }
function vetEndTreatment(a) { farmAction("vet_endtreatment", 1, 1, a); }
function vetSpeedupTreatment(a) { farmAction("vet_speeduptreatment", 1, 1, a); }
function vetStartProduction(c, a, b) { farmAction("vet_startproduction", 1, 1, c, a, b); }
function vetHarvestProduction(b, a) { farmAction("vet_harvestproduction", 1, 1, b, a); }
function vetQuestEntry(a) { var b = parseInt($("dialog_entryline_number").value); if (b > 0) {
    farmAction("vet_questentry", 1, 1, a, b);
} }
function vetStats() { if ($("vet_stats_select")) {
    vet_stats_select = $("vet_stats_select").value;
} if (vet_stats_cache_delay[vet_stats_select] <= 0 || !vet_stats_cache[vet_stats_select]) {
    farmAction("vet_stats", 1, 1, vet_stats_select);
}
else {
    vetDialog("stats", vet_stats_select);
} }
function vetQuests() { vetDialog("quests"); }
function vetReward() { vetDialog("show_reward"); }
function moveVet() { if (vet_position == "left") {
    if (vet_data.info.queue_remain < 0 && !vet_data.info.vet_pharmacist_remember_box) {
        vetDialog("buy_pharmacist", 1);
        vet_data.info.vet_pharmacist_remember_box = 1;
    }
    vet_position = "right";
    $("vet_back").removeClassName("vet_back_left").addClassName("vet_back_right");
    $("vet_sroller").removeClassName("megafield_carpool_right").addClassName("megafield_carpool_left");
}
else {
    vet_position = "left";
    $("vet_back").removeClassName("vet_back_right").addClassName("vet_back_left");
    $("vet_sroller").removeClassName("megafield_carpool_left").addClassName("megafield_carpool_right");
} }
function closeVet() { hideDiv("transp"); hideDiv("farmersmarket_pos5_inner"); }
function handleVetHelp(b) { for (var a = 1; a <= 4; a++) {
    hideDiv("vet_help_page" + a);
    $("vet_help_category" + a).removeClassName("vet_help_categories_item_active");
    $("vet_help_category" + a).addClassName("vet_help_categories_item");
} showDiv("vet_help_page" + b); $("vet_help_category" + b).removeClassName("vet_help_categories_item"); $("vet_help_category" + b).addClassName("vet_help_categories_item_active"); }
function vetSetAnimalFlyer(h, e) { var a = ""; var d = 0; var c = 0; var b = 0; if (vet_data.quest && vet_data.quest.bonus_all) {
    if (e.vet_points && vet_data.quest.bonus_all.pat_bandage) {
        d = Math.ceil(e.vet_points * ((100 + vet_data.quest.bonus_all.pat_bandage) / 100));
    }
    if (e.money && vet_data.quest.bonus_all.pat_money) {
        c = Math.ceil(e.money * ((100 + vet_data.quest.bonus_all.pat_money) / 100));
    }
    if (e.player_points && vet_data.quest.bonus_all.pat_points) {
        b = Math.ceil(e.player_points * ((100 + vet_data.quest.bonus_all.pat_points) / 100));
    }
} if (b) {
    a += '<div style="margin-bottom:2px;">' + formatNumber(b) + "&nbsp;" + t_points + "</div>";
} if (d) {
    a += '<div style="margin-bottom:2px;">' + formatNumber(d) + "&nbsp;" + t_vet_points + "</div>";
} if (c) {
    a += "<div>" + formatPrice(c) + "</div>";
} $("vet_animal_flyer" + h).innerHTML = a; $("vet_animal_flyer" + h).addClassName("up"); setTimeout(closeSetAnimalFlyer, 3000); }
function closeSetAnimalFlyer() { for (var a = 1; a <= 3; a++) {
    $("vet_animal_flyer" + a).innerHTML = "";
    $("vet_animal_flyer" + a).removeClassName("up");
} }
function openCityXmasEventHelp(a) { $("xmasgame_help_navi1").removeClassName("xmasgame_help_navi_active"); $("xmasgame_help_navi2").removeClassName("xmasgame_help_navi_active"); hideDiv("xmasgame_helpbox_side1"); hideDiv("xmasgame_helpbox_side2"); if (!a) {
    a = 1;
} $("xmasgame_help_navi" + a).addClassName("xmasgame_help_navi_active"); showDiv("xmasgame_box_transp"); showDiv("xmasgame_helpbox"); showDiv("xmasgame_helpbox_side" + a); }
function closeCityXmasEventHelp() { hideDiv("xmasgame_box_transp"); hideDiv("xmasgame_helpbox"); }
function naviCityXmasEvent(a) { if (!a) {
    a = 0;
} var b = ["xmasevent_game", "xmasevent_prizes"]; for (var c = 0; c < b.length; c++) {
    $("xmasevent_navi_item" + c).removeClassName("xmasevent_navi_item" + c);
    $("xmasevent_navi_item" + c).removeClassName("xmasevent_navi_item" + c + "_active");
    if (c == a) {
        showDiv(b[c]);
        $("xmasevent_navi_item" + c).addClassName("xmasevent_navi_item" + c + "_active");
    }
    else {
        hideDiv(b[c]);
        $("xmasevent_navi_item" + c).addClassName("xmasevent_navi_item" + c);
    }
} $("xmasevent_city_main").className = "xmasevent_city_main_back" + a; }
function doCityXmasEvent(d, a, b, c, h) { if (!d) {
    d = "init";
} var e = ""; if (a) {
    e += "&pid=" + a;
} if (b) {
    e += "&amount=" + b;
} if (h) {
    e += "&prize=" + h;
} if (c) {
    e += "&type=" + c;
}
else {
    e += "&type=0";
} var l = createAjaxRequestObj(); l.open("GET", "ajax/xmas.php?rid=" + rid + "&action=" + d + e, true); l.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"); l.onreadystatechange = function () { doCityXmasEventResponse(l, d); }; l.send(null); }
function doCityXmasEventResponse(e, c) { var r = _chkRequest(e); if (r != 0) {
    if (r[0] == 0) {
        globalerrorbox(r[1]);
    }
    else {
        showDiv("xmasevent_city_main_transp");
        showDiv("xmasevent_city_main");
        if (r[1].game) {
            xmasgame_data = r[1].game;
        }
        if (r[1].products) {
            xmasgame_products = r[1].products;
        }
        if (r[1].prizes) {
            xmasgame_prizes = r[1].prizes;
        }
        if (r[1].stock) {
            xmasgame_stock = r[1].stock;
        }
        if (r[1].items) {
            xmasgame_items = r[1].items;
        }
        if (r[1].help) {
            openCityXmasEventHelp();
        }
        if (r[1].transfer) {
            if (r[1].transfer.powerup) {
                var m = '<div style="position:absolute; top:30px; left:25px; width:375px;">' + t_payment_pointsboost_info.replace("%AMOUNT%", 1) + "</div>";
                openXmasGameBox("", m, "", "", 1);
            }
            if (r[1].transfer.points) {
                var m = '<div style="position:absolute; top:30px; left:25px;">' + str_replace("%POINTS%", "<b>" + formatNumber(r[1].transfer.points) + "</b>", xmasgame_t_presentpoints) + "</div>";
                openXmasGameBox("", m, "", "", 1);
            }
        }
        if ($("xmasgame_bar")) {
            for (var h = 1; h <= 6; h++) {
                if (h <= xmasgame_data.phase.phase) {
                    if (h > 1 && $("xmasgame_plus" + (h - 1))) {
                        showDiv("xmasgame_plus" + (h - 1));
                    }
                    if ($("xmasgame_candle" + h)) {
                        showDiv("xmasgame_candle" + h);
                    }
                    if ($("xmasgame_product" + h)) {
                        $("xmasgame_product" + h).removeClassName("xmasgame_transp");
                    }
                }
                else {
                    if ($("xmasgame_plus" + (h - 1))) {
                        hideDiv("xmasgame_plus" + (h - 1));
                    }
                    if ($("xmasgame_candle" + h)) {
                        hideDiv("xmasgame_candle" + h);
                    }
                    if ($("xmasgame_product" + h)) {
                        $("xmasgame_product" + h).addClassName("xmasgame_transp");
                    }
                }
            }
            var q = (xmasgame_phasestart[(xmasgame_data.phase.phase + 1)] - xmasgame_phasestart[xmasgame_data.phase.phase]);
            var a = xmasgame_phasestart[xmasgame_data.phase.phase];
            a += ((q / 100) * xmasgame_data.phase.percent);
            $("xmasgame_bar").style.width = a + "px";
            if (xmasgame_data.phase.phase == 6) {
                $("xmasgame_bar").style.width = "537px";
            }
            var m = '<div class="xmasbox_add"></div>';
            m += '<div style="margin-bottom:5px;">' + xmasgame_t_current + "<br><b>" + formatNumber(xmasgame_data.sum) + "</b></div>";
            if (xmasgame_data.phase.phase < 6) {
                m += '<div style="padding-top:5px; border-top:1px solid #000; margin-top:5px;">' + xmasgame_t_nextphase + "</div>";
                m += "<div>";
                m += '  <div style="float:left; margin-right:5px;" class="xmasgame_product' + (xmasgame_data.phase.phase + 1) + '"></div>';
                m += '  <div style="float:left; margin-top:5px;"><b>' + formatNumber(xmasgame_data.phase.remain) + "</b>&nbsp;(" + formatNumber(xmasgame_data.sum) + "/" + formatNumber(xmasgame_data.phase.next) + ")</div>";
                m += '  <div style="clear:both;"></div>';
                m += "</div>";
            }
            $("xmasgame_front_tt").innerHTML = m;
            if (xmasgame_data.phase.phase) {
                m = '<div style="margin-bottom:5px; padding-bottom:5px; border-bottom:1px solid #000;">' + xmasgame_t_button_finish + "</div>";
                m += '<div style="margin-bottom:5px;">' + xmasgame_t_button_finish2 + "</div>";
                for (var h = 1; h <= xmasgame_data.phase.phase; h++) {
                    m += '<div style="float:left; margin-right:5px;" class="xmasgame_product' + h + '"></div>';
                }
                m += '<div style="clear:both;"></div>';
                $("xmasgame_button_finish_tt").innerHTML = m;
                showDiv("xmasgame_button_finish");
                $("xmasgame_button_finish").onclick = new Function("finishCityXmasEvent()");
            }
            else {
                hideDiv("xmasgame_button_finish");
            }
            if (xmasgame_data.phase.phase >= 6) {
                hideDiv("xmasgame_button_entry");
            }
            else {
                showDiv("xmasgame_button_entry");
            }
        }
        if (c == "init") {
            naviCityXmasEvent();
        }
        if (c == "entry" || c == "getprize" || c == "exchange" || c == "missing") {
            updateMenu();
            updateRack();
        }
        for (var h = 1; h <= 6; h++) {
            var n = 0;
            if (xmasgame_stock[h]) {
                n = xmasgame_stock[h];
            }
            $("xmasevent_stockitem" + h).innerHTML = n;
        }
        for (var h in xmasgame_prizes) {
            if (xmasgame_prizes[h]) {
                if (xmasgame_prizes[h].closed == 1 && xmasgame_prizes[h].type != "points") {
                    hideDiv("xmasevent_prize_item" + h);
                }
                else {
                    showDiv("xmasevent_prize_item" + h);
                    var b = 0;
                    for (var d = 0; d < xmasgame_prizes[h].req.length; d++) {
                        if (xmasgame_prizes[h].req[d]) {
                            var l = xmasgame_prizes[h].req[d][0];
                            var n = xmasgame_prizes[h].req[d][1];
                            if (!xmasgame_stock[l] || xmasgame_stock[l] < n) {
                                $("xmasevent_prize" + h + "_req" + d).addClassName("important");
                                b++;
                            }
                            else {
                                $("xmasevent_prize" + h + "_req" + d).removeClassName("important");
                            }
                        }
                    }
                    if (b) {
                        hideDiv("xmasevent_prize_buybutton" + h);
                        showDiv("xmasevent_prize_addbutton" + h);
                    }
                    else {
                        showDiv("xmasevent_prize_buybutton" + h);
                        hideDiv("xmasevent_prize_addbutton" + h);
                    }
                    if (xmasgame_prizes[h].closed == 1 && xmasgame_prizes[h].type == "points") {
                        hideDiv("xmasevent_prize_buybutton" + h);
                        hideDiv("xmasevent_prize_addbutton" + h);
                        showDiv("xmasevent_prize_24hinfo");
                    }
                }
            }
        }
    }
} }
function entryCityXmasEvent(a) { if (!a) {
    a = "v";
} var m = ""; var h = ""; h += '<div id="xmasbox_entry_intro">' + xmasgame_t_entry_intro + "</div>"; h += '<div id="xmasbox_entry_navi">'; var s = ["v", "ex", "alpin", "e", "o", "fw", "f", "fl"]; for (var d = 0; d < s.length; d++) {
    var r = "xmasgamebox_navi";
    if (a == s[d]) {
        r = "xmasgamebox_navi_active";
    }
    h += '<div class="link ' + r + '" onclick="entryCityXmasEvent(\'' + s[d] + "')\">";
    h += '  <div id="cmenue_' + s[d] + '" class="xmasgame_categoryselect"></div>';
    h += "</div>";
} h += '  <div style="clear:both;"></div>'; h += "</div>"; h += '<div id="xmasgame_setamount_box" class="xmasbox">'; h += '  <div class="xmasbox_add"></div>'; h += '  <div style="margin-bottom:4px;">'; h += '    <div style="float:left;" id="xmasgame_setamount_img"></div>'; h += '    <div style="float:left;" id="xmasgame_setamount_name"></div>'; h += '    <div style="clear:both;"></div>'; h += "  </div>"; h += '  <div style="margin-bottom:4px; z-index:11; position: relative;">'; h += "    " + xmasgame_t_setamount_amount + '&nbsp;<input type="number" size="10" maxlength="7" id="xmasgame_setamount_amount" onchange="chkAmountCityXmasEvent()" onkeyup="chkAmountCityXmasEvent()">'; h += '    <button type="button" class="link" id="xmasgame_setamount_button">' + xmasgame_t_setamount_button + "</button>"; h += "  </div>"; h += "  <div>" + xmasgame_t_setamount_sum + '<span id="xmasgame_setamount_sum"></span></div>'; h += '  <div id="xmasgame_setamount_box_close" class="close link" onclick="hideDiv(\'xmasgame_setamount_box\');"></div>'; h += "</div>"; h += '<div id="xmasbox_entry_products">'; for (var n in xmasgame_products) {
    if (xmasgame_products[n]) {
        var l = 0;
        for (var e in xmasgame_products[n]) {
            if (((a == "fl" && (xmasgame_products[n][e].category == "fl" || xmasgame_products[n][e].category == "fla")) || (a == "alpin" && (xmasgame_products[n][e].category == "alpin" || xmasgame_products[n][e].category == "tea")) || xmasgame_products[n][e].category == a) && xmasgame_products[n][e].name) {
                l++;
                var r = "xmasbox_entry_item_img tt" + e;
                if (n == 1) {
                    r = "xmasbox_entry_item_img2 f_symbol" + e;
                }
                h += '<div class="xmasbox_entry_item link" onclick="$(\'xmasgame_setamount_amount\').value=1; setAmountCityXmasEvent(' + n + "," + e + ')" onmouseover="showDiv(\'xmasbox_entry_item_tt' + e + "')\" onmouseout=\"hideDiv('xmasbox_entry_item_tt" + e + "')\">";
                h += '  <div class="xmasbox_entry_item_points">' + xmasgame_products[n][e].points + "</div>";
                h += '  <div class="' + r + '"></div>';
                h += '  <div class="xmasbox_entry_item_stock">' + xmasgame_products[n][e].stock + "</div>";
                var q = "xmasbox_entry_item_tt";
                if (l % 4 == 0 || l % 5 == 0) {
                    q = "xmasbox_entry_item_tt2";
                }
                h += '  <div id="xmasbox_entry_item_tt' + e + '" class="xmasbox ' + q + '">' + xmasgame_products[n][e].name + "</div>";
                h += "</div>";
            }
        }
    }
} h += "  </div>"; showDiv("xmasgame_box_top"); var c = ""; var b = ""; openXmasGameBox(m, h, c, b); }
function chkAmountCityXmasEvent() { if (xmasgame_products[xmasevent_entrybox_stock][xmasevent_entrybox_pid]) {
    var b = parseInt($("xmasgame_setamount_amount").value);
    if ($("xmasgame_setamount_amount").value != "" && !Number(b)) {
        $("xmasgame_setamount_amount").value = 1;
        b = 1;
    }
    var a = parseInt(xmasgame_products[xmasevent_entrybox_stock][xmasevent_entrybox_pid].stock);
    if (b > a) {
        $("xmasgame_setamount_amount").value = a;
        b = a;
    }
    var c = Math.floor(b * xmasgame_products[xmasevent_entrybox_stock][xmasevent_entrybox_pid].points);
    if (!Number(c)) {
        c = 0;
    }
    $("xmasgame_setamount_sum").innerHTML = c;
} }
var xmasevent_entrybox_stock = 0;
var xmasevent_entrybox_pid = 0;
function setAmountCityXmasEvent(b, a) { if (xmasgame_products[b][a]) {
    xmasevent_entrybox_stock = b;
    xmasevent_entrybox_pid = a;
    chkAmountCityXmasEvent();
    showDiv("xmasgame_setamount_box");
    $("xmasgame_setamount_box").value = 1;
    $("xmasgame_setamount_name").innerHTML = xmasgame_products[b][a].name;
    if (b == 1) {
        $("xmasgame_setamount_img").addClassName("f_m_symbol" + a);
    }
    else {
        $("xmasgame_setamount_img").addClassName("kp" + a);
    }
    $("xmasgame_setamount_button").onclick = new Function("fireEntryCityXmasEvent(" + b + "," + a + ")");
} }
function fireEntryCityXmasEvent(c, a) { if (xmasgame_products[c][a]) {
    var b = $("xmasgame_setamount_amount").value;
    if (b > 0 && b != "" && Number(b)) {
        hideDiv("xmasgame_setamount_box");
        closeXmasGameBox();
        doCityXmasEvent("entry", a, b, c);
    }
} }
function finishCityXmasEvent() { var c = ""; var b = ""; var e = "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');doCityXmasEvent('finish')"; var d = "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');"; b += '<div style="position:absolute; top:30px; left:25px;">'; b += '  <div style="margin-bottom:10px;">' + xmasgame_t_boxcontent_products + "</div>"; for (var a = 1; a <= xmasgame_data.phase.phase; a++) {
    b += '<div style="float:left; margin-right:5px;" class="xmasgame_product' + a + '"></div>';
} b += "</div>"; openXmasGameBox(c, b, e, d, 1); }
function getPrizeCityXmasEvent(m) { var d = ""; var e = ""; e += '<div style="position:absolute; top:30px; left:25px;">'; e += '  <div style="float:left; text-align:center; margin-top:5px; background-repeat:no-repeat; background-position:50% 50%; width:115px;" id="xmasevent_prize' + m + '"></div>'; e += '  <div style="float:left; margin-left:10px; margin-top:5px; width:250px;">'; e += '    <div style="margin-bottom:5px;">' + xmasgame_t_ask_getpresent + "<br><br>" + xmasgame_t_require + "</div>"; for (var c = 0; c < xmasgame_prizes[m].req.length; c++) {
    if (xmasgame_prizes[m].req[c]) {
        var a = xmasgame_prizes[m].req[c][0];
        var b = xmasgame_prizes[m].req[c][1];
        e += '<div style="float:left;" class="xmasgame_product' + a + '_mini"></div>';
        e += '<div style="float:left; margin-top:4px; margin-right:10px; font-weight:bold;">' + b + "x</div>";
    }
} e += '    <div style="clear:both;"></div>'; e += "  </div>"; e += '  <div style="clear:both;"></div>'; e += "</div>"; var l = "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');doCityXmasEvent('getprize',0,0,0," + m + ")"; var h = "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');"; openXmasGameBox(d, e, l, h, 1); }
function closeCityXmasEvent() { hideDiv("xmasevent_city_main_transp"); hideDiv("xmasevent_city_main"); }
function exchangeCityXmasEvent(a) { var n = 0; for (var b = 0; b < xmasgame_prizes[a].req.length; b++) {
    var d = xmasgame_prizes[a].req[b][0];
    var c = xmasgame_prizes[a].req[b][1];
    if (!xmasgame_stock[d]) {
        n += c * xmasgame_items[d].coins;
    }
    if (xmasgame_stock[d] && xmasgame_stock[d] < c) {
        n += (c - xmasgame_stock[d]) * xmasgame_items[d].coins;
    }
} var h = ""; var e = '<div style="position:absolute; top:35px; left:25px; width:380px;">'; e += '<div style="position:absolute; left:50%; margin-left:-50px; top:-115px;" id="xmasevent_prize' + a + '"></div>'; if (n > 0) {
    e += '<div class="link coinsbutton_flex" style="font-size:10px;" onclick="fireExchangeCityXmasEvent(0, ' + a + ", " + n + ')">' + t_xmasgame_buy_missing_items.replace("%COINS%", n) + "</div>";
} e += '<div style="width:100%; height:1px; margin:10px 0px; border-bottom:1px solid #A9A25B;"></div>'; for (var b in xmasgame_items) {
    var m = "fireExchangeCityXmasEvent(" + b + ", " + a + ");";
    var l = "";
    if (xmasgame_items[b].block) {
        m = "show_page('coins',0);";
        l = "important";
    }
    e += '<div style="position:relative; float:left; margin:0 15px 15px 15px; padding:4px;" class="link ' + l + '" onclick="' + m + '">';
    e += '  <div class="xmasevent_prize_item_back"></div>';
    e += '  <div style="position:relative; float:left; z-index:11;" class="xmasgame_product' + b + '_mini"></div>';
    e += '  <div style="position:relative; float:left; z-index:11; font-weight:14px; font-weight:bold; margin-top:4px;">&nbsp;=&nbsp;' + xmasgame_items[b].coins + "&nbsp;" + t_coins + "</div>";
    e += '  <div style="clear:both;"></div>';
    e += "</div>";
} e += '  <div style="clear:both;"></div>'; e += "</div>"; openXmasGameBox(h, e, "", "", 1); }
function fireExchangeCityXmasEvent(h, a, q) { if (h > 0) {
    var m = xmasgame_items[h].coins;
} if (q > 0) {
    var m = q;
} var l = '<div style="position:absolute; left:50%; margin-left:-51px; top:-80px;" id="xmasevent_prize' + a + '"></div>'; l += '<div style="position:absolute; top:30px; left:25px;">'; l += '  <div style="margin:10px 0px;">' + str_replace("%COINS%", m + "&nbsp;" + t_coins, xmasgame_t_ask_buysnacks) + "</div>"; var n = "doCityXmasEvent('exchange'," + h + ",0,0,0)"; if (q > 0) {
    for (var d = 0; d < xmasgame_prizes[a].req.length; d++) {
        var b = 0;
        var h = xmasgame_prizes[a].req[d][0];
        var e = xmasgame_prizes[a].req[d][1];
        if (!xmasgame_stock[h]) {
            b = e;
        }
        if (xmasgame_stock[h] && xmasgame_stock[h] < e) {
            b = (e - xmasgame_stock[h]);
        }
        if (!b) {
            continue;
        }
        l += '<div style="float:left;" class="xmasgame_product' + h + '"></div>';
        l += '<div style="float:left; margin-right:5px; margin-top:15px;">' + b + "x&nbsp;</div>";
    }
    l += '<div class="clear"></div>';
    n = "doCityXmasEvent('missing'," + a + ",0,0,0)";
}
else {
    l += '<div style="text-align:center; margin-top:10px; background-repeat:no-repeat; background-position:50% 50%; width:380px;" class="xmasgame_product' + h + '"></div>';
} l += "</div>"; openXmasGameBox("", l, "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');" + n, "hideDiv('xmasgame_box');hideDiv('xmasgame_box_transp');", 1); }
function openXmasGameBox(a, c, e, d, b) { showDiv("xmasgame_box_transp"); showDiv("xmasgame_box"); hideDiv("xmasgame_box_yes"); hideDiv("xmasgame_box_no"); $("xmasgame_box").className = ""; if (e) {
    showDiv("xmasgame_box_yes");
    $("xmasgame_box_yes").onclick = new Function(e);
} if (d) {
    showDiv("xmasgame_box_no");
    $("xmasgame_box_no").onclick = new Function(d);
} if (b == 1) {
    $("xmasgame_box").className = "xmasgame_box_mini";
    hideDiv("xmasgame_box_top");
}
else {
    $("xmasgame_box").className = "xmasgame_box";
    showDiv("xmasgame_box_top");
} $("xmasgame_box_headline").innerHTML = a; $("xmasgame_box_content").innerHTML = c; }
function closeXmasGameBox() { hideDiv("xmasgame_box_transp"); hideDiv("xmasgame_box"); }
;
